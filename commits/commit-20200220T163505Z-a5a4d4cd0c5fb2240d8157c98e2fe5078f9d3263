{
  "sha": "a5a4d4cd0c5fb2240d8157c98e2fe5078f9d3263",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YTVhNGQ0Y2QwYzVmYjIyNDBkODE1N2M5OGUyZmU1MDc4ZjlkMzI2Mw==",
  "commit": {
    "author": {
      "name": "Tankut Baris Aktemur",
      "email": "tankut.baris.aktemur@intel.com",
      "date": "2020-02-17T15:11:53Z"
    },
    "committer": {
      "name": "Tankut Baris Aktemur",
      "email": "tankut.baris.aktemur@intel.com",
      "date": "2020-02-20T16:35:05Z"
    },
    "message": "gdbserver: turn target ops 'fetch_registers' and 'store_registers' into methods\n\ngdbserver/ChangeLog:\n2020-02-20  Tankut Baris Aktemur  <tankut.baris.aktemur@intel.com>\n\n\tTurn process_stratum_target's fetch_registers and store_registers\n\tops into methods of process_target.\n\n\t* target.h (struct process_stratum_target): Remove the target ops.\n\t(class process_target): Add the target ops.\n\t(fetch_inferior_registers): Update the macro.\n\t(store_inferior_registers): Update the macro.\n\n\tUpdate the derived classes and callers below.\n\n\t* linux-low.cc (linux_target_ops): Update.\n\t(linux_fetch_registers): Turn into ...\n\t(linux_process_target::fetch_registers): ... this.\n\t(linux_store_registers): Turn into ...\n\t(linux_process_target::store_registers): ... this.\n\t* linux-low.h (class linux_process_target): Update.\n\t* lynx-low.cc (lynx_target_ops): Update.\n\t(lynx_fetch_registers): Turn into ...\n\t(lynx_process_target::fetch_registers): ... this.\n\t(lynx_store_registers): Turn into ...\n\t(lynx_process_target::store_registers): ... this.\n\t* lynx-low.h (class lynx_process_target): Update.\n\t* nto-low.cc (nto_target_ops): Update.\n\t(nto_fetch_registers): Turn into ...\n\t(nto_process_target::fetch_registers): ... this.\n\t(nto_store_registers): Turn into ...\n\t(nto_process_target::store_registers): ... this.\n\t* nto-low.h (class nto_process_target): Update.\n\t* win32-low.cc (win32_target_ops): Update.\n\t(win32_fetch_inferior_registers): Turn into ...\n\t(win32_process_target::fetch_registers): ... this.\n\t(win32_store_inferior_registers): Turn into ...\n\t(win32_process_target::store_registers): ... this.\n\t* win32-low.h (class win32_process_target): Update.",
    "tree": {
      "sha": "1e0cf29b5eb7beb9e8027df4b6c027bbbdefc82e",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/1e0cf29b5eb7beb9e8027df4b6c027bbbdefc82e"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/a5a4d4cd0c5fb2240d8157c98e2fe5078f9d3263",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a5a4d4cd0c5fb2240d8157c98e2fe5078f9d3263",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/a5a4d4cd0c5fb2240d8157c98e2fe5078f9d3263",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a5a4d4cd0c5fb2240d8157c98e2fe5078f9d3263/comments",
  "author": {
    "login": "barisaktemur",
    "id": 55686642,
    "node_id": "MDQ6VXNlcjU1Njg2NjQy",
    "avatar_url": "https://avatars.githubusercontent.com/u/55686642?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/barisaktemur",
    "html_url": "https://github.com/barisaktemur",
    "followers_url": "https://api.github.com/users/barisaktemur/followers",
    "following_url": "https://api.github.com/users/barisaktemur/following{/other_user}",
    "gists_url": "https://api.github.com/users/barisaktemur/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/barisaktemur/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/barisaktemur/subscriptions",
    "organizations_url": "https://api.github.com/users/barisaktemur/orgs",
    "repos_url": "https://api.github.com/users/barisaktemur/repos",
    "events_url": "https://api.github.com/users/barisaktemur/events{/privacy}",
    "received_events_url": "https://api.github.com/users/barisaktemur/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "barisaktemur",
    "id": 55686642,
    "node_id": "MDQ6VXNlcjU1Njg2NjQy",
    "avatar_url": "https://avatars.githubusercontent.com/u/55686642?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/barisaktemur",
    "html_url": "https://github.com/barisaktemur",
    "followers_url": "https://api.github.com/users/barisaktemur/followers",
    "following_url": "https://api.github.com/users/barisaktemur/following{/other_user}",
    "gists_url": "https://api.github.com/users/barisaktemur/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/barisaktemur/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/barisaktemur/subscriptions",
    "organizations_url": "https://api.github.com/users/barisaktemur/orgs",
    "repos_url": "https://api.github.com/users/barisaktemur/repos",
    "events_url": "https://api.github.com/users/barisaktemur/events{/privacy}",
    "received_events_url": "https://api.github.com/users/barisaktemur/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "6532e7e378adbe326256ce2410ce753ec30b5ef1",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6532e7e378adbe326256ce2410ce753ec30b5ef1",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/6532e7e378adbe326256ce2410ce753ec30b5ef1"
    }
  ],
  "stats": {
    "total": 123,
    "additions": 83,
    "deletions": 40
  },
  "files": [
    {
      "sha": "73adc6542a4e223d3d877315eca7732437117cb1",
      "filename": "gdbserver/ChangeLog",
      "status": "modified",
      "additions": 37,
      "deletions": 0,
      "changes": 37,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a5a4d4cd0c5fb2240d8157c98e2fe5078f9d3263/gdbserver/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a5a4d4cd0c5fb2240d8157c98e2fe5078f9d3263/gdbserver/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/ChangeLog?ref=a5a4d4cd0c5fb2240d8157c98e2fe5078f9d3263",
      "patch": "@@ -1,3 +1,40 @@\n+2020-02-20  Tankut Baris Aktemur  <tankut.baris.aktemur@intel.com>\n+\n+\tTurn process_stratum_target's fetch_registers and store_registers\n+\tops into methods of process_target.\n+\n+\t* target.h (struct process_stratum_target): Remove the target ops.\n+\t(class process_target): Add the target ops.\n+\t(fetch_inferior_registers): Update the macro.\n+\t(store_inferior_registers): Update the macro.\n+\n+\tUpdate the derived classes and callers below.\n+\n+\t* linux-low.cc (linux_target_ops): Update.\n+\t(linux_fetch_registers): Turn into ...\n+\t(linux_process_target::fetch_registers): ... this.\n+\t(linux_store_registers): Turn into ...\n+\t(linux_process_target::store_registers): ... this.\n+\t* linux-low.h (class linux_process_target): Update.\n+\t* lynx-low.cc (lynx_target_ops): Update.\n+\t(lynx_fetch_registers): Turn into ...\n+\t(lynx_process_target::fetch_registers): ... this.\n+\t(lynx_store_registers): Turn into ...\n+\t(lynx_process_target::store_registers): ... this.\n+\t* lynx-low.h (class lynx_process_target): Update.\n+\t* nto-low.cc (nto_target_ops): Update.\n+\t(nto_fetch_registers): Turn into ...\n+\t(nto_process_target::fetch_registers): ... this.\n+\t(nto_store_registers): Turn into ...\n+\t(nto_process_target::store_registers): ... this.\n+\t* nto-low.h (class nto_process_target): Update.\n+\t* win32-low.cc (win32_target_ops): Update.\n+\t(win32_fetch_inferior_registers): Turn into ...\n+\t(win32_process_target::fetch_registers): ... this.\n+\t(win32_store_inferior_registers): Turn into ...\n+\t(win32_process_target::store_registers): ... this.\n+\t* win32-low.h (class win32_process_target): Update.\n+\n 2020-02-20  Tankut Baris Aktemur  <tankut.baris.aktemur@intel.com>\n \n \tTurn process_stratum_target's wait op into a method of"
    },
    {
      "sha": "7cf7d90fdbc6aa30032d49fc6bbdcf53c055018a",
      "filename": "gdbserver/linux-low.cc",
      "status": "modified",
      "additions": 4,
      "deletions": 6,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a5a4d4cd0c5fb2240d8157c98e2fe5078f9d3263/gdbserver/linux-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a5a4d4cd0c5fb2240d8157c98e2fe5078f9d3263/gdbserver/linux-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-low.cc?ref=a5a4d4cd0c5fb2240d8157c98e2fe5078f9d3263",
      "patch": "@@ -5650,8 +5650,8 @@ usr_store_inferior_registers (const struct regs_info *regs_info,\n #endif\n \n \n-static void\n-linux_fetch_registers (struct regcache *regcache, int regno)\n+void\n+linux_process_target::fetch_registers (regcache *regcache, int regno)\n {\n   int use_regsets;\n   int all = 0;\n@@ -5683,8 +5683,8 @@ linux_fetch_registers (struct regcache *regcache, int regno)\n     }\n }\n \n-static void\n-linux_store_registers (struct regcache *regcache, int regno)\n+void\n+linux_process_target::store_registers (regcache *regcache, int regno)\n {\n   int use_regsets;\n   int all = 0;\n@@ -7359,8 +7359,6 @@ linux_get_hwcap2 (int wordsize)\n static linux_process_target the_linux_target;\n \n static process_stratum_target linux_target_ops = {\n-  linux_fetch_registers,\n-  linux_store_registers,\n   linux_prepare_to_access_memory,\n   linux_done_accessing_memory,\n   linux_read_memory,"
    },
    {
      "sha": "85b5c8a62d11353fc57fd10508f9bd411548285c",
      "filename": "gdbserver/linux-low.h",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a5a4d4cd0c5fb2240d8157c98e2fe5078f9d3263/gdbserver/linux-low.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a5a4d4cd0c5fb2240d8157c98e2fe5078f9d3263/gdbserver/linux-low.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-low.h?ref=a5a4d4cd0c5fb2240d8157c98e2fe5078f9d3263",
      "patch": "@@ -291,6 +291,10 @@ class linux_process_target : public process_target\n \n   ptid_t wait (ptid_t ptid, target_waitstatus *status,\n \t       int options) override;\n+\n+  void fetch_registers (regcache *regcache, int regno) override;\n+\n+  void store_registers (regcache *regcache, int regno) override;\n };\n \n #define get_thread_lwp(thr) ((struct lwp_info *) (thread_target_data (thr)))"
    },
    {
      "sha": "5c46567f9ede1c0e8e70510062dce3fabf04d3b6",
      "filename": "gdbserver/lynx-low.cc",
      "status": "modified",
      "additions": 6,
      "deletions": 8,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a5a4d4cd0c5fb2240d8157c98e2fe5078f9d3263/gdbserver/lynx-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a5a4d4cd0c5fb2240d8157c98e2fe5078f9d3263/gdbserver/lynx-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/lynx-low.cc?ref=a5a4d4cd0c5fb2240d8157c98e2fe5078f9d3263",
      "patch": "@@ -581,13 +581,13 @@ lynx_process_target::thread_alive (ptid_t ptid)\n \n /* Implement the fetch_registers target_ops method.  */\n \n-static void\n-lynx_fetch_registers (struct regcache *regcache, int regno)\n+void\n+lynx_process_target::fetch_registers (regcache *regcache, int regno)\n {\n   struct lynx_regset_info *regset = lynx_target_regsets;\n   ptid_t inferior_ptid = ptid_of (current_thread);\n \n-  lynx_debug (\"lynx_fetch_registers (regno = %d)\", regno);\n+  lynx_debug (\"fetch_registers (regno = %d)\", regno);\n \n   while (regset->size >= 0)\n     {\n@@ -606,13 +606,13 @@ lynx_fetch_registers (struct regcache *regcache, int regno)\n \n /* Implement the store_registers target_ops method.  */\n \n-static void\n-lynx_store_registers (struct regcache *regcache, int regno)\n+void\n+lynx_process_target::store_registers (regcache *regcache, int regno)\n {\n   struct lynx_regset_info *regset = lynx_target_regsets;\n   ptid_t inferior_ptid = ptid_of (current_thread);\n \n-  lynx_debug (\"lynx_store_registers (regno = %d)\", regno);\n+  lynx_debug (\"store_registers (regno = %d)\", regno);\n \n   while (regset->size >= 0)\n     {\n@@ -727,8 +727,6 @@ static lynx_process_target the_lynx_target;\n /* The LynxOS target_ops vector.  */\n \n static process_stratum_target lynx_target_ops = {\n-  lynx_fetch_registers,\n-  lynx_store_registers,\n   NULL,  /* prepare_to_access_memory */\n   NULL,  /* done_accessing_memory */\n   lynx_read_memory,"
    },
    {
      "sha": "ea6cf008f5b134a84a656e9dab8c957725a35248",
      "filename": "gdbserver/lynx-low.h",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a5a4d4cd0c5fb2240d8157c98e2fe5078f9d3263/gdbserver/lynx-low.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a5a4d4cd0c5fb2240d8157c98e2fe5078f9d3263/gdbserver/lynx-low.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/lynx-low.h?ref=a5a4d4cd0c5fb2240d8157c98e2fe5078f9d3263",
      "patch": "@@ -77,6 +77,10 @@ class lynx_process_target : public process_target\n \n   ptid_t wait (ptid_t ptid, target_waitstatus *status,\n \t       int options) override;\n+\n+  void fetch_registers (regcache *regcache, int regno) override;\n+\n+  void store_registers (regcache *regcache, int regno) override;\n };\n \n /* The inferior's target description.  This is a global because the"
    },
    {
      "sha": "a051f36eeccf78a3c261e42b7e0f83e2f39adbcc",
      "filename": "gdbserver/nto-low.cc",
      "status": "modified",
      "additions": 4,
      "deletions": 6,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a5a4d4cd0c5fb2240d8157c98e2fe5078f9d3263/gdbserver/nto-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a5a4d4cd0c5fb2240d8157c98e2fe5078f9d3263/gdbserver/nto-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/nto-low.cc?ref=a5a4d4cd0c5fb2240d8157c98e2fe5078f9d3263",
      "patch": "@@ -623,8 +623,8 @@ nto_process_target::wait (ptid_t ptid, target_waitstatus *ourstatus,\n /* Fetch inferior's registers for currently selected thread (CURRENT_INFERIOR).\n    If REGNO is -1, fetch all registers, or REGNO register only otherwise.  */\n \n-static void\n-nto_fetch_registers (struct regcache *regcache, int regno)\n+void\n+nto_process_target::fetch_registers (regcache *regcache, int regno)\n {\n   int regsize;\n   procfs_greg greg;\n@@ -671,8 +671,8 @@ nto_fetch_registers (struct regcache *regcache, int regno)\n /* Store registers for currently selected thread (CURRENT_INFERIOR).  \n    We always store all registers, regardless of REGNO.  */\n \n-static void\n-nto_store_registers (struct regcache *regcache, int regno)\n+void\n+nto_process_target::store_registers (regcache *regcache, int regno)\n {\n   procfs_greg greg;\n   int err;\n@@ -941,8 +941,6 @@ nto_sw_breakpoint_from_kind (int kind, int *size)\n static nto_process_target the_nto_target;\n \n static process_stratum_target nto_target_ops = {\n-  nto_fetch_registers,\n-  nto_store_registers,\n   NULL, /* prepare_to_access_memory */\n   NULL, /* done_accessing_memory */\n   nto_read_memory,"
    },
    {
      "sha": "f630360a2f43007447c0ee0e98d552b129edb054",
      "filename": "gdbserver/nto-low.h",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a5a4d4cd0c5fb2240d8157c98e2fe5078f9d3263/gdbserver/nto-low.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a5a4d4cd0c5fb2240d8157c98e2fe5078f9d3263/gdbserver/nto-low.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/nto-low.h?ref=a5a4d4cd0c5fb2240d8157c98e2fe5078f9d3263",
      "patch": "@@ -67,6 +67,10 @@ class nto_process_target : public process_target\n \n   ptid_t wait (ptid_t ptid, target_waitstatus *status,\n \t       int options) override;\n+\n+  void fetch_registers (regcache *regcache, int regno) override;\n+\n+  void store_registers (regcache *regcache, int regno) override;\n };\n \n /* The inferior's target description.  This is a global because the"
    },
    {
      "sha": "e42c7509bb18168baa366bfddd774821fabca32f",
      "filename": "gdbserver/target.h",
      "status": "modified",
      "additions": 12,
      "deletions": 14,
      "changes": 26,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a5a4d4cd0c5fb2240d8157c98e2fe5078f9d3263/gdbserver/target.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a5a4d4cd0c5fb2240d8157c98e2fe5078f9d3263/gdbserver/target.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/target.h?ref=a5a4d4cd0c5fb2240d8157c98e2fe5078f9d3263",
      "patch": "@@ -70,18 +70,6 @@ class process_target;\n    shared code.  */\n struct process_stratum_target\n {\n-  /* Fetch registers from the inferior process.\n-\n-     If REGNO is -1, fetch all registers; otherwise, fetch at least REGNO.  */\n-\n-  void (*fetch_registers) (struct regcache *regcache, int regno);\n-\n-  /* Store registers to the inferior process.\n-\n-     If REGNO is -1, store all registers; otherwise, store at least REGNO.  */\n-\n-  void (*store_registers) (struct regcache *regcache, int regno);\n-\n   /* Prepare to read or write memory from the inferior process.\n      Targets use this to do what is necessary to get the state of the\n      inferior such that it is possible to access memory.\n@@ -482,6 +470,16 @@ class process_target\n      null_ptid/TARGET_WAITKIND_IGNORE.  */\n   virtual ptid_t wait (ptid_t ptid, target_waitstatus *status,\n \t\t       int options) = 0;\n+\n+  /* Fetch registers from the inferior process.\n+\n+     If REGNO is -1, fetch all registers; otherwise, fetch at least REGNO.  */\n+  virtual void fetch_registers (regcache *regcache, int regno) = 0;\n+\n+  /* Store registers to the inferior process.\n+\n+     If REGNO is -1, store all registers; otherwise, store at least REGNO.  */\n+  virtual void store_registers (regcache *regcache, int regno) = 0;\n };\n \n extern process_stratum_target *the_target;\n@@ -525,10 +523,10 @@ int kill_inferior (process_info *proc);\n   the_target->pt->thread_alive (pid)\n \n #define fetch_inferior_registers(regcache, regno)\t\\\n-  (*the_target->fetch_registers) (regcache, regno)\n+  the_target->pt->fetch_registers (regcache, regno)\n \n #define store_inferior_registers(regcache, regno) \\\n-  (*the_target->store_registers) (regcache, regno)\n+  the_target->pt->store_registers (regcache, regno)\n \n #define join_inferior(pid) \\\n   the_target->pt->join (pid)"
    },
    {
      "sha": "9e4e4c368ca19eb23464907ec05864ffb3b6b241",
      "filename": "gdbserver/win32-low.cc",
      "status": "modified",
      "additions": 4,
      "deletions": 6,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a5a4d4cd0c5fb2240d8157c98e2fe5078f9d3263/gdbserver/win32-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a5a4d4cd0c5fb2240d8157c98e2fe5078f9d3263/gdbserver/win32-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/win32-low.cc?ref=a5a4d4cd0c5fb2240d8157c98e2fe5078f9d3263",
      "patch": "@@ -1659,16 +1659,16 @@ win32_process_target::wait (ptid_t ptid, target_waitstatus *ourstatus,\n \n /* Fetch registers from the inferior process.\n    If REGNO is -1, fetch all registers; otherwise, fetch at least REGNO.  */\n-static void\n-win32_fetch_inferior_registers (struct regcache *regcache, int regno)\n+void\n+win32_process_target::fetch_registers (regcache *regcache, int regno)\n {\n   child_fetch_inferior_registers (regcache, regno);\n }\n \n /* Store registers to the inferior process.\n    If REGNO is -1, store all registers; otherwise, store at least REGNO.  */\n-static void\n-win32_store_inferior_registers (struct regcache *regcache, int regno)\n+void\n+win32_process_target::store_registers (regcache *regcache, int regno)\n {\n   child_store_inferior_registers (regcache, regno);\n }\n@@ -1837,8 +1837,6 @@ win32_sw_breakpoint_from_kind (int kind, int *size)\n static win32_process_target the_win32_target;\n \n static process_stratum_target win32_target_ops = {\n-  win32_fetch_inferior_registers,\n-  win32_store_inferior_registers,\n   NULL, /* prepare_to_access_memory */\n   NULL, /* done_accessing_memory */\n   win32_read_inferior_memory,"
    },
    {
      "sha": "ff3659f6dabac6213c3c0348382a5f22dcab9b85",
      "filename": "gdbserver/win32-low.h",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a5a4d4cd0c5fb2240d8157c98e2fe5078f9d3263/gdbserver/win32-low.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a5a4d4cd0c5fb2240d8157c98e2fe5078f9d3263/gdbserver/win32-low.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/win32-low.h?ref=a5a4d4cd0c5fb2240d8157c98e2fe5078f9d3263",
      "patch": "@@ -126,6 +126,10 @@ class win32_process_target : public process_target\n \n   ptid_t wait (ptid_t ptid, target_waitstatus *status,\n \t       int options) override;\n+\n+  void fetch_registers (regcache *regcache, int regno) override;\n+\n+  void store_registers (regcache *regcache, int regno) override;\n };\n \n /* Retrieve the context for this thread, if not already retrieved.  */"
    }
  ]
}