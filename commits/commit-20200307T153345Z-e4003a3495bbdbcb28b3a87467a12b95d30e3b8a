{
  "sha": "e4003a3495bbdbcb28b3a87467a12b95d30e3b8a",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZTQwMDNhMzQ5NWJiZGJjYjI4YjNhODc0NjdhMTJiOTVkMzBlM2I4YQ==",
  "commit": {
    "author": {
      "name": "Tom de Vries",
      "email": "tdevries@suse.de",
      "date": "2020-03-07T15:33:45Z"
    },
    "committer": {
      "name": "Tom de Vries",
      "email": "tdevries@suse.de",
      "date": "2020-03-07T15:33:45Z"
    },
    "message": "[gdb] Support anonymous typedef generated by gcc -feliminate-dwarf2-dups\n\nGcc supports an option -feliminate-dwarf2-dups (up until gcc-7, removed in\ngcc-8).\n\nWhen running tests with target board unix/-feliminate-dwarf2-dups, we run\ninto:\n...\n(gdb) PASS: gdb.ada/arraydim.exp: print m'length(3)\nptype global_3dim_for_gdb_testing^M\ntype = array (Unexpected type in ada_discrete_type_low_bound.^M\n(gdb) FAIL: gdb.ada/arraydim.exp: ptype global_3dim_for_gdb_testing\n...\n\nThe DWARF for the variable global_3dim_for_gdb_testing looks as follows:\n...\n <0><824>: Abbrev Number: 1 (DW_TAG_compile_unit)\n    <825>   DW_AT_name        : src/gdb/testsuite/gdb.ada/arraydim/inc.c\n <1><832>: Abbrev Number: 2 (DW_TAG_array_type)\n    <833>   DW_AT_type        : <0x874>\n <2><837>: Abbrev Number: 3 (DW_TAG_subrange_type)\n    <838>   DW_AT_type        : <0x84a>\n    <83c>   DW_AT_upper_bound : 0\n <2><83d>: Abbrev Number: 3 (DW_TAG_subrange_type)\n    <83e>   DW_AT_type        : <0x84a>\n    <842>   DW_AT_upper_bound : 1\n <2><843>: Abbrev Number: 3 (DW_TAG_subrange_type)\n    <844>   DW_AT_type        : <0x84a>\n    <848>   DW_AT_upper_bound : 2\n <2><849>: Abbrev Number: 0\n <1><84a>: Abbrev Number: 4 (DW_TAG_typedef)\n    <84b>   DW_AT_type        : <0x86d>\n <1><84f>: Abbrev Number: 0\n <0><85b>: Abbrev Number: 5 (DW_TAG_compile_unit)\n    <861>   DW_AT_name        : src/gdb/testsuite/gdb.ada/arraydim/inc.c\n <1><86d>: Abbrev Number: 6 (DW_TAG_base_type)\n    <86e>   DW_AT_byte_size   : 8\n    <86f>   DW_AT_encoding    : 7       (unsigned)\n    <870>   DW_AT_name        : long unsigned int\n <1><874>: Abbrev Number: 7 (DW_TAG_base_type)\n    <875>   DW_AT_byte_size   : 4\n    <876>   DW_AT_encoding    : 5       (signed)\n    <877>   DW_AT_name        : int\n <1><87b>: Abbrev Number: 8 (DW_TAG_variable)\n    <87c>   DW_AT_name        : global_3dim_for_gdb_testing\n    <882>   DW_AT_type        : <0x832>\n    <886>   DW_AT_external    : 1\n...\n\nThe DWARF contains an anonymous typedef at 0x84a, referring to 0x86d.\nStrictly speaking, the anonymous typedef is illegal DWARF, because a\nDW_TAG_typedef is defined to have an DW_AT_name attribute containing the name\nof the typedef as it appears in the source program.\n\nThe DWARF reading code creates a corresponding type for this typedef, which\ngoes on to confuse the code handling arrays.\n\nRather than trying to support the type representing this anonymous typedef in\nall the locations where it causes problems, fix this by treating the anonymous\ntypedef as a forwarder DIE in the DWARF reader.\n\nTested on x86_64-linux, with target boards unix and\nunix/-feliminate-dwarf2-dups.\n\nThis fixes ~85 failures for unix/-feliminate-dwarf2-dups.\n\ngdb/ChangeLog:\n\n2020-03-07  Tom de Vries  <tdevries@suse.de>\n\n\t* dwarf2/read.c (read_typedef): Treat anonymous typedef as forwarder\n\tDIE.",
    "tree": {
      "sha": "f3947838f84cdcfe891e29714591ced936e86f06",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/f3947838f84cdcfe891e29714591ced936e86f06"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/e4003a3495bbdbcb28b3a87467a12b95d30e3b8a",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e4003a3495bbdbcb28b3a87467a12b95d30e3b8a",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/e4003a3495bbdbcb28b3a87467a12b95d30e3b8a",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e4003a3495bbdbcb28b3a87467a12b95d30e3b8a/comments",
  "author": {
    "login": "vries",
    "id": 4057235,
    "node_id": "MDQ6VXNlcjQwNTcyMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vries",
    "html_url": "https://github.com/vries",
    "followers_url": "https://api.github.com/users/vries/followers",
    "following_url": "https://api.github.com/users/vries/following{/other_user}",
    "gists_url": "https://api.github.com/users/vries/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vries/subscriptions",
    "organizations_url": "https://api.github.com/users/vries/orgs",
    "repos_url": "https://api.github.com/users/vries/repos",
    "events_url": "https://api.github.com/users/vries/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vries/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "vries",
    "id": 4057235,
    "node_id": "MDQ6VXNlcjQwNTcyMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vries",
    "html_url": "https://github.com/vries",
    "followers_url": "https://api.github.com/users/vries/followers",
    "following_url": "https://api.github.com/users/vries/following{/other_user}",
    "gists_url": "https://api.github.com/users/vries/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vries/subscriptions",
    "organizations_url": "https://api.github.com/users/vries/orgs",
    "repos_url": "https://api.github.com/users/vries/repos",
    "events_url": "https://api.github.com/users/vries/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vries/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "e8932576355851be8bac0b0b86a3be4f2005e47f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e8932576355851be8bac0b0b86a3be4f2005e47f",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/e8932576355851be8bac0b0b86a3be4f2005e47f"
    }
  ],
  "stats": {
    "total": 15,
    "additions": 15,
    "deletions": 0
  },
  "files": [
    {
      "sha": "fca56484664c4bbf209ac7b9f45336c80a5da55e",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e4003a3495bbdbcb28b3a87467a12b95d30e3b8a/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e4003a3495bbdbcb28b3a87467a12b95d30e3b8a/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=e4003a3495bbdbcb28b3a87467a12b95d30e3b8a",
      "patch": "@@ -1,3 +1,8 @@\n+2020-03-07  Tom de Vries  <tdevries@suse.de>\n+\n+\t* dwarf2/read.c (read_typedef): Treat anonymous typedef as forwarder\n+\tDIE.\n+\n 2020-03-07  Tom Tromey  <tom@tromey.com>\n \n \t* valops.c (value_literal_complex): Remove obsolete comment."
    },
    {
      "sha": "1d4397dfabc72004eaa64013e47033e0ebdfe213",
      "filename": "gdb/dwarf2/read.c",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e4003a3495bbdbcb28b3a87467a12b95d30e3b8a/gdb/dwarf2/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e4003a3495bbdbcb28b3a87467a12b95d30e3b8a/gdb/dwarf2/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.c?ref=e4003a3495bbdbcb28b3a87467a12b95d30e3b8a",
      "patch": "@@ -16816,6 +16816,16 @@ read_typedef (struct die_info *die, struct dwarf2_cu *cu)\n \t\t sect_offset_str (die->sect_off), objfile_name (objfile));\n       TYPE_TARGET_TYPE (this_type) = NULL;\n     }\n+  if (name == NULL)\n+    {\n+      /* Gcc-7 and before supports -feliminate-dwarf2-dups, which generates\n+\t anonymous typedefs, which is, strictly speaking, invalid DWARF.\n+\t Handle these by just returning the target type, rather than\n+\t constructing an anonymous typedef type and trying to handle this\n+\t elsewhere.  */\n+      set_die_type (die, target_type, cu);\n+      return target_type;\n+    }\n   return this_type;\n }\n "
    }
  ]
}