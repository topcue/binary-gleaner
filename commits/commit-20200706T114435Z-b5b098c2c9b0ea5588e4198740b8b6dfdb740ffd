{
  "sha": "b5b098c2c9b0ea5588e4198740b8b6dfdb740ffd",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YjViMDk4YzJjOWIwZWE1NTg4ZTQxOTg3NDBiOGI2ZGZkYjc0MGZmZA==",
  "commit": {
    "author": {
      "name": "Jan Beulich",
      "email": "jbeulich@suse.com",
      "date": "2020-07-06T11:44:35Z"
    },
    "committer": {
      "name": "Jan Beulich",
      "email": "jbeulich@suse.com",
      "date": "2020-07-06T11:44:35Z"
    },
    "message": "x86: adjust/correct VFRCZ{P,S}{S,D} decoding\n\nThe unnecessary XOP.L decoding had caught my eye, together with the not\nreally expected operand specifiers. Drop this decode step, and instead\nmake sure XOP.W and XOP.PP don't get ignored. For the latter, do this in\na form applicable to all XOP insns, rather than adding extra table\nlayers - there are no encodings with the field non-zero. Besides these\ntwo, for the scalar forms XOP.L actually needs to also be zero.",
    "tree": {
      "sha": "adc60959230da4ba3b35f6f34f6712ce8db9729c",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/adc60959230da4ba3b35f6f34f6712ce8db9729c"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/b5b098c2c9b0ea5588e4198740b8b6dfdb740ffd",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b5b098c2c9b0ea5588e4198740b8b6dfdb740ffd",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/b5b098c2c9b0ea5588e4198740b8b6dfdb740ffd",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b5b098c2c9b0ea5588e4198740b8b6dfdb740ffd/comments",
  "author": {
    "login": "jbeulich",
    "id": 5610135,
    "node_id": "MDQ6VXNlcjU2MTAxMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5610135?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jbeulich",
    "html_url": "https://github.com/jbeulich",
    "followers_url": "https://api.github.com/users/jbeulich/followers",
    "following_url": "https://api.github.com/users/jbeulich/following{/other_user}",
    "gists_url": "https://api.github.com/users/jbeulich/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jbeulich/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jbeulich/subscriptions",
    "organizations_url": "https://api.github.com/users/jbeulich/orgs",
    "repos_url": "https://api.github.com/users/jbeulich/repos",
    "events_url": "https://api.github.com/users/jbeulich/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jbeulich/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "jbeulich",
    "id": 5610135,
    "node_id": "MDQ6VXNlcjU2MTAxMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5610135?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jbeulich",
    "html_url": "https://github.com/jbeulich",
    "followers_url": "https://api.github.com/users/jbeulich/followers",
    "following_url": "https://api.github.com/users/jbeulich/following{/other_user}",
    "gists_url": "https://api.github.com/users/jbeulich/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jbeulich/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jbeulich/subscriptions",
    "organizations_url": "https://api.github.com/users/jbeulich/orgs",
    "repos_url": "https://api.github.com/users/jbeulich/repos",
    "events_url": "https://api.github.com/users/jbeulich/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jbeulich/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "21a3faebba444c4d4d0e8f40c3a60cdfbb83c514",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/21a3faebba444c4d4d0e8f40c3a60cdfbb83c514",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/21a3faebba444c4d4d0e8f40c3a60cdfbb83c514"
    }
  ],
  "stats": {
    "total": 60,
    "additions": 48,
    "deletions": 12
  },
  "files": [
    {
      "sha": "e02d8e59758dde36bd72cfee57e6435c354a3417",
      "filename": "opcodes/ChangeLog",
      "status": "modified",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b5b098c2c9b0ea5588e4198740b8b6dfdb740ffd/opcodes/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b5b098c2c9b0ea5588e4198740b8b6dfdb740ffd/opcodes/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/ChangeLog?ref=b5b098c2c9b0ea5588e4198740b8b6dfdb740ffd",
      "patch": "@@ -1,3 +1,15 @@\n+2020-07-06  Jan Beulich  <jbeulich@suse.com>\n+\n+\t* i386-dis.c (VEX_LEN_0FXOP_09_80, VEX_LEN_0FXOP_09_81): Delete.\n+\t(VEX_LEN_0FXOP_09_82_W_0, VEX_LEN_0FXOP_09_83_W_0,\n+\tVEX_W_0FXOP_09_80, VEX_W_0FXOP_09_81, VEX_W_0FXOP_09_82,\n+\tVEX_W_0FXOP_09_83): New enumerators.\n+\t(xop_table): Reference the above.\n+\t(vex_len_table): Replace vfrczp* entries by vfrczs* ones.\n+\t(vex_w_table): New VEX_W_0FXOP_09_80, VEX_W_0FXOP_09_81,\n+\tVEX_W_0FXOP_09_82, and VEX_W_0FXOP_09_83 entries.\n+\t(get_valid_dis386): Return bad_opcode for XOP.PP != 0.\n+\n 2020-07-06  Jan Beulich  <jbeulich@suse.com>\n \n \t* i386-dis.c (EVEX_W_0F3838_P_1,"
    },
    {
      "sha": "da5af426a424449353012de642929dd6cb680dd1",
      "filename": "opcodes/i386-dis.c",
      "status": "modified",
      "additions": 36,
      "deletions": 12,
      "changes": 48,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b5b098c2c9b0ea5588e4198740b8b6dfdb740ffd/opcodes/i386-dis.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b5b098c2c9b0ea5588e4198740b8b6dfdb740ffd/opcodes/i386-dis.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/i386-dis.c?ref=b5b098c2c9b0ea5588e4198740b8b6dfdb740ffd",
      "patch": "@@ -1814,8 +1814,8 @@ enum\n   VEX_LEN_0FXOP_08_ED,\n   VEX_LEN_0FXOP_08_EE,\n   VEX_LEN_0FXOP_08_EF,\n-  VEX_LEN_0FXOP_09_80,\n-  VEX_LEN_0FXOP_09_81\n+  VEX_LEN_0FXOP_09_82_W_0,\n+  VEX_LEN_0FXOP_09_83_W_0,\n };\n \n enum\n@@ -1956,6 +1956,11 @@ enum\n   VEX_W_0F3ACE_P_2,\n   VEX_W_0F3ACF_P_2,\n \n+  VEX_W_0FXOP_09_80,\n+  VEX_W_0FXOP_09_81,\n+  VEX_W_0FXOP_09_82,\n+  VEX_W_0FXOP_09_83,\n+\n   EVEX_W_0F10_P_1,\n   EVEX_W_0F10_P_3,\n   EVEX_W_0F11_P_1,\n@@ -7862,10 +7867,10 @@ static const struct dis386 xop_table[][256] = {\n     { Bad_Opcode },\n     { Bad_Opcode },\n     /* 80 */\n-    { VEX_LEN_TABLE (VEX_LEN_0FXOP_09_80) },\n-    { VEX_LEN_TABLE (VEX_LEN_0FXOP_09_81) },\n-    { \"vfrczss\", \t{ XM, EXd }, 0 },\n-    { \"vfrczsd\", \t{ XM, EXq }, 0 },\n+    { VEX_W_TABLE (VEX_W_0FXOP_09_80) },\n+    { VEX_W_TABLE (VEX_W_0FXOP_09_81) },\n+    { VEX_W_TABLE (VEX_W_0FXOP_09_82) },\n+    { VEX_W_TABLE (VEX_W_0FXOP_09_83) },\n     { Bad_Opcode },\n     { Bad_Opcode },\n     { Bad_Opcode },\n@@ -9726,16 +9731,14 @@ static const struct dis386 vex_len_table[][2] = {\n      { \"vpcomuq\",\t{ XM, Vex128, EXx, VPCOM }, 0 },\n   },\n \n-  /* VEX_LEN_0FXOP_09_80 */\n+  /* VEX_LEN_0FXOP_09_82_W_0 */\n   {\n-    { \"vfrczps\",\t{ XM, EXxmm }, 0 },\n-    { \"vfrczps\",\t{ XM, EXymmq }, 0 },\n+    { \"vfrczss\", \t{ XM, EXd }, 0 },\n   },\n \n-  /* VEX_LEN_0FXOP_09_81 */\n+  /* VEX_LEN_0FXOP_09_83_W_0 */\n   {\n-    { \"vfrczpd\",\t{ XM, EXxmm }, 0 },\n-    { \"vfrczpd\",\t{ XM, EXymmq }, 0 },\n+    { \"vfrczsd\", \t{ XM, EXq }, 0 },\n   },\n };\n \n@@ -10063,6 +10066,22 @@ static const struct dis386 vex_w_table[][2] = {\n     { Bad_Opcode },\n     { \"vgf2p8affineinvqb\",  { XM, Vex, EXx, Ib }, 0 },\n   },\n+  /* VEX_W_0FXOP_09_80 */\n+  {\n+    { \"vfrczps\",\t{ XM, EXx }, 0 },\n+  },\n+  /* VEX_W_0FXOP_09_81 */\n+  {\n+    { \"vfrczpd\",\t{ XM, EXx }, 0 },\n+  },\n+  /* VEX_W_0FXOP_09_82 */\n+  {\n+    { VEX_LEN_TABLE (VEX_LEN_0FXOP_09_82_W_0) },\n+  },\n+  /* VEX_W_0FXOP_09_83 */\n+  {\n+    { VEX_LEN_TABLE (VEX_LEN_0FXOP_09_83_W_0) },\n+  },\n \n #include \"i386-dis-evex-w.h\"\n };\n@@ -11475,6 +11494,11 @@ get_valid_dis386 (const struct dis386 *dp, disassemble_info *info)\n       modrm.mod = (*codep >> 6) & 3;\n       modrm.reg = (*codep >> 3) & 7;\n       modrm.rm = *codep & 7;\n+\n+      /* No XOP encoding so far allows for a non-zero embedded prefix. Avoid\n+\t having to decode the bits for every otherwise valid encoding.  */\n+      if (vex.prefix)\n+\treturn &bad_opcode;\n       break;\n \n     case USE_VEX_C4_TABLE:"
    }
  ]
}