{
  "sha": "5f486660101ab09d50fa3bb9a10555f12722f39f",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NWY0ODY2NjAxMDFhYjA5ZDUwZmEzYmI5YTEwNTU1ZjEyNzIyZjM5Zg==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2019-02-12T21:28:07Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2019-02-15T20:21:29Z"
    },
    "message": "C++-ify bp_location\n\nPhilippe noticed a memory leak coming from ada_catchpoint_location --\nit was not freeing the \"function_name\" member from its base class:\n\n==14141== 114 bytes in 4 blocks are definitely lost in loss record 1,055 of 3,424\n==14141==    at 0x4C2BE6D: malloc (vg_replace_malloc.c:309)\n==14141==    by 0x405107: xmalloc (common-utils.c:44)\n==14141==    by 0x7563F9: xstrdup (xstrdup.c:34)\n==14141==    by 0x3B82B3: set_breakpoint_location_function(bp_location*, int) (breakpoint.c:7156)\n==14141==    by 0x3C112B: add_location_to_breakpoint(breakpoint*, symtab_and_line const*) (breakpoint.c:8609)\n==14141==    by 0x3C127A: init_raw_breakpoint(breakpoint*, gdbarch*, symtab_and_line, bptype, breakpoint_ops const*) (breakpoint.c:7187)\n==14141==    by 0x3C1B52: init_ada_exception_breakpoint(breakpoint*, gdbarch*, symtab_and_line, char const*, breakpoint_ops const*, int, int, int) (breakpoint.c:11262)\n==14141==    by 0x381C2E: create_ada_exception_catchpoint(gdbarch*, ada_exception_catchpoint_kind, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int, int, int) (ada-lang.c:13255)\n\nThis patch fixes the problem by further C++-ifying bp_location.  In\nparticular, bp_location_ops is now removed, and the \"dtor\" function\npointer is replaced with an ordinary destructor.\n\ngdb/ChangeLog\n2019-02-15  Philippe Waroquiers  <philippe.waroquiers@skynet.be>\n\t    Tom Tromey  <tromey@adacore.com>\n\n\t* breakpoint.c (~bp_location): Rename from bp_location_dtor.\n\t(bp_location_ops): Remove.\n\t(base_breakpoint_allocate_location): Update.\n\t(free_bp_location): Update.\n\t* ada-lang.c (class ada_catchpoint_location)\n\t<ada_catchpoint_location>: Remove ops parameter.\n\t(ada_catchpoint_location_dtor): Remove.\n\t(ada_catchpoint_location_ops): Remove.\n\t(allocate_location_exception): Update.\n\t* breakpoint.h (struct bp_location_ops): Remove.\n\t(class bp_location) <bp_location>: Remove bp_location_ops\n\tparameter.\n\t<~bp_location>: Add destructor.\n\t<ops>: Remove.",
    "tree": {
      "sha": "2fe943ce4ddc4c9910dd3bace147a6f1bafeb6d3",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/2fe943ce4ddc4c9910dd3bace147a6f1bafeb6d3"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/5f486660101ab09d50fa3bb9a10555f12722f39f",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5f486660101ab09d50fa3bb9a10555f12722f39f",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/5f486660101ab09d50fa3bb9a10555f12722f39f",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5f486660101ab09d50fa3bb9a10555f12722f39f/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "91d78b8179b061cf7c9cca423e29480bc6367fc3",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/91d78b8179b061cf7c9cca423e29480bc6367fc3",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/91d78b8179b061cf7c9cca423e29480bc6367fc3"
    }
  ],
  "stats": {
    "total": 80,
    "additions": 28,
    "deletions": 52
  },
  "files": [
    {
      "sha": "11667aecfd10fbd3bf52f2c2f118685529cf2e71",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 18,
      "deletions": 0,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5f486660101ab09d50fa3bb9a10555f12722f39f/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5f486660101ab09d50fa3bb9a10555f12722f39f/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=5f486660101ab09d50fa3bb9a10555f12722f39f",
      "patch": "@@ -1,3 +1,21 @@\n+2019-02-15  Philippe Waroquiers  <philippe.waroquiers@skynet.be>\n+\t    Tom Tromey  <tromey@adacore.com>\n+\n+\t* breakpoint.c (~bp_location): Rename from bp_location_dtor.\n+\t(bp_location_ops): Remove.\n+\t(base_breakpoint_allocate_location): Update.\n+\t(free_bp_location): Update.\n+\t* ada-lang.c (class ada_catchpoint_location)\n+\t<ada_catchpoint_location>: Remove ops parameter.\n+\t(ada_catchpoint_location_dtor): Remove.\n+\t(ada_catchpoint_location_ops): Remove.\n+\t(allocate_location_exception): Update.\n+\t* breakpoint.h (struct bp_location_ops): Remove.\n+\t(class bp_location) <bp_location>: Remove bp_location_ops\n+\tparameter.\n+\t<~bp_location>: Add destructor.\n+\t<ops>: Remove.\n+\n 2019-02-14  Thomas Schwinge  <thomas@codesourcery.com>\n \t    Pedro Alves  <palves@redhat.com>\n "
    },
    {
      "sha": "602facb35e78191044659d76077cf8643d727fd5",
      "filename": "gdb/ada-lang.c",
      "status": "modified",
      "additions": 3,
      "deletions": 21,
      "changes": 24,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5f486660101ab09d50fa3bb9a10555f12722f39f/gdb/ada-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5f486660101ab09d50fa3bb9a10555f12722f39f/gdb/ada-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-lang.c?ref=5f486660101ab09d50fa3bb9a10555f12722f39f",
      "patch": "@@ -12396,8 +12396,8 @@ static std::string ada_exception_catchpoint_cond_string\n class ada_catchpoint_location : public bp_location\n {\n public:\n-  ada_catchpoint_location (const bp_location_ops *ops, breakpoint *owner)\n-    : bp_location (ops, owner)\n+  ada_catchpoint_location (breakpoint *owner)\n+    : bp_location (owner)\n   {}\n \n   /* The condition that checks whether the exception that was raised\n@@ -12406,24 +12406,6 @@ class ada_catchpoint_location : public bp_location\n   expression_up excep_cond_expr;\n };\n \n-/* Implement the DTOR method in the bp_location_ops structure for all\n-   Ada exception catchpoint kinds.  */\n-\n-static void\n-ada_catchpoint_location_dtor (struct bp_location *bl)\n-{\n-  struct ada_catchpoint_location *al = (struct ada_catchpoint_location *) bl;\n-\n-  al->excep_cond_expr.reset ();\n-}\n-\n-/* The vtable to be used in Ada catchpoint locations.  */\n-\n-static const struct bp_location_ops ada_catchpoint_location_ops =\n-{\n-  ada_catchpoint_location_dtor\n-};\n-\n /* An instance of this type is used to represent an Ada catchpoint.  */\n \n struct ada_catchpoint : public breakpoint\n@@ -12493,7 +12475,7 @@ static struct bp_location *\n allocate_location_exception (enum ada_exception_catchpoint_kind ex,\n \t\t\t     struct breakpoint *self)\n {\n-  return new ada_catchpoint_location (&ada_catchpoint_location_ops, self);\n+  return new ada_catchpoint_location (self);\n }\n \n /* Implement the RE_SET method in the breakpoint_ops structure for all"
    },
    {
      "sha": "9be99ff4efae2394bef1392c703fbd6e6e397ccf",
      "filename": "gdb/breakpoint.c",
      "status": "modified",
      "additions": 4,
      "deletions": 16,
      "changes": 20,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5f486660101ab09d50fa3bb9a10555f12722f39f/gdb/breakpoint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5f486660101ab09d50fa3bb9a10555f12722f39f/gdb/breakpoint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/breakpoint.c?ref=5f486660101ab09d50fa3bb9a10555f12722f39f",
      "patch": "@@ -6958,13 +6958,10 @@ adjust_breakpoint_address (struct gdbarch *gdbarch,\n     }\n }\n \n-bp_location::bp_location (const bp_location_ops *ops, breakpoint *owner)\n+bp_location::bp_location (breakpoint *owner)\n {\n   bp_location *loc = this;\n \n-  gdb_assert (ops != NULL);\n-\n-  loc->ops = ops;\n   loc->owner = owner;\n   loc->cond_bytecode = NULL;\n   loc->shlib_disabled = 0;\n@@ -7033,7 +7030,6 @@ allocate_bp_location (struct breakpoint *bpt)\n static void\n free_bp_location (struct bp_location *loc)\n {\n-  loc->ops->dtor (loc);\n   delete loc;\n }\n \n@@ -12166,19 +12162,11 @@ say_where (struct breakpoint *b)\n     }\n }\n \n-/* Default bp_location_ops methods.  */\n-\n-static void\n-bp_location_dtor (struct bp_location *self)\n+bp_location::~bp_location ()\n {\n-  xfree (self->function_name);\n+  xfree (function_name);\n }\n \n-static const struct bp_location_ops bp_location_ops =\n-{\n-  bp_location_dtor\n-};\n-\n /* Destructor for the breakpoint base class.  */\n \n breakpoint::~breakpoint ()\n@@ -12191,7 +12179,7 @@ breakpoint::~breakpoint ()\n static struct bp_location *\n base_breakpoint_allocate_location (struct breakpoint *self)\n {\n-  return new bp_location (&bp_location_ops, self);\n+  return new bp_location (self);\n }\n \n static void"
    },
    {
      "sha": "a91e3e334cfd47f7faefb0f59fb486822c0f2eb6",
      "filename": "gdb/breakpoint.h",
      "status": "modified",
      "additions": 3,
      "deletions": 15,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5f486660101ab09d50fa3bb9a10555f12722f39f/gdb/breakpoint.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5f486660101ab09d50fa3bb9a10555f12722f39f/gdb/breakpoint.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/breakpoint.h?ref=5f486660101ab09d50fa3bb9a10555f12722f39f",
      "patch": "@@ -301,31 +301,19 @@ enum bp_loc_type\n   bp_loc_other\t\t\t/* Miscellaneous...  */\n };\n \n-/* This structure is a collection of function pointers that, if\n-   available, will be called instead of performing the default action\n-   for this bp_loc_type.  */\n-\n-struct bp_location_ops\n-{\n-  /* Destructor.  Releases everything from SELF (but not SELF\n-     itself).  */\n-  void (*dtor) (struct bp_location *self);\n-};\n-\n class bp_location\n {\n public:\n   bp_location () = default;\n \n-  bp_location (const bp_location_ops *ops, breakpoint *owner);\n+  bp_location (breakpoint *owner);\n+\n+  virtual ~bp_location ();\n \n   /* Chain pointer to the next breakpoint location for\n      the same parent breakpoint.  */\n   bp_location *next = NULL;\n \n-  /* Methods associated with this location.  */\n-  const bp_location_ops *ops = NULL;\n-\n   /* The reference count.  */\n   int refc = 0;\n "
    }
  ]
}