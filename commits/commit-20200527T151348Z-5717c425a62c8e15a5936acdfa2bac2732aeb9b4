{
  "sha": "5717c425a62c8e15a5936acdfa2bac2732aeb9b4",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NTcxN2M0MjVhNjJjOGUxNWE1OTM2YWNkZmEyYmFjMjczMmFlYjliNA==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-05-27T15:13:48Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-05-27T15:13:48Z"
    },
    "message": "Add \"objfile\" parameter to two partial_symtab methods\n\nThis series will cause partial symtabs to be shared across objfiles.\nHowever, full symtabs and symbols will still be objfile-dependent, so\nwill be expanded separately for each objfile.  So, a debug info reader\nwill need to know which objfile to consult when expanding a partial\nsymtab.\n\nThis patch adds an objfile parameter to the two relevant methods of\npartial_symtab.  Current implementations simply ignore them.\n\ngdb/ChangeLog:\n\n\t* psymtab.c (partial_map_expand_apply)\n\t(psym_find_pc_sect_compunit_symtab, psym_lookup_symbol)\n\t(psym_lookup_global_symbol_language)\n\t(psymtab_to_symtab, psym_find_last_source_symtab, dump_psymtab)\n\t(psym_print_stats, psym_expand_symtabs_for_function)\n\t(psym_map_symbol_filenames, psym_map_matching_symbols)\n\t(psym_expand_symtabs_matching)\n\t(partial_symtab::read_dependencies, maintenance_info_psymtabs)\n\t(maintenance_check_psymtabs): Update.\n\t* psympriv.h (struct partial_symtab) <readin_p,\n\tget_compunit_symtab>: Add objfile parameter.\n\t(struct standard_psymtab) <readin_p, get_compunit_symtab>:\n\tLikewise.\n\t* dwarf2/read.c (struct dwarf2_include_psymtab) <readin_p,\n\tget_compunit_symtab>: Likewise.\n\t(dwarf2_psymtab::expand_psymtab): Pass objfile argument.\n\nChange-Id: I3f0b26787c3e78f7fb78b9fc011d91fb8690f3a0",
    "tree": {
      "sha": "86cb17e5e89da416acd4bc0addb8e13bca248c5d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/86cb17e5e89da416acd4bc0addb8e13bca248c5d"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/5717c425a62c8e15a5936acdfa2bac2732aeb9b4",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5717c425a62c8e15a5936acdfa2bac2732aeb9b4",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/5717c425a62c8e15a5936acdfa2bac2732aeb9b4",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5717c425a62c8e15a5936acdfa2bac2732aeb9b4/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "45940949265417e8a21b5936e906cf24a3177001",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/45940949265417e8a21b5936e906cf24a3177001",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/45940949265417e8a21b5936e906cf24a3177001"
    }
  ],
  "stats": {
    "total": 90,
    "additions": 55,
    "deletions": 35
  },
  "files": [
    {
      "sha": "2bf42407ced7dcf9ccb2e96bf2fab34f9b5452b2",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 19,
      "deletions": 0,
      "changes": 19,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5717c425a62c8e15a5936acdfa2bac2732aeb9b4/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5717c425a62c8e15a5936acdfa2bac2732aeb9b4/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=5717c425a62c8e15a5936acdfa2bac2732aeb9b4",
      "patch": "@@ -1,3 +1,22 @@\n+2020-05-27  Tom Tromey  <tom@tromey.com>\n+\n+\t* psymtab.c (partial_map_expand_apply)\n+\t(psym_find_pc_sect_compunit_symtab, psym_lookup_symbol)\n+\t(psym_lookup_global_symbol_language)\n+\t(psymtab_to_symtab, psym_find_last_source_symtab, dump_psymtab)\n+\t(psym_print_stats, psym_expand_symtabs_for_function)\n+\t(psym_map_symbol_filenames, psym_map_matching_symbols)\n+\t(psym_expand_symtabs_matching)\n+\t(partial_symtab::read_dependencies, maintenance_info_psymtabs)\n+\t(maintenance_check_psymtabs): Update.\n+\t* psympriv.h (struct partial_symtab) <readin_p,\n+\tget_compunit_symtab>: Add objfile parameter.\n+\t(struct standard_psymtab) <readin_p, get_compunit_symtab>:\n+\tLikewise.\n+\t* dwarf2/read.c (struct dwarf2_include_psymtab) <readin_p,\n+\tget_compunit_symtab>: Likewise.\n+\t(dwarf2_psymtab::expand_psymtab): Pass objfile argument.\n+\n 2020-05-27  Tom Tromey  <tom@tromey.com>\n \n \t* dwarf2/read.h (struct dwarf2_per_objfile) <obstack>: New"
    },
    {
      "sha": "59f3a08f6e00cec09492c310f73b9ab1d7d7e24b",
      "filename": "gdb/dwarf2/read.c",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5717c425a62c8e15a5936acdfa2bac2732aeb9b4/gdb/dwarf2/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5717c425a62c8e15a5936acdfa2bac2732aeb9b4/gdb/dwarf2/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.c?ref=5717c425a62c8e15a5936acdfa2bac2732aeb9b4",
      "patch": "@@ -6040,12 +6040,12 @@ struct dwarf2_include_psymtab : public partial_symtab\n     gdb_assert (false);\n   }\n \n-  bool readin_p () const override\n+  bool readin_p (struct objfile *objfile) const override\n   {\n-    return includer ()->readin_p ();\n+    return includer ()->readin_p (objfile);\n   }\n \n-  struct compunit_symtab *get_compunit_symtab () const override\n+  compunit_symtab *get_compunit_symtab (struct objfile *objfile) const override\n   {\n     return nullptr;\n   }\n@@ -8987,7 +8987,7 @@ dwarf2_psymtab::expand_psymtab (struct objfile *objfile)\n   expand_dependencies (objfile);\n \n   dw2_do_instantiate_symtab (per_cu_data, false);\n-  gdb_assert (get_compunit_symtab () != nullptr);\n+  gdb_assert (get_compunit_symtab (objfile) != nullptr);\n }\n \n /* Trivial hash function for die_info: the hash value of a DIE"
    },
    {
      "sha": "4622be389bd557f758c71168d4c3735c54906a7b",
      "filename": "gdb/psympriv.h",
      "status": "modified",
      "additions": 10,
      "deletions": 9,
      "changes": 19,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5717c425a62c8e15a5936acdfa2bac2732aeb9b4/gdb/psympriv.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5717c425a62c8e15a5936acdfa2bac2732aeb9b4/gdb/psympriv.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/psympriv.h?ref=5717c425a62c8e15a5936acdfa2bac2732aeb9b4",
      "patch": "@@ -147,13 +147,16 @@ struct partial_symtab\n   void expand_dependencies (struct objfile *);\n \n   /* Return true if the symtab corresponding to this psymtab has been\n-     readin.  */\n-  virtual bool readin_p () const = 0;\n+     read in in the context of this objfile.  */\n+  virtual bool readin_p (struct objfile *) const = 0;\n \n-  /* Return a pointer to the compunit allocated for this source file.\n-     Return nullptr if !readin or if there was no symtab.  */\n-  virtual struct compunit_symtab *get_compunit_symtab () const = 0;\n+  /* Return a pointer to the compunit allocated for this source file\n+     in the context of this objfile.\n \n+     Return nullptr if the compunit was not read in or if there was no\n+     symtab.  */\n+  virtual struct compunit_symtab *get_compunit_symtab\n+    (struct objfile *) const = 0;\n \n   /* Return the raw low text address of this partial_symtab.  */\n   CORE_ADDR raw_text_low () const\n@@ -319,14 +322,12 @@ struct standard_psymtab : public partial_symtab\n   {\n   }\n \n-  bool readin_p () const override\n+  bool readin_p (struct objfile *) const override\n   {\n     return readin;\n   }\n \n-  /* Return a pointer to the compunit allocated for this source file.\n-     Return nullptr if !readin or if there was no symtab.  */\n-  struct compunit_symtab *get_compunit_symtab () const override\n+  struct compunit_symtab *get_compunit_symtab (struct objfile *) const override\n   {\n     return compunit_symtab;\n   }"
    },
    {
      "sha": "5960c593fcfc24d4c3b904ecec269c62630dcf99",
      "filename": "gdb/psymtab.c",
      "status": "modified",
      "additions": 22,
      "deletions": 22,
      "changes": 44,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5717c425a62c8e15a5936acdfa2bac2732aeb9b4/gdb/psymtab.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5717c425a62c8e15a5936acdfa2bac2732aeb9b4/gdb/psymtab.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/psymtab.c?ref=5717c425a62c8e15a5936acdfa2bac2732aeb9b4",
      "patch": "@@ -132,7 +132,7 @@ partial_map_expand_apply (struct objfile *objfile,\n   gdb_assert (pst->user == NULL);\n \n   /* Don't visit already-expanded psymtabs.  */\n-  if (pst->readin_p ())\n+  if (pst->readin_p (objfile))\n     return 0;\n \n   /* This may expand more than one symtab, and we want to iterate over\n@@ -384,15 +384,15 @@ psym_find_pc_sect_compunit_symtab (struct objfile *objfile,\n \t\t\t\t\t\t    msymbol);\n   if (ps != NULL)\n     {\n-      if (warn_if_readin && ps->readin_p ())\n+      if (warn_if_readin && ps->readin_p (objfile))\n \t/* Might want to error() here (in case symtab is corrupt and\n \t   will cause a core dump), but maybe we can successfully\n \t   continue, so let's not.  */\n \twarning (_(\"\\\n (Internal error: pc %s in read in psymtab, but not in symtab.)\\n\"),\n \t\t paddress (objfile->arch (), pc));\n       psymtab_to_symtab (objfile, ps);\n-      return ps->get_compunit_symtab ();\n+      return ps->get_compunit_symtab (objfile);\n     }\n   return NULL;\n }\n@@ -485,9 +485,9 @@ psym_lookup_symbol (struct objfile *objfile,\n \n   for (partial_symtab *ps : require_partial_symbols (objfile, true))\n     {\n-      if (!ps->readin_p () && lookup_partial_symbol (objfile, ps,\n-\t\t\t\t\t\t     psym_lookup_name,\n-\t\t\t\t\t\t     psymtab_index, domain))\n+      if (!ps->readin_p (objfile)\n+\t  && lookup_partial_symbol (objfile, ps, psym_lookup_name,\n+\t\t\t\t    psymtab_index, domain))\n \t{\n \t  struct symbol *sym, *with_opaque = NULL;\n \t  struct compunit_symtab *stab = psymtab_to_symtab (objfile, ps);\n@@ -535,7 +535,7 @@ psym_lookup_global_symbol_language (struct objfile *objfile, const char *name,\n   for (partial_symtab *ps : require_partial_symbols (objfile, true))\n     {\n       struct partial_symbol *psym;\n-      if (ps->readin_p ())\n+      if (ps->readin_p (objfile))\n \tcontinue;\n \n       psym = lookup_partial_symbol (objfile, ps, lookup_name, 1, domain);\n@@ -748,11 +748,11 @@ psymtab_to_symtab (struct objfile *objfile, struct partial_symtab *pst)\n     pst = pst->user;\n \n   /* If it's been looked up before, return it.  */\n-  if (pst->get_compunit_symtab ())\n-    return pst->get_compunit_symtab ();\n+  if (pst->get_compunit_symtab (objfile))\n+    return pst->get_compunit_symtab (objfile);\n \n   /* If it has not yet been read in, read it.  */\n-  if (!pst->readin_p ())\n+  if (!pst->readin_p (objfile))\n     {\n       scoped_restore decrementer = increment_reading_symtab ();\n \n@@ -766,7 +766,7 @@ psymtab_to_symtab (struct objfile *objfile, struct partial_symtab *pst)\n       pst->read_symtab (objfile);\n     }\n \n-  return pst->get_compunit_symtab ();\n+  return pst->get_compunit_symtab (objfile);\n }\n \n /* Psymtab version of find_last_source_symtab.  See its definition in\n@@ -789,7 +789,7 @@ psym_find_last_source_symtab (struct objfile *ofp)\n \n   if (cs_pst)\n     {\n-      if (cs_pst->readin_p ())\n+      if (cs_pst->readin_p (ofp))\n \t{\n \t  internal_error (__FILE__, __LINE__,\n \t\t\t  _(\"select_source_symtab: \"\n@@ -946,11 +946,11 @@ dump_psymtab (struct objfile *objfile, struct partial_symtab *psymtab,\n   gdb_print_host_address (objfile, outfile);\n   fprintf_filtered (outfile, \")\\n\");\n \n-  if (psymtab->readin_p ())\n+  if (psymtab->readin_p (objfile))\n     {\n       fprintf_filtered (outfile,\n \t\t\t\"  Full symtab was read (at \");\n-      gdb_print_host_address (psymtab->get_compunit_symtab (), outfile);\n+      gdb_print_host_address (psymtab->get_compunit_symtab (objfile), outfile);\n       fprintf_filtered (outfile, \")\\n\");\n     }\n \n@@ -1004,7 +1004,7 @@ psym_print_stats (struct objfile *objfile)\n   i = 0;\n   for (partial_symtab *ps : require_partial_symbols (objfile, true))\n     {\n-      if (!ps->readin_p ())\n+      if (!ps->readin_p (objfile))\n \ti++;\n     }\n   printf_filtered (_(\"  Number of psym tables (not yet expanded): %d\\n\"), i);\n@@ -1047,7 +1047,7 @@ psym_expand_symtabs_for_function (struct objfile *objfile,\n \n   for (partial_symtab *ps : require_partial_symbols (objfile, true))\n     {\n-      if (ps->readin_p ())\n+      if (ps->readin_p (objfile))\n \tcontinue;\n \n       if ((lookup_partial_symbol (objfile, ps, lookup_name, 1, VAR_DOMAIN)\n@@ -1102,7 +1102,7 @@ psym_map_symbol_filenames (struct objfile *objfile,\n     {\n       const char *fullname;\n \n-      if (ps->readin_p ())\n+      if (ps->readin_p (objfile))\n \tcontinue;\n \n       /* We can skip shared psymtabs here, because any file name will be\n@@ -1182,7 +1182,7 @@ psym_map_matching_symbols\n   for (partial_symtab *ps : require_partial_symbols (objfile, true))\n     {\n       QUIT;\n-      if (ps->readin_p ()\n+      if (ps->readin_p (objfile)\n \t  || match_partial_symbol (objfile, ps, global, name, domain,\n \t\t\t\t   ordered_compare))\n \t{\n@@ -1315,7 +1315,7 @@ psym_expand_symtabs_matching\n     {\n       QUIT;\n \n-      if (ps->readin_p ())\n+      if (ps->readin_p (objfile))\n \tcontinue;\n \n       /* We skip shared psymtabs because file-matching doesn't apply\n@@ -1717,7 +1717,7 @@ partial_symtab::expand_dependencies (struct objfile *objfile)\n {\n   for (int i = 0; i < number_of_dependencies; ++i)\n     {\n-      if (!dependencies[i]->readin_p ()\n+      if (!dependencies[i]->readin_p (objfile)\n \t  && dependencies[i]->user == NULL)\n \t{\n \t  /* Inform about additional files to be read in.  */\n@@ -2028,7 +2028,7 @@ maintenance_info_psymtabs (const char *regexp, int from_tty)\n \t\t\t\t host_address_to_string (psymtab));\n \n \t\tprintf_filtered (\"    readin %s\\n\",\n-\t\t\t\t psymtab->readin_p () ? \"yes\" : \"no\");\n+\t\t\t\t psymtab->readin_p (objfile) ? \"yes\" : \"no\");\n \t\tprintf_filtered (\"    fullname %s\\n\",\n \t\t\t\t psymtab->fullname\n \t\t\t\t ? psymtab->fullname : \"(null)\");\n@@ -2124,7 +2124,7 @@ maintenance_check_psymtabs (const char *ignore, int from_tty)\n \t/* We don't call psymtab_to_symtab here because that may cause symtab\n \t   expansion.  When debugging a problem it helps if checkers leave\n \t   things unchanged.  */\n-\tcust = ps->get_compunit_symtab ();\n+\tcust = ps->get_compunit_symtab (objfile);\n \n \t/* First do some checks that don't require the associated symtab.  */\n \tif (ps->text_high (objfile) < ps->text_low (objfile))"
    }
  ]
}