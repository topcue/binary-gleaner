{
  "sha": "1a1c3b4cc17687091cff5a368bd6f13742bcfdf8",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MWExYzNiNGNjMTc2ODcwOTFjZmY1YTM2OGJkNmYxMzc0MmJjZmRmOA==",
  "commit": {
    "author": {
      "name": "Siddhesh Poyarekar",
      "email": "siddhesh@gotplt.org",
      "date": "2020-12-07T15:18:28Z"
    },
    "committer": {
      "name": "Siddhesh Poyarekar",
      "email": "siddhesh@gotplt.org",
      "date": "2020-12-07T15:18:28Z"
    },
    "message": "objcopy: Get input file stat after BFD open\n\nGet file state from the descriptor opened by copy_file for the input\nBFD.  This ensures continuity in the view of the input file through\nthe descriptor.  At the moment it is only to preserve timestamps\nrecorded at the point that we opened the file for input but in the\nnext patch this state will also be used to preserve ownership and\npermissions wherever applicable.\n\nbinutils/\n\n\t* objcopy.c (copy_file): New argument IN_STAT.  Return stat of\n\tibfd through it.\n\t(strip_main): Remove redundant stat calls.  adjust copy_file\n\tcalls.\n\t(copy_main): Likewise.",
    "tree": {
      "sha": "bba73125094ca7214e3c8613d89b943310891894",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/bba73125094ca7214e3c8613d89b943310891894"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/1a1c3b4cc17687091cff5a368bd6f13742bcfdf8",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1a1c3b4cc17687091cff5a368bd6f13742bcfdf8",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/1a1c3b4cc17687091cff5a368bd6f13742bcfdf8",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1a1c3b4cc17687091cff5a368bd6f13742bcfdf8/comments",
  "author": {
    "login": "siddhesh",
    "id": 158582,
    "node_id": "MDQ6VXNlcjE1ODU4Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/158582?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/siddhesh",
    "html_url": "https://github.com/siddhesh",
    "followers_url": "https://api.github.com/users/siddhesh/followers",
    "following_url": "https://api.github.com/users/siddhesh/following{/other_user}",
    "gists_url": "https://api.github.com/users/siddhesh/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/siddhesh/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/siddhesh/subscriptions",
    "organizations_url": "https://api.github.com/users/siddhesh/orgs",
    "repos_url": "https://api.github.com/users/siddhesh/repos",
    "events_url": "https://api.github.com/users/siddhesh/events{/privacy}",
    "received_events_url": "https://api.github.com/users/siddhesh/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "siddhesh",
    "id": 158582,
    "node_id": "MDQ6VXNlcjE1ODU4Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/158582?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/siddhesh",
    "html_url": "https://github.com/siddhesh",
    "followers_url": "https://api.github.com/users/siddhesh/followers",
    "following_url": "https://api.github.com/users/siddhesh/following{/other_user}",
    "gists_url": "https://api.github.com/users/siddhesh/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/siddhesh/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/siddhesh/subscriptions",
    "organizations_url": "https://api.github.com/users/siddhesh/orgs",
    "repos_url": "https://api.github.com/users/siddhesh/repos",
    "events_url": "https://api.github.com/users/siddhesh/events{/privacy}",
    "received_events_url": "https://api.github.com/users/siddhesh/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "365f5fb6d0f0da83817431a275e99e6f6babbe04",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/365f5fb6d0f0da83817431a275e99e6f6babbe04",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/365f5fb6d0f0da83817431a275e99e6f6babbe04"
    }
  ],
  "stats": {
    "total": 32,
    "additions": 16,
    "deletions": 16
  },
  "files": [
    {
      "sha": "a817cd86e0d32d4146bef08eda94cf1952cb38f9",
      "filename": "binutils/ChangeLog",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1a1c3b4cc17687091cff5a368bd6f13742bcfdf8/binutils/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1a1c3b4cc17687091cff5a368bd6f13742bcfdf8/binutils/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/ChangeLog?ref=1a1c3b4cc17687091cff5a368bd6f13742bcfdf8",
      "patch": "@@ -1,3 +1,12 @@\n+2020-12-07  Siddhesh Poyarekar  <siddhesh@sourceware.org>\n+\n+\tPR 26945\n+\t* objcopy.c (copy_file): New argument IN_STAT.  Return stat of\n+\tibfd through it.\n+\t(strip_main): Remove redundant stat calls.  adjust copy_file\n+\tcalls.\n+\t(copy_main): Likewise.\n+\n 2020-12-07  Siddhesh Poyarekar  <siddhesh@sourceware.org>\n \n \tPR 26945"
    },
    {
      "sha": "b6cf6ea4baa17cc622e491b19b199cc4c69f1173",
      "filename": "binutils/objcopy.c",
      "status": "modified",
      "additions": 7,
      "deletions": 16,
      "changes": 23,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1a1c3b4cc17687091cff5a368bd6f13742bcfdf8/binutils/objcopy.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1a1c3b4cc17687091cff5a368bd6f13742bcfdf8/binutils/objcopy.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/objcopy.c?ref=1a1c3b4cc17687091cff5a368bd6f13742bcfdf8",
      "patch": "@@ -3729,8 +3729,8 @@ set_long_section_mode (bfd *output_bfd, bfd *input_bfd, enum long_section_name_h\n \n static void\n copy_file (const char *input_filename, const char *output_filename, int ofd,\n-\t   const char *input_target,   const char *output_target,\n-\t   const bfd_arch_info_type *input_arch)\n+\t   struct stat *in_stat, const char *input_target,\n+\t   const char *output_target, const bfd_arch_info_type *input_arch)\n {\n   bfd *ibfd;\n   char **obj_matching;\n@@ -3749,7 +3749,7 @@ copy_file (const char *input_filename, const char *output_filename, int ofd,\n   /* To allow us to do \"strip *\" without dying on the first\n      non-object file, failures are nonfatal.  */\n   ibfd = bfd_openr (input_filename, input_target);\n-  if (ibfd == NULL)\n+  if (ibfd == NULL || fstat (fileno (ibfd->iostream), in_stat) != 0)\n     {\n       bfd_nonfatal_message (input_filename, NULL, NULL, NULL);\n       status = 1;\n@@ -4822,11 +4822,6 @@ strip_main (int argc, char *argv[])\n \t  continue;\n \t}\n \n-      if (preserve_dates)\n-\t/* No need to check the return value of stat().\n-\t   It has already been checked in get_file_size().  */\n-\tstat (argv[i], &statbuf);\n-\n       if (output_file == NULL\n \t  || filename_cmp (argv[i], output_file) == 0)\n \ttmpname = make_tempname (argv[i], &tmpfd);\n@@ -4842,7 +4837,8 @@ strip_main (int argc, char *argv[])\n \t}\n \n       status = 0;\n-      copy_file (argv[i], tmpname, tmpfd, input_target, output_target, NULL);\n+      copy_file (argv[i], tmpname, tmpfd, &statbuf, input_target,\n+\t\t output_target, NULL);\n       if (status == 0)\n \t{\n \t  if (preserve_dates)\n@@ -5899,11 +5895,6 @@ copy_main (int argc, char *argv[])\n       convert_efi_target (efi);\n     }\n \n-  if (preserve_dates)\n-    if (stat (input_filename, & statbuf) < 0)\n-      fatal (_(\"warning: could not locate '%s'.  System error message: %s\"),\n-\t     input_filename, strerror (errno));\n-\n   /* If there is no destination file, or the source and destination files\n      are the same, then create a temp and rename the result into the input.  */\n   if (output_filename == NULL\n@@ -5916,8 +5907,8 @@ copy_main (int argc, char *argv[])\n     fatal (_(\"warning: could not create temporary file whilst copying '%s', (error: %s)\"),\n \t   input_filename, strerror (errno));\n \n-  copy_file (input_filename, tmpname, tmpfd, input_target, output_target,\n-\t     input_arch);\n+  copy_file (input_filename, tmpname, tmpfd, &statbuf, input_target,\n+\t     output_target, input_arch);\n   if (status == 0)\n     {\n       if (preserve_dates)"
    }
  ]
}