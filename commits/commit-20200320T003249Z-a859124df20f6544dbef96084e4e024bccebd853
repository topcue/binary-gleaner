{
  "sha": "a859124df20f6544dbef96084e4e024bccebd853",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YTg1OTEyNGRmMjBmNjU0NGRiZWY5NjA4NGU0ZTAyNGJjY2ViZDg1Mw==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2020-03-17T21:01:47Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2020-03-20T00:32:49Z"
    },
    "message": "tidy elf_backend calls\n\nFunction pointers in elfNN_bed that are initialized by elfxx-target.h\nto non-zero values generally don't need a non-NULL test before calling\nthem.  Targets don't set a non-NULL function to NULL.  The one\nexception being elfnn-ia64.c and that exception is removed here.\n\n\t* elf.c (_bfd_elf_setup_sections): Don't test known non-NULL\n\tbackend functions for NULL before calling.\n\t(copy_special_section_fields, _bfd_elf_copy_private_bfd_data),\n\t(bfd_section_from_shdr, assign_section_numbers): Likewise.\n\t* elfcode.h (elf_write_relocs, elf_slurp_reloc_table): Likewise.\n\t* elfnn-ia64.c (ignore_errors): New function.\n\t(elf_backend_link_order_error_handler): Redefine as ignore_errors.",
    "tree": {
      "sha": "2722e09a084496b2acf4a26ae937df56cfbf0086",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/2722e09a084496b2acf4a26ae937df56cfbf0086"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/a859124df20f6544dbef96084e4e024bccebd853",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a859124df20f6544dbef96084e4e024bccebd853",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/a859124df20f6544dbef96084e4e024bccebd853",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a859124df20f6544dbef96084e4e024bccebd853/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "ce2ea1c7e055b3b70f03dc33db3b77b0d775f5de",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ce2ea1c7e055b3b70f03dc33db3b77b0d775f5de",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/ce2ea1c7e055b3b70f03dc33db3b77b0d775f5de"
    }
  ],
  "stats": {
    "total": 64,
    "additions": 37,
    "deletions": 27
  },
  "files": [
    {
      "sha": "6c2e26d24ef118b2324a96fefe5e4c43d0f60ded",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a859124df20f6544dbef96084e4e024bccebd853/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a859124df20f6544dbef96084e4e024bccebd853/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=a859124df20f6544dbef96084e4e024bccebd853",
      "patch": "@@ -1,3 +1,13 @@\n+2020-03-20  Alan Modra  <amodra@gmail.com>\n+\n+\t* elf.c (_bfd_elf_setup_sections): Don't test known non-NULL\n+\tbackend functions for NULL before calling.\n+\t(copy_special_section_fields, _bfd_elf_copy_private_bfd_data),\n+\t(bfd_section_from_shdr, assign_section_numbers): Likewise.\n+\t* elfcode.h (elf_write_relocs, elf_slurp_reloc_table): Likewise.\n+\t* elfnn-ia64.c (ignore_errors): New function.\n+\t(elf_backend_link_order_error_handler): Redefine as ignore_errors.\n+\n 2020-03-19  Nick Clifton  <nickc@redhat.com>\n \n \tPR 25676"
    },
    {
      "sha": "975eeb06b8058ef754a74e33f9c795e6e0b2d1be",
      "filename": "bfd/elf.c",
      "status": "modified",
      "additions": 15,
      "deletions": 18,
      "changes": 33,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a859124df20f6544dbef96084e4e024bccebd853/bfd/elf.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a859124df20f6544dbef96084e4e024bccebd853/bfd/elf.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf.c?ref=a859124df20f6544dbef96084e4e024bccebd853",
      "patch": "@@ -857,11 +857,10 @@ _bfd_elf_setup_sections (bfd *abfd)\n \t  if (elfsec == 0)\n \t    {\n \t      const struct elf_backend_data *bed = get_elf_backend_data (abfd);\n-\t      if (bed->link_order_error_handler)\n-\t\tbed->link_order_error_handler\n-\t\t  /* xgettext:c-format */\n-\t\t  (_(\"%pB: warning: sh_link not set for section `%pA'\"),\n-\t\t   abfd, s);\n+\t      bed->link_order_error_handler\n+\t\t/* xgettext:c-format */\n+\t\t(_(\"%pB: warning: sh_link not set for section `%pA'\"),\n+\t\t abfd, s);\n \t    }\n \t  else\n \t    {\n@@ -1424,9 +1423,8 @@ copy_special_section_fields (const bfd *ibfd,\n     }\n \n   /* Allow the target a chance to decide how these fields should be set.  */\n-  if (bed->elf_backend_copy_special_section_fields != NULL\n-      && bed->elf_backend_copy_special_section_fields\n-      (ibfd, obfd, iheader, oheader))\n+  if (bed->elf_backend_copy_special_section_fields (ibfd, obfd,\n+\t\t\t\t\t\t    iheader, oheader))\n     return TRUE;\n \n   /* We have an iheader which might match oheader, and which has non-zero\n@@ -1610,8 +1608,8 @@ _bfd_elf_copy_private_bfd_data (bfd *ibfd, bfd *obfd)\n \t{\n \t  /* Final attempt.  Call the backend copy function\n \t     with a NULL input section.  */\n-\t  if (bed->elf_backend_copy_special_section_fields != NULL)\n-\t    (void) bed->elf_backend_copy_special_section_fields (ibfd, obfd, NULL, oheader);\n+\t  (void) bed->elf_backend_copy_special_section_fields (ibfd, obfd,\n+\t\t\t\t\t\t\t       NULL, oheader);\n \t}\n     }\n \n@@ -2462,12 +2460,12 @@ bfd_section_from_shdr (bfd *abfd, unsigned int shindex)\n \t   sections.  */\n \tif (*p_hdr != NULL)\n \t  {\n-\t    if (bed->init_secondary_reloc_section == NULL\n-\t\t|| ! bed->init_secondary_reloc_section (abfd, hdr, name, shindex))\n+\t    if (!bed->init_secondary_reloc_section (abfd, hdr, name, shindex))\n \t      {\n \t\t_bfd_error_handler\n \t\t  /* xgettext:c-format */\n-\t\t  (_(\"%pB: warning: secondary relocation section '%s' for section %pA found - ignoring\"),\n+\t\t  (_(\"%pB: warning: secondary relocation section '%s' \"\n+\t\t     \"for section %pA found - ignoring\"),\n \t\t   abfd, name, target_sect);\n \t      }\n \t    goto success;\n@@ -3940,11 +3938,10 @@ assign_section_numbers (bfd *abfd, struct bfd_link_info *link_info)\n \t\t where s is NULL.  */\n \t      const struct elf_backend_data *bed\n \t\t= get_elf_backend_data (abfd);\n-\t      if (bed->link_order_error_handler)\n-\t\tbed->link_order_error_handler\n-\t\t  /* xgettext:c-format */\n-\t\t  (_(\"%pB: warning: sh_link not set for section `%pA'\"),\n-\t\t   abfd, sec);\n+\t      bed->link_order_error_handler\n+\t\t/* xgettext:c-format */\n+\t\t(_(\"%pB: warning: sh_link not set for section `%pA'\"),\n+\t\t abfd, sec);\n \t    }\n \t}\n "
    },
    {
      "sha": "68db3e9ee3da8888ad7d8429457c545f68edbe17",
      "filename": "bfd/elfcode.h",
      "status": "modified",
      "additions": 6,
      "deletions": 8,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a859124df20f6544dbef96084e4e024bccebd853/bfd/elfcode.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a859124df20f6544dbef96084e4e024bccebd853/bfd/elfcode.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elfcode.h?ref=a859124df20f6544dbef96084e4e024bccebd853",
      "patch": "@@ -987,12 +987,11 @@ elf_write_relocs (bfd *abfd, asection *sec, void *data)\n       (*swap_out) (abfd, &src_rela, dst_rela);\n     }\n \n-  if (bed->write_secondary_relocs != NULL)\n-    if (! bed->write_secondary_relocs (abfd, sec))\n-      {\n-\t*failedp = TRUE;\n-\treturn;\n-      }\n+  if (!bed->write_secondary_relocs (abfd, sec))\n+    {\n+      *failedp = TRUE;\n+      return;\n+    }\n }\n \n /* Write out the program headers.  */\n@@ -1596,8 +1595,7 @@ elf_slurp_reloc_table (bfd *abfd,\n \t\t\t\t\t      symbols, dynamic))\n     return FALSE;\n \n-  if (bed->slurp_secondary_relocs != NULL\n-      && ! bed->slurp_secondary_relocs (abfd, asect, symbols))\n+  if (!bed->slurp_secondary_relocs (abfd, asect, symbols))\n     return FALSE;\n \n   asect->relocation = relents;"
    },
    {
      "sha": "cd94158aba186f87687038027213b3b8d5db8c1c",
      "filename": "bfd/elfnn-ia64.c",
      "status": "modified",
      "additions": 6,
      "deletions": 1,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a859124df20f6544dbef96084e4e024bccebd853/bfd/elfnn-ia64.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a859124df20f6544dbef96084e4e024bccebd853/bfd/elfnn-ia64.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elfnn-ia64.c?ref=a859124df20f6544dbef96084e4e024bccebd853",
      "patch": "@@ -5015,6 +5015,11 @@ elfNN_hpux_backend_symbol_processing (bfd *abfd ATTRIBUTE_UNUSED,\n       break;\n     }\n }\n+\n+static void\n+ignore_errors (const char *fmt ATTRIBUTE_UNUSED, ...)\n+{\n+}\n \f\n #define TARGET_LITTLE_SYM\t\tia64_elfNN_le_vec\n #define TARGET_LITTLE_NAME\t\t\"elfNN-ia64-little\"\n@@ -5112,7 +5117,7 @@ elfNN_hpux_backend_symbol_processing (bfd *abfd ATTRIBUTE_UNUSED,\n    We don't want to flood users with so many error messages. We turn\n    off the warning for now. It will be turned on later when the Intel\n    compiler is fixed.   */\n-#define elf_backend_link_order_error_handler NULL\n+#define elf_backend_link_order_error_handler ignore_errors\n \n #include \"elfNN-target.h\"\n "
    }
  ]
}