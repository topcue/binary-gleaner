{
  "sha": "a0b57563b1317e0000a67a7bed4c1712403682f3",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YTBiNTc1NjNiMTMxN2UwMDAwYTY3YTdiZWQ0YzE3MTI0MDM2ODJmMw==",
  "commit": {
    "author": {
      "name": "Christian Biesinger",
      "email": "cbiesinger@google.com",
      "date": "2019-10-01T23:38:35Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-11-26T21:02:57Z"
    },
    "message": "Implement a thread pool\n\nThis adds a simple thread pool to gdb.  In the end, this seemed\npreferable to the approach taken in an earlier version of this series;\nnamely, starting threads in the parallel-foreach implementation.  This\napproach reduces the overhead of starting new threads, and also lets\nthe user control (in a subsequent patch) exactly how many worker\nthreads are running.\n\ngdb/ChangeLog\n2019-11-26  Christian Biesinger  <cbiesinger@google.com>\n\t    Tom Tromey  <tom@tromey.com>\n\n\t* gdbsupport/thread-pool.h: New file.\n\t* gdbsupport/thread-pool.c: New file.\n\t* Makefile.in (COMMON_SFILES): Add thread-pool.c.\n\t(HFILES_NO_SRCDIR): Add thread-pool.h.\n\nChange-Id: I597bb642780cb9d578ca92373d2a638efb44fe52",
    "tree": {
      "sha": "3a04ba4f878ec9d8dbfb03fd7a5fd345d8033fc9",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/3a04ba4f878ec9d8dbfb03fd7a5fd345d8033fc9"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/a0b57563b1317e0000a67a7bed4c1712403682f3",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a0b57563b1317e0000a67a7bed4c1712403682f3",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/a0b57563b1317e0000a67a7bed4c1712403682f3",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a0b57563b1317e0000a67a7bed4c1712403682f3/comments",
  "author": {
    "login": "cbiesinger",
    "id": 1483109,
    "node_id": "MDQ6VXNlcjE0ODMxMDk=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1483109?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/cbiesinger",
    "html_url": "https://github.com/cbiesinger",
    "followers_url": "https://api.github.com/users/cbiesinger/followers",
    "following_url": "https://api.github.com/users/cbiesinger/following{/other_user}",
    "gists_url": "https://api.github.com/users/cbiesinger/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/cbiesinger/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/cbiesinger/subscriptions",
    "organizations_url": "https://api.github.com/users/cbiesinger/orgs",
    "repos_url": "https://api.github.com/users/cbiesinger/repos",
    "events_url": "https://api.github.com/users/cbiesinger/events{/privacy}",
    "received_events_url": "https://api.github.com/users/cbiesinger/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "3b3978bca2a204a772563c8e121e4a02be72e802",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3b3978bca2a204a772563c8e121e4a02be72e802",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/3b3978bca2a204a772563c8e121e4a02be72e802"
    }
  ],
  "stats": {
    "total": 228,
    "additions": 228,
    "deletions": 0
  },
  "files": [
    {
      "sha": "7c4e2b845827547c0e56d9cafa5e2c765660203e",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a0b57563b1317e0000a67a7bed4c1712403682f3/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a0b57563b1317e0000a67a7bed4c1712403682f3/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=a0b57563b1317e0000a67a7bed4c1712403682f3",
      "patch": "@@ -1,3 +1,11 @@\n+2019-11-26  Christian Biesinger  <cbiesinger@google.com>\n+\t    Tom Tromey  <tom@tromey.com>\n+\n+\t* gdbsupport/thread-pool.h: New file.\n+\t* gdbsupport/thread-pool.c: New file.\n+\t* Makefile.in (COMMON_SFILES): Add thread-pool.c.\n+\t(HFILES_NO_SRCDIR): Add thread-pool.h.\n+\n 2019-11-26  Tom Tromey  <tom@tromey.com>\n \n \t* event-top.h (thread_local_segv_handler): Declare."
    },
    {
      "sha": "b07b11ec56941cc05a274d63f4a9d0da5adc5aca",
      "filename": "gdb/Makefile.in",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a0b57563b1317e0000a67a7bed4c1712403682f3/gdb/Makefile.in",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a0b57563b1317e0000a67a7bed4c1712403682f3/gdb/Makefile.in",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/Makefile.in?ref=a0b57563b1317e0000a67a7bed4c1712403682f3",
      "patch": "@@ -995,6 +995,7 @@ COMMON_SFILES = \\\n \tgdbsupport/signals.c \\\n \tgdbsupport/signals-state-save-restore.c \\\n \tgdbsupport/tdesc.c \\\n+\tgdbsupport/thread-pool.c \\\n \tgdbsupport/xml-utils.c \\\n \tcomplaints.c \\\n \tcompleter.c \\\n@@ -1499,6 +1500,7 @@ HFILES_NO_SRCDIR = \\\n \tgdbsupport/signals-state-save-restore.h \\\n \tgdbsupport/symbol.h \\\n \tgdbsupport/tdesc.h \\\n+\tgdbsupport/thread-pool.h \\\n \tgdbsupport/version.h \\\n \tgdbsupport/x86-xstate.h \\\n \tgdbsupport/xml-utils.h \\"
    },
    {
      "sha": "8282ea374bccc0bc479045a3ebb8dac33258f153",
      "filename": "gdb/gdbsupport/thread-pool.c",
      "status": "added",
      "additions": 128,
      "deletions": 0,
      "changes": 128,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a0b57563b1317e0000a67a7bed4c1712403682f3/gdb/gdbsupport/thread-pool.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a0b57563b1317e0000a67a7bed4c1712403682f3/gdb/gdbsupport/thread-pool.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbsupport/thread-pool.c?ref=a0b57563b1317e0000a67a7bed4c1712403682f3",
      "patch": "@@ -0,0 +1,128 @@\n+/* Thread pool\n+\n+   Copyright (C) 2019 Free Software Foundation, Inc.\n+\n+   This file is part of GDB.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+#include \"common-defs.h\"\n+\n+#if CXX_STD_THREAD\n+\n+#include \"gdbsupport/thread-pool.h\"\n+#include \"gdbsupport/alt-stack.h\"\n+#include \"gdbsupport/block-signals.h\"\n+#include <algorithm>\n+\n+namespace gdb\n+{\n+\n+/* The thread pool detach()s its threads, so that the threads will not\n+   prevent the process from exiting.  However, it was discovered that\n+   if any detached threads were still waiting on a condition variable,\n+   then the condition variable's destructor would wait for the threads\n+   to exit -- defeating the purpose.\n+\n+   Allocating the thread pool on the heap and simply \"leaking\" it\n+   avoids this problem.\n+*/\n+thread_pool *thread_pool::g_thread_pool = new thread_pool ();\n+\n+thread_pool::~thread_pool ()\n+{\n+  /* Because this is a singleton, we don't need to clean up.  The\n+     threads are detached so that they won't prevent process exit.\n+     And, cleaning up here would be actively harmful in at least one\n+     case -- see the comment by the definition of g_thread_pool.  */\n+}\n+\n+void\n+thread_pool::set_thread_count (size_t num_threads)\n+{\n+  std::lock_guard<std::mutex> guard (m_tasks_mutex);\n+\n+  /* If the new size is larger, start some new threads.  */\n+  if (m_thread_count < num_threads)\n+    {\n+      /* Ensure that signals used by gdb are blocked in the new\n+\t threads.  */\n+      block_signals blocker;\n+      for (size_t i = m_thread_count; i < num_threads; ++i)\n+\t{\n+\t  std::thread thread (&thread_pool::thread_function, this);\n+\t  thread.detach ();\n+\t}\n+    }\n+  /* If the new size is smaller, terminate some existing threads.  */\n+  if (num_threads < m_thread_count)\n+    {\n+      for (size_t i = num_threads; i < m_thread_count; ++i)\n+\tm_tasks.emplace ();\n+      m_tasks_cv.notify_all ();\n+    }\n+\n+  m_thread_count = num_threads;\n+}\n+\n+std::future<void>\n+thread_pool::post_task (std::function<void ()> func)\n+{\n+  std::packaged_task<void ()> t (func);\n+  std::future<void> f = t.get_future ();\n+\n+  if (m_thread_count == 0)\n+    {\n+      /* Just execute it now.  */\n+      t ();\n+    }\n+  else\n+    {\n+      std::lock_guard<std::mutex> guard (m_tasks_mutex);\n+      m_tasks.emplace (std::move (t));\n+      m_tasks_cv.notify_one ();\n+    }\n+  return f;\n+}\n+\n+void\n+thread_pool::thread_function ()\n+{\n+  /* Ensure that SIGSEGV is delivered to an alternate signal\n+     stack.  */\n+  gdb::alternate_signal_stack signal_stack;\n+\n+  while (true)\n+    {\n+      optional<task> t;\n+\n+      {\n+\t/* We want to hold the lock while examining the task list, but\n+\t   not while invoking the task function.  */\n+\tstd::unique_lock<std::mutex> guard (m_tasks_mutex);\n+\twhile (m_tasks.empty ())\n+\t  m_tasks_cv.wait (guard);\n+\tt = std::move (m_tasks.front());\n+\tm_tasks.pop ();\n+      }\n+\n+      if (!t.has_value ())\n+\tbreak;\n+      (*t) ();\n+    }\n+}\n+\n+}\n+\n+#endif /* CXX_STD_THREAD */"
    },
    {
      "sha": "e1fcb38a581c3775a2708bb943bd0191d294018d",
      "filename": "gdb/gdbsupport/thread-pool.h",
      "status": "added",
      "additions": 90,
      "deletions": 0,
      "changes": 90,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a0b57563b1317e0000a67a7bed4c1712403682f3/gdb/gdbsupport/thread-pool.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a0b57563b1317e0000a67a7bed4c1712403682f3/gdb/gdbsupport/thread-pool.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbsupport/thread-pool.h?ref=a0b57563b1317e0000a67a7bed4c1712403682f3",
      "patch": "@@ -0,0 +1,90 @@\n+/* Thread pool\n+\n+   Copyright (C) 2019 Free Software Foundation, Inc.\n+\n+   This file is part of GDB.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+#ifndef GDBSUPPORT_THREAD_POOL_H\n+#define GDBSUPPORT_THREAD_POOL_H\n+\n+#include <queue>\n+#include <thread>\n+#include <vector>\n+#include <functional>\n+#include <mutex>\n+#include <condition_variable>\n+#include <future>\n+#include \"gdbsupport/gdb_optional.h\"\n+\n+namespace gdb\n+{\n+\n+/* A thread pool.\n+\n+   There is a single global thread pool, see g_thread_pool.  Tasks can\n+   be submitted to the thread pool.  They will be processed in worker\n+   threads as time allows.  */\n+class thread_pool\n+{\n+public:\n+  /* The sole global thread pool.  */\n+  static thread_pool *g_thread_pool;\n+\n+  ~thread_pool ();\n+  DISABLE_COPY_AND_ASSIGN (thread_pool);\n+\n+  /* Set the thread count of this thread pool.  By default, no threads\n+     are created -- the thread count must be set first.  */\n+  void set_thread_count (size_t num_threads);\n+\n+  /* Return the number of executing threads.  */\n+  size_t thread_count () const\n+  {\n+    return m_thread_count;\n+  }\n+\n+  /* Post a task to the thread pool.  A future is returned, which can\n+     be used to wait for the result.  */\n+  std::future<void> post_task (std::function<void ()> func);\n+\n+private:\n+\n+  thread_pool () = default;\n+\n+  /* The callback for each worker thread.  */\n+  void thread_function ();\n+\n+  /* The current thread count.  */\n+  size_t m_thread_count = 0;\n+\n+  /* A convenience typedef for the type of a task.  */\n+  typedef std::packaged_task<void ()> task;\n+\n+  /* The tasks that have not been processed yet.  An optional is used\n+     to represent a task.  If the optional is empty, then this means\n+     that the receiving thread should terminate.  If the optional is\n+     non-empty, then it is an actual task to evaluate.  */\n+  std::queue<optional<task>> m_tasks;\n+\n+  /* A condition variable and mutex that are used for communication\n+     between the main thread and the worker threads.  */\n+  std::condition_variable m_tasks_cv;\n+  std::mutex m_tasks_mutex;\n+};\n+\n+}\n+\n+#endif /* GDBSUPPORT_THREAD_POOL_H */"
    }
  ]
}