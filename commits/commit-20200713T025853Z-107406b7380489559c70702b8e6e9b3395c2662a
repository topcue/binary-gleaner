{
  "sha": "107406b7380489559c70702b8e6e9b3395c2662a",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MTA3NDA2YjczODA0ODk1NTljNzA3MDJiOGU2ZTliMzM5NWMyNjYyYQ==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-07-13T02:58:53Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2020-07-13T02:58:53Z"
    },
    "message": "gdb: remove TYPE_BIT_STRIDE\n\nRemove the macro and add a `bit_stride` method to `struct range_bounds`,\nwhich does the byte -> bit conversion if needed.\n\nAdd a convenience `bit_stride` method to `struct type` as well.  I don't\nreally understand why the bit/byte stride is stored in the data\nstructure for bounds.  Maybe it was just put there because\n`range_bounds` was already a data structure specific to TYPE_CODE_RANGE\ntypes?  If the stride is indeed not related to the bounds, then I find\nit more logical to do `my_range_type->bit_stride ()` than\n`my_range_type->bounds ()->bit_stride ()`, hence the convenience\nfunction on `struct type`.\n\ngdb/ChangeLog:\n\n\t* gdbtypes.h (struct range_bounds) <bit_stride>: New method.\n\t(struct type) <bit_stride>: New method.\n\t(TYPE_BIT_STRIDE): Remove.\n\t* gdbtypes.c (update_static_array_size): Use type::bit_stride.\n\nChange-Id: I6ecc1cfefdc20711fa8f188a94a05c1e116c9922",
    "tree": {
      "sha": "db0420345533a1a7e5fdb6b4dc327058c9d79fff",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/db0420345533a1a7e5fdb6b4dc327058c9d79fff"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/107406b7380489559c70702b8e6e9b3395c2662a",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/107406b7380489559c70702b8e6e9b3395c2662a",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/107406b7380489559c70702b8e6e9b3395c2662a",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/107406b7380489559c70702b8e6e9b3395c2662a/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "bb789949e90d4580ce0ce9034c632d3e7f39a0ac",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/bb789949e90d4580ce0ce9034c632d3e7f39a0ac",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/bb789949e90d4580ce0ce9034c632d3e7f39a0ac"
    }
  ],
  "stats": {
    "total": 28,
    "additions": 22,
    "deletions": 6
  },
  "files": [
    {
      "sha": "444315e9733ee1f26686dca289953e7e7b7bd946",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/107406b7380489559c70702b8e6e9b3395c2662a/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/107406b7380489559c70702b8e6e9b3395c2662a/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=107406b7380489559c70702b8e6e9b3395c2662a",
      "patch": "@@ -1,3 +1,10 @@\n+2020-07-12  Simon Marchi  <simon.marchi@efficios.com>\n+\n+\t* gdbtypes.h (struct range_bounds) <bit_stride>: New method.\n+\t(struct type) <bit_stride>: New method.\n+\t(TYPE_BIT_STRIDE): Remove.\n+\t* gdbtypes.c (update_static_array_size): Use type::bit_stride.\n+\n 2020-07-12  Simon Marchi  <simon.marchi@efficios.com>\n \n \t* gdbtypes.h (TYPE_ARRAY_LOWER_BOUND_VALUE,"
    },
    {
      "sha": "e87648813ec59014ab0276300f60b6c8ac21bec4",
      "filename": "gdb/gdbtypes.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/107406b7380489559c70702b8e6e9b3395c2662a/gdb/gdbtypes.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/107406b7380489559c70702b8e6e9b3395c2662a/gdb/gdbtypes.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbtypes.c?ref=107406b7380489559c70702b8e6e9b3395c2662a",
      "patch": "@@ -1205,7 +1205,7 @@ update_static_array_size (struct type *type)\n \t arrays bit size field.  */\n       stride = TYPE_FIELD_BITSIZE (type, 0);\n       if (stride == 0)\n-\tstride = TYPE_BIT_STRIDE (range_type);\n+\tstride = range_type->bit_stride ();\n \n       if (get_discrete_bounds (range_type, &low_bound, &high_bound) < 0)\n \tlow_bound = high_bound = 0;"
    },
    {
      "sha": "bf6b270515ff335de020cf54508902bc6aeaf47f",
      "filename": "gdb/gdbtypes.h",
      "status": "modified",
      "additions": 14,
      "deletions": 5,
      "changes": 19,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/107406b7380489559c70702b8e6e9b3395c2662a/gdb/gdbtypes.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/107406b7380489559c70702b8e6e9b3395c2662a/gdb/gdbtypes.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbtypes.h?ref=107406b7380489559c70702b8e6e9b3395c2662a",
      "patch": "@@ -757,6 +757,14 @@ struct field\n \n struct range_bounds\n {\n+  ULONGEST bit_stride () const\n+  {\n+    if (this->flag_is_byte_stride)\n+      return this->stride.const_val () * 8;\n+    else\n+      return this->stride.const_val ();\n+  }\n+\n   /* * Low bound of range.  */\n \n   struct dynamic_prop low;\n@@ -1045,6 +1053,11 @@ struct type\n     this->main_type->flds_bnds.bounds = bounds;\n   }\n \n+  ULONGEST bit_stride () const\n+  {\n+    return this->bounds ()->bit_stride ();\n+  }\n+\n   /* * Return the dynamic property of the requested KIND from this type's\n      list of dynamic properties.  */\n   dynamic_prop *dyn_prop (dynamic_prop_node_kind kind) const;\n@@ -1594,10 +1607,6 @@ extern unsigned type_align (struct type *);\n    space in struct type.  */\n extern bool set_type_align (struct type *, ULONGEST);\n \n-#define TYPE_BIT_STRIDE(range_type) \\\n-  ((range_type)->bounds ()->stride.const_val () \\\n-   * ((range_type)->bounds ()->flag_is_byte_stride ? 8 : 1))\n-\n /* Property accessors for the type data location.  */\n #define TYPE_DATA_LOCATION(thistype) \\\n   ((thistype)->dyn_prop (DYN_PROP_DATA_LOCATION))\n@@ -1629,7 +1638,7 @@ extern bool set_type_align (struct type *, ULONGEST);\n    index type.  */\n \n #define TYPE_ARRAY_BIT_STRIDE(arraytype) \\\n-  (TYPE_BIT_STRIDE(((arraytype)->index_type ())))\n+  ((arraytype)->index_type ()->bounds ()->bit_stride ())\n \n /* C++ */\n "
    }
  ]
}