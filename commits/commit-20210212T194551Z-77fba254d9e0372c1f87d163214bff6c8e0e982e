{
  "sha": "77fba254d9e0372c1f87d163214bff6c8e0e982e",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NzdmYmEyNTRkOWUwMzcyYzFmODdkMTYzMjE0YmZmNmM4ZTBlOTgyZQ==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2021-02-12T14:33:48Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2021-02-12T19:45:51Z"
    },
    "message": "Add stdio support to gdbreplay\n\nI've been using gdbreplay to help debug an intermittent failure, and I\nwanted it to be a little simpler to use.  This patch adds support for\n\"-\" as the \"address\" argument.  With this patch you can do:\n\n    (gdb) target remote | gdbreplay logfile -\n\n... and not have to start gdbreplay in a separate shell.\n\n2021-02-12  Tom Tromey  <tromey@adacore.com>\n\n\t* gdbreplay.cc (remote_desc): Remove.\n\t(remote_desc_in, remote_desc_out): New globals.\n\t(remote_close): Update.\n\t(remote_open): Handle \"-\".\n\t(remote_open): Update.\n\t(logchar): Log to stderr.\n\t(expect, play): Update.",
    "tree": {
      "sha": "0bee94ed7aeb692458753ac0830955e764bf75a3",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/0bee94ed7aeb692458753ac0830955e764bf75a3"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/77fba254d9e0372c1f87d163214bff6c8e0e982e",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/77fba254d9e0372c1f87d163214bff6c8e0e982e",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/77fba254d9e0372c1f87d163214bff6c8e0e982e",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/77fba254d9e0372c1f87d163214bff6c8e0e982e/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "089436f78743628b22e87c2f8d32bd5f9d818f5a",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/089436f78743628b22e87c2f8d32bd5f9d818f5a",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/089436f78743628b22e87c2f8d32bd5f9d818f5a"
    }
  ],
  "stats": {
    "total": 66,
    "additions": 45,
    "deletions": 21
  },
  "files": [
    {
      "sha": "0c93ae0c08697958dd60e5ca143c0dc02d231a70",
      "filename": "gdbserver/ChangeLog",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/77fba254d9e0372c1f87d163214bff6c8e0e982e/gdbserver/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/77fba254d9e0372c1f87d163214bff6c8e0e982e/gdbserver/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/ChangeLog?ref=77fba254d9e0372c1f87d163214bff6c8e0e982e",
      "patch": "@@ -1,3 +1,13 @@\n+2021-02-12  Tom Tromey  <tromey@adacore.com>\n+\n+\t* gdbreplay.cc (remote_desc): Remove.\n+\t(remote_desc_in, remote_desc_out): New globals.\n+\t(remote_close): Update.\n+\t(remote_open): Handle \"-\".\n+\t(remote_open): Update.\n+\t(logchar): Log to stderr.\n+\t(expect, play): Update.\n+\n 2021-02-12  Tom Tromey  <tromey@adacore.com>\n \n \t* gdbreplay.cc (remote_open): Constify."
    },
    {
      "sha": "864a31e58f73b8a6064a1473c5377ee6c3833744",
      "filename": "gdbserver/gdbreplay.cc",
      "status": "modified",
      "additions": 35,
      "deletions": 21,
      "changes": 56,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/77fba254d9e0372c1f87d163214bff6c8e0e982e/gdbserver/gdbreplay.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/77fba254d9e0372c1f87d163214bff6c8e0e982e/gdbserver/gdbreplay.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/gdbreplay.cc?ref=77fba254d9e0372c1f87d163214bff6c8e0e982e",
      "patch": "@@ -66,7 +66,8 @@ typedef int socklen_t;\n /* Sort of a hack... */\n #define EOL (EOF - 1)\n \n-static int remote_desc;\n+static int remote_desc_in;\n+static int remote_desc_out;\n \n #ifdef __MINGW32CE__\n \n@@ -141,9 +142,12 @@ static void\n remote_close (void)\n {\n #ifdef USE_WIN32API\n-  closesocket (remote_desc);\n+  gdb_assert (remote_desc_in == remote_desc_out);\n+  closesocket (remote_desc_in);\n #else\n-  close (remote_desc);\n+  close (remote_desc_in);\n+  if (remote_desc_in != remote_desc_out)\n+    close (remote_desc_out);\n #endif\n }\n \n@@ -153,6 +157,15 @@ remote_close (void)\n static void\n remote_open (const char *name)\n {\n+#ifndef USE_WIN32API\n+  if (strcmp (name, \"-\") == 0)\n+    {\n+      remote_desc_in = 0;\n+      remote_desc_out = 1;\n+      return;\n+    }\n+#endif\n+\n   const char *last_colon = strrchr (name, ':');\n \n   if (last_colon == NULL)\n@@ -241,7 +254,7 @@ remote_open (const char *name)\n     perror_with_name (\"Can't bind address\");\n \n   if (p->ai_socktype == SOCK_DGRAM)\n-    remote_desc = tmp_desc;\n+    remote_desc_in = tmp_desc;\n   else\n     {\n       struct sockaddr_storage sockaddr;\n@@ -251,10 +264,10 @@ remote_open (const char *name)\n       if (listen (tmp_desc, 1) != 0)\n \tperror_with_name (\"Can't listen on socket\");\n \n-      remote_desc = accept (tmp_desc, (struct sockaddr *) &sockaddr,\n-\t\t\t    &sockaddrsize);\n+      remote_desc_in = accept (tmp_desc, (struct sockaddr *) &sockaddr,\n+\t\t\t       &sockaddrsize);\n \n-      if (remote_desc == -1)\n+      if (remote_desc_in == -1)\n \tperror_with_name (\"Accept failed\");\n \n       /* Enable TCP keep alive process. */\n@@ -265,7 +278,7 @@ remote_open (const char *name)\n       /* Tell TCP not to delay small packets.  This greatly speeds up\n \t interactive response. */\n       tmp = 1;\n-      setsockopt (remote_desc, IPPROTO_TCP, TCP_NODELAY,\n+      setsockopt (remote_desc_in, IPPROTO_TCP, TCP_NODELAY,\n \t\t  (char *) &tmp, sizeof (tmp));\n \n       if (getnameinfo ((struct sockaddr *) &sockaddr, sockaddrsize,\n@@ -290,8 +303,9 @@ remote_open (const char *name)\n     }\n \n #if defined(F_SETFL) && defined (FASYNC)\n-  fcntl (remote_desc, F_SETFL, FASYNC);\n+  fcntl (remote_desc_in, F_SETFL, FASYNC);\n #endif\n+  remote_desc_out = remote_desc_in;\n \n   fprintf (stderr, \"Replay logfile using %s\\n\", name);\n   fflush (stderr);\n@@ -306,8 +320,8 @@ logchar (FILE *fp)\n   ch = fgetc (fp);\n   if (ch != '\\r')\n     {\n-      fputc (ch, stdout);\n-      fflush (stdout);\n+      fputc (ch, stderr);\n+      fflush (stderr);\n     }\n   switch (ch)\n     {\n@@ -321,16 +335,16 @@ logchar (FILE *fp)\n \t  ungetc (ch, fp);\n \t  ch = '\\r';\n \t}\n-      fputc (ch == EOL ? '\\n' : '\\r', stdout);\n-      fflush (stdout);\n+      fputc (ch == EOL ? '\\n' : '\\r', stderr);\n+      fflush (stderr);\n       break;\n     case '\\n':\n       ch = EOL;\n       break;\n     case '\\\\':\n       ch = fgetc (fp);\n-      fputc (ch, stdout);\n-      fflush (stdout);\n+      fputc (ch, stderr);\n+      fflush (stderr);\n       switch (ch)\n \t{\n \tcase '\\\\':\n@@ -355,12 +369,12 @@ logchar (FILE *fp)\n \t  break;\n \tcase 'x':\n \t  ch2 = fgetc (fp);\n-\t  fputc (ch2, stdout);\n-\t  fflush (stdout);\n+\t  fputc (ch2, stderr);\n+\t  fflush (stderr);\n \t  ch = fromhex (ch2) << 4;\n \t  ch2 = fgetc (fp);\n-\t  fputc (ch2, stdout);\n-\t  fflush (stdout);\n+\t  fputc (ch2, stderr);\n+\t  fflush (stderr);\n \t  ch |= fromhex (ch2);\n \t  break;\n \tdefault:\n@@ -403,7 +417,7 @@ expect (FILE *fp)\n       fromlog = logchar (fp);\n       if (fromlog == EOL)\n \tbreak;\n-      fromgdb = gdbchar (remote_desc);\n+      fromgdb = gdbchar (remote_desc_in);\n       if (fromgdb < 0)\n \tremote_error (\"Error during read from gdb\");\n     }\n@@ -433,7 +447,7 @@ play (FILE *fp)\n   while ((fromlog = logchar (fp)) != EOL)\n     {\n       ch = fromlog;\n-      if (write (remote_desc, &ch, 1) != 1)\n+      if (write (remote_desc_out, &ch, 1) != 1)\n \tremote_error (\"Error during write to gdb\");\n     }\n }"
    }
  ]
}