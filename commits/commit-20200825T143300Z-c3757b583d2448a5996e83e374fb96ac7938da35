{
  "sha": "c3757b583d2448a5996e83e374fb96ac7938da35",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YzM3NTdiNTgzZDI0NDhhNTk5NmU4M2UzNzRmYjk2YWM3OTM4ZGEzNQ==",
  "commit": {
    "author": {
      "name": "Mark Wielaard",
      "email": "mark@klomp.org",
      "date": "2020-08-25T14:33:00Z"
    },
    "committer": {
      "name": "Nick Clifton",
      "email": "nickc@redhat.com",
      "date": "2020-08-25T14:33:00Z"
    },
    "message": "Fix the linker's handling of DWARF-5 line number tables.\n\nWhen building with gcc with -gdwarf-5 ld tests (including ld-elf/dwarf.exp)\nfail because they try to read the .debug_ranges section. But DWARF5\nintroduces a new .debug_rnglists section that encodes the address ranges\nmore efficiently. Implement reading the debug_rnglists in bfd/dwarf2.c.\nWhich makes all tests pass again and fixes several gcc testsuite tests\nwhen defaulting to DWARF5.\n\n\t*  dwarf2.c (struct dwarf2_debug_file): Add dwarf_rnglists_buffer\n\tand dwarf_rnglists_size fields.\n\t(dwarf_debug_sections): Add debug_rnglists.\n\t(dwarf_debug_section_enum): Likewise.\n\t(read_debug_rnglists): New function.\n\t(read_rangelist): New function to call either read_ranges or\n\tread_rnglists. Rename original function to...\n\t(read_ranges): ...this.\n\t(read_rnglists): New function.",
    "tree": {
      "sha": "d4bb1bd641b824dea293b0e2052c9b3788b5bbf0",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/d4bb1bd641b824dea293b0e2052c9b3788b5bbf0"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/c3757b583d2448a5996e83e374fb96ac7938da35",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c3757b583d2448a5996e83e374fb96ac7938da35",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/c3757b583d2448a5996e83e374fb96ac7938da35",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c3757b583d2448a5996e83e374fb96ac7938da35/comments",
  "author": null,
  "committer": {
    "login": "nickclifton",
    "id": 31441682,
    "node_id": "MDQ6VXNlcjMxNDQxNjgy",
    "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickclifton",
    "html_url": "https://github.com/nickclifton",
    "followers_url": "https://api.github.com/users/nickclifton/followers",
    "following_url": "https://api.github.com/users/nickclifton/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions",
    "organizations_url": "https://api.github.com/users/nickclifton/orgs",
    "repos_url": "https://api.github.com/users/nickclifton/repos",
    "events_url": "https://api.github.com/users/nickclifton/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickclifton/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "b04aa1fc8c9d4a79e6293a3a1df7507052afedf3",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b04aa1fc8c9d4a79e6293a3a1df7507052afedf3",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/b04aa1fc8c9d4a79e6293a3a1df7507052afedf3"
    }
  ],
  "stats": {
    "total": 138,
    "additions": 136,
    "deletions": 2
  },
  "files": [
    {
      "sha": "1766a0850daeeedea7c00e034d5c146144cae8ae",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c3757b583d2448a5996e83e374fb96ac7938da35/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c3757b583d2448a5996e83e374fb96ac7938da35/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=c3757b583d2448a5996e83e374fb96ac7938da35",
      "patch": "@@ -1,3 +1,15 @@\n+2020-08-25  Mark Wielaard  <mark@klomp.org>\n+\n+\t*  dwarf2.c (struct dwarf2_debug_file): Add dwarf_rnglists_buffer\n+\tand dwarf_rnglists_size fields.\n+\t(dwarf_debug_sections): Add debug_rnglists.\n+\t(dwarf_debug_section_enum): Likewise.\n+\t(read_debug_rnglists): New function.\n+\t(read_rangelist): New function to call either read_ranges or\n+\tread_rnglists. Rename original function to...\n+\t(read_ranges): ...this.\n+\t(read_rnglists): New function.\n+\n 2020-08-25  Alan Modra  <amodra@gmail.com>\n \n \tPR 26505"
    },
    {
      "sha": "b8f0008a10da531c8119d154b03cf5713f6d76b4",
      "filename": "bfd/dwarf2.c",
      "status": "modified",
      "additions": 124,
      "deletions": 2,
      "changes": 126,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c3757b583d2448a5996e83e374fb96ac7938da35/bfd/dwarf2.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c3757b583d2448a5996e83e374fb96ac7938da35/bfd/dwarf2.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/dwarf2.c?ref=c3757b583d2448a5996e83e374fb96ac7938da35",
      "patch": "@@ -130,6 +130,12 @@ struct dwarf2_debug_file\n   /* Length of the loaded .debug_ranges section.  */\n   bfd_size_type dwarf_ranges_size;\n \n+  /* Pointer to the .debug_rnglists section loaded into memory.  */\n+  bfd_byte *dwarf_rnglists_buffer;\n+\n+  /* Length of the loaded .debug_rnglists section.  */\n+  bfd_size_type dwarf_rnglists_size;\n+\n   /* A list of all previously read comp_units.  */\n   struct comp_unit *all_comp_units;\n \n@@ -327,6 +333,7 @@ const struct dwarf_debug_section dwarf_debug_sections[] =\n   { \".debug_pubnames\",\t\t\".zdebug_pubnames\" },\n   { \".debug_pubtypes\",\t\t\".zdebug_pubtypes\" },\n   { \".debug_ranges\",\t\t\".zdebug_ranges\" },\n+  { \".debug_rnglists\",\t\t\".zdebug_rnglist\" },\n   { \".debug_static_func\",\t\".zdebug_static_func\" },\n   { \".debug_static_vars\",\t\".zdebug_static_vars\" },\n   { \".debug_str\",\t\t\".zdebug_str\", },\n@@ -360,6 +367,7 @@ enum dwarf_debug_section_enum\n   debug_pubnames,\n   debug_pubtypes,\n   debug_ranges,\n+  debug_rnglists,\n   debug_static_func,\n   debug_static_vars,\n   debug_str,\n@@ -2634,6 +2642,19 @@ read_debug_ranges (struct comp_unit * unit)\n \t\t       &file->dwarf_ranges_buffer, &file->dwarf_ranges_size);\n }\n \n+/* Read in the .debug_rnglists section for future reference.  */\n+\n+static bfd_boolean\n+read_debug_rnglists (struct comp_unit * unit)\n+{\n+  struct dwarf2_debug *stash = unit->stash;\n+  struct dwarf2_debug_file *file = unit->file;\n+\n+  return read_section (unit->abfd, &stash->debug_sections[debug_rnglists],\n+\t\t       file->syms, 0,\n+\t\t       &file->dwarf_rnglists_buffer, &file->dwarf_rnglists_size);\n+}\n+\n /* Function table functions.  */\n \n static int\n@@ -3124,8 +3145,8 @@ find_abstract_instance (struct comp_unit *unit,\n }\n \n static bfd_boolean\n-read_rangelist (struct comp_unit *unit, struct arange *arange,\n-\t\tbfd_uint64_t offset)\n+read_ranges (struct comp_unit *unit, struct arange *arange,\n+\t     bfd_uint64_t offset)\n {\n   bfd_byte *ranges_ptr;\n   bfd_byte *ranges_end;\n@@ -3170,6 +3191,107 @@ read_rangelist (struct comp_unit *unit, struct arange *arange,\n   return TRUE;\n }\n \n+static bfd_boolean\n+read_rnglists (struct comp_unit *unit, struct arange *arange,\n+\t       bfd_uint64_t offset)\n+{\n+  bfd_byte *rngs_ptr;\n+  bfd_byte *rngs_end;\n+  bfd_vma base_address = unit->base_address;\n+  bfd_vma low_pc;\n+  bfd_vma high_pc;\n+  bfd *abfd = unit->abfd;\n+\n+  if (! unit->file->dwarf_rnglists_buffer)\n+    {\n+      if (! read_debug_rnglists (unit))\n+\treturn FALSE;\n+    }\n+\n+  rngs_ptr = unit->file->dwarf_rnglists_buffer + offset;\n+  if (rngs_ptr < unit->file->dwarf_rnglists_buffer)\n+    return FALSE;\n+  rngs_end = unit->file->dwarf_rnglists_buffer;\n+  rngs_end +=  unit->file->dwarf_rnglists_size;\n+\n+  for (;;)\n+    {\n+      enum dwarf_range_list_entry rlet;\n+      unsigned int bytes_read;\n+\n+      if (rngs_ptr + 1 > rngs_end)\n+\treturn FALSE;\n+\n+      rlet = read_1_byte (abfd, rngs_ptr, rngs_end);\n+      rngs_ptr++;\n+\n+      switch (rlet)\n+\t{\n+\tcase DW_RLE_end_of_list:\n+\t  return TRUE;\n+\n+\tcase DW_RLE_base_address:\n+\t  if (rngs_ptr + unit->addr_size > rngs_end)\n+\t    return FALSE;\n+\t  base_address = read_address (unit, rngs_ptr, rngs_end);\n+\t  rngs_ptr += unit->addr_size;\n+\t  continue;\n+\n+\tcase DW_RLE_start_length:\n+\t  if (rngs_ptr + unit->addr_size > rngs_end)\n+\t    return FALSE;\n+\t  low_pc = read_address (unit, rngs_ptr, rngs_end);\n+\t  rngs_ptr += unit->addr_size;\n+\t  high_pc = low_pc;\n+\t  high_pc += _bfd_safe_read_leb128 (abfd, rngs_ptr, &bytes_read,\n+\t\t\t\t\t    FALSE, rngs_end);\n+\t  rngs_ptr += bytes_read;\n+\t  break;\n+\n+\tcase DW_RLE_offset_pair:\n+\t  low_pc = base_address;\n+\t  low_pc += _bfd_safe_read_leb128 (abfd, rngs_ptr, &bytes_read,\n+\t\t\t\t\t   FALSE, rngs_end);\n+\t  high_pc = base_address;\n+\t  high_pc += _bfd_safe_read_leb128 (abfd, rngs_ptr, &bytes_read,\n+\t\t\t\t\t    FALSE, rngs_end);\n+\t  break;\n+\n+\tcase DW_RLE_start_end:\n+\t  if (rngs_ptr + 2 * unit->addr_size > rngs_end)\n+\t    return FALSE;\n+\t  low_pc = read_address (unit, rngs_ptr, rngs_end);\n+\t  rngs_ptr += unit->addr_size;\n+\t  high_pc = read_address (unit, rngs_ptr, rngs_end);\n+\t  rngs_ptr += unit->addr_size;\n+\t  break;\n+\n+\t/* TODO x-variants need .debug_addr support used for split-dwarf.  */\n+\tcase DW_RLE_base_addressx:\n+\tcase DW_RLE_startx_endx:\n+\tcase DW_RLE_startx_length:\n+\tdefault:\n+\t  return FALSE;\n+\t}\n+\n+      if ((low_pc == 0 && high_pc == 0) || low_pc == high_pc)\n+\treturn FALSE;\n+\n+      if (!arange_add (unit, arange, low_pc, high_pc))\n+\treturn FALSE;\n+    }\n+}\n+\n+static bfd_boolean\n+read_rangelist (struct comp_unit *unit, struct arange *arange,\n+\t\tbfd_uint64_t offset)\n+{\n+  if (unit->version <= 4)\n+    return read_ranges (unit, arange, offset);\n+  else\n+    return read_rnglists (unit, arange, offset);\n+}\n+\n static struct varinfo *\n lookup_var_by_offset (bfd_uint64_t offset, struct varinfo * table)\n {"
    }
  ]
}