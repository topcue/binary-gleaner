{
  "sha": "809f3be12c0621cbf071c585da5638f6841c38b1",
  "node_id": "C_kwDOANOeidoAKDgwOWYzYmUxMmMwNjIxY2JmMDcxYzU4NWRhNTYzOGY2ODQxYzM4YjE",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-09-11T19:58:04Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-09-23T21:11:00Z"
    },
    "message": "Change pointer_type to a method of struct type\n\nI noticed that pointer_type is declared in language.h and defined in\nlanguage.c.  However, it really has to do with types, so it should\nhave been in gdbtypes.h all along.\n\nThis patch changes it to be a method on struct type.  And, I went\nthrough uses of TYPE_IS_REFERENCE and updated many spots to use the\nnew method as well.  (I didn't update ones that were in arch-specific\ncode, as I couldn't readily test that.)",
    "tree": {
      "sha": "c0a9beeebaf38da9fb3a3e7447f4cb18a624479f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/c0a9beeebaf38da9fb3a3e7447f4cb18a624479f"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/809f3be12c0621cbf071c585da5638f6841c38b1",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/809f3be12c0621cbf071c585da5638f6841c38b1",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/809f3be12c0621cbf071c585da5638f6841c38b1",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/809f3be12c0621cbf071c585da5638f6841c38b1/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "0086a91ceef5207463a10c875ed85c40eb066722",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0086a91ceef5207463a10c875ed85c40eb066722",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/0086a91ceef5207463a10c875ed85c40eb066722"
    }
  ],
  "stats": {
    "total": 104,
    "additions": 44,
    "deletions": 60
  },
  "files": [
    {
      "sha": "2eea12cfacd20b5e80c8a88a3a4cb057fed4dfd4",
      "filename": "gdb/ax-gdb.c",
      "status": "modified",
      "additions": 14,
      "deletions": 14,
      "changes": 28,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/809f3be12c0621cbf071c585da5638f6841c38b1/gdb/ax-gdb.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/809f3be12c0621cbf071c585da5638f6841c38b1/gdb/ax-gdb.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ax-gdb.c?ref=809f3be12c0621cbf071c585da5638f6841c38b1",
      "patch": "@@ -961,7 +961,7 @@ static void\n gen_ptradd (struct agent_expr *ax, struct axs_value *value,\n \t    struct axs_value *value1, struct axs_value *value2)\n {\n-  gdb_assert (pointer_type (value1->type));\n+  gdb_assert (value1->type->is_pointer_or_reference ());\n   gdb_assert (value2->type->code () == TYPE_CODE_INT);\n \n   gen_scale (ax, aop_mul, value1->type);\n@@ -977,7 +977,7 @@ static void\n gen_ptrsub (struct agent_expr *ax, struct axs_value *value,\n \t    struct axs_value *value1, struct axs_value *value2)\n {\n-  gdb_assert (pointer_type (value1->type));\n+  gdb_assert (value1->type->is_pointer_or_reference ());\n   gdb_assert (value2->type->code () == TYPE_CODE_INT);\n \n   gen_scale (ax, aop_mul, value1->type);\n@@ -994,8 +994,8 @@ gen_ptrdiff (struct agent_expr *ax, struct axs_value *value,\n \t     struct axs_value *value1, struct axs_value *value2,\n \t     struct type *result_type)\n {\n-  gdb_assert (pointer_type (value1->type));\n-  gdb_assert (pointer_type (value2->type));\n+  gdb_assert (value1->type->is_pointer_or_reference ());\n+  gdb_assert (value2->type->is_pointer_or_reference ());\n \n   if (TYPE_LENGTH (TYPE_TARGET_TYPE (value1->type))\n       != TYPE_LENGTH (TYPE_TARGET_TYPE (value2->type)))\n@@ -1014,7 +1014,7 @@ gen_equal (struct agent_expr *ax, struct axs_value *value,\n \t   struct axs_value *value1, struct axs_value *value2,\n \t   struct type *result_type)\n {\n-  if (pointer_type (value1->type) || pointer_type (value2->type))\n+  if (value1->type->is_pointer_or_reference () || value2->type->is_pointer_or_reference ())\n     ax_simple (ax, aop_equal);\n   else\n     gen_binop (ax, value, value1, value2,\n@@ -1028,7 +1028,7 @@ gen_less (struct agent_expr *ax, struct axs_value *value,\n \t  struct axs_value *value1, struct axs_value *value2,\n \t  struct type *result_type)\n {\n-  if (pointer_type (value1->type) || pointer_type (value2->type))\n+  if (value1->type->is_pointer_or_reference () || value2->type->is_pointer_or_reference ())\n     ax_simple (ax, aop_less_unsigned);\n   else\n     gen_binop (ax, value, value1, value2,\n@@ -1095,7 +1095,7 @@ gen_deref (struct axs_value *value)\n {\n   /* The caller should check the type, because several operators use\n      this, and we don't know what error message to generate.  */\n-  if (!pointer_type (value->type))\n+  if (!value->type->is_pointer_or_reference ())\n     internal_error (__FILE__, __LINE__,\n \t\t    _(\"gen_deref: expected a pointer\"));\n \n@@ -1401,7 +1401,7 @@ gen_struct_ref (struct agent_expr *ax, struct axs_value *value,\n   /* Follow pointers until we reach a non-pointer.  These aren't the C\n      semantics, but they're what the normal GDB evaluator does, so we\n      should at least be consistent.  */\n-  while (pointer_type (value->type))\n+  while (value->type->is_pointer_or_reference ())\n     {\n       require_rvalue (ax, value);\n       gen_deref (value);\n@@ -2070,25 +2070,25 @@ gen_expr_binop_rest (struct expression *exp,\n     {\n     case BINOP_ADD:\n       if (value1->type->code () == TYPE_CODE_INT\n-\t  && pointer_type (value2->type))\n+\t  && value2->type->is_pointer_or_reference ())\n \t{\n \t  /* Swap the values and proceed normally.  */\n \t  ax_simple (ax, aop_swap);\n \t  gen_ptradd (ax, value, value2, value1);\n \t}\n-      else if (pointer_type (value1->type)\n+      else if (value1->type->is_pointer_or_reference ()\n \t       && value2->type->code () == TYPE_CODE_INT)\n \tgen_ptradd (ax, value, value1, value2);\n       else\n \tgen_binop (ax, value, value1, value2,\n \t\t   aop_add, aop_add, 1, \"addition\");\n       break;\n     case BINOP_SUB:\n-      if (pointer_type (value1->type)\n+      if (value1->type->is_pointer_or_reference ()\n \t  && value2->type->code () == TYPE_CODE_INT)\n \tgen_ptrsub (ax,value, value1, value2);\n-      else if (pointer_type (value1->type)\n-\t       && pointer_type (value2->type))\n+      else if (value1->type->is_pointer_or_reference ()\n+\t       && value2->type->is_pointer_or_reference ())\n \t/* FIXME --- result type should be ptrdiff_t */\n \tgen_ptrdiff (ax, value, value1, value2,\n \t\t     builtin_type (ax->gdbarch)->builtin_long);\n@@ -2285,7 +2285,7 @@ gen_expr_unop (struct expression *exp,\n     case UNOP_IND:\n       lhs->generate_ax (exp, ax, value);\n       gen_usual_unary (ax, value);\n-      if (!pointer_type (value->type))\n+      if (!value->type->is_pointer_or_reference ())\n \terror (_(\"Argument of unary `*' is not a pointer.\"));\n       gen_deref (value);\n       break;"
    },
    {
      "sha": "d3071d1f5b90fb3198adf70eec83b7e7384efcf7",
      "filename": "gdb/c-valprint.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/809f3be12c0621cbf071c585da5638f6841c38b1/gdb/c-valprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/809f3be12c0621cbf071c585da5638f6841c38b1/gdb/c-valprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/c-valprint.c?ref=809f3be12c0621cbf071c585da5638f6841c38b1",
      "patch": "@@ -486,7 +486,7 @@ c_value_print (struct value *val, struct ui_file *stream,\n \n   type = check_typedef (value_type (val));\n \n-  if (type->code () == TYPE_CODE_PTR || TYPE_IS_REFERENCE (type))\n+  if (type->is_pointer_or_reference ())\n     {\n       struct type *original_type = value_type (val);\n "
    },
    {
      "sha": "8056c1c9ec1ccd373dd7585b49d73108aba801de",
      "filename": "gdb/c-varobj.c",
      "status": "modified",
      "additions": 3,
      "deletions": 6,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/809f3be12c0621cbf071c585da5638f6841c38b1/gdb/c-varobj.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/809f3be12c0621cbf071c585da5638f6841c38b1/gdb/c-varobj.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/c-varobj.c?ref=809f3be12c0621cbf071c585da5638f6841c38b1",
      "patch": "@@ -574,8 +574,7 @@ cplus_number_of_children (const struct varobj *var)\n       if (opts.objectprint)\n \t{\n \t  value = var->value.get ();\n-\t  lookup_actual_type = (TYPE_IS_REFERENCE (var->type)\n-\t\t\t\t|| var->type->code () == TYPE_CODE_PTR);\n+\t  lookup_actual_type = var->type->is_pointer_or_reference ();\n \t}\n       adjust_value_for_child_access (&value, &type, NULL, lookup_actual_type);\n \n@@ -611,8 +610,7 @@ cplus_number_of_children (const struct varobj *var)\n \t  const struct varobj *parent = var->parent;\n \n \t  value = parent->value.get ();\n-\t  lookup_actual_type = (TYPE_IS_REFERENCE (parent->type)\n-\t\t\t\t|| parent->type->code () == TYPE_CODE_PTR);\n+\t  lookup_actual_type = parent->type->is_pointer_or_reference ();\n \t}\n       adjust_value_for_child_access (&value, &type, NULL, lookup_actual_type);\n \n@@ -716,8 +714,7 @@ cplus_describe_child (const struct varobj *parent, int index,\n \n   var = (CPLUS_FAKE_CHILD (parent)) ? parent->parent : parent;\n   if (opts.objectprint)\n-    lookup_actual_type = (TYPE_IS_REFERENCE (var->type)\n-\t\t\t  || var->type->code () == TYPE_CODE_PTR);\n+    lookup_actual_type = var->type->is_pointer_or_reference ();\n   value = var->value.get ();\n   type = varobj_get_value_type (var);\n   if (cfull_expression)"
    },
    {
      "sha": "9444995575bf54cbb020b5b9fb871aff04279e96",
      "filename": "gdb/completer.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/809f3be12c0621cbf071c585da5638f6841c38b1/gdb/completer.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/809f3be12c0621cbf071c585da5638f6841c38b1/gdb/completer.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/completer.c?ref=809f3be12c0621cbf071c585da5638f6841c38b1",
      "patch": "@@ -1134,7 +1134,7 @@ complete_expression (completion_tracker &tracker,\n       for (;;)\n \t{\n \t  type = check_typedef (type);\n-\t  if (type->code () != TYPE_CODE_PTR && !TYPE_IS_REFERENCE (type))\n+\t  if (!type->is_pointer_or_reference ())\n \t    break;\n \t  type = TYPE_TARGET_TYPE (type);\n \t}"
    },
    {
      "sha": "fb4c8364ae011f2243ab131dea1c75a701e1af9b",
      "filename": "gdb/cp-support.c",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/809f3be12c0621cbf071c585da5638f6841c38b1/gdb/cp-support.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/809f3be12c0621cbf071c585da5638f6841c38b1/gdb/cp-support.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/cp-support.c?ref=809f3be12c0621cbf071c585da5638f6841c38b1",
      "patch": "@@ -1335,8 +1335,7 @@ add_symbol_overload_list_adl_namespace (struct type *type,\n   const char *type_name;\n   int i, prefix_len;\n \n-  while (type->code () == TYPE_CODE_PTR\n-\t || TYPE_IS_REFERENCE (type)\n+  while (type->is_pointer_or_reference ()\n \t || type->code () == TYPE_CODE_ARRAY\n \t || type->code () == TYPE_CODE_TYPEDEF)\n     {"
    },
    {
      "sha": "1c5c8cf38afec30f61e4af3ac5f6a5eae2a4e4b9",
      "filename": "gdb/eval.c",
      "status": "modified",
      "additions": 3,
      "deletions": 6,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/809f3be12c0621cbf071c585da5638f6841c38b1/gdb/eval.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/809f3be12c0621cbf071c585da5638f6841c38b1/gdb/eval.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/eval.c?ref=809f3be12c0621cbf071c585da5638f6841c38b1",
      "patch": "@@ -1596,12 +1596,10 @@ eval_op_ind (struct type *expect_type, struct expression *exp,\n \t There is a risk that this dereference will have side-effects\n \t in the inferior, but being able to print accurate type\n \t information seems worth the risk. */\n-      if ((type->code () != TYPE_CODE_PTR\n-\t   && !TYPE_IS_REFERENCE (type))\n+      if (!type->is_pointer_or_reference ()\n \t  || !is_dynamic_type (TYPE_TARGET_TYPE (type)))\n \t{\n-\t  if (type->code () == TYPE_CODE_PTR\n-\t      || TYPE_IS_REFERENCE (type)\n+\t  if (type->is_pointer_or_reference ()\n \t      /* In C you can dereference an array to get the 1st elt.  */\n \t      || type->code () == TYPE_CODE_ARRAY)\n \t    return value_zero (TYPE_TARGET_TYPE (type),\n@@ -2706,8 +2704,7 @@ unop_ind_base_operation::evaluate_for_sizeof (struct expression *exp,\n   value *val = std::get<0> (m_storage)->evaluate (nullptr, exp,\n \t\t\t\t\t\t  EVAL_AVOID_SIDE_EFFECTS);\n   struct type *type = check_typedef (value_type (val));\n-  if (type->code () != TYPE_CODE_PTR\n-      && !TYPE_IS_REFERENCE (type)\n+  if (!type->is_pointer_or_reference ()\n       && type->code () != TYPE_CODE_ARRAY)\n     error (_(\"Attempt to take contents of a non-pointer value.\"));\n   type = TYPE_TARGET_TYPE (type);"
    },
    {
      "sha": "56edbdba5783ad48cd3cde222987ae94ec068852",
      "filename": "gdb/findvar.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/809f3be12c0621cbf071c585da5638f6841c38b1/gdb/findvar.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/809f3be12c0621cbf071c585da5638f6841c38b1/gdb/findvar.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/findvar.c?ref=809f3be12c0621cbf071c585da5638f6841c38b1",
      "patch": "@@ -153,7 +153,7 @@ extract_long_unsigned_integer (const gdb_byte *addr, int orig_len,\n CORE_ADDR\n extract_typed_address (const gdb_byte *buf, struct type *type)\n {\n-  if (type->code () != TYPE_CODE_PTR && !TYPE_IS_REFERENCE (type))\n+  if (!type->is_pointer_or_reference ())\n     internal_error (__FILE__, __LINE__,\n \t\t    _(\"extract_typed_address: \"\n \t\t    \"type is not a pointer or reference\"));\n@@ -206,7 +206,7 @@ template void store_integer (gdb_byte *addr, int len,\n void\n store_typed_address (gdb_byte *buf, struct type *type, CORE_ADDR addr)\n {\n-  if (type->code () != TYPE_CODE_PTR && !TYPE_IS_REFERENCE (type))\n+  if (!type->is_pointer_or_reference ())\n     internal_error (__FILE__, __LINE__,\n \t\t    _(\"store_typed_address: \"\n \t\t    \"type is not a pointer or reference\"));"
    },
    {
      "sha": "67593dac055917df1bd3d84df79c580a1ec8df09",
      "filename": "gdb/gdbtypes.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/809f3be12c0621cbf071c585da5638f6841c38b1/gdb/gdbtypes.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/809f3be12c0621cbf071c585da5638f6841c38b1/gdb/gdbtypes.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbtypes.c?ref=809f3be12c0621cbf071c585da5638f6841c38b1",
      "patch": "@@ -4774,7 +4774,7 @@ rank_one_type (struct type *parm, struct type *arg, struct value *value)\n       struct type *t2 = arg;\n \n       /* For pointers and references, compare target type.  */\n-      if (parm->code () == TYPE_CODE_PTR || TYPE_IS_REFERENCE (parm))\n+      if (parm->is_pointer_or_reference ())\n \t{\n \t  t1 = TYPE_TARGET_TYPE (parm);\n \t  t2 = TYPE_TARGET_TYPE (arg);"
    },
    {
      "sha": "2a641122aec0cb95397acf60d73b23ce755fbec0",
      "filename": "gdb/gdbtypes.h",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/809f3be12c0621cbf071c585da5638f6841c38b1/gdb/gdbtypes.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/809f3be12c0621cbf071c585da5638f6841c38b1/gdb/gdbtypes.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbtypes.h?ref=809f3be12c0621cbf071c585da5638f6841c38b1",
      "patch": "@@ -1355,6 +1355,12 @@ struct type\n     return main_type->type_specific.int_stuff.bit_offset;\n   }\n \n+  /* Return true if this is a pointer or reference type.  */\n+  bool is_pointer_or_reference () const\n+  {\n+    return this->code () == TYPE_CODE_PTR || TYPE_IS_REFERENCE (this);\n+  }\n+\n   /* * Type that is a pointer to this type.\n      NULL if no such pointer-to type is known yet.\n      The debugger may add the address of such a type"
    },
    {
      "sha": "0354fb81865d1d01576da246687ab7fce671445a",
      "filename": "gdb/language.c",
      "status": "modified",
      "additions": 0,
      "deletions": 8,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/809f3be12c0621cbf071c585da5638f6841c38b1/gdb/language.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/809f3be12c0621cbf071c585da5638f6841c38b1/gdb/language.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/language.c?ref=809f3be12c0621cbf071c585da5638f6841c38b1",
      "patch": "@@ -388,14 +388,6 @@ language_info ()\n }\n \f\n \n-/* Returns non-zero if the value is a pointer type.  */\n-int\n-pointer_type (struct type *type)\n-{\n-  return type->code () == TYPE_CODE_PTR || TYPE_IS_REFERENCE (type);\n-}\n-\n-\f\n /* This page contains functions that return info about\n    (struct value) values used in GDB.  */\n "
    },
    {
      "sha": "63d64b5b9dafbe8cef281ea6e67e0f34df80fe13",
      "filename": "gdb/language.h",
      "status": "modified",
      "additions": 0,
      "deletions": 4,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/809f3be12c0621cbf071c585da5638f6841c38b1/gdb/language.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/809f3be12c0621cbf071c585da5638f6841c38b1/gdb/language.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/language.h?ref=809f3be12c0621cbf071c585da5638f6841c38b1",
      "patch": "@@ -774,10 +774,6 @@ extern enum language set_language (enum language);\n    && ((c) < 0x7F || (c) >= 0xA0)\t\\\n    && (!sevenbit_strings || (c) < 0x80))\n \n-/* Type predicates */\n-\n-extern int pointer_type (struct type *);\n-\n /* Error messages */\n \n extern void range_error (const char *, ...) ATTRIBUTE_PRINTF (1, 2);"
    },
    {
      "sha": "aa1553baf9e08bf136963aad0cfb322210c7cc74",
      "filename": "gdb/python/py-type.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/809f3be12c0621cbf071c585da5638f6841c38b1/gdb/python/py-type.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/809f3be12c0621cbf071c585da5638f6841c38b1/gdb/python/py-type.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-type.c?ref=809f3be12c0621cbf071c585da5638f6841c38b1",
      "patch": "@@ -470,7 +470,7 @@ typy_get_composite (struct type *type)\n \t  GDB_PY_HANDLE_EXCEPTION (except);\n \t}\n \n-      if (type->code () != TYPE_CODE_PTR && !TYPE_IS_REFERENCE (type))\n+      if (!type->is_pointer_or_reference ())\n \tbreak;\n       type = TYPE_TARGET_TYPE (type);\n     }"
    },
    {
      "sha": "d45df5fd113a51f9a0dd3e783b837877c3a0b92d",
      "filename": "gdb/python/py-value.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/809f3be12c0621cbf071c585da5638f6841c38b1/gdb/python/py-value.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/809f3be12c0621cbf071c585da5638f6841c38b1/gdb/python/py-value.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-value.c?ref=809f3be12c0621cbf071c585da5638f6841c38b1",
      "patch": "@@ -400,7 +400,7 @@ valpy_get_dynamic_type (PyObject *self, void *closure)\n       type = value_type (val);\n       type = check_typedef (type);\n \n-      if (((type->code () == TYPE_CODE_PTR) || TYPE_IS_REFERENCE (type))\n+      if (type->is_pointer_or_reference ()\n \t  && (TYPE_TARGET_TYPE (type)->code () == TYPE_CODE_STRUCT))\n \t{\n \t  struct value *target;\n@@ -851,7 +851,7 @@ value_has_field (struct value *v, PyObject *field)\n     {\n       val_type = value_type (v);\n       val_type = check_typedef (val_type);\n-      if (TYPE_IS_REFERENCE (val_type) || val_type->code () == TYPE_CODE_PTR)\n+      if (val_type->is_pointer_or_reference ())\n \tval_type = check_typedef (TYPE_TARGET_TYPE (val_type));\n \n       type_code = val_type->code ();"
    },
    {
      "sha": "a30d900cf8d68a55f93fd20179772f881e765e50",
      "filename": "gdb/symtab.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/809f3be12c0621cbf071c585da5638f6841c38b1/gdb/symtab.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/809f3be12c0621cbf071c585da5638f6841c38b1/gdb/symtab.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symtab.c?ref=809f3be12c0621cbf071c585da5638f6841c38b1",
      "patch": "@@ -2068,7 +2068,7 @@ lookup_symbol_aux (const char *name, symbol_name_match_type match_type,\n \t  /* I'm not really sure that type of this can ever\n \t     be typedefed; just be safe.  */\n \t  t = check_typedef (t);\n-\t  if (t->code () == TYPE_CODE_PTR || TYPE_IS_REFERENCE (t))\n+\t  if (t->is_pointer_or_reference ())\n \t    t = TYPE_TARGET_TYPE (t);\n \n \t  if (t->code () != TYPE_CODE_STRUCT"
    },
    {
      "sha": "947109fa436ad161b0bc3f19cd8304b329ba2221",
      "filename": "gdb/typeprint.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/809f3be12c0621cbf071c585da5638f6841c38b1/gdb/typeprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/809f3be12c0621cbf071c585da5638f6841c38b1/gdb/typeprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/typeprint.c?ref=809f3be12c0621cbf071c585da5638f6841c38b1",
      "patch": "@@ -544,7 +544,7 @@ whatis_exp (const char *exp, int show)\n   get_user_print_options (&opts);\n   if (val != NULL && opts.objectprint)\n     {\n-      if (((type->code () == TYPE_CODE_PTR) || TYPE_IS_REFERENCE (type))\n+      if (type->is_pointer_or_reference ()\n \t  && (TYPE_TARGET_TYPE (type)->code () == TYPE_CODE_STRUCT))\n \treal_type = value_rtti_indirect_type (val, &full, &top, &using_enc);\n       else if (type->code () == TYPE_CODE_STRUCT)"
    },
    {
      "sha": "67298604dd305b6ba9bcab08cb4e8034f3f699cc",
      "filename": "gdb/valops.c",
      "status": "modified",
      "additions": 4,
      "deletions": 5,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/809f3be12c0621cbf071c585da5638f6841c38b1/gdb/valops.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/809f3be12c0621cbf071c585da5638f6841c38b1/gdb/valops.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/valops.c?ref=809f3be12c0621cbf071c585da5638f6841c38b1",
      "patch": "@@ -2335,7 +2335,7 @@ value_struct_elt (struct value **argp,\n \n   /* Follow pointers until we get to a non-pointer.  */\n \n-  while (t->code () == TYPE_CODE_PTR || TYPE_IS_REFERENCE (t))\n+  while (t->is_pointer_or_reference ())\n     {\n       *argp = value_ind (*argp);\n       /* Don't coerce fn pointer to fn and then back again!  */\n@@ -2422,7 +2422,7 @@ value_struct_elt_bitpos (struct value **argp, int bitpos, struct type *ftype,\n \n   t = check_typedef (value_type (*argp));\n \n-  while (t->code () == TYPE_CODE_PTR || TYPE_IS_REFERENCE (t))\n+  while (t->is_pointer_or_reference ())\n     {\n       *argp = value_ind (*argp);\n       if (check_typedef (value_type (*argp))->code () != TYPE_CODE_FUNC)\n@@ -2575,7 +2575,7 @@ value_find_oload_method_list (struct value **argp, const char *method,\n   t = check_typedef (value_type (*argp));\n \n   /* Code snarfed from value_struct_elt.  */\n-  while (t->code () == TYPE_CODE_PTR || TYPE_IS_REFERENCE (t))\n+  while (t->is_pointer_or_reference ())\n     {\n       *argp = value_ind (*argp);\n       /* Don't coerce fn pointer to fn and then back again!  */\n@@ -2969,8 +2969,7 @@ find_overload_match (gdb::array_view<value *> args,\n       struct type *objtype = check_typedef (obj_type);\n \n       if (temp_type->code () != TYPE_CODE_PTR\n-\t  && (objtype->code () == TYPE_CODE_PTR\n-\t      || TYPE_IS_REFERENCE (objtype)))\n+\t  && objtype->is_pointer_or_reference ())\n \t{\n \t  temp = value_addr (temp);\n \t}"
    },
    {
      "sha": "3a2bc13985eba347b55618e11b0e1ea09455c46a",
      "filename": "gdb/value.c",
      "status": "modified",
      "additions": 3,
      "deletions": 5,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/809f3be12c0621cbf071c585da5638f6841c38b1/gdb/value.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/809f3be12c0621cbf071c585da5638f6841c38b1/gdb/value.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/value.c?ref=809f3be12c0621cbf071c585da5638f6841c38b1",
      "patch": "@@ -1182,7 +1182,7 @@ value_actual_type (struct value *value, int resolve_simple_types,\n     {\n       /* If result's target type is TYPE_CODE_STRUCT, proceed to\n \t fetch its rtti type.  */\n-      if ((result->code () == TYPE_CODE_PTR || TYPE_IS_REFERENCE (result))\n+      if (result->is_pointer_or_reference ()\n \t  && (check_typedef (TYPE_TARGET_TYPE (result))->code ()\n \t      == TYPE_CODE_STRUCT)\n \t  && !value_optimized_out (value))\n@@ -2778,8 +2778,7 @@ value_as_address (struct value *val)\n      converted to pointers; usually, the ABI doesn't either, but\n      ABI-specific code is a more reasonable place to handle it.  */\n \n-  if (value_type (val)->code () != TYPE_CODE_PTR\n-      && !TYPE_IS_REFERENCE (value_type (val))\n+  if (!value_type (val)->is_pointer_or_reference ()\n       && gdbarch_integer_to_address_p (gdbarch))\n     return gdbarch_integer_to_address (gdbarch, value_type (val),\n \t\t\t\t       value_contents (val));\n@@ -3726,8 +3725,7 @@ readjust_indirect_value_type (struct value *value, struct type *enc_type,\n \t\t\t      struct value *original_value,\n \t\t\t      CORE_ADDR original_value_address)\n {\n-  gdb_assert (original_type->code () == TYPE_CODE_PTR\n-\t      || TYPE_IS_REFERENCE (original_type));\n+  gdb_assert (original_type->is_pointer_or_reference ());\n \n   struct type *original_target_type = TYPE_TARGET_TYPE (original_type);\n   gdb::array_view<const gdb_byte> view;"
    }
  ]
}