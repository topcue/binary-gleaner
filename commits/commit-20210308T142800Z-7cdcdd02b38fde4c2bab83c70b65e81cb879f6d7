{
  "sha": "7cdcdd02b38fde4c2bab83c70b65e81cb879f6d7",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6N2NkY2RkMDJiMzhmZGU0YzJiYWI4M2M3MGI2NWU4MWNiODc5ZjZkNw==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-03-08T14:27:57Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-03-08T14:28:00Z"
    },
    "message": "Split out eval_op_binary\n\nThis splits out a new eval_op_binary helper function.  This function\ncan handle several different binary operations:\n\n    case BINOP_EXP:\n    case BINOP_MUL:\n    case BINOP_DIV:\n    case BINOP_INTDIV:\n    case BINOP_REM:\n    case BINOP_MOD:\n    case BINOP_LSH:\n    case BINOP_RSH:\n    case BINOP_BITWISE_AND:\n    case BINOP_BITWISE_IOR:\n    case BINOP_BITWISE_XOR:\n\ngdb/ChangeLog\n2021-03-08  Tom Tromey  <tom@tromey.com>\n\n\t* eval.c (eval_op_binary): New function.\n\t(evaluate_subexp_standard): Use it.",
    "tree": {
      "sha": "e48e8e36dd3df7c2dc63cbb2dce0c285d9359b63",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/e48e8e36dd3df7c2dc63cbb2dce0c285d9359b63"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/7cdcdd02b38fde4c2bab83c70b65e81cb879f6d7",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7cdcdd02b38fde4c2bab83c70b65e81cb879f6d7",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/7cdcdd02b38fde4c2bab83c70b65e81cb879f6d7",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7cdcdd02b38fde4c2bab83c70b65e81cb879f6d7/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "d9790e22f44ecada1d0fd53cc82227677d1222cb",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d9790e22f44ecada1d0fd53cc82227677d1222cb",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/d9790e22f44ecada1d0fd53cc82227677d1222cb"
    }
  ],
  "stats": {
    "total": 91,
    "additions": 53,
    "deletions": 38
  },
  "files": [
    {
      "sha": "b637fce590fd223d7c4d80fe51d7af9c4dbdfa6f",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7cdcdd02b38fde4c2bab83c70b65e81cb879f6d7/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7cdcdd02b38fde4c2bab83c70b65e81cb879f6d7/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=7cdcdd02b38fde4c2bab83c70b65e81cb879f6d7",
      "patch": "@@ -1,3 +1,8 @@\n+2021-03-08  Tom Tromey  <tom@tromey.com>\n+\n+\t* eval.c (eval_op_binary): New function.\n+\t(evaluate_subexp_standard): Use it.\n+\n 2021-03-08  Tom Tromey  <tom@tromey.com>\n \n \t* eval.c (eval_op_sub): New function."
    },
    {
      "sha": "c04fff51ff215b117cbb5b69b816ac19780a16a4",
      "filename": "gdb/eval.c",
      "status": "modified",
      "additions": 48,
      "deletions": 38,
      "changes": 86,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/7cdcdd02b38fde4c2bab83c70b65e81cb879f6d7/gdb/eval.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/7cdcdd02b38fde4c2bab83c70b65e81cb879f6d7/gdb/eval.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/eval.c?ref=7cdcdd02b38fde4c2bab83c70b65e81cb879f6d7",
      "patch": "@@ -1508,6 +1508,53 @@ eval_op_sub (struct type *expect_type, struct expression *exp,\n     }\n }\n \n+/* Helper function for several different binary operations.  */\n+\n+static struct value *\n+eval_op_binary (struct type *expect_type, struct expression *exp,\n+\t\tenum noside noside, enum exp_opcode op,\n+\t\tstruct value *arg1, struct value *arg2)\n+{\n+  if (noside == EVAL_SKIP)\n+    return eval_skip_value (exp);\n+  if (binop_user_defined_p (op, arg1, arg2))\n+    return value_x_binop (arg1, arg2, op, OP_NULL, noside);\n+  else\n+    {\n+      /* If EVAL_AVOID_SIDE_EFFECTS and we're dividing by zero,\n+\t fudge arg2 to avoid division-by-zero, the caller is\n+\t (theoretically) only looking for the type of the result.  */\n+      if (noside == EVAL_AVOID_SIDE_EFFECTS\n+\t  /* ??? Do we really want to test for BINOP_MOD here?\n+\t     The implementation of value_binop gives it a well-defined\n+\t     value.  */\n+\t  && (op == BINOP_DIV\n+\t      || op == BINOP_INTDIV\n+\t      || op == BINOP_REM\n+\t      || op == BINOP_MOD)\n+\t  && value_logical_not (arg2))\n+\t{\n+\t  struct value *v_one;\n+\n+\t  v_one = value_one (value_type (arg2));\n+\t  binop_promote (exp->language_defn, exp->gdbarch, &arg1, &v_one);\n+\t  return value_binop (arg1, v_one, op);\n+\t}\n+      else\n+\t{\n+\t  /* For shift and integer exponentiation operations,\n+\t     only promote the first argument.  */\n+\t  if ((op == BINOP_LSH || op == BINOP_RSH || op == BINOP_EXP)\n+\t      && is_integral_type (value_type (arg2)))\n+\t    unop_promote (exp->language_defn, exp->gdbarch, &arg1);\n+\t  else\n+\t    binop_promote (exp->language_defn, exp->gdbarch, &arg1, &arg2);\n+\n+\t  return value_binop (arg1, arg2, op);\n+\t}\n+    }\n+}\n+\n struct value *\n evaluate_subexp_standard (struct type *expect_type,\n \t\t\t  struct expression *exp, int *pos,\n@@ -2214,44 +2261,7 @@ evaluate_subexp_standard (struct type *expect_type,\n     case BINOP_BITWISE_XOR:\n       arg1 = evaluate_subexp (nullptr, exp, pos, noside);\n       arg2 = evaluate_subexp (nullptr, exp, pos, noside);\n-      if (noside == EVAL_SKIP)\n-\treturn eval_skip_value (exp);\n-      if (binop_user_defined_p (op, arg1, arg2))\n-\treturn value_x_binop (arg1, arg2, op, OP_NULL, noside);\n-      else\n-\t{\n-\t  /* If EVAL_AVOID_SIDE_EFFECTS and we're dividing by zero,\n-\t     fudge arg2 to avoid division-by-zero, the caller is\n-\t     (theoretically) only looking for the type of the result.  */\n-\t  if (noside == EVAL_AVOID_SIDE_EFFECTS\n-\t      /* ??? Do we really want to test for BINOP_MOD here?\n-\t\t The implementation of value_binop gives it a well-defined\n-\t\t value.  */\n-\t      && (op == BINOP_DIV\n-\t\t  || op == BINOP_INTDIV\n-\t\t  || op == BINOP_REM\n-\t\t  || op == BINOP_MOD)\n-\t      && value_logical_not (arg2))\n-\t    {\n-\t      struct value *v_one;\n-\n-\t      v_one = value_one (value_type (arg2));\n-\t      binop_promote (exp->language_defn, exp->gdbarch, &arg1, &v_one);\n-\t      return value_binop (arg1, v_one, op);\n-\t    }\n-\t  else\n-\t    {\n-\t      /* For shift and integer exponentiation operations,\n-\t\t only promote the first argument.  */\n-\t      if ((op == BINOP_LSH || op == BINOP_RSH || op == BINOP_EXP)\n-\t\t  && is_integral_type (value_type (arg2)))\n-\t\tunop_promote (exp->language_defn, exp->gdbarch, &arg1);\n-\t      else\n-\t\tbinop_promote (exp->language_defn, exp->gdbarch, &arg1, &arg2);\n-\n-\t      return value_binop (arg1, arg2, op);\n-\t    }\n-\t}\n+      return eval_op_binary (expect_type, exp, noside, op, arg1, arg2);\n \n     case BINOP_SUBSCRIPT:\n       arg1 = evaluate_subexp (nullptr, exp, pos, noside);"
    }
  ]
}