{
  "sha": "abc66ce95eee79db058123b985e19dcfc03dc1a7",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YWJjNjZjZTk1ZWVlNzlkYjA1ODEyM2I5ODVlMTlkY2ZjMDNkYzFhNw==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-03-13T23:39:52Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-03-14T00:03:41Z"
    },
    "message": "Initial rewrite of generic_value_print\n\nThis rewrites generic_value_print, by copying in the body of\ngeneric_val_print and making the needed adjustments.\n\ngdb/ChangeLog\n2020-03-13  Tom Tromey  <tom@tromey.com>\n\n\t* valprint.c (generic_value_print): Rewrite.",
    "tree": {
      "sha": "cd9c9ada3c03355385c8dd4c23d1ca5d3e40918b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/cd9c9ada3c03355385c8dd4c23d1ca5d3e40918b"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/abc66ce95eee79db058123b985e19dcfc03dc1a7",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/abc66ce95eee79db058123b985e19dcfc03dc1a7",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/abc66ce95eee79db058123b985e19dcfc03dc1a7",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/abc66ce95eee79db058123b985e19dcfc03dc1a7/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "07a328583de159941b64bad3ca94f20185c905ed",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/07a328583de159941b64bad3ca94f20185c905ed",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/07a328583de159941b64bad3ca94f20185c905ed"
    }
  ],
  "stats": {
    "total": 109,
    "additions": 106,
    "deletions": 3
  },
  "files": [
    {
      "sha": "bfeec8112e6bbf8e10a32dfe06c87565e27f22a9",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/abc66ce95eee79db058123b985e19dcfc03dc1a7/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/abc66ce95eee79db058123b985e19dcfc03dc1a7/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=abc66ce95eee79db058123b985e19dcfc03dc1a7",
      "patch": "@@ -1,3 +1,7 @@\n+2020-03-13  Tom Tromey  <tom@tromey.com>\n+\n+\t* valprint.c (generic_value_print): Rewrite.\n+\n 2020-03-13  Tom Tromey  <tom@tromey.com>\n \n \t* p-valprint.c (pascal_object_print_value_fields)"
    },
    {
      "sha": "50b5a1ff50d9a4b418920242d20e881b8f6ebc2b",
      "filename": "gdb/valprint.c",
      "status": "modified",
      "additions": 102,
      "deletions": 3,
      "changes": 105,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/abc66ce95eee79db058123b985e19dcfc03dc1a7/gdb/valprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/abc66ce95eee79db058123b985e19dcfc03dc1a7/gdb/valprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/valprint.c?ref=abc66ce95eee79db058123b985e19dcfc03dc1a7",
      "patch": "@@ -1040,9 +1040,108 @@ generic_value_print (struct value *val, struct ui_file *stream, int recurse,\n \t\t     const struct value_print_options *options,\n \t\t     const struct generic_val_print_decorations *decorations)\n {\n-  generic_val_print (value_type (val), value_embedded_offset (val),\n-\t\t     value_address (val), stream, recurse, val, options,\n-\t\t     decorations);\n+  struct type *type = value_type (val);\n+  struct type *unresolved_type = type;\n+\n+  type = check_typedef (type);\n+  switch (TYPE_CODE (type))\n+    {\n+    case TYPE_CODE_ARRAY:\n+      generic_val_print_array (type, 0, value_address (val), stream,\n+\t\t\t       recurse, val, options, decorations);\n+      break;\n+\n+    case TYPE_CODE_MEMBERPTR:\n+      generic_val_print_memberptr (type, 0, stream,\n+\t\t\t\t   val, options);\n+      break;\n+\n+    case TYPE_CODE_PTR:\n+      generic_val_print_ptr (type, 0, stream,\n+\t\t\t     val, options);\n+      break;\n+\n+    case TYPE_CODE_REF:\n+    case TYPE_CODE_RVALUE_REF:\n+      generic_val_print_ref (type, 0, stream, recurse,\n+\t\t\t     val, options);\n+      break;\n+\n+    case TYPE_CODE_ENUM:\n+      generic_val_print_enum (type, 0, stream,\n+\t\t\t      val, options);\n+      break;\n+\n+    case TYPE_CODE_FLAGS:\n+      generic_val_print_flags (type, 0, stream,\n+\t\t\t       val, options);\n+      break;\n+\n+    case TYPE_CODE_FUNC:\n+    case TYPE_CODE_METHOD:\n+      generic_val_print_func (type, 0, value_address (val), stream,\n+\t\t\t      val, options);\n+      break;\n+\n+    case TYPE_CODE_BOOL:\n+      generic_val_print_bool (type, 0, stream,\n+\t\t\t      val, options, decorations);\n+      break;\n+\n+    case TYPE_CODE_RANGE:\n+      /* FIXME: create_static_range_type does not set the unsigned bit in a\n+         range type (I think it probably should copy it from the\n+         target type), so we won't print values which are too large to\n+         fit in a signed integer correctly.  */\n+      /* FIXME: Doesn't handle ranges of enums correctly.  (Can't just\n+         print with the target type, though, because the size of our\n+         type and the target type might differ).  */\n+\n+      /* FALLTHROUGH */\n+\n+    case TYPE_CODE_INT:\n+      generic_val_print_int (type, 0, stream,\n+\t\t\t     val, options);\n+      break;\n+\n+    case TYPE_CODE_CHAR:\n+      generic_val_print_char (type, unresolved_type, 0,\n+\t\t\t      stream, val, options);\n+      break;\n+\n+    case TYPE_CODE_FLT:\n+    case TYPE_CODE_DECFLOAT:\n+      generic_val_print_float (type, 0, stream,\n+\t\t\t       val, options);\n+      break;\n+\n+    case TYPE_CODE_VOID:\n+      fputs_filtered (decorations->void_name, stream);\n+      break;\n+\n+    case TYPE_CODE_ERROR:\n+      fprintf_filtered (stream, \"%s\", TYPE_ERROR_NAME (type));\n+      break;\n+\n+    case TYPE_CODE_UNDEF:\n+      /* This happens (without TYPE_STUB set) on systems which don't use\n+         dbx xrefs (NO_DBX_XREFS in gcc) if a file has a \"struct foo *bar\"\n+         and no complete type for struct foo in that file.  */\n+      fprintf_styled (stream, metadata_style.style (), _(\"<incomplete type>\"));\n+      break;\n+\n+    case TYPE_CODE_COMPLEX:\n+      generic_val_print_complex (type, 0, stream,\n+\t\t\t\t val, options, decorations);\n+      break;\n+\n+    case TYPE_CODE_UNION:\n+    case TYPE_CODE_STRUCT:\n+    case TYPE_CODE_METHODPTR:\n+    default:\n+      error (_(\"Unhandled type code %d in symbol table.\"),\n+\t     TYPE_CODE (type));\n+    }\n }\n \n /* Helper function for val_print and common_val_print that does the"
    }
  ]
}