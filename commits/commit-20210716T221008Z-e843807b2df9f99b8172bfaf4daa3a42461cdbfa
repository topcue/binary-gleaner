{
  "sha": "e843807b2df9f99b8172bfaf4daa3a42461cdbfa",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZTg0MzgwN2IyZGY5Zjk5YjgxNzJiZmFmNGRhYTNhNDI0NjFjZGJmYQ==",
  "commit": {
    "author": {
      "name": "Lancelot SIX",
      "email": "lsix@lancelotsix.com",
      "date": "2021-07-16T22:10:08Z"
    },
    "committer": {
      "name": "Lancelot SIX",
      "email": "lsix@lancelotsix.com",
      "date": "2021-07-16T22:10:08Z"
    },
    "message": "gdb: Support stepping out from signal handler on riscv*-linux\n\nCurrently, gdb cannot step outside of a signal handler on RISC-V\nplatforms.  This causes multiple failures in gdb.base/sigstep.exp:\n\n\tFAIL: gdb.base/sigstep.exp: continue to handler, nothing in handler, step from handler: leave handler (timeout)\n\tFAIL: gdb.base/sigstep.exp: continue to handler, si+advance in handler, step from handler: leave handler (timeout)\n\tFAIL: gdb.base/sigstep.exp: continue to handler, nothing in handler, next from handler: leave handler (timeout)\n\tFAIL: gdb.base/sigstep.exp: continue to handler, si+advance in handler, next from handler: leave handler (timeout)\n\tFAIL: gdb.base/sigstep.exp: stepi from handleri: leave signal trampoline\n\tFAIL: gdb.base/sigstep.exp: nexti from handleri: leave signal trampoline\n\n\t                === gdb Summary ===\n\n\t# of expected passes            587\n\t# of unexpected failures        6\n\nThis patch adds support for stepping outside of a signal handler on\nriscv*-*-linux*.\n\nImplementation is heavily inspired from mips_linux_syscall_next_pc and\nsurroundings as advised by Pedro Alves.\n\nAfter this patch, all tests in gdb.base/sigstep.exp pass.\n\nBuild and tested on riscv64-linux-gnu.",
    "tree": {
      "sha": "fdce54aa31c1f7bb740dc766c5d7bc13d0428299",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/fdce54aa31c1f7bb740dc766c5d7bc13d0428299"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/e843807b2df9f99b8172bfaf4daa3a42461cdbfa",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e843807b2df9f99b8172bfaf4daa3a42461cdbfa",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/e843807b2df9f99b8172bfaf4daa3a42461cdbfa",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e843807b2df9f99b8172bfaf4daa3a42461cdbfa/comments",
  "author": {
    "login": "lsix",
    "id": 724339,
    "node_id": "MDQ6VXNlcjcyNDMzOQ==",
    "avatar_url": "https://avatars.githubusercontent.com/u/724339?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/lsix",
    "html_url": "https://github.com/lsix",
    "followers_url": "https://api.github.com/users/lsix/followers",
    "following_url": "https://api.github.com/users/lsix/following{/other_user}",
    "gists_url": "https://api.github.com/users/lsix/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/lsix/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/lsix/subscriptions",
    "organizations_url": "https://api.github.com/users/lsix/orgs",
    "repos_url": "https://api.github.com/users/lsix/repos",
    "events_url": "https://api.github.com/users/lsix/events{/privacy}",
    "received_events_url": "https://api.github.com/users/lsix/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "lsix",
    "id": 724339,
    "node_id": "MDQ6VXNlcjcyNDMzOQ==",
    "avatar_url": "https://avatars.githubusercontent.com/u/724339?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/lsix",
    "html_url": "https://github.com/lsix",
    "followers_url": "https://api.github.com/users/lsix/followers",
    "following_url": "https://api.github.com/users/lsix/following{/other_user}",
    "gists_url": "https://api.github.com/users/lsix/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/lsix/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/lsix/subscriptions",
    "organizations_url": "https://api.github.com/users/lsix/orgs",
    "repos_url": "https://api.github.com/users/lsix/repos",
    "events_url": "https://api.github.com/users/lsix/events{/privacy}",
    "received_events_url": "https://api.github.com/users/lsix/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "47357fdc1db04240be98c683de776b3a351e945b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/47357fdc1db04240be98c683de776b3a351e945b",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/47357fdc1db04240be98c683de776b3a351e945b"
    }
  ],
  "stats": {
    "total": 38,
    "additions": 38,
    "deletions": 0
  },
  "files": [
    {
      "sha": "49dc75bb6180d1e5119d7108855d953a0f407c0c",
      "filename": "gdb/riscv-linux-tdep.c",
      "status": "modified",
      "additions": 24,
      "deletions": 0,
      "changes": 24,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e843807b2df9f99b8172bfaf4daa3a42461cdbfa/gdb/riscv-linux-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e843807b2df9f99b8172bfaf4daa3a42461cdbfa/gdb/riscv-linux-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/riscv-linux-tdep.c?ref=e843807b2df9f99b8172bfaf4daa3a42461cdbfa",
      "patch": "@@ -27,6 +27,11 @@\n #include \"trad-frame.h\"\n #include \"gdbarch.h\"\n \n+/* The following value is derived from __NR_rt_sigreturn in\n+   <include/uapi/asm-generic/unistd.h> from the Linux source tree.  */\n+\n+#define RISCV_NR_rt_sigreturn 139\n+\n /* Define the general register mapping.  The kernel puts the PC at offset 0,\n    gdb puts it at offset 32.  Register x0 is always 0 and can be ignored.\n    Registers x1 to x31 are in the same place.  */\n@@ -154,11 +159,28 @@ riscv_linux_sigframe_init (const struct tramp_frame *self,\n   trad_frame_set_id (this_cache, frame_id_build (frame_sp, func));\n }\n \n+/* When FRAME is at a syscall instruction (ECALL), return the PC of the next\n+   instruction to be executed.  */\n+\n+static CORE_ADDR\n+riscv_linux_syscall_next_pc (struct frame_info *frame)\n+{\n+  const CORE_ADDR pc = get_frame_pc (frame);\n+  const ULONGEST a7 = get_frame_register_unsigned (frame, RISCV_A7_REGNUM);\n+\n+  if (a7 == RISCV_NR_rt_sigreturn)\n+    return frame_unwind_caller_pc (frame);\n+\n+  return pc + 4 /* Length of the ECALL insn.  */;\n+}\n+\n /* Initialize RISC-V Linux ABI info.  */\n \n static void\n riscv_linux_init_abi (struct gdbarch_info info, struct gdbarch *gdbarch)\n {\n+  struct gdbarch_tdep *tdep = gdbarch_tdep (gdbarch);\n+\n   linux_init_abi (info, gdbarch, 0);\n \n   set_gdbarch_software_single_step (gdbarch, riscv_software_single_step);\n@@ -182,6 +204,8 @@ riscv_linux_init_abi (struct gdbarch_info info, struct gdbarch *gdbarch)\n     (gdbarch, riscv_linux_iterate_over_regset_sections);\n \n   tramp_frame_prepend_unwinder (gdbarch, &riscv_linux_sigframe);\n+\n+  tdep->syscall_next_pc = riscv_linux_syscall_next_pc;\n }\n \n /* Initialize RISC-V Linux target support.  */"
    },
    {
      "sha": "b5b0d2d79ded84f677c90005e15fb78784d4a1ea",
      "filename": "gdb/riscv-tdep.c",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e843807b2df9f99b8172bfaf4daa3a42461cdbfa/gdb/riscv-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e843807b2df9f99b8172bfaf4daa3a42461cdbfa/gdb/riscv-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/riscv-tdep.c?ref=e843807b2df9f99b8172bfaf4daa3a42461cdbfa",
      "patch": "@@ -1421,6 +1421,8 @@ class riscv_insn\n       /* These are needed for stepping over atomic sequences.  */\n       LR,\n       SC,\n+      /* This instruction is used to do a syscall.  */\n+      ECALL,\n \n       /* Other instructions are not interesting during the prologue scan, and\n \t are ignored.  */\n@@ -1711,6 +1713,8 @@ riscv_insn::decode (struct gdbarch *gdbarch, CORE_ADDR pc)\n \tdecode_r_type_insn (SC, ival);\n       else if (is_sc_d_insn (ival))\n \tdecode_r_type_insn (SC, ival);\n+      else if (is_ecall_insn (ival))\n+\tdecode_i_type_insn (ECALL, ival);\n       else\n \t/* None of the other fields are valid in this case.  */\n \tm_opcode = OTHER;\n@@ -3764,6 +3768,7 @@ static CORE_ADDR\n riscv_next_pc (struct regcache *regcache, CORE_ADDR pc)\n {\n   struct gdbarch *gdbarch = regcache->arch ();\n+  const struct gdbarch_tdep *tdep = gdbarch_tdep (gdbarch);\n   struct riscv_insn insn;\n   CORE_ADDR next_pc;\n \n@@ -3826,6 +3831,11 @@ riscv_next_pc (struct regcache *regcache, CORE_ADDR pc)\n       if (src1 >= src2)\n \tnext_pc = pc + insn.imm_signed ();\n     }\n+  else if (insn.opcode () == riscv_insn::ECALL)\n+    {\n+      if (tdep->syscall_next_pc != nullptr)\n+\tnext_pc = tdep->syscall_next_pc (get_current_frame ());\n+    }\n \n   return next_pc;\n }"
    },
    {
      "sha": "03870cf9e5b721a75c719afa077832fe68c81b69",
      "filename": "gdb/riscv-tdep.h",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e843807b2df9f99b8172bfaf4daa3a42461cdbfa/gdb/riscv-tdep.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e843807b2df9f99b8172bfaf4daa3a42461cdbfa/gdb/riscv-tdep.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/riscv-tdep.h?ref=e843807b2df9f99b8172bfaf4daa3a42461cdbfa",
      "patch": "@@ -34,6 +34,7 @@ enum\n   RISCV_FP_REGNUM = 8,\t\t/* Frame Pointer.  */\n   RISCV_A0_REGNUM = 10,\t\t/* First argument.  */\n   RISCV_A1_REGNUM = 11,\t\t/* Second argument.  */\n+  RISCV_A7_REGNUM = 17,\t\t/* Seventh argument.  */\n   RISCV_PC_REGNUM = 32,\t\t/* Program Counter.  */\n \n   RISCV_NUM_INTEGER_REGS = 32,\n@@ -102,6 +103,9 @@ struct gdbarch_tdep\n   int duplicate_frm_regnum = -1;\n   int duplicate_fcsr_regnum = -1;\n \n+  /* Return the expected next PC assuming FRAME is stopped at a syscall\n+     instruction.  */\n+  CORE_ADDR (*syscall_next_pc) (struct frame_info *frame);\n };\n \n "
    }
  ]
}