{
  "sha": "36695cf8ffe4b93cb55564f5eabd6a549a0b5cbb",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MzY2OTVjZjhmZmU0YjkzY2I1NTU2NGY1ZWFiZDZhNTQ5YTBiNWNiYg==",
  "commit": {
    "author": {
      "name": "Tom de Vries",
      "email": "tdevries@suse.de",
      "date": "2021-06-10T05:36:19Z"
    },
    "committer": {
      "name": "Tom de Vries",
      "email": "tdevries@suse.de",
      "date": "2021-06-10T05:36:19Z"
    },
    "message": "[gdb/testsuite] Fix gdb.cp/nested-types.exp with check-read1\n\nWith check-read1 I occasionally run into:\n...\nFAIL: gdb.cp/nested-types.exp: ptype S10 (limit = 7) \\\n  // parse failed (timeout)\n...\nI can trigger this reliably by running check-read1 in conjunction with\nstress -c 5.\n\nFix this by breaking up the regexp in cp_test_ptype_class.\n\nTested on x86_64-linux.\n\ngdb/testsuite/ChangeLog:\n\n2021-06-10  Tom de Vries  <tdevries@suse.de>\n\n\t* lib/cp-support.exp (cp_test_ptype_class): Break up regexp.\n\t* gdb.cp/nested-types.exp: Remove usage of read1 timeout factor.",
    "tree": {
      "sha": "9fd4fe7ba6e4142c4e287aca9308172cd4422c09",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/9fd4fe7ba6e4142c4e287aca9308172cd4422c09"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/36695cf8ffe4b93cb55564f5eabd6a549a0b5cbb",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/36695cf8ffe4b93cb55564f5eabd6a549a0b5cbb",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/36695cf8ffe4b93cb55564f5eabd6a549a0b5cbb",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/36695cf8ffe4b93cb55564f5eabd6a549a0b5cbb/comments",
  "author": {
    "login": "vries",
    "id": 4057235,
    "node_id": "MDQ6VXNlcjQwNTcyMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vries",
    "html_url": "https://github.com/vries",
    "followers_url": "https://api.github.com/users/vries/followers",
    "following_url": "https://api.github.com/users/vries/following{/other_user}",
    "gists_url": "https://api.github.com/users/vries/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vries/subscriptions",
    "organizations_url": "https://api.github.com/users/vries/orgs",
    "repos_url": "https://api.github.com/users/vries/repos",
    "events_url": "https://api.github.com/users/vries/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vries/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "vries",
    "id": 4057235,
    "node_id": "MDQ6VXNlcjQwNTcyMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vries",
    "html_url": "https://github.com/vries",
    "followers_url": "https://api.github.com/users/vries/followers",
    "following_url": "https://api.github.com/users/vries/following{/other_user}",
    "gists_url": "https://api.github.com/users/vries/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vries/subscriptions",
    "organizations_url": "https://api.github.com/users/vries/orgs",
    "repos_url": "https://api.github.com/users/vries/repos",
    "events_url": "https://api.github.com/users/vries/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vries/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "0cc809fa0f947227bfa156df576a6943f5bbbdfe",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0cc809fa0f947227bfa156df576a6943f5bbbdfe",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/0cc809fa0f947227bfa156df576a6943f5bbbdfe"
    }
  ],
  "stats": {
    "total": 52,
    "additions": 34,
    "deletions": 18
  },
  "files": [
    {
      "sha": "2f922f4990e4584c5c621557cd382a9d1f6f247e",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/36695cf8ffe4b93cb55564f5eabd6a549a0b5cbb/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/36695cf8ffe4b93cb55564f5eabd6a549a0b5cbb/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=36695cf8ffe4b93cb55564f5eabd6a549a0b5cbb",
      "patch": "@@ -1,3 +1,8 @@\n+2021-06-10  Tom de Vries  <tdevries@suse.de>\n+\n+\t* lib/cp-support.exp (cp_test_ptype_class): Break up regexp.\n+\t* gdb.cp/nested-types.exp: Remove usage of read1 timeout factor.\n+\n 2021-06-10  Tom de Vries  <tdevries@suse.de>\n \n \t* gdb.cp/cplusfuncs.exp (info_func_regexp): Use gdb_test_lines."
    },
    {
      "sha": "a71339b233f8a15853c9a872bf65489b14ed9965",
      "filename": "gdb/testsuite/gdb.cp/nested-types.exp",
      "status": "modified",
      "additions": 2,
      "deletions": 9,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/36695cf8ffe4b93cb55564f5eabd6a549a0b5cbb/gdb/testsuite/gdb.cp/nested-types.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/36695cf8ffe4b93cb55564f5eabd6a549a0b5cbb/gdb/testsuite/gdb.cp/nested-types.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.cp/nested-types.exp?ref=36695cf8ffe4b93cb55564f5eabd6a549a0b5cbb",
      "patch": "@@ -278,20 +278,13 @@ proc test_nested_limit {limit log} {\n     node_result result 10 $limit {} 0 $log\n \n     if {!$log} {\n-\tif {$limit < 0 || $limit >= 8 } {\n-\t    set read1_timeout_factor 10\n-\t} else {\n-\t    set read1_timeout_factor 1\n-\t}\n \t# The only output we check for is the contents of the struct,\n \t# ignoring the leading \"type = struct S10 {\" and trailing \"}\" of\n \t# the outermost node.\n \tset result [lindex $result 0]\n \tlassign $result type access key name children\n-\twith_read1_timeout_factor $read1_timeout_factor {\n-\t    cp_test_ptype_class $name \"ptype $name (limit = $limit)\" $key \\\n-\t\t$name $children\n-\t}\n+\tcp_test_ptype_class $name \"ptype $name (limit = $limit)\" $key \\\n+\t    $name $children\n     }\n }\n "
    },
    {
      "sha": "479ef0793601f543a4cf79260ea1edb5bec22fa1",
      "filename": "gdb/testsuite/lib/cp-support.exp",
      "status": "modified",
      "additions": 27,
      "deletions": 9,
      "changes": 36,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/36695cf8ffe4b93cb55564f5eabd6a549a0b5cbb/gdb/testsuite/lib/cp-support.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/36695cf8ffe4b93cb55564f5eabd6a549a0b5cbb/gdb/testsuite/lib/cp-support.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/lib/cp-support.exp?ref=36695cf8ffe4b93cb55564f5eabd6a549a0b5cbb",
      "patch": "@@ -245,6 +245,7 @@ proc cp_test_ptype_class { in_exp in_testname in_key in_tag in_class_table\n \t\t\t   { in_ptype_arg /r } { recursive_qid 0 } } {\n     global gdb_prompt\n     set wsopt \"\\[\\r\\n\\t \\]*\"\n+    set hwsopt \"\\[\\t \\]*\"\n \n     if {$recursive_qid == 0} {\n \t# The test name defaults to the command, but without the\n@@ -306,23 +307,40 @@ proc cp_test_ptype_class { in_exp in_testname in_key in_tag in_class_table\n \t\t\t    \"$in_tag\\\\((int|void|)\\\\);\"]\n \n     # Partial regexp for parsing the struct/class header.\n-    set regexp_header \"(struct|class)${wsopt}(\\[^ \\t\\]*)${wsopt}\"\n-    append regexp_header \"(\\\\\\[with .*\\\\\\]${wsopt})?((:\\[^\\{\\]*)?)${wsopt}\\{\"\n+    set regexp_header \"(struct|class)${hwsopt}(\\[^ \\t\\]*)${hwsopt}\"\n+    append regexp_header \"(\\\\\\[with .*\\\\\\]${hwsopt})?((:\\[^\\{\\]*)?)${hwsopt}\\{\"\n     if {$recursive_qid == 0} {\n \t# Actually do the ptype.\n-\n \t# For processing the output of ptype, we must get to the prompt.\n-\tset the_regexp \"type = ${regexp_header}\"\n-\tappend the_regexp \"(.*)\\}${wsopt}(\\[^\\r\\n\\]*)\\[\\r\\n\\]+$gdb_prompt $\"\n \tset parse_okay 0\n+\tset state 0\n+\tset actual_body \"\"\n \tgdb_test_multiple \"$in_command\" \"$in_testname // parse failed\" {\n-\t    -re $the_regexp {\n-\t\tset parse_okay          1\n+\t    -re \"type = ${regexp_header}\" {\n+\t\tif { $state == 0 } { set state 1 } else { set state -1 }\n \t\tset actual_key          $expect_out(1,string)\n \t\tset actual_tag          $expect_out(2,string)\n \t\tset actual_base_string  $expect_out(4,string)\n-\t\tset actual_body         $expect_out(6,string)\n-\t\tset actual_tail         $expect_out(7,string)\n+\t\texp_continue\n+\t    }\n+\t    -re \"^\\r\\n\\}${hwsopt}(\\[^\\r\\n\\]*)(?=\\r\\n)\" {\n+\t\tif { $state == 1 } { set state 2 } else { set state -2 }\n+\t\tset actual_tail $expect_out(1,string)\n+\t\texp_continue\n+\t    }\n+\t    -re \"^\\r\\n(\\[^\\r\\n\\]*)(?=\\r\\n)\" {\n+\t\tif { $state != 1 } { set $state -3 }\n+\t\tif { $actual_body == \"\" } {\n+\t\t    set actual_body $expect_out(1,string)\n+\t\t} else {\n+\t\t    append actual_body \"\\n$expect_out(1,string)\"\n+\t\t}\n+\t\texp_continue\n+\t    }\n+\t    -re -wrap \"\" {\n+\t\tif { $state == 2 } {\n+\t\t    set parse_okay 1\n+\t\t}\n \t    }\n \t}\n     } else {"
    }
  ]
}