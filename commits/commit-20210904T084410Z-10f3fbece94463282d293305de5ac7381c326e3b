{
  "sha": "10f3fbece94463282d293305de5ac7381c326e3b",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MTBmM2ZiZWNlOTQ0NjMyODJkMjkzMzA1ZGU1YWM3MzgxYzMyNmUzYg==",
  "commit": {
    "author": {
      "name": "Tom de Vries",
      "email": "tdevries@suse.de",
      "date": "2021-09-04T08:44:10Z"
    },
    "committer": {
      "name": "Tom de Vries",
      "email": "tdevries@suse.de",
      "date": "2021-09-04T08:44:10Z"
    },
    "message": "[gdb/testsuite] Check avx support in gdb.arch/amd64-disp-step-avx.exp\n\nOn a machine on Open Build Service I'm running into a SIGILL for test-case\ngdb.arch/amd64-disp-step-avx.exp:\n...\nProgram received signal SIGILL, Illegal instruction.^M\ntest_rip_vex2 () at gdb.arch/amd64-disp-step-avx.S:40^M\n40              vmovsd ro_var(%rip),%xmm0^M\n(gdb) FAIL: gdb.arch/amd64-disp-step-avx.exp: vex2: \\\n  continue to test_rip_vex2_end\n...\nThe SIGILL happens when trying to execute the first avx instruction in the\nexecutable.\n\nI can't directly access the machine, but looking at the log for test-case\ngdb.arch/i386-avx.exp, it seems that there's no avx support:\n...\nBreakpoint 1, main (argc=1, argv=0x7fffffffd6b8) at gdb.arch/i386-avx.c:68^M\n68        if (have_avx ())^M\n(gdb) print have_avx ()^M\n$1 = 0^M\n...\n\nFix this by:\n- adding a gdb_caching_proc have_avx, similar to have_mpx, using the have_avx\n  function from gdb.arch/i386-avx.c\n- using proc have_avx in both gdb/testsuite/gdb.arch/amd64-disp-step-avx.exp\n  and gdb/testsuite/gdb.arch/i386-avx.exp.\n\nTested on my x86_64-linux laptop with avx support, where both test-cases pass.\n\ngdb/testsuite/ChangeLog:\n\n2021-09-04  Tom de Vries  <tdevries@suse.de>\n\n\tPR testsuite/26950\n\t* gdb/testsuite/gdb.arch/i386-avx.c (main): Remove call to have_avx.\n\t(have_avx): Move ...\n\t* gdb/testsuite/lib/gdb.exp (have_avx): ... here.  New proc.\n\t* gdb/testsuite/gdb.arch/amd64-disp-step-avx.exp: Use have_avx.\n\t* gdb/testsuite/gdb.arch/i386-avx.exp: Same.",
    "tree": {
      "sha": "f7532012ff626b69a4f1e5eaff7266e12b724cc3",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/f7532012ff626b69a4f1e5eaff7266e12b724cc3"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/10f3fbece94463282d293305de5ac7381c326e3b",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/10f3fbece94463282d293305de5ac7381c326e3b",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/10f3fbece94463282d293305de5ac7381c326e3b",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/10f3fbece94463282d293305de5ac7381c326e3b/comments",
  "author": {
    "login": "vries",
    "id": 4057235,
    "node_id": "MDQ6VXNlcjQwNTcyMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vries",
    "html_url": "https://github.com/vries",
    "followers_url": "https://api.github.com/users/vries/followers",
    "following_url": "https://api.github.com/users/vries/following{/other_user}",
    "gists_url": "https://api.github.com/users/vries/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vries/subscriptions",
    "organizations_url": "https://api.github.com/users/vries/orgs",
    "repos_url": "https://api.github.com/users/vries/repos",
    "events_url": "https://api.github.com/users/vries/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vries/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "vries",
    "id": 4057235,
    "node_id": "MDQ6VXNlcjQwNTcyMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vries",
    "html_url": "https://github.com/vries",
    "followers_url": "https://api.github.com/users/vries/followers",
    "following_url": "https://api.github.com/users/vries/following{/other_user}",
    "gists_url": "https://api.github.com/users/vries/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vries/subscriptions",
    "organizations_url": "https://api.github.com/users/vries/orgs",
    "repos_url": "https://api.github.com/users/vries/repos",
    "events_url": "https://api.github.com/users/vries/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vries/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "e994f4ef451c83cd6c851c015433daa23566e2d9",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e994f4ef451c83cd6c851c015433daa23566e2d9",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/e994f4ef451c83cd6c851c015433daa23566e2d9"
    }
  ],
  "stats": {
    "total": 186,
    "additions": 103,
    "deletions": 83
  },
  "files": [
    {
      "sha": "469c6f4cd70dec84e5411bc307c9c8c6379cccce",
      "filename": "gdb/testsuite/gdb.arch/amd64-disp-step-avx.exp",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/10f3fbece94463282d293305de5ac7381c326e3b/gdb/testsuite/gdb.arch/amd64-disp-step-avx.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/10f3fbece94463282d293305de5ac7381c326e3b/gdb/testsuite/gdb.arch/amd64-disp-step-avx.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.arch/amd64-disp-step-avx.exp?ref=10f3fbece94463282d293305de5ac7381c326e3b",
      "patch": "@@ -23,6 +23,11 @@ if { ![istarget x86_64-*-* ] || ![is_lp64_target] } {\n     return\n }\n \n+if { ![have_avx] } {\n+    verbose \"Skipping x86_64 displaced stepping tests.\"\n+    return\n+}\n+\n standard_testfile .S\n \n set options [list debug \\"
    },
    {
      "sha": "4e938399a24bcadd67fe7f147e678d8f1e0938fa",
      "filename": "gdb/testsuite/gdb.arch/i386-avx.c",
      "status": "modified",
      "additions": 49,
      "deletions": 66,
      "changes": 115,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/10f3fbece94463282d293305de5ac7381c326e3b/gdb/testsuite/gdb.arch/i386-avx.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/10f3fbece94463282d293305de5ac7381c326e3b/gdb/testsuite/gdb.arch/i386-avx.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.arch/i386-avx.c?ref=10f3fbece94463282d293305de5ac7381c326e3b",
      "patch": "@@ -48,81 +48,64 @@ v8sf_t data[] =\n   };\n \n \n-int\n-have_avx (void)\n-{\n-  unsigned int eax, ebx, ecx, edx;\n-\n-  if (!x86_cpuid (1, &eax, &ebx, &ecx, &edx))\n-    return 0;\n-\n-  if ((ecx & (bit_AVX | bit_OSXSAVE)) == (bit_AVX | bit_OSXSAVE))\n-    return 1;\n-  else\n-    return 0;\n-}\n-\n int\n main (int argc, char **argv)\n {\n-  if (have_avx ())\n-    {\n-      asm (\"vmovaps 0(%0), %%ymm0\\n\\t\"\n-           \"vmovaps 32(%0), %%ymm1\\n\\t\"\n-           \"vmovaps 64(%0), %%ymm2\\n\\t\"\n-           \"vmovaps 96(%0), %%ymm3\\n\\t\"\n-           \"vmovaps 128(%0), %%ymm4\\n\\t\"\n-           \"vmovaps 160(%0), %%ymm5\\n\\t\"\n-           \"vmovaps 192(%0), %%ymm6\\n\\t\"\n-           \"vmovaps 224(%0), %%ymm7\\n\\t\"\n-           : /* no output operands */\n-           : \"r\" (data) \n-           : \"xmm0\", \"xmm1\", \"xmm2\", \"xmm3\", \"xmm4\", \"xmm5\", \"xmm6\", \"xmm7\");\n+  asm (\"vmovaps 0(%0), %%ymm0\\n\\t\"\n+       \"vmovaps 32(%0), %%ymm1\\n\\t\"\n+       \"vmovaps 64(%0), %%ymm2\\n\\t\"\n+       \"vmovaps 96(%0), %%ymm3\\n\\t\"\n+       \"vmovaps 128(%0), %%ymm4\\n\\t\"\n+       \"vmovaps 160(%0), %%ymm5\\n\\t\"\n+       \"vmovaps 192(%0), %%ymm6\\n\\t\"\n+       \"vmovaps 224(%0), %%ymm7\\n\\t\"\n+       : /* no output operands */\n+       : \"r\" (data)\n+       : \"xmm0\", \"xmm1\", \"xmm2\", \"xmm3\", \"xmm4\", \"xmm5\", \"xmm6\", \"xmm7\");\n #ifdef __x86_64__\n-      asm (\"vmovaps 256(%0), %%ymm8\\n\\t\"\n-           \"vmovaps 288(%0), %%ymm9\\n\\t\"\n-           \"vmovaps 320(%0), %%ymm10\\n\\t\"\n-           \"vmovaps 352(%0), %%ymm11\\n\\t\"\n-           \"vmovaps 384(%0), %%ymm12\\n\\t\"\n-           \"vmovaps 416(%0), %%ymm13\\n\\t\"\n-           \"vmovaps 448(%0), %%ymm14\\n\\t\"\n-           \"vmovaps 480(%0), %%ymm15\\n\\t\"\n-           : /* no output operands */\n-           : \"r\" (data) \n-           : \"xmm8\", \"xmm9\", \"xmm10\", \"xmm11\", \"xmm12\", \"xmm13\", \"xmm14\", \"xmm15\");\n+  asm (\"vmovaps 256(%0), %%ymm8\\n\\t\"\n+       \"vmovaps 288(%0), %%ymm9\\n\\t\"\n+       \"vmovaps 320(%0), %%ymm10\\n\\t\"\n+       \"vmovaps 352(%0), %%ymm11\\n\\t\"\n+       \"vmovaps 384(%0), %%ymm12\\n\\t\"\n+       \"vmovaps 416(%0), %%ymm13\\n\\t\"\n+       \"vmovaps 448(%0), %%ymm14\\n\\t\"\n+       \"vmovaps 480(%0), %%ymm15\\n\\t\"\n+       : /* no output operands */\n+       : \"r\" (data)\n+       : \"xmm8\", \"xmm9\", \"xmm10\", \"xmm11\", \"xmm12\", \"xmm13\", \"xmm14\", \"xmm15\");\n #endif\n \n-      asm (\"nop\"); /* first breakpoint here */\n-\n-      asm (\n-           \"vmovaps %%ymm0, 0(%0)\\n\\t\"\n-           \"vmovaps %%ymm1, 32(%0)\\n\\t\"\n-           \"vmovaps %%ymm2, 64(%0)\\n\\t\"\n-           \"vmovaps %%ymm3, 96(%0)\\n\\t\"\n-           \"vmovaps %%ymm4, 128(%0)\\n\\t\"\n-           \"vmovaps %%ymm5, 160(%0)\\n\\t\"\n-           \"vmovaps %%ymm6, 192(%0)\\n\\t\"\n-           \"vmovaps %%ymm7, 224(%0)\\n\\t\"\n-           : /* no output operands */\n-           : \"r\" (data) \n-           : \"xmm0\", \"xmm1\", \"xmm2\", \"xmm3\", \"xmm4\", \"xmm5\", \"xmm6\", \"xmm7\");\n+  asm (\"nop\"); /* first breakpoint here */\n+\n+  asm (\n+       \"vmovaps %%ymm0, 0(%0)\\n\\t\"\n+       \"vmovaps %%ymm1, 32(%0)\\n\\t\"\n+       \"vmovaps %%ymm2, 64(%0)\\n\\t\"\n+       \"vmovaps %%ymm3, 96(%0)\\n\\t\"\n+       \"vmovaps %%ymm4, 128(%0)\\n\\t\"\n+       \"vmovaps %%ymm5, 160(%0)\\n\\t\"\n+       \"vmovaps %%ymm6, 192(%0)\\n\\t\"\n+       \"vmovaps %%ymm7, 224(%0)\\n\\t\"\n+       : /* no output operands */\n+       : \"r\" (data)\n+       : \"xmm0\", \"xmm1\", \"xmm2\", \"xmm3\", \"xmm4\", \"xmm5\", \"xmm6\", \"xmm7\");\n #ifdef __x86_64__\n-      asm (\n-           \"vmovaps %%ymm8, 256(%0)\\n\\t\"\n-           \"vmovaps %%ymm9, 288(%0)\\n\\t\"\n-           \"vmovaps %%ymm10, 320(%0)\\n\\t\"\n-           \"vmovaps %%ymm11, 352(%0)\\n\\t\"\n-           \"vmovaps %%ymm12, 384(%0)\\n\\t\"\n-           \"vmovaps %%ymm13, 416(%0)\\n\\t\"\n-           \"vmovaps %%ymm14, 448(%0)\\n\\t\"\n-           \"vmovaps %%ymm15, 480(%0)\\n\\t\"\n-           : /* no output operands */\n-           : \"r\" (data) \n-           : \"xmm8\", \"xmm9\", \"xmm10\", \"xmm11\", \"xmm12\", \"xmm13\", \"xmm14\", \"xmm15\");\n+  asm (\n+       \"vmovaps %%ymm8, 256(%0)\\n\\t\"\n+       \"vmovaps %%ymm9, 288(%0)\\n\\t\"\n+       \"vmovaps %%ymm10, 320(%0)\\n\\t\"\n+       \"vmovaps %%ymm11, 352(%0)\\n\\t\"\n+       \"vmovaps %%ymm12, 384(%0)\\n\\t\"\n+       \"vmovaps %%ymm13, 416(%0)\\n\\t\"\n+       \"vmovaps %%ymm14, 448(%0)\\n\\t\"\n+       \"vmovaps %%ymm15, 480(%0)\\n\\t\"\n+       : /* no output operands */\n+       : \"r\" (data)\n+       : \"xmm8\", \"xmm9\", \"xmm10\", \"xmm11\", \"xmm12\", \"xmm13\", \"xmm14\", \"xmm15\");\n #endif\n \n-      puts (\"Bye!\"); /* second breakpoint here */\n-    }\n+  puts (\"Bye!\"); /* second breakpoint here */\n \n   return 0;\n }"
    },
    {
      "sha": "93e86eeb23ebb721a4b665650501bbe924f3a666",
      "filename": "gdb/testsuite/gdb.arch/i386-avx.exp",
      "status": "modified",
      "additions": 5,
      "deletions": 17,
      "changes": 22,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/10f3fbece94463282d293305de5ac7381c326e3b/gdb/testsuite/gdb.arch/i386-avx.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/10f3fbece94463282d293305de5ac7381c326e3b/gdb/testsuite/gdb.arch/i386-avx.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.arch/i386-avx.exp?ref=10f3fbece94463282d293305de5ac7381c326e3b",
      "patch": "@@ -24,6 +24,11 @@ if { ![istarget i?86-*-*] && ![istarget x86_64-*-* ] } {\n     return\n }\n \n+if { ![have_avx] } {\n+    verbose \"Skipping x86 AVX tests.\"\n+    return\n+}\n+\n standard_testfile .c\n \n if [get_compiler_info] {\n@@ -47,23 +52,6 @@ if ![runto_main] then {\n     return 0\n }\n \n-send_gdb \"print have_avx ()\\r\"\n-gdb_expect {\n-    -re \".. = 1\\r\\n$gdb_prompt \" {\n-        pass \"check whether processor supports AVX\"\n-    }\n-    -re \".. = 0\\r\\n$gdb_prompt \" {\n-        verbose \"processor does not support AVX; skipping AVX tests\"\n-        return\n-    }\n-    -re \".*$gdb_prompt $\" {\n-        fail \"check whether processor supports AVX\"\n-    }\n-    timeout {\n-        fail \"check whether processor supports AVX (timeout)\"\n-    }\n-}\n-\n gdb_test \"break [gdb_get_line_number \"first breakpoint here\"]\" \\\n          \"Breakpoint .* at .*i386-avx.c.*\" \\\n          \"set first breakpoint in main\""
    },
    {
      "sha": "00336bd588efd04fea8a59753e634977289d217f",
      "filename": "gdb/testsuite/lib/gdb.exp",
      "status": "modified",
      "additions": 44,
      "deletions": 0,
      "changes": 44,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/10f3fbece94463282d293305de5ac7381c326e3b/gdb/testsuite/lib/gdb.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/10f3fbece94463282d293305de5ac7381c326e3b/gdb/testsuite/lib/gdb.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/lib/gdb.exp?ref=10f3fbece94463282d293305de5ac7381c326e3b",
      "patch": "@@ -8123,5 +8123,49 @@ gdb_caching_proc have_mpx {\n     return $status\n }\n \n+# Return 1 if target supports avx, otherwise return 0.\n+gdb_caching_proc have_avx {\n+    global srcdir\n+\n+    set me \"have_avx\"\n+    if { ![istarget \"i?86-*-*\"] && ![istarget \"x86_64-*-*\"] } {\n+        verbose \"$me: target does not support avx, returning 0\" 2\n+        return 0\n+    }\n+\n+    # Compile a test program.\n+    set src {\n+       #include \"nat/x86-cpuid.h\"\n+\n+\tint main() {\n+\t  unsigned int eax, ebx, ecx, edx;\n+\n+\tif (!x86_cpuid (1, &eax, &ebx, &ecx, &edx))\n+\t  return 0;\n+\n+\tif ((ecx & (bit_AVX | bit_OSXSAVE)) == (bit_AVX | bit_OSXSAVE))\n+\t  return 1;\n+\telse\n+\t  return 0;\n+\t}\n+    }\n+    set compile_flags \"incdir=${srcdir}/..\"\n+    if {![gdb_simple_compile $me $src executable $compile_flags]} {\n+        return 0\n+    }\n+\n+    set result [remote_exec target $obj]\n+    set status [lindex $result 0]\n+    set output [lindex $result 1]\n+    if { $output != \"\" } {\n+\tset status 0\n+    }\n+\n+    remote_file build delete $obj\n+\n+    verbose \"$me: returning $status\" 2\n+    return $status\n+}\n+\n # Always load compatibility stuff.\n load_lib future.exp"
    }
  ]
}