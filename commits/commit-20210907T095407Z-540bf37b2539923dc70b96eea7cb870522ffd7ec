{
  "sha": "540bf37b2539923dc70b96eea7cb870522ffd7ec",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NTQwYmYzN2IyNTM5OTIzZGM3MGI5NmVlYTdjYjg3MDUyMmZmZDdlYw==",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2021-07-30T11:56:34Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2021-09-07T09:54:07Z"
    },
    "message": "gdb/python: new function to add values into GDB's history\n\nThe guile API has (history-append! <value>) to add values into GDB's\nhistory list.  There is currently no equivalent in the Python API.\n\nThis commit adds gdb.add_history(<value>) to the Python API, this\nfunction takes <value> a gdb.Value (or anything that can be passed to\nthe constructor of gdb.Value), and adds the value it represents to\nGDB's history list.  The index of the newly added value is returned.",
    "tree": {
      "sha": "8ae12cd4c68badb1f42eee23980e369ef68ed473",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/8ae12cd4c68badb1f42eee23980e369ef68ed473"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/540bf37b2539923dc70b96eea7cb870522ffd7ec",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/540bf37b2539923dc70b96eea7cb870522ffd7ec",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/540bf37b2539923dc70b96eea7cb870522ffd7ec",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/540bf37b2539923dc70b96eea7cb870522ffd7ec/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "3f1a2892e1fea343880b276474cb44db3abcaa9a",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3f1a2892e1fea343880b276474cb44db3abcaa9a",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/3f1a2892e1fea343880b276474cb44db3abcaa9a"
    }
  ],
  "stats": {
    "total": 77,
    "additions": 77,
    "deletions": 0
  },
  "files": [
    {
      "sha": "f94855204386c4e7e954a42dcba672d18b87e3ce",
      "filename": "gdb/NEWS",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/540bf37b2539923dc70b96eea7cb870522ffd7ec/gdb/NEWS",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/540bf37b2539923dc70b96eea7cb870522ffd7ec/gdb/NEWS",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/NEWS?ref=540bf37b2539923dc70b96eea7cb870522ffd7ec",
      "patch": "@@ -10,6 +10,13 @@ maint show backtrace-on-fatal-signal\n   fatal signal.  This only supported on some platforms where the\n   backtrace and backtrace_symbols_fd functions are available.\n \n+* Python API\n+\n+  ** New function gdb.add_history(), which takes a gdb.Value object\n+     and adds the value it represents to GDB's history list.  An\n+     integer, the index of the new item in the history list, is\n+     returned.\n+\n *** Changes in GDB 11\n \n * The 'set disassembler-options' command now supports specifying options"
    },
    {
      "sha": "d8f682a091cb801293c1bbc969df7740c2217c63",
      "filename": "gdb/doc/python.texi",
      "status": "modified",
      "additions": 14,
      "deletions": 0,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/540bf37b2539923dc70b96eea7cb870522ffd7ec/gdb/doc/python.texi",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/540bf37b2539923dc70b96eea7cb870522ffd7ec/gdb/doc/python.texi",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/doc/python.texi?ref=540bf37b2539923dc70b96eea7cb870522ffd7ec",
      "patch": "@@ -346,6 +346,20 @@ If no exception is raised, the return value is always an instance of\n @code{gdb.Value} (@pxref{Values From Inferior}).\n @end defun\n \n+@defun gdb.add_history (value)\n+Takes @var{value}, an instance of @code{gdb.Value} (@pxref{Values From\n+Inferior}), and appends the value this object represents to\n+@value{GDBN}'s value history (@pxref{Value History}), and return an\n+integer, its history number.  If @var{value} is not a\n+@code{gdb.Value}, it is is converted using the @code{gdb.Value}\n+constructor.  If @var{value} can't be converted to a @code{gdb.Value}\n+then a @code{TypeError} is raised.\n+\n+When a command implemented in Python prints a single @code{gdb.Value}\n+as its result, then placing the value into the history will allow the\n+user convenient access to those values via CLI history facilities.\n+@end defun\n+\n @findex gdb.convenience_variable\n @defun gdb.convenience_variable (name)\n Return the value of the convenience variable (@pxref{Convenience"
    },
    {
      "sha": "26d5940f8425f9fc93dcb1e68e81c827e211a64a",
      "filename": "gdb/python/py-value.c",
      "status": "modified",
      "additions": 27,
      "deletions": 0,
      "changes": 27,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/540bf37b2539923dc70b96eea7cb870522ffd7ec/gdb/python/py-value.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/540bf37b2539923dc70b96eea7cb870522ffd7ec/gdb/python/py-value.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-value.c?ref=540bf37b2539923dc70b96eea7cb870522ffd7ec",
      "patch": "@@ -1960,6 +1960,33 @@ gdbpy_history (PyObject *self, PyObject *args)\n   return value_to_value_object (res_val);\n }\n \n+/* Add a gdb.Value into GDB's history, and return (as an integer) the\n+   position of the newly added value.  */\n+PyObject *\n+gdbpy_add_history (PyObject *self, PyObject *args)\n+{\n+  PyObject *value_obj;\n+\n+  if (!PyArg_ParseTuple (args, \"O\", &value_obj))\n+    return nullptr;\n+\n+  struct value *value = convert_value_from_python (value_obj);\n+  if (value == nullptr)\n+    return nullptr;\n+\n+  try\n+    {\n+      int idx = record_latest_value (value);\n+      return gdb_py_object_from_longest (idx).release ();\n+    }\n+  catch (const gdb_exception &except)\n+    {\n+      GDB_PY_HANDLE_EXCEPTION (except);\n+    }\n+\n+  return nullptr;\n+}\n+\n /* Return the value of a convenience variable.  */\n PyObject *\n gdbpy_convenience_variable (PyObject *self, PyObject *args)"
    },
    {
      "sha": "0e140f1af61ef1e7d9b0ee62fa7115d1d08affda",
      "filename": "gdb/python/python-internal.h",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/540bf37b2539923dc70b96eea7cb870522ffd7ec/gdb/python/python-internal.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/540bf37b2539923dc70b96eea7cb870522ffd7ec/gdb/python/python-internal.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/python-internal.h?ref=540bf37b2539923dc70b96eea7cb870522ffd7ec",
      "patch": "@@ -412,6 +412,7 @@ extern enum ext_lang_rc gdbpy_get_matching_xmethod_workers\n \n \f\n PyObject *gdbpy_history (PyObject *self, PyObject *args);\n+PyObject *gdbpy_add_history (PyObject *self, PyObject *args);\n PyObject *gdbpy_convenience_variable (PyObject *self, PyObject *args);\n PyObject *gdbpy_set_convenience_variable (PyObject *self, PyObject *args);\n PyObject *gdbpy_breakpoints (PyObject *, PyObject *);"
    },
    {
      "sha": "6af9c722e7b8f9a52f66f88f689845977befdb1b",
      "filename": "gdb/python/python.c",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/540bf37b2539923dc70b96eea7cb870522ffd7ec/gdb/python/python.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/540bf37b2539923dc70b96eea7cb870522ffd7ec/gdb/python/python.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/python.c?ref=540bf37b2539923dc70b96eea7cb870522ffd7ec",
      "patch": "@@ -2076,6 +2076,8 @@ PyMethodDef python_GdbMethods[] =\n {\n   { \"history\", gdbpy_history, METH_VARARGS,\n     \"Get a value from history\" },\n+  { \"add_history\", gdbpy_add_history, METH_VARARGS,\n+    \"Add a value to the value history list\" },\n   { \"execute\", (PyCFunction) execute_gdb_command, METH_VARARGS | METH_KEYWORDS,\n     \"execute (command [, from_tty] [, to_string]) -> [String]\\n\\\n Evaluate command, a string, as a gdb CLI command.  Optionally returns\\n\\"
    },
    {
      "sha": "d9f1a76a388890f5f4f8c6ec800b7e16193baa06",
      "filename": "gdb/testsuite/gdb.python/py-value.exp",
      "status": "modified",
      "additions": 26,
      "deletions": 0,
      "changes": 26,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/540bf37b2539923dc70b96eea7cb870522ffd7ec/gdb/testsuite/gdb.python/py-value.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/540bf37b2539923dc70b96eea7cb870522ffd7ec/gdb/testsuite/gdb.python/py-value.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.python/py-value.exp?ref=540bf37b2539923dc70b96eea7cb870522ffd7ec",
      "patch": "@@ -575,6 +575,31 @@ proc test_value_from_buffer {} {\n \t   \"attempt to construct value with string as type\"\n }\n \n+# Test the gdb.add_history API.\n+proc test_add_to_history {} {\n+    # Add a gdb.Value to the value history list.\n+    gdb_test_no_output \"python idx = gdb.add_history(gdb.Value(42))\" \\\n+\t\"add value 42 to the history list\"\n+    gdb_test \"python print (\\\"$%d = %s\\\" % (idx, gdb.history (idx)))\" \\\n+\t\" = 42\" \"print value 42 from the history list\"\n+    set idx [get_python_valueof \"idx\" \"**DEFAULT**\" \"get idx for value 42\"]\n+    gdb_test \"print \\$${idx}\" \" = 42\"\n+\n+    # Add something to the history list that can be converted into a\n+    # gdb.Value.\n+    gdb_test_no_output \"python idx = gdb.add_history(84)\" \\\n+\t\"add value to 84 to the history list\"\n+    gdb_test \"python print (\\\"$%d = %s\\\" % (idx, gdb.history (idx)))\" \\\n+\t\" = 84\" \"print value 84 from the history list\"\n+    set idx [get_python_valueof \"idx\" \"**DEFAULT**\" \"get idx for value 84\"]\n+    gdb_test \"print \\$${idx}\" \" = 84\"\n+\n+    # Try adding something that can't be converted to a gdb.Value,\n+    # this should give an error.\n+    gdb_test \"python idx = gdb.add_history(gdb.GdbError(\\\"an error\\\"))\" \\\n+\t\"TypeError: Could not convert Python object: .*\"\n+}\n+\n # Build C version of executable.  C++ is built later.\n if { [build_inferior \"${binfile}\" \"c\"] < 0 } {\n     return -1\n@@ -594,6 +619,7 @@ test_objfiles\n test_parse_and_eval\n test_value_hash\n test_float_conversion\n+test_add_to_history\n \n # The following tests require execution.\n "
    }
  ]
}