{
  "sha": "80fc5e77f07557830aaac90723dc599e6d047922",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ODBmYzVlNzdmMDc1NTc4MzBhYWFjOTA3MjNkYzU5OWU2ZDA0NzkyMg==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-05-22T20:55:17Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-05-22T20:55:17Z"
    },
    "message": "gdb: remove TYPE_FIELDS macro\n\nRemove all uses of the `TYPE_FIELDS` macro.  Replace them with either:\n\n1) type::fields, to obtain a pointer to the fields array (same as\n   TYPE_FIELDS yields)\n2) type::field, a new convenience method that obtains a reference to one\n   of the type's field by index.  It is meant to replace\n\n     TYPE_FIELDS (type)[idx]\n\n   with\n\n     type->field (idx)\n\ngdb/ChangeLog:\n\n\t* gdbtypes.h (struct type) <field>: New method.\n\t(TYPE_FIELDS): Remove, replace all uses with either type::fields\n\tor type::field.\n\nChange-Id: I49fba10114417deb502060c6156aa5f7fc62462f",
    "tree": {
      "sha": "2630018f94b5bc23fd160e17468acc7c8675c321",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/2630018f94b5bc23fd160e17468acc7c8675c321"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/80fc5e77f07557830aaac90723dc599e6d047922",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/80fc5e77f07557830aaac90723dc599e6d047922",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/80fc5e77f07557830aaac90723dc599e6d047922",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/80fc5e77f07557830aaac90723dc599e6d047922/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "3cabb6b0694b65c7b5ed800822ca08bd899fc1d1",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3cabb6b0694b65c7b5ed800822ca08bd899fc1d1",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/3cabb6b0694b65c7b5ed800822ca08bd899fc1d1"
    }
  ],
  "stats": {
    "total": 74,
    "additions": 42,
    "deletions": 32
  },
  "files": [
    {
      "sha": "27472c8a8a4be5f932fdd487c23abc62d1232948",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/80fc5e77f07557830aaac90723dc599e6d047922/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/80fc5e77f07557830aaac90723dc599e6d047922/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=80fc5e77f07557830aaac90723dc599e6d047922",
      "patch": "@@ -1,3 +1,9 @@\n+2020-05-22  Simon Marchi  <simon.marchi@efficios.com>\n+\n+\t* gdbtypes.h (struct type) <field>: New method.\n+\t(TYPE_FIELDS): Remove, replace all uses with either type::fields\n+\tor type::field.\n+\n 2020-05-22  Simon Marchi  <simon.marchi@efficios.com>\n \n \t* gdbtypes.h (struct type) <fields, set_fields>: New methods."
    },
    {
      "sha": "c99705ca74b892938681699c0f07b12fbdebb1bd",
      "filename": "gdb/ada-lang.c",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/80fc5e77f07557830aaac90723dc599e6d047922/gdb/ada-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/80fc5e77f07557830aaac90723dc599e6d047922/gdb/ada-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-lang.c?ref=80fc5e77f07557830aaac90723dc599e6d047922",
      "patch": "@@ -8242,7 +8242,7 @@ ada_template_to_fixed_record_type_1 (struct type *type,\n       if (branch_type == NULL)\n         {\n           for (f = variant_field + 1; f < rtype->num_fields (); f += 1)\n-            TYPE_FIELDS (rtype)[f - 1] = TYPE_FIELDS (rtype)[f];\n+            rtype->field (f - 1) = rtype->field (f);\n \t  rtype->set_num_fields (rtype->num_fields () - 1);\n         }\n       else\n@@ -8355,7 +8355,7 @@ template_to_static_fixed_type (struct type *type0)\n \t      field *fields =\n \t\t((struct field *)\n \t\t TYPE_ALLOC (type, nfields * sizeof (struct field)));\n-\t      memcpy (fields, TYPE_FIELDS (type0),\n+\t      memcpy (fields, type0->fields (),\n \t\t      sizeof (struct field) * nfields);\n \t      type->set_fields (fields);\n \n@@ -8407,7 +8407,7 @@ to_record_with_fixed_variant_part (struct type *type, const gdb_byte *valaddr,\n \n   field *fields =\n     (struct field *) TYPE_ALLOC (rtype, nfields * sizeof (struct field));\n-  memcpy (fields, TYPE_FIELDS (type), sizeof (struct field) * nfields);\n+  memcpy (fields, type->fields (), sizeof (struct field) * nfields);\n   rtype->set_fields (fields);\n \n   rtype->set_name (ada_type_name (type));\n@@ -8427,7 +8427,7 @@ to_record_with_fixed_variant_part (struct type *type, const gdb_byte *valaddr,\n       int f;\n \n       for (f = variant_field + 1; f < nfields; f += 1)\n-        TYPE_FIELDS (rtype)[f - 1] = TYPE_FIELDS (rtype)[f];\n+        rtype->field (f - 1) = rtype->field (f);\n       rtype->set_num_fields (rtype->num_fields () - 1);\n     }\n   else"
    },
    {
      "sha": "29ac595cb253789f38557d0e3b2df338ddee206e",
      "filename": "gdb/c-typeprint.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/80fc5e77f07557830aaac90723dc599e6d047922/gdb/c-typeprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/80fc5e77f07557830aaac90723dc599e6d047922/gdb/c-typeprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/c-typeprint.c?ref=80fc5e77f07557830aaac90723dc599e6d047922",
      "patch": "@@ -277,7 +277,7 @@ cp_type_print_method_args (struct type *mtype, const char *prefix,\n \t\t\t   enum language language,\n \t\t\t   const struct type_print_options *flags)\n {\n-  struct field *args = TYPE_FIELDS (mtype);\n+  struct field *args = mtype->fields ();\n   int nargs = mtype->num_fields ();\n   int varargs = TYPE_VARARGS (mtype);\n   int i;"
    },
    {
      "sha": "e6d08110b2a762293d87ba50d1d4dcd052aa08c3",
      "filename": "gdb/dwarf2/read.c",
      "status": "modified",
      "additions": 5,
      "deletions": 5,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/80fc5e77f07557830aaac90723dc599e6d047922/gdb/dwarf2/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/80fc5e77f07557830aaac90723dc599e6d047922/gdb/dwarf2/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.c?ref=80fc5e77f07557830aaac90723dc599e6d047922",
      "patch": "@@ -9458,7 +9458,7 @@ quirk_rust_enum (struct type *type, struct objfile *objfile)\n       field *new_fields\n \t= (struct field *) TYPE_ZALLOC (type, ((type->num_fields () + 1)\n \t\t\t\t\t       * sizeof (struct field)));\n-      memcpy (new_fields + 1, TYPE_FIELDS (type),\n+      memcpy (new_fields + 1, type->fields (),\n \t      type->num_fields () * sizeof (struct field));\n       type->set_fields (new_fields);\n       type->set_num_fields (type->num_fields () + 1);\n@@ -15002,7 +15002,7 @@ dwarf2_add_member_fn (struct field_info *fip, struct die_info *die,\n \t   of the method itself (TYPE_CODE_METHOD).  */\n       smash_to_method_type (fnp->type, type,\n \t\t\t    TYPE_TARGET_TYPE (this_type),\n-\t\t\t    TYPE_FIELDS (this_type),\n+\t\t\t    this_type->fields (),\n \t\t\t    this_type->num_fields (),\n \t\t\t    TYPE_VARARGS (this_type));\n \n@@ -15219,7 +15219,7 @@ quirk_gcc_member_function_pointer (struct type *type, struct objfile *objfile)\n   self_type = TYPE_TARGET_TYPE (TYPE_FIELD_TYPE (pfn_type, 0));\n   new_type = alloc_type (objfile);\n   smash_to_method_type (new_type, self_type, TYPE_TARGET_TYPE (pfn_type),\n-\t\t\tTYPE_FIELDS (pfn_type), pfn_type->num_fields (),\n+\t\t\tpfn_type->fields (), pfn_type->num_fields (),\n \t\t\tTYPE_VARARGS (pfn_type));\n   smash_to_methodptr_type (type, new_type);\n }\n@@ -15937,7 +15937,7 @@ update_enumeration_type_from_children (struct die_info *die,\n       type->set_fields\n \t((struct field *)\n \t TYPE_ALLOC (type, sizeof (struct field) * fields.size ()));\n-      memcpy (TYPE_FIELDS (type), fields.data (),\n+      memcpy (type->fields (), fields.data (),\n \t      sizeof (struct field) * fields.size ());\n     }\n \n@@ -16723,7 +16723,7 @@ read_tag_ptr_to_member_type (struct die_info *die, struct dwarf2_cu *cu)\n \t= alloc_type (cu->per_cu->dwarf2_per_objfile->objfile);\n \n       smash_to_method_type (new_type, domain, TYPE_TARGET_TYPE (to_type),\n-\t\t\t    TYPE_FIELDS (to_type), to_type->num_fields (),\n+\t\t\t    to_type->fields (), to_type->num_fields (),\n \t\t\t    TYPE_VARARGS (to_type));\n       type = lookup_methodptr_type (new_type);\n     }"
    },
    {
      "sha": "3f23cebfb29648acd7a3953208616a2c5acadefe",
      "filename": "gdb/eval.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/80fc5e77f07557830aaac90723dc599e6d047922/gdb/eval.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/80fc5e77f07557830aaac90723dc599e6d047922/gdb/eval.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/eval.c?ref=80fc5e77f07557830aaac90723dc599e6d047922",
      "patch": "@@ -692,7 +692,7 @@ fake_method::fake_method (type_instance_flags flags,\n \n fake_method::~fake_method ()\n {\n-  xfree (TYPE_FIELDS (&m_type));\n+  xfree (m_type.fields ());\n }\n \n /* Helper for evaluating an OP_VAR_VALUE.  */"
    },
    {
      "sha": "96b75a00a923d9890e2ea199866bff0a98562514",
      "filename": "gdb/gdbtypes.c",
      "status": "modified",
      "additions": 7,
      "deletions": 7,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/80fc5e77f07557830aaac90723dc599e6d047922/gdb/gdbtypes.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/80fc5e77f07557830aaac90723dc599e6d047922/gdb/gdbtypes.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbtypes.c?ref=80fc5e77f07557830aaac90723dc599e6d047922",
      "patch": "@@ -2242,8 +2242,8 @@ resolve_dynamic_union (struct type *type,\n     ((struct field *)\n      TYPE_ALLOC (resolved_type,\n \t\t resolved_type->num_fields () * sizeof (struct field)));\n-  memcpy (TYPE_FIELDS (resolved_type),\n-\t  TYPE_FIELDS (type),\n+  memcpy (resolved_type->fields (),\n+\t  type->fields (),\n \t  resolved_type->num_fields () * sizeof (struct field));\n   for (i = 0; i < resolved_type->num_fields (); ++i)\n     {\n@@ -2453,8 +2453,8 @@ resolve_dynamic_struct (struct type *type,\n \t((struct field *)\n \t TYPE_ALLOC (resolved_type,\n \t\t     resolved_type->num_fields () * sizeof (struct field)));\n-      memcpy (TYPE_FIELDS (resolved_type),\n-\t      TYPE_FIELDS (type),\n+      memcpy (resolved_type->fields (),\n+\t      type->fields (),\n \t      resolved_type->num_fields () * sizeof (struct field));\n     }\n \n@@ -5103,7 +5103,7 @@ recursive_dump_type (struct type *type, int spaces)\n     }\n   puts_filtered (\"\\n\");\n   printfi_filtered (spaces, \"nfields %d \", type->num_fields ());\n-  gdb_print_host_address (TYPE_FIELDS (type), gdb_stdout);\n+  gdb_print_host_address (type->fields (), gdb_stdout);\n   puts_filtered (\"\\n\");\n   for (idx = 0; idx < type->num_fields (); idx++)\n     {\n@@ -5634,9 +5634,9 @@ append_composite_type_field_raw (struct type *t, const char *name,\n   struct field *f;\n \n   t->set_num_fields (t->num_fields () + 1);\n-  t->set_fields (XRESIZEVEC (struct field, TYPE_FIELDS (t),\n+  t->set_fields (XRESIZEVEC (struct field, t->fields (),\n \t\t\t     t->num_fields ()));\n-  f = &(TYPE_FIELDS (t)[t->num_fields () - 1]);\n+  f = &t->field (t->num_fields () - 1);\n   memset (f, 0, sizeof f[0]);\n   FIELD_TYPE (f[0]) = field;\n   FIELD_NAME (f[0]) = name;"
    },
    {
      "sha": "f91adbc6cc29b1e4d95622c2ec93e363b0e23703",
      "filename": "gdb/gdbtypes.h",
      "status": "modified",
      "additions": 9,
      "deletions": 5,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/80fc5e77f07557830aaac90723dc599e6d047922/gdb/gdbtypes.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/80fc5e77f07557830aaac90723dc599e6d047922/gdb/gdbtypes.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbtypes.h?ref=80fc5e77f07557830aaac90723dc599e6d047922",
      "patch": "@@ -914,13 +914,19 @@ struct type\n   }\n \n   /* Get the fields array of this type.  */\n-  field *fields () const\n+  struct field *fields () const\n   {\n     return this->main_type->flds_bnds.fields;\n   }\n \n+  /* Get the field at index IDX.  */\n+  struct field &field (int idx) const\n+  {\n+    return this->fields ()[idx];\n+  }\n+\n   /* Set the fields array of this type.  */\n-  void set_fields (field *fields)\n+  void set_fields (struct field *fields)\n   {\n     this->main_type->flds_bnds.fields = fields;\n   }\n@@ -1470,8 +1476,6 @@ extern unsigned type_align (struct type *);\n    space in struct type.  */\n extern bool set_type_align (struct type *, ULONGEST);\n \n-#define TYPE_FIELDS(thistype) (thistype)->fields ()\n-\n #define TYPE_INDEX_TYPE(type) TYPE_FIELD_TYPE (type, 0)\n #define TYPE_RANGE_DATA(thistype) TYPE_MAIN_TYPE(thistype)->flds_bnds.bounds\n #define TYPE_LOW_BOUND(range_type) \\\n@@ -1667,7 +1671,7 @@ extern void set_type_vptr_basetype (struct type *, struct type *);\n #define TYPE_FN_FIELD(thisfn, n) (thisfn)[n]\n #define TYPE_FN_FIELD_PHYSNAME(thisfn, n) (thisfn)[n].physname\n #define TYPE_FN_FIELD_TYPE(thisfn, n) (thisfn)[n].type\n-#define TYPE_FN_FIELD_ARGS(thisfn, n) TYPE_FIELDS ((thisfn)[n].type)\n+#define TYPE_FN_FIELD_ARGS(thisfn, n) (((thisfn)[n].type)->fields ())\n #define TYPE_FN_FIELD_CONST(thisfn, n) ((thisfn)[n].is_const)\n #define TYPE_FN_FIELD_VOLATILE(thisfn, n) ((thisfn)[n].is_volatile)\n #define TYPE_FN_FIELD_PRIVATE(thisfn, n) ((thisfn)[n].is_private)"
    },
    {
      "sha": "e58f1474699691ac02e408cdace237e762aca8e7",
      "filename": "gdb/guile/scm-type.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/80fc5e77f07557830aaac90723dc599e6d047922/gdb/guile/scm-type.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/80fc5e77f07557830aaac90723dc599e6d047922/gdb/guile/scm-type.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/guile/scm-type.c?ref=80fc5e77f07557830aaac90723dc599e6d047922",
      "patch": "@@ -512,7 +512,7 @@ tyscm_field_smob_to_field (field_smob *f_smob)\n   struct type *type = tyscm_field_smob_containing_type (f_smob);\n \n   /* This should be non-NULL by construction.  */\n-  gdb_assert (TYPE_FIELDS (type) != NULL);\n+  gdb_assert (type->fields () != NULL);\n \n   return &TYPE_FIELD (type, f_smob->field_num);\n }"
    },
    {
      "sha": "b35b45ea4c5ebef2e2ad78a6f1bb7bd63d9f525b",
      "filename": "gdb/iq2000-tdep.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/80fc5e77f07557830aaac90723dc599e6d047922/gdb/iq2000-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/80fc5e77f07557830aaac90723dc599e6d047922/gdb/iq2000-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/iq2000-tdep.c?ref=80fc5e77f07557830aaac90723dc599e6d047922",
      "patch": "@@ -607,7 +607,7 @@ iq2000_pass_8bytetype_by_address (struct type *type)\n   if (type->num_fields () != 1)\n     return 1;\n   /* Get field type.  */\n-  ftype = (TYPE_FIELDS (type))[0].type;\n+  ftype = type->field (0).type;\n   /* The field type must have size 8, otherwise pass by address.  */\n   if (TYPE_LENGTH (ftype) != 8)\n     return 1;"
    },
    {
      "sha": "20fdd40d5083950047e94af3244d414f74ae485a",
      "filename": "gdb/mdebugread.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/80fc5e77f07557830aaac90723dc599e6d047922/gdb/mdebugread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/80fc5e77f07557830aaac90723dc599e6d047922/gdb/mdebugread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/mdebugread.c?ref=80fc5e77f07557830aaac90723dc599e6d047922",
      "patch": "@@ -1233,8 +1233,8 @@ parse_symbol (SYMR *sh, union aux_ext *ax, char *ext_sh, int bigend,\n \n     case stMember:\t\t/* member of struct or union */\n       {\n-\tstruct field *f\n-\t  = &TYPE_FIELDS (top_stack->cur_type)[top_stack->cur_field++];\n+\tstruct field *f = &top_stack->cur_type->field (top_stack->cur_field);\n+\ttop_stack->cur_field++;\n \tFIELD_NAME (*f) = name;\n \tSET_FIELD_BITPOS (*f, sh->value);\n \tbitsize = 0;"
    },
    {
      "sha": "c602398506b845cdb1caadc09753ba8bdb3afe1a",
      "filename": "gdb/mips-tdep.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/80fc5e77f07557830aaac90723dc599e6d047922/gdb/mips-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/80fc5e77f07557830aaac90723dc599e6d047922/gdb/mips-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/mips-tdep.c?ref=80fc5e77f07557830aaac90723dc599e6d047922",
      "patch": "@@ -5247,7 +5247,7 @@ mips_n32n64_return_value (struct gdbarch *gdbarch, struct value *function,\n \t\t\t\t: MIPS_V0_REGNUM);\n \t   field < type->num_fields (); field++, regnum += 2)\n \t{\n-\t  int offset = (FIELD_BITPOS (TYPE_FIELDS (type)[field])\n+\t  int offset = (FIELD_BITPOS (type->field (field))\n \t\t\t/ TARGET_CHAR_BIT);\n \t  if (mips_debug)\n \t    fprintf_unfiltered (gdb_stderr, \"Return float struct+%d\\n\",\n@@ -5799,7 +5799,7 @@ mips_o32_return_value (struct gdbarch *gdbarch, struct value *function,\n       for (field = 0, regnum = mips_regnum (gdbarch)->fp0;\n \t   field < type->num_fields (); field++, regnum += 2)\n \t{\n-\t  int offset = (FIELD_BITPOS (TYPE_FIELDS (type)[field])\n+\t  int offset = (FIELD_BITPOS (type->fields ()[field])\n \t\t\t/ TARGET_CHAR_BIT);\n \t  if (mips_debug)\n \t    fprintf_unfiltered (gdb_stderr, \"Return float struct+%d\\n\","
    },
    {
      "sha": "8d5352945243841aab7d0a12ee5878765dc4eb3b",
      "filename": "gdb/stabsread.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/80fc5e77f07557830aaac90723dc599e6d047922/gdb/stabsread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/80fc5e77f07557830aaac90723dc599e6d047922/gdb/stabsread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/stabsread.c?ref=80fc5e77f07557830aaac90723dc599e6d047922",
      "patch": "@@ -1840,7 +1840,7 @@ read_type (const char **pp, struct objfile *objfile)\n \tfunc_type->set_fields\n \t  ((struct field *) TYPE_ALLOC (func_type,\n \t\t\t\t\tnum_args * sizeof (struct field)));\n-        memset (TYPE_FIELDS (func_type), 0, num_args * sizeof (struct field));\n+        memset (func_type->fields (), 0, num_args * sizeof (struct field));\n         {\n           int i;\n           struct type_list *t;\n@@ -3313,7 +3313,7 @@ attach_fields_to_type (struct stab_field_info *fip, struct type *type,\n   type->set_fields\n     ((struct field *)\n      TYPE_ALLOC (type, sizeof (struct field) * nfields));\n-  memset (TYPE_FIELDS (type), 0, sizeof (struct field) * nfields);\n+  memset (type->fields (), 0, sizeof (struct field) * nfields);\n \n   if (non_public_fields)\n     {\n@@ -3660,7 +3660,7 @@ read_enum_type (const char **pp, struct type *type,\n   type->set_fields\n     ((struct field *)\n      TYPE_ALLOC (type, sizeof (struct field) * nsyms));\n-  memset (TYPE_FIELDS (type), 0, sizeof (struct field) * nsyms);\n+  memset (type->fields (), 0, sizeof (struct field) * nsyms);\n \n   /* Find the symbols for the values and put them into the type.\n      The symbols can be found in the symlist that we put them on"
    }
  ]
}