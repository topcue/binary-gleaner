{
  "sha": "dfb68cc35803369cbd163c2ebc07fb27e81d9950",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZGZiNjhjYzM1ODAzMzY5Y2JkMTYzYzJlYmMwN2ZiMjdlODFkOTk1MA==",
  "commit": {
    "author": {
      "name": "Martin Liska",
      "email": "mliska@suse.cz",
      "date": "2020-03-24T10:40:10Z"
    },
    "committer": {
      "name": "H.J. Lu",
      "email": "hjl.tools@gmail.com",
      "date": "2020-03-24T11:30:20Z"
    },
    "message": "include: Sync plugin-api.h with GCC\n\nImprove endianess detection.\n\n\tPR lto/94249\n\t* plugin-api.h: Add more robust endianess detection.",
    "tree": {
      "sha": "865c6154128c25e9d7f29f1e320587287084e0b7",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/865c6154128c25e9d7f29f1e320587287084e0b7"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/dfb68cc35803369cbd163c2ebc07fb27e81d9950",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/dfb68cc35803369cbd163c2ebc07fb27e81d9950",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/dfb68cc35803369cbd163c2ebc07fb27e81d9950",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/dfb68cc35803369cbd163c2ebc07fb27e81d9950/comments",
  "author": {
    "login": "marxin",
    "id": 2658545,
    "node_id": "MDQ6VXNlcjI2NTg1NDU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/marxin",
    "html_url": "https://github.com/marxin",
    "followers_url": "https://api.github.com/users/marxin/followers",
    "following_url": "https://api.github.com/users/marxin/following{/other_user}",
    "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/marxin/subscriptions",
    "organizations_url": "https://api.github.com/users/marxin/orgs",
    "repos_url": "https://api.github.com/users/marxin/repos",
    "events_url": "https://api.github.com/users/marxin/events{/privacy}",
    "received_events_url": "https://api.github.com/users/marxin/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "hjl-tools",
    "id": 1072356,
    "node_id": "MDQ6VXNlcjEwNzIzNTY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/hjl-tools",
    "html_url": "https://github.com/hjl-tools",
    "followers_url": "https://api.github.com/users/hjl-tools/followers",
    "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}",
    "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions",
    "organizations_url": "https://api.github.com/users/hjl-tools/orgs",
    "repos_url": "https://api.github.com/users/hjl-tools/repos",
    "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}",
    "received_events_url": "https://api.github.com/users/hjl-tools/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "7e6e972f74aeac0ebdbd95a7f905d871cd2581de",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7e6e972f74aeac0ebdbd95a7f905d871cd2581de",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/7e6e972f74aeac0ebdbd95a7f905d871cd2581de"
    }
  ],
  "stats": {
    "total": 70,
    "additions": 68,
    "deletions": 2
  },
  "files": [
    {
      "sha": "3d26a570cacfb942ae1c3583edbe338797014b65",
      "filename": "include/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/dfb68cc35803369cbd163c2ebc07fb27e81d9950/include/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/dfb68cc35803369cbd163c2ebc07fb27e81d9950/include/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/ChangeLog?ref=dfb68cc35803369cbd163c2ebc07fb27e81d9950",
      "patch": "@@ -1,3 +1,8 @@\n+2020-03-24  Martin Liska  <mliska@suse.cz>\n+\n+\tPR lto/94249\n+\t* plugin-api.h: Add more robust endianess detection.\n+\n 2020-03-21  Martin Liska  <mliska@suse.cz>\n \n \t* plugin-api.h (enum ld_plugin_symbol_type): Remove"
    },
    {
      "sha": "864d2bf91ac6b77a74f6537bb138feab4e674e34",
      "filename": "include/plugin-api.h",
      "status": "modified",
      "additions": 63,
      "deletions": 2,
      "changes": 65,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/dfb68cc35803369cbd163c2ebc07fb27e81d9950/include/plugin-api.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/dfb68cc35803369cbd163c2ebc07fb27e81d9950/include/plugin-api.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/plugin-api.h?ref=dfb68cc35803369cbd163c2ebc07fb27e81d9950",
      "patch": "@@ -37,6 +37,60 @@\n #error cannot find uint64_t type\n #endif\n \n+/* Detect endianess based on __BYTE_ORDER__ macro.  */\n+#if defined(__BYTE_ORDER__) && defined(__ORDER_BIG_ENDIAN__) && \\\n+    defined(__ORDER_LITTLE_ENDIAN__) && defined(__ORDER_PDP_ENDIAN__)\n+#if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__\n+#define PLUGIN_LITTLE_ENDIAN 1\n+#elif __BYTE_ORDER__ == __ORDER_BIG_ENDIAN__\n+#define PLUGIN_BIG_ENDIAN 1\n+#elif __BYTE_ORDER__ == __ORDER_PDP_ENDIAN__\n+#define PLUGIN_PDP_ENDIAN 1\n+#endif\n+#else\n+/* Older GCC releases (<4.6.0) can make detection from glibc macros.  */\n+#if defined(__GLIBC__) || defined(__GNU_LIBRARY__) || defined(__ANDROID__)\n+#include <endian.h>\n+#ifdef _BYTE_ORDER\n+#if __BYTE_ORDER == __LITTLE_ENDIAN\n+#define PLUGIN_LITTLE_ENDIAN 1\n+#elif __BYTE_ORDER == __BIG_ENDIAN\n+#define PLUGIN_BIG_ENDIAN 1\n+#endif\n+#endif\n+#endif\n+/* Include all necessary header files based on target.  */\n+#if defined(__SVR4) && defined(__sun)\n+#include <sys/byteorder.h>\n+#endif\n+#if defined(__FreeBSD__) || defined(__NetBSD__) || \\\n+    defined(__DragonFly__) || defined(__minix)\n+#include <sys/endian.h>\n+#endif\n+#if defined(__OpenBSD__)\n+#include <machine/endian.h>\n+#endif\n+/* Detect endianess based on _BYTE_ORDER.  */\n+#ifdef _BYTE_ORDER\n+#if _BYTE_ORDER == _LITTLE_ENDIAN\n+#define PLUGIN_LITTLE_ENDIAN 1\n+#elif _BYTE_ORDER == _BIG_ENDIAN\n+#define PLUGIN_BIG_ENDIAN 1\n+#endif\n+#endif\n+/* Detect based on _WIN32.  */\n+#if defined(_WIN32)\n+#define PLUGIN_LITTLE_ENDIAN 1\n+#endif\n+/* Detect based on __BIG_ENDIAN__ and __LITTLE_ENDIAN__ */\n+#ifdef __LITTLE_ENDIAN__\n+#define PLUGIN_LITTLE_ENDIAN 1\n+#endif\n+#ifdef __BIG_ENDIAN__\n+#define PLUGIN_BIG_ENDIAN 1\n+#endif\n+#endif\n+\n #ifdef __cplusplus\n extern \"C\"\n {\n@@ -89,16 +143,23 @@ struct ld_plugin_symbol\n   char *version;\n   /* This is for compatibility with older ABIs.  The older ABI defined\n      only 'def' field.  */\n-#ifdef __BIG_ENDIAN__\n+#if PLUGIN_BIG_ENDIAN == 1\n   char unused;\n   char section_kind;\n   char symbol_type;\n   char def;\n-#else\n+#elif PLUGIN_LITTLE_ENDIAN == 1\n   char def;\n   char symbol_type;\n   char section_kind;\n   char unused;\n+#elif PLUGIN_PDP_ENDIAN == 1\n+  char symbol_type;\n+  char def;\n+  char unused;\n+  char section_kind;\n+#else\n+#error \"Could not detect architecture endianess\"\n #endif\n   int visibility;\n   uint64_t size;"
    }
  ]
}