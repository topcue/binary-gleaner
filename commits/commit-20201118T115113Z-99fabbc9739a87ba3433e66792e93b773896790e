{
  "sha": "99fabbc9739a87ba3433e66792e93b773896790e",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OTlmYWJiYzk3MzlhODdiYTM0MzNlNjY3OTJlOTNiNzczODk2NzkwZQ==",
  "commit": {
    "author": {
      "name": "Jozef Lawrynowicz",
      "email": "jozef.l@mittosystems.com",
      "date": "2020-11-18T11:51:13Z"
    },
    "committer": {
      "name": "Jozef Lawrynowicz",
      "email": "jozef.l@mittosystems.com",
      "date": "2020-11-18T11:51:13Z"
    },
    "message": "Support SHF_GNU_RETAIN ELF section flag\n\nThe SHF_GNU_RETAIN section flag is an extension to the GNU ELF OSABI.\nIt is defined as follows:\n\n=========================================================\nSection Attribute Flags\n+-------------------------------------+\n| Name           | Value              |\n+-------------------------------------+\n| SHF_GNU_RETAIN | 0x200000 (1 << 21) |\n+-------------------------------------+\n\nSHF_GNU_RETAIN\n  The link editor should not garbage collect the section.\n=========================================================\n\nThe .section directive accepts the \"R\" flag, which indicates\nSHF_GNU_RETAIN should be applied to the section.\n\nThere is not a direct mapping of SHF_GNU_RETAIN to the BFD\nsection flag SEC_KEEP. Keeping these flags distinct allows\nSHF_GNU_RETAIN sections to be explicitly removed by placing them in\n/DISCARD/.\n\nbfd/ChangeLog:\n\n\t* elf-bfd.h (enum elf_gnu_osabi): Add elf_gnu_osabi_retain.\n\t(struct elf_obj_tdata): Increase has_gnu_osabi to 4 bits.\n\t* elf.c (_bfd_elf_make_section_from_shdr): Set elf_gnu_osabi_retain\n\tfor SHF_GNU_RETAIN.\n\t(_bfd_elf_final_write_processing): Report if SHF_GNU_RETAIN is\n\tnot supported by the OSABI.\n\tAdjust error messages.\n\t* elflink.c (elf_link_input_bfd): Copy enabled has_gnu_osabi bits from\n\tinput BFD to output BFD.\n\t(bfd_elf_gc_sections): gc_mark the section if SHF_GNU_RETAIN is set.\n\nbinutils/ChangeLog:\n\n\t* NEWS: Announce SHF_GNU_RETAIN support.\n\t* readelf.c (get_elf_section_flags): Handle SHF_GNU_RETAIN.\n\tRecognize SHF_GNU_RETAIN and SHF_GNU_MBIND only for supported OSABIs.\n\t* testsuite/binutils-all/readelf.exp: Run new tests.\n\tDon't run run_dump_test when there isn't an assembler available.\n\t* testsuite/lib/binutils-common.exp (supports_gnu_osabi): Adjust\n\tcomment.\n\t* testsuite/binutils-all/readelf-maskos-1a.d: New test.\n\t* testsuite/binutils-all/readelf-maskos-1b.d: New test.\n\t* testsuite/binutils-all/readelf-maskos.s: New test.\n\t* testsuite/binutils-all/retain1.s: New test.\n\t* testsuite/binutils-all/retain1a.d: New test.\n\t* testsuite/binutils-all/retain1b.d: New test.\n\ngas/ChangeLog:\n\n\t* NEWS: Announce SHF_GNU_RETAIN support.\n\t* config/obj-elf.c (obj_elf_change_section): Merge SHF_GNU_RETAIN bit\n\tbetween section declarations.\n\t(obj_elf_parse_section_letters): Handle 'R' flag.\n\tHandle numeric flag values within the SHF_MASKOS range.\n\t(obj_elf_section): Validate SHF_GNU_RETAIN usage.\n\t* doc/as.texi: Document 'R' flag to .section directive.\n\t* testsuite/gas/elf/elf.exp: Run new tests.\n\t* testsuite/gas/elf/section10.d: Unset SHF_GNU_RETAIN bit.\n\t* testsuite/gas/elf/section10.s: Likewise.\n\t* testsuite/gas/elf/section22.d: New test.\n\t* testsuite/gas/elf/section22.s: New test.\n\t* testsuite/gas/elf/section23.s: New test.\n\t* testsuite/gas/elf/section23a.d: New test.\n\t* testsuite/gas/elf/section23b.d: New test.\n\t* testsuite/gas/elf/section23b.err: New test.\n\t* testsuite/gas/elf/section24.l: New test.\n\t* testsuite/gas/elf/section24.s: New test.\n\t* testsuite/gas/elf/section24a.d: New test.\n\t* testsuite/gas/elf/section24b.d: New test.\n\ninclude/ChangeLog:\n\n\t* elf/common.h (SHF_GNU_RETAIN): Define.\n\nld/ChangeLog:\n\n\t* NEWS: Announce support for SHF_GNU_RETAIN.\n\t* ld.texi (garbage collection): Document SHF_GNU_RETAIN.\n\t(Output Section Discarding): Likewise.\n\t* testsuite/ld-elf/elf.exp: Run new tests.\n\t* testsuite/ld-elf/retain1.s: New test.\n\t* testsuite/ld-elf/retain1a.d: New test.\n\t* testsuite/ld-elf/retain1b.d: New test.\n\t* testsuite/ld-elf/retain2.d: New test.\n\t* testsuite/ld-elf/retain2.ld: New test.\n\t* testsuite/ld-elf/retain2.map: New test.\n\t* testsuite/ld-elf/retain3.d: New test.\n\t* testsuite/ld-elf/retain3.s: New test.\n\t* testsuite/ld-elf/retain4.d: New test.\n\t* testsuite/ld-elf/retain4.s: New test.\n\t* testsuite/ld-elf/retain5.d: New test.\n\t* testsuite/ld-elf/retain5.map: New test.\n\t* testsuite/ld-elf/retain5lib.s: New test.\n\t* testsuite/ld-elf/retain5main.s: New test.\n\t* testsuite/ld-elf/retain6a.d: New test.\n\t* testsuite/ld-elf/retain6b.d: New test.\n\t* testsuite/ld-elf/retain6lib.s: New test.\n\t* testsuite/ld-elf/retain6main.s: New test.",
    "tree": {
      "sha": "6a52b12cc648532f3b38fd102cec221a207188ba",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/6a52b12cc648532f3b38fd102cec221a207188ba"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/99fabbc9739a87ba3433e66792e93b773896790e",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/99fabbc9739a87ba3433e66792e93b773896790e",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/99fabbc9739a87ba3433e66792e93b773896790e",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/99fabbc9739a87ba3433e66792e93b773896790e/comments",
  "author": {
    "login": "jozefl-mitto",
    "id": 36524004,
    "node_id": "MDQ6VXNlcjM2NTI0MDA0",
    "avatar_url": "https://avatars.githubusercontent.com/u/36524004?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jozefl-mitto",
    "html_url": "https://github.com/jozefl-mitto",
    "followers_url": "https://api.github.com/users/jozefl-mitto/followers",
    "following_url": "https://api.github.com/users/jozefl-mitto/following{/other_user}",
    "gists_url": "https://api.github.com/users/jozefl-mitto/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jozefl-mitto/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jozefl-mitto/subscriptions",
    "organizations_url": "https://api.github.com/users/jozefl-mitto/orgs",
    "repos_url": "https://api.github.com/users/jozefl-mitto/repos",
    "events_url": "https://api.github.com/users/jozefl-mitto/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jozefl-mitto/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "jozefl-mitto",
    "id": 36524004,
    "node_id": "MDQ6VXNlcjM2NTI0MDA0",
    "avatar_url": "https://avatars.githubusercontent.com/u/36524004?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jozefl-mitto",
    "html_url": "https://github.com/jozefl-mitto",
    "followers_url": "https://api.github.com/users/jozefl-mitto/followers",
    "following_url": "https://api.github.com/users/jozefl-mitto/following{/other_user}",
    "gists_url": "https://api.github.com/users/jozefl-mitto/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jozefl-mitto/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jozefl-mitto/subscriptions",
    "organizations_url": "https://api.github.com/users/jozefl-mitto/orgs",
    "repos_url": "https://api.github.com/users/jozefl-mitto/repos",
    "events_url": "https://api.github.com/users/jozefl-mitto/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jozefl-mitto/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "40d9d2fd796a184f04a83ca4442fd78034b5e00b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/40d9d2fd796a184f04a83ca4442fd78034b5e00b",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/40d9d2fd796a184f04a83ca4442fd78034b5e00b"
    }
  ],
  "stats": {
    "total": 984,
    "additions": 943,
    "deletions": 41
  },
  "files": [
    {
      "sha": "a23da61653dbeda0e53747cace64fbf3db660235",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 14,
      "deletions": 0,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/99fabbc9739a87ba3433e66792e93b773896790e/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/99fabbc9739a87ba3433e66792e93b773896790e/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=99fabbc9739a87ba3433e66792e93b773896790e",
      "patch": "@@ -1,3 +1,17 @@\n+2020-11-18  Jozef Lawrynowicz  <jozef.l@mittosystems.com>\n+\tH.J. Lu  <hongjiu.lu@intel.com>\n+\n+\t* elf-bfd.h (enum elf_gnu_osabi): Add elf_gnu_osabi_retain.\n+\t(struct elf_obj_tdata): Increase has_gnu_osabi to 4 bits.\n+\t* elf.c (_bfd_elf_make_section_from_shdr): Set elf_gnu_osabi_retain\n+\tfor SHF_GNU_RETAIN.\n+\t(_bfd_elf_final_write_processing): Report if SHF_GNU_RETAIN is\n+\tnot supported by the OSABI.\n+\tAdjust error messages.\n+\t* elflink.c (elf_link_input_bfd): Copy enabled has_gnu_osabi bits from\n+\tinput BFD to output BFD.\n+\t(bfd_elf_gc_sections): gc_mark the section if SHF_GNU_RETAIN is set.\n+\n 2020-11-16  Przemyslaw Wirkus  <przemyslaw.wirkus@arm.com>\n \n \t* cpu-arm.c (processors): Add Cortex-A78C."
    },
    {
      "sha": "ffb75f79197be90cbd30cbd0c2aac7d66967b633",
      "filename": "bfd/elf-bfd.h",
      "status": "modified",
      "additions": 5,
      "deletions": 4,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/99fabbc9739a87ba3433e66792e93b773896790e/bfd/elf-bfd.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/99fabbc9739a87ba3433e66792e93b773896790e/bfd/elf-bfd.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf-bfd.h?ref=99fabbc9739a87ba3433e66792e93b773896790e",
      "patch": "@@ -1897,14 +1897,15 @@ struct output_elf_obj_tdata\n   bfd_boolean flags_init;\n };\n \n-/* Indicate if the bfd contains SHF_GNU_MBIND sections or symbols that\n-   have the STT_GNU_IFUNC symbol type or STB_GNU_UNIQUE binding.  Used\n-   to set the osabi field in the ELF header structure.  */\n+/* Indicate if the bfd contains SHF_GNU_MBIND/SHF_GNU_RETAIN sections or\n+   symbols that have the STT_GNU_IFUNC symbol type or STB_GNU_UNIQUE\n+   binding.  Used to set the osabi field in the ELF header structure.  */\n enum elf_gnu_osabi\n {\n   elf_gnu_osabi_mbind = 1 << 0,\n   elf_gnu_osabi_ifunc = 1 << 1,\n   elf_gnu_osabi_unique = 1 << 2,\n+  elf_gnu_osabi_retain = 1 << 3,\n };\n \n typedef struct elf_section_list\n@@ -2034,7 +2035,7 @@ struct elf_obj_tdata\n   ENUM_BITFIELD (dynamic_lib_link_class) dyn_lib_class : 4;\n \n   /* Whether the bfd uses OS specific bits that require ELFOSABI_GNU.  */\n-  ENUM_BITFIELD (elf_gnu_osabi) has_gnu_osabi : 3;\n+  ENUM_BITFIELD (elf_gnu_osabi) has_gnu_osabi : 4;\n \n   /* Whether if the bfd contains the GNU_PROPERTY_NO_COPY_ON_PROTECTED\n      property.  */"
    },
    {
      "sha": "288548d8e5909491e0544c97e8f783d2cd3312c7",
      "filename": "bfd/elf.c",
      "status": "modified",
      "additions": 15,
      "deletions": 6,
      "changes": 21,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/99fabbc9739a87ba3433e66792e93b773896790e/bfd/elf.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/99fabbc9739a87ba3433e66792e93b773896790e/bfd/elf.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf.c?ref=99fabbc9739a87ba3433e66792e93b773896790e",
      "patch": "@@ -1066,9 +1066,12 @@ _bfd_elf_make_section_from_shdr (bfd *abfd,\n       /* FIXME: We should not recognize SHF_GNU_MBIND for ELFOSABI_NONE,\n \t but binutils as of 2019-07-23 did not set the EI_OSABI header\n \t byte.  */\n-    case ELFOSABI_NONE:\n     case ELFOSABI_GNU:\n     case ELFOSABI_FREEBSD:\n+      if ((hdr->sh_flags & SHF_GNU_RETAIN) != 0)\n+\telf_tdata (abfd)->has_gnu_osabi |= elf_gnu_osabi_retain;\n+      /* Fall through */\n+    case ELFOSABI_NONE:\n       if ((hdr->sh_flags & SHF_GNU_MBIND) != 0)\n \telf_tdata (abfd)->has_gnu_osabi |= elf_gnu_osabi_mbind;\n       break;\n@@ -12456,8 +12459,8 @@ _bfd_elf_final_write_processing (bfd *abfd)\n     i_ehdrp->e_ident[EI_OSABI] = get_elf_backend_data (abfd)->elf_osabi;\n \n   /* Set the osabi field to ELFOSABI_GNU if the binary contains\n-     SHF_GNU_MBIND sections or symbols of STT_GNU_IFUNC type or\n-     STB_GNU_UNIQUE binding.  */\n+     SHF_GNU_MBIND or SHF_GNU_RETAIN sections or symbols of STT_GNU_IFUNC type\n+     or STB_GNU_UNIQUE binding.  */\n   if (elf_tdata (abfd)->has_gnu_osabi != 0)\n     {\n       if (i_ehdrp->e_ident[EI_OSABI] == ELFOSABI_NONE)\n@@ -12466,11 +12469,17 @@ _bfd_elf_final_write_processing (bfd *abfd)\n \t       && i_ehdrp->e_ident[EI_OSABI] != ELFOSABI_FREEBSD)\n \t{\n \t  if (elf_tdata (abfd)->has_gnu_osabi & elf_gnu_osabi_mbind)\n-\t    _bfd_error_handler (_(\"GNU_MBIND section is unsupported\"));\n+\t    _bfd_error_handler (_(\"GNU_MBIND section is supported only by GNU \"\n+\t\t\t\t  \"and FreeBSD targets\"));\n \t  if (elf_tdata (abfd)->has_gnu_osabi & elf_gnu_osabi_ifunc)\n-\t    _bfd_error_handler (_(\"symbol type STT_GNU_IFUNC is unsupported\"));\n+\t    _bfd_error_handler (_(\"symbol type STT_GNU_IFUNC is supported \"\n+\t\t\t\t  \"only by GNU and FreeBSD targets\"));\n \t  if (elf_tdata (abfd)->has_gnu_osabi & elf_gnu_osabi_unique)\n-\t    _bfd_error_handler (_(\"symbol binding STB_GNU_UNIQUE is unsupported\"));\n+\t    _bfd_error_handler (_(\"symbol binding STB_GNU_UNIQUE is supported \"\n+\t\t\t\t  \"only by GNU and FreeBSD targets\"));\n+\t  if (elf_tdata (abfd)->has_gnu_osabi & elf_gnu_osabi_retain)\n+\t    _bfd_error_handler (_(\"GNU_RETAIN section is supported \"\n+\t\t\t\t  \"only by GNU and FreeBSD targets\"));\n \t  bfd_set_error (bfd_error_sorry);\n \t  return FALSE;\n \t}"
    },
    {
      "sha": "6cc636142c77e2aaae01362205080e54a080b370",
      "filename": "bfd/elflink.c",
      "status": "modified",
      "additions": 11,
      "deletions": 1,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/99fabbc9739a87ba3433e66792e93b773896790e/bfd/elflink.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/99fabbc9739a87ba3433e66792e93b773896790e/bfd/elflink.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elflink.c?ref=99fabbc9739a87ba3433e66792e93b773896790e",
      "patch": "@@ -10746,6 +10746,14 @@ elf_link_input_bfd (struct elf_final_link_info *flinfo, bfd *input_bfd)\n       extsymoff = symtab_hdr->sh_info;\n     }\n \n+  /* Enable GNU OSABI features in the output BFD that are used in the input\n+     BFD.  */\n+  if (bed->elf_osabi == ELFOSABI_NONE\n+      || bed->elf_osabi == ELFOSABI_GNU\n+      || bed->elf_osabi == ELFOSABI_FREEBSD)\n+    elf_tdata (output_bfd)->has_gnu_osabi\n+      |= elf_tdata (input_bfd)->has_gnu_osabi;\n+\n   /* Read the local symbols.  */\n   isymbuf = (Elf_Internal_Sym *) symtab_hdr->contents;\n   if (isymbuf == NULL && locsymcount != 0)\n@@ -14116,7 +14124,9 @@ bfd_elf_gc_sections (bfd *abfd, struct bfd_link_info *info)\n \t\t\t    == SHT_FINI_ARRAY)))\n \t\t|| (elf_section_data (o)->this_hdr.sh_type == SHT_NOTE\n \t\t    && elf_next_in_group (o) == NULL\n-\t\t    && elf_linked_to_section (o) == NULL)))\n+\t\t    && elf_linked_to_section (o) == NULL)\n+\t\t|| ((elf_tdata (sub)->has_gnu_osabi & elf_gnu_osabi_retain)\n+\t\t    && (elf_section_flags (o) & SHF_GNU_RETAIN))))\n \t  {\n \t    if (!_bfd_elf_gc_mark (info, o, gc_mark_hook))\n \t      return FALSE;"
    },
    {
      "sha": "e8bcd97e8cae5541ec5584c914e16efd3e910198",
      "filename": "binutils/ChangeLog",
      "status": "modified",
      "additions": 16,
      "deletions": 0,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/99fabbc9739a87ba3433e66792e93b773896790e/binutils/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/99fabbc9739a87ba3433e66792e93b773896790e/binutils/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/ChangeLog?ref=99fabbc9739a87ba3433e66792e93b773896790e",
      "patch": "@@ -1,3 +1,19 @@\n+2020-11-18  Jozef Lawrynowicz  <jozef.l@mittosystems.com>\n+\n+\t* NEWS: Announce SHF_GNU_RETAIN support.\n+\t* readelf.c (get_elf_section_flags): Handle SHF_GNU_RETAIN.\n+\tRecognize SHF_GNU_RETAIN and SHF_GNU_MBIND only for supported OSABIs.\n+\t* testsuite/binutils-all/readelf.exp: Run new tests.\n+\tDon't run run_dump_test when there isn't an assembler available.\n+\t* testsuite/lib/binutils-common.exp (supports_gnu_osabi): Adjust\n+\tcomment.\n+\t* testsuite/binutils-all/readelf-maskos-1a.d: New test.\n+\t* testsuite/binutils-all/readelf-maskos-1b.d: New test.\n+\t* testsuite/binutils-all/readelf-maskos.s: New test.\n+\t* testsuite/binutils-all/retain1.s: New test.\n+\t* testsuite/binutils-all/retain1a.d: New test.\n+\t* testsuite/binutils-all/retain1b.d: New test.\n+\n 2020-11-17  Howard Chu  <hyc@symas.com>\n \n \t* ar.c (main): Place the libdeps record in the second archive"
    },
    {
      "sha": "e74b6a2dbad4ec3a3a276b292ddde78baa1bdaa1",
      "filename": "binutils/NEWS",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/99fabbc9739a87ba3433e66792e93b773896790e/binutils/NEWS",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/99fabbc9739a87ba3433e66792e93b773896790e/binutils/NEWS",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/NEWS?ref=99fabbc9739a87ba3433e66792e93b773896790e",
      "patch": "@@ -12,6 +12,10 @@\n   symbol names.  In addition the --demangle=<style>, --no-demangle,\n   --recurse-limit and --no-recurse-limit options are also now availale.\n \n+* Add support for the SHF_GNU_RETAIN ELF section flag.\n+  This flag specifies that the section should not be garbage collected by the\n+  linker.\n+\n Changes in 2.35:\n \n * Changed readelf's display of symbol names when wide mode is not enabled."
    },
    {
      "sha": "f6a074b7083712cf7923c194c61caa4cbb2c8d2f",
      "filename": "binutils/readelf.c",
      "status": "modified",
      "additions": 47,
      "deletions": 6,
      "changes": 53,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/99fabbc9739a87ba3433e66792e93b773896790e/binutils/readelf.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/99fabbc9739a87ba3433e66792e93b773896790e/binutils/readelf.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/readelf.c?ref=99fabbc9739a87ba3433e66792e93b773896790e",
      "patch": "@@ -5996,6 +5996,8 @@ get_elf_section_flags (Filedata * filedata, bfd_vma sh_flags)\n       /* 24 */ { STRING_COMMA_LEN (\"GNU_MBIND\") },\n       /* VLE specific.  */\n       /* 25 */ { STRING_COMMA_LEN (\"VLE\") },\n+      /* GNU specific.  */\n+      /* 26 */ { STRING_COMMA_LEN (\"GNU_RETAIN\") },\n     };\n \n   if (do_section_details)\n@@ -6028,7 +6030,6 @@ get_elf_section_flags (Filedata * filedata, bfd_vma sh_flags)\n \t    case SHF_TLS:\t\tsindex = 9; break;\n \t    case SHF_EXCLUDE:\t\tsindex = 18; break;\n \t    case SHF_COMPRESSED:\tsindex = 20; break;\n-\t    case SHF_GNU_MBIND:\t\tsindex = 24; break;\n \n \t    default:\n \t      sindex = -1;\n@@ -6080,10 +6081,28 @@ get_elf_section_flags (Filedata * filedata, bfd_vma sh_flags)\n \t\t  if (flag == SHF_PPC_VLE)\n \t\t    sindex = 25;\n \t\t  break;\n+\t\tdefault:\n+\t\t  break;\n+\t\t}\n \n+\t      switch (filedata->file_header.e_ident[EI_OSABI])\n+\t\t{\n+\t\tcase ELFOSABI_GNU:\n+\t\tcase ELFOSABI_FREEBSD:\n+\t\t  if (flag == SHF_GNU_RETAIN)\n+\t\t    sindex = 26;\n+\t\t  /* Fall through */\n+\t\tcase ELFOSABI_NONE:\n+\t\t  if (flag == SHF_GNU_MBIND)\n+\t\t    /* We should not recognize SHF_GNU_MBIND for\n+\t\t       ELFOSABI_NONE, but binutils as of 2019-07-23 did\n+\t\t       not set the EI_OSABI header byte.  */\n+\t\t    sindex = 24;\n+\t\t  break;\n \t\tdefault:\n \t\t  break;\n \t\t}\n+\t      break;\n \t    }\n \n \t  if (sindex != -1)\n@@ -6126,7 +6145,6 @@ get_elf_section_flags (Filedata * filedata, bfd_vma sh_flags)\n \t    case SHF_TLS:\t\t*p = 'T'; break;\n \t    case SHF_EXCLUDE:\t\t*p = 'E'; break;\n \t    case SHF_COMPRESSED:\t*p = 'C'; break;\n-\t    case SHF_GNU_MBIND:\t\t*p = 'D'; break;\n \n \t    default:\n \t      if ((filedata->file_header.e_machine == EM_X86_64\n@@ -6136,14 +6154,37 @@ get_elf_section_flags (Filedata * filedata, bfd_vma sh_flags)\n \t\t*p = 'l';\n \t      else if (filedata->file_header.e_machine == EM_ARM\n \t\t       && flag == SHF_ARM_PURECODE)\n-\t\t  *p = 'y';\n+\t\t*p = 'y';\n \t      else if (filedata->file_header.e_machine == EM_PPC\n \t\t       && flag == SHF_PPC_VLE)\n-\t\t  *p = 'v';\n+\t\t*p = 'v';\n \t      else if (flag & SHF_MASKOS)\n \t\t{\n-\t\t  *p = 'o';\n-\t\t  sh_flags &= ~ SHF_MASKOS;\n+\t\t  switch (filedata->file_header.e_ident[EI_OSABI])\n+\t\t    {\n+\t\t    case ELFOSABI_GNU:\n+\t\t    case ELFOSABI_FREEBSD:\n+\t\t      if (flag == SHF_GNU_RETAIN)\n+\t\t\t{\n+\t\t\t  *p = 'R';\n+\t\t\t  break;\n+\t\t\t}\n+\t\t      /* Fall through */\n+\t\t    case ELFOSABI_NONE:\n+\t\t      if (flag == SHF_GNU_MBIND)\n+\t\t\t{\n+\t\t\t  /* We should not recognize SHF_GNU_MBIND for\n+\t\t\t     ELFOSABI_NONE, but binutils as of 2019-07-23 did\n+\t\t\t     not set the EI_OSABI header byte.  */\n+\t\t\t  *p = 'D';\n+\t\t\t  break;\n+\t\t\t}\n+\t\t      /* Fall through */\n+\t\t    default:\n+\t\t      *p = 'o';\n+\t\t      sh_flags &= ~SHF_MASKOS;\n+\t\t      break;\n+\t\t    }\n \t\t}\n \t      else if (flag & SHF_MASKPROC)\n \t\t{"
    },
    {
      "sha": "7b273585996b863d339cf5d45a9012a4afc33cfe",
      "filename": "binutils/testsuite/binutils-all/readelf-maskos-1a.d",
      "status": "added",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/99fabbc9739a87ba3433e66792e93b773896790e/binutils/testsuite/binutils-all/readelf-maskos-1a.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/99fabbc9739a87ba3433e66792e93b773896790e/binutils/testsuite/binutils-all/readelf-maskos-1a.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/testsuite/binutils-all/readelf-maskos-1a.d?ref=99fabbc9739a87ba3433e66792e93b773896790e",
      "patch": "@@ -0,0 +1,10 @@\n+#name: Unknown SHF_MASKOS value in section\n+#source: readelf-maskos.s\n+#notarget: [supports_gnu_osabi] msp430-*-elf visium-*-elf\n+#xfail: arm-*-elf\n+#readelf: -S --wide\n+# PR26722 for the arm-*-elf XFAIL\n+\n+#...\n+  \\[[ 0-9]+\\] .data.retain_var.*WAo.*\n+#pass"
    },
    {
      "sha": "2cbb58a73b1a958d8bdd88f0059c469a2df977e8",
      "filename": "binutils/testsuite/binutils-all/readelf-maskos-1b.d",
      "status": "added",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/99fabbc9739a87ba3433e66792e93b773896790e/binutils/testsuite/binutils-all/readelf-maskos-1b.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/99fabbc9739a87ba3433e66792e93b773896790e/binutils/testsuite/binutils-all/readelf-maskos-1b.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/testsuite/binutils-all/readelf-maskos-1b.d?ref=99fabbc9739a87ba3433e66792e93b773896790e",
      "patch": "@@ -0,0 +1,12 @@\n+#name: -t (section details) for unknown SHF_MASKOS value in section\n+#source: readelf-maskos.s\n+#notarget: [supports_gnu_osabi] msp430-*-elf visium-*-elf\n+#xfail: arm-*-elf\n+#readelf: -S -t --wide\n+# PR26722 for the arm-*-elf XFAIL\n+\n+#...\n+  \\[[ 0-9]+\\] .data.retain_var\n+       PROGBITS +0+ +[0-9a-f]+ +[0-9a-f]+ +[0-9a-f]+ +0 +0 +(1|2|4|8)\n+       \\[00200003\\]: WRITE, ALLOC, OS \\(00200000\\)\n+#pass"
    },
    {
      "sha": "d671119bcaa2d25d53ca6ca19021de2018462092",
      "filename": "binutils/testsuite/binutils-all/readelf-maskos.s",
      "status": "added",
      "additions": 11,
      "deletions": 0,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/99fabbc9739a87ba3433e66792e93b773896790e/binutils/testsuite/binutils-all/readelf-maskos.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/99fabbc9739a87ba3433e66792e93b773896790e/binutils/testsuite/binutils-all/readelf-maskos.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/testsuite/binutils-all/readelf-maskos.s?ref=99fabbc9739a87ba3433e66792e93b773896790e",
      "patch": "@@ -0,0 +1,11 @@\n+  .section\t.data.retain_var,\"0x200003\"\n+\t.global\tretain_var\n+\t.type\tretain_var, %object\n+retain_var:\n+\t.long\t2\n+\n+\t.section\t.text._start,\"ax\"\n+\t.global\t_start\n+\t.type\t_start, %function\n+_start:\n+\t.word 0"
    },
    {
      "sha": "9d1d496e5c60998974aa806edcc999849784445f",
      "filename": "binutils/testsuite/binutils-all/readelf.exp",
      "status": "modified",
      "additions": 8,
      "deletions": 1,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/99fabbc9739a87ba3433e66792e93b773896790e/binutils/testsuite/binutils-all/readelf.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/99fabbc9739a87ba3433e66792e93b773896790e/binutils/testsuite/binutils-all/readelf.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/testsuite/binutils-all/readelf.exp?ref=99fabbc9739a87ba3433e66792e93b773896790e",
      "patch": "@@ -364,8 +364,15 @@ readelf_wi_test\n readelf_compressed_wa_test\n \n readelf_dump_test\n-run_dump_test \"pr25543\"\n \n+# These dump tests require an assembler.\n+if {[which $AS] != 0} then {\n+    run_dump_test \"pr25543\"\n+    run_dump_test \"retain1a\"\n+    run_dump_test \"retain1b\"\n+    run_dump_test \"readelf-maskos-1a\"\n+    run_dump_test \"readelf-maskos-1b\"\n+}\n \n # PR 13482 - Check for off-by-one errors when dumping .note sections.\n if {![binutils_assemble $srcdir/$subdir/version.s tmpdir/version.o]} then {"
    },
    {
      "sha": "f7716faabe98c7a92722c93a282d28b72d9af7c3",
      "filename": "binutils/testsuite/binutils-all/retain1.s",
      "status": "added",
      "additions": 104,
      "deletions": 0,
      "changes": 104,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/99fabbc9739a87ba3433e66792e93b773896790e/binutils/testsuite/binutils-all/retain1.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/99fabbc9739a87ba3433e66792e93b773896790e/binutils/testsuite/binutils-all/retain1.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/testsuite/binutils-all/retain1.s?ref=99fabbc9739a87ba3433e66792e93b773896790e",
      "patch": "@@ -0,0 +1,104 @@\n+\t.global\tdiscard0\n+\t.section\t.bss.discard0,\"aw\"\n+\t.type\tdiscard0, %object\n+discard0:\n+\t.zero\t2\n+\n+\t.global\tdiscard1\n+\t.section\t.bss.discard1,\"aw\"\n+\t.type\tdiscard1, %object\n+discard1:\n+\t.zero\t2\n+\n+\t.global\tdiscard2\n+\t.section\t.data.discard2,\"aw\"\n+\t.type\tdiscard2, %object\n+discard2:\n+\t.word\t1\n+\n+\t.section\t.bss.sdiscard0,\"aw\"\n+\t.type\tsdiscard0, %object\n+sdiscard0:\n+\t.zero\t2\n+\n+\t.section\t.bss.sdiscard1,\"aw\"\n+\t.type\tsdiscard1, %object\n+sdiscard1:\n+\t.zero\t2\n+\n+\t.section\t.data.sdiscard2,\"aw\"\n+\t.type\tsdiscard2, %object\n+sdiscard2:\n+\t.word\t1\n+\n+\t.section\t.text.fndiscard0,\"ax\"\n+\t.global\tfndiscard0\n+\t.type\tfndiscard0, %function\n+fndiscard0:\n+\t.word 0\n+\n+\t.global\tretain0\n+\t.section\t.bss.retain0,\"awR\"\n+\t.type\tretain0, %object\n+retain0:\n+\t.zero\t2\n+\n+\t.global\tretain1\n+\t.section\t.bss.retain1,\"awR\"\n+\t.type\tretain1, %object\n+retain1:\n+\t.zero\t2\n+\n+\t.global\tretain2\n+\t.section\t.data.retain2,\"awR\"\n+\t.type\tretain2, %object\n+retain2:\n+\t.word\t1\n+\n+\t.section\t.bss.sretain0,\"awR\"\n+\t.type\tsretain0, %object\n+sretain0:\n+\t.zero\t2\n+\n+\t.section\t.bss.sretain1,\"awR\"\n+\t.type\tsretain1, %object\n+sretain1:\n+\t.zero\t2\n+\n+\t.section\t.data.sretain2,\"aRw\"\n+\t.type\tsretain2, %object\n+sretain2:\n+\t.word\t1\n+\n+\t.section\t.text.fnretain1,\"Rax\"\n+\t.global\tfnretain1\n+\t.type\tfnretain1, %function\n+fnretain1:\n+\t.word\t0\n+\n+\t.section\t.text.fndiscard2,\"ax\"\n+\t.global\tfndiscard2\n+\t.type\tfndiscard2, %function\n+fndiscard2:\n+\t.word\t0\n+\n+\t.section\t.bss.lsretain0,\"awR\"\n+\t.type\tlsretain0.2, %object\n+lsretain0.2:\n+\t.zero\t2\n+\n+\t.section\t.bss.lsretain1,\"aRw\"\n+\t.type\tlsretain1.1, %object\n+lsretain1.1:\n+\t.zero\t2\n+\n+\t.section\t.data.lsretain2,\"aRw\"\n+\t.type\tlsretain2.0, %object\n+lsretain2.0:\n+\t.word\t1\n+\n+\t.section\t.text._start,\"ax\"\n+\t.global\t_start\n+\t.type\t_start, %function\n+_start:\n+\t.word 0"
    },
    {
      "sha": "6397ac52ae552cbdb93d493437a6880291ed3dfe",
      "filename": "binutils/testsuite/binutils-all/retain1a.d",
      "status": "added",
      "additions": 18,
      "deletions": 0,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/99fabbc9739a87ba3433e66792e93b773896790e/binutils/testsuite/binutils-all/retain1a.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/99fabbc9739a87ba3433e66792e93b773896790e/binutils/testsuite/binutils-all/retain1a.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/testsuite/binutils-all/retain1a.d?ref=99fabbc9739a87ba3433e66792e93b773896790e",
      "patch": "@@ -0,0 +1,18 @@\n+#name: readelf SHF_GNU_RETAIN\n+#source: retain1.s\n+#target: [supports_gnu_osabi]\n+#readelf: -S --wide\n+\n+#...\n+  \\[[ 0-9]+\\] .bss.retain0.*WAR.*\n+  \\[[ 0-9]+\\] .bss.retain1.*WAR.*\n+  \\[[ 0-9]+\\] .data.retain2.*WAR.*\n+  \\[[ 0-9]+\\] .bss.sretain0.*WAR.*\n+  \\[[ 0-9]+\\] .bss.sretain1.*WAR.*\n+  \\[[ 0-9]+\\] .data.sretain2.*WAR.*\n+  \\[[ 0-9]+\\] .text.fnretain1.*AXR.*\n+#...\n+  \\[[ 0-9]+\\] .bss.lsretain0.*WAR.*\n+  \\[[ 0-9]+\\] .bss.lsretain1.*WAR.*\n+  \\[[ 0-9]+\\] .data.lsretain2.*WAR.*\n+#pass"
    },
    {
      "sha": "12bc388ba16ac164092f30f8e0f1d0232e361962",
      "filename": "binutils/testsuite/binutils-all/retain1b.d",
      "status": "added",
      "additions": 46,
      "deletions": 0,
      "changes": 46,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/99fabbc9739a87ba3433e66792e93b773896790e/binutils/testsuite/binutils-all/retain1b.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/99fabbc9739a87ba3433e66792e93b773896790e/binutils/testsuite/binutils-all/retain1b.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/testsuite/binutils-all/retain1b.d?ref=99fabbc9739a87ba3433e66792e93b773896790e",
      "patch": "@@ -0,0 +1,46 @@\n+#name: -t (section details) for readelf SHF_GNU_RETAIN\n+#source: retain1.s\n+#target: [supports_gnu_osabi]\n+#readelf: -S -t --wide\n+\n+#...\n+  \\[[ 0-9]+\\] .bss.retain0\n+#...\n+       \\[0+200003\\]: WRITE, ALLOC, GNU_RETAIN\n+#...\n+  \\[[ 0-9]+\\] .bss.retain1\n+#...\n+       \\[0+200003\\]: WRITE, ALLOC, GNU_RETAIN\n+#...\n+  \\[[ 0-9]+\\] .data.retain2\n+#...\n+       \\[0+200003\\]: WRITE, ALLOC, GNU_RETAIN\n+#...\n+  \\[[ 0-9]+\\] .bss.sretain0\n+#...\n+       \\[0+200003\\]: WRITE, ALLOC, GNU_RETAIN\n+#...\n+  \\[[ 0-9]+\\] .bss.sretain1\n+#...\n+       \\[0+200003\\]: WRITE, ALLOC, GNU_RETAIN\n+#...\n+  \\[[ 0-9]+\\] .data.sretain2\n+#...\n+       \\[0+200003\\]: WRITE, ALLOC, GNU_RETAIN\n+#...\n+  \\[[ 0-9]+\\] .text.fnretain1\n+#...\n+       \\[0+200006\\]: ALLOC, EXEC, GNU_RETAIN\n+#...\n+  \\[[ 0-9]+\\] .bss.lsretain0\n+#...\n+       \\[0+200003\\]: WRITE, ALLOC, GNU_RETAIN\n+#...\n+  \\[[ 0-9]+\\] .bss.lsretain1\n+#...\n+       \\[0+200003\\]: WRITE, ALLOC, GNU_RETAIN\n+#...\n+  \\[[ 0-9]+\\] .data.lsretain2\n+#...\n+       \\[0+200003\\]: WRITE, ALLOC, GNU_RETAIN\n+#pass"
    },
    {
      "sha": "a43639bafbeeb2d24673cd6014e441874bb0f4c3",
      "filename": "binutils/testsuite/lib/binutils-common.exp",
      "status": "modified",
      "additions": 4,
      "deletions": 1,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/99fabbc9739a87ba3433e66792e93b773896790e/binutils/testsuite/lib/binutils-common.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/99fabbc9739a87ba3433e66792e93b773896790e/binutils/testsuite/lib/binutils-common.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/testsuite/lib/binutils-common.exp?ref=99fabbc9739a87ba3433e66792e93b773896790e",
      "patch": "@@ -195,13 +195,15 @@ proc match_target { target } {\n \n # True if the ELF target supports setting the ELF header OSABI field\n # to ELFOSABI_GNU or ELFOSABI_FREEBSD, a requirement for STT_GNU_IFUNC\n-# symbol and SHF_GNU_MBIND section support.\n+# symbol and SHF_GNU_MBIND or SHF_GNU_RETAIN section support.\n #\n # This generally depends on the target OS only, however there are a\n # number of exceptions for bare metal targets as follows.  The MSP430\n # and Visium targets set OSABI to ELFOSABI_STANDALONE.  Likewise\n # non-EABI ARM targets set OSABI to ELFOSABI_ARM\n #\n+# Non-Linux HPPA defaults to ELFOSABI_HPUX.\n+#\n # Note that some TI C6X targets use ELFOSABI_C6000_* but one doesn't,\n # so we don't try to sort out tic6x here.  (The effect is that linker\n # testcases will generally need to exclude tic6x or use a -m option.)\n@@ -227,6 +229,7 @@ proc supports_gnu_osabi {} {\n     }\n     if { [istarget \"arm*-*-*\"]\n \t || [istarget \"msp430-*-*\"]\n+\t || [istarget \"hppa-unknown-elf\"]\n \t || [istarget \"visium-*-*\"] } {\n \treturn 0\n     }"
    },
    {
      "sha": "fcfce70fc7cc9bdad9a7879b50b525cbeb5263a6",
      "filename": "gas/ChangeLog",
      "status": "modified",
      "additions": 23,
      "deletions": 0,
      "changes": 23,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/99fabbc9739a87ba3433e66792e93b773896790e/gas/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/99fabbc9739a87ba3433e66792e93b773896790e/gas/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ChangeLog?ref=99fabbc9739a87ba3433e66792e93b773896790e",
      "patch": "@@ -1,3 +1,26 @@\n+2020-11-18  Jozef Lawrynowicz  <jozef.l@mittosystems.com>\n+\tH.J. Lu  <hongjiu.lu@intel.com>\n+\n+\t* NEWS: Announce SHF_GNU_RETAIN support.\n+\t* config/obj-elf.c (obj_elf_change_section): Merge SHF_GNU_RETAIN bit\n+\tbetween section declarations.\n+\t(obj_elf_parse_section_letters): Handle 'R' flag.\n+\tHandle numeric flag values within the SHF_MASKOS range.\n+\t(obj_elf_section): Validate SHF_GNU_RETAIN usage.\n+\t* doc/as.texi: Document 'R' flag to .section directive.\n+\t* testsuite/gas/elf/elf.exp: Run new tests.\n+\t* testsuite/gas/elf/section10.d: Unset SHF_GNU_RETAIN bit.\n+\t* testsuite/gas/elf/section10.s: Likewise.\n+\t* testsuite/gas/elf/section22.d: New test.\n+\t* testsuite/gas/elf/section22.s: New test.\n+\t* testsuite/gas/elf/section23.s: New test.\n+\t* testsuite/gas/elf/section23a.d: New test.\n+\t* testsuite/gas/elf/section23b.d: New test.\n+\t* testsuite/gas/elf/section23b.err: New test.\n+\t* testsuite/gas/elf/section24.s: New test.\n+\t* testsuite/gas/elf/section24a.d: New test.\n+\t* testsuite/gas/elf/section24b.d: New test.\n+\n 2020-11-13  Przemyslaw Wirkus  <przemyslaw.wirkus@arm.com>\n \n \t* NEWS: Update news."
    },
    {
      "sha": "f44861cd6fb377b2b5373c57812aa98662d54b43",
      "filename": "gas/NEWS",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/99fabbc9739a87ba3433e66792e93b773896790e/gas/NEWS",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/99fabbc9739a87ba3433e66792e93b773896790e/gas/NEWS",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/NEWS?ref=99fabbc9739a87ba3433e66792e93b773896790e",
      "patch": "@@ -52,6 +52,11 @@\n \n * Configure with --enable-x86-used-note by default for Linux/x86.\n \n+* Add support for the SHF_GNU_RETAIN flag, which can be applied to\n+  sections using the 'R' flag in the .section directive.\n+  SHF_GNU_RETAIN specifies that the section should not be garbage\n+  collected by the linker.  It requires the GNU or FreeBSD ELF OSABIs.\n+\n Changes in 2.35:\n \n * X86 NaCl target support is removed."
    },
    {
      "sha": "54d42d9ecbf3555625372429c06bca10eb34a008",
      "filename": "gas/config/obj-elf.c",
      "status": "modified",
      "additions": 63,
      "deletions": 17,
      "changes": 80,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/99fabbc9739a87ba3433e66792e93b773896790e/gas/config/obj-elf.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/99fabbc9739a87ba3433e66792e93b773896790e/gas/config/obj-elf.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/obj-elf.c?ref=99fabbc9739a87ba3433e66792e93b773896790e",
      "patch": "@@ -806,9 +806,17 @@ obj_elf_change_section (const char *name,\n \t\tas_bad (_(\"changed section attributes for %s\"), name);\n \t    }\n \t  else\n-\t    /* FIXME: Maybe we should consider removing a previously set\n-\t       processor or application specific attribute as suspicious ?  */\n-\t    elf_section_flags (sec) = attr;\n+\t    {\n+\t      /* Don't overwrite a previously set SHF_GNU_RETAIN flag for the\n+\t\t section.  The entire section must be marked retained.  */\n+\t      if ((elf_tdata (stdoutput)->has_gnu_osabi & elf_gnu_osabi_retain)\n+\t\t  && ((elf_section_flags (old_sec) & SHF_GNU_RETAIN)))\n+\t\tattr |= SHF_GNU_RETAIN;\n+\n+\t      /* FIXME: Maybe we should consider removing a previously set\n+\t\t processor or application specific attribute as suspicious ?  */\n+\t      elf_section_flags (sec) = attr;\n+\t    }\n \n \t  if ((flags & SEC_MERGE) && old_sec->entsize != (unsigned) entsize)\n \t    as_bad (_(\"changed section entity size for %s\"), name);\n@@ -861,6 +869,9 @@ obj_elf_parse_section_letters (char *str, size_t len,\n \tcase 'd':\n \t  *gnu_attr |= SHF_GNU_MBIND;\n \t  break;\n+\tcase 'R':\n+\t  *gnu_attr |= SHF_GNU_RETAIN;\n+\t  break;\n \tcase '?':\n \t  *is_clone = TRUE;\n \t  break;\n@@ -890,8 +901,32 @@ obj_elf_parse_section_letters (char *str, size_t len,\n \t      if (ISDIGIT (*str))\n \t\t{\n \t\t  char * end;\n+\t\t  struct elf_backend_data *bed;\n+\t\t  bfd_vma numeric_flags = strtoul (str, &end, 0);\n+\n+\t\t  attr |= numeric_flags;\n+\n+\t\t  bed = (struct elf_backend_data *)\n+\t\t    get_elf_backend_data (stdoutput);\n+\n+\t\t  if (bed->elf_osabi == ELFOSABI_NONE\n+\t\t      || bed->elf_osabi == ELFOSABI_STANDALONE\n+\t\t      || bed->elf_osabi == ELFOSABI_GNU\n+\t\t      || bed->elf_osabi == ELFOSABI_FREEBSD)\n+\t\t    {\n+\t\t      /* Add flags in the SHF_MASKOS range to gnu_attr for\n+\t\t\t OSABIs that support those flags.\n+\t\t\t Also adding the flags for ELFOSABI_{NONE,STANDALONE}\n+\t\t\t allows them to be validated later in obj_elf_section.\n+\t\t\t We can't just always set these bits in gnu_attr for\n+\t\t\t all OSABIs, since Binutils does not recognize all\n+\t\t\t SHF_MASKOS bits for non-GNU OSABIs.  It's therefore\n+\t\t\t possible that numeric flags are being used to set bits\n+\t\t\t in the SHF_MASKOS range for those targets, and we\n+\t\t\t don't want assembly to fail in those situations.  */\n+\t\t      *gnu_attr |= (numeric_flags & SHF_MASKOS);\n+\t\t    }\n \n-\t\t  attr |= strtoul (str, & end, 0);\n \t\t  /* Update str and len, allowing for the fact that\n \t\t     we will execute str++ and len-- below.  */\n \t\t  end --;\n@@ -1387,26 +1422,37 @@ obj_elf_section (int push)\n  done:\n   demand_empty_rest_of_line ();\n \n-  obj_elf_change_section (name, type, attr, entsize, &match, linkonce,\n-\t\t\t  push);\n-\n-  if ((gnu_attr & SHF_GNU_MBIND) != 0)\n+  if ((gnu_attr & (SHF_GNU_MBIND | SHF_GNU_RETAIN)) != 0)\n     {\n       struct elf_backend_data *bed;\n+      bfd_boolean mbind_p = (gnu_attr & SHF_GNU_MBIND) != 0;\n \n-      if ((attr & SHF_ALLOC) == 0)\n+      if (mbind_p && (attr & SHF_ALLOC) == 0)\n \tas_bad (_(\"SHF_ALLOC isn't set for GNU_MBIND section: %s\"), name);\n \n       bed = (struct elf_backend_data *) get_elf_backend_data (stdoutput);\n-      if (bed->elf_osabi == ELFOSABI_NONE)\n-\tbed->elf_osabi = ELFOSABI_GNU;\n-      else if (bed->elf_osabi != ELFOSABI_GNU\n-\t       && bed->elf_osabi != ELFOSABI_FREEBSD)\n-\tas_bad (_(\"GNU_MBIND section is supported only by GNU \"\n-\t\t  \"and FreeBSD targets\"));\n-      elf_tdata (stdoutput)->has_gnu_osabi |= elf_gnu_osabi_mbind;\n+\n+      if (bed->elf_osabi != ELFOSABI_GNU\n+\t  && bed->elf_osabi != ELFOSABI_FREEBSD\n+\t  && bed->elf_osabi != ELFOSABI_NONE)\n+\tas_bad (_(\"%s section is supported only by GNU and FreeBSD targets\"),\n+\t\tmbind_p ? \"GNU_MBIND\" : \"GNU_RETAIN\");\n+      else\n+\t{\n+\t  if (bed->elf_osabi == ELFOSABI_NONE)\n+\t    bed->elf_osabi = ELFOSABI_GNU;\n+\n+\t  if (mbind_p)\n+\t    elf_tdata (stdoutput)->has_gnu_osabi |= elf_gnu_osabi_mbind;\n+\t  if ((gnu_attr & SHF_GNU_RETAIN) != 0)\n+\t    elf_tdata (stdoutput)->has_gnu_osabi |= elf_gnu_osabi_retain;\n+\n+\t  attr |= gnu_attr;\n+\t}\n     }\n-  elf_section_flags (now_seg) |= gnu_attr;\n+\n+  obj_elf_change_section (name, type, attr, entsize, &match, linkonce,\n+\t\t\t  push);\n \n   if (linked_to_section_index != -1UL)\n     {"
    },
    {
      "sha": "84a7e6191a3bde35ceb9af646a180164239b95d5",
      "filename": "gas/doc/as.texi",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/99fabbc9739a87ba3433e66792e93b773896790e/gas/doc/as.texi",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/99fabbc9739a87ba3433e66792e93b773896790e/gas/doc/as.texi",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/doc/as.texi?ref=99fabbc9739a87ba3433e66792e93b773896790e",
      "patch": "@@ -6659,6 +6659,9 @@ section is a member of a section group\n section is used for thread-local-storage\n @item ?\n section is a member of the previously-current section's group, if any\n+@item R\n+retained section (apply SHF_GNU_RETAIN to prevent linker garbage\n+collection, GNU ELF extension)\n @item @code{<number>}\n a numeric value indicating the bits to be set in the ELF section header's flags\n field.  Note - if one or more of the alphabetic characters described above is"
    },
    {
      "sha": "0ba32c736268d3c4c0daae4f7a2f780b88ad28c3",
      "filename": "gas/testsuite/gas/elf/elf.exp",
      "status": "modified",
      "additions": 5,
      "deletions": 1,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/99fabbc9739a87ba3433e66792e93b773896790e/gas/testsuite/gas/elf/elf.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/99fabbc9739a87ba3433e66792e93b773896790e/gas/testsuite/gas/elf/elf.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/elf/elf.exp?ref=99fabbc9739a87ba3433e66792e93b773896790e",
      "patch": "@@ -261,8 +261,12 @@ if { [is_elf_format] } then {\n     run_dump_test \"section19\"\n     run_dump_test \"section20\"\n     run_dump_test \"section21\"\n+    run_dump_test \"section22\"\n+    run_dump_test \"section23a\"\n+    run_dump_test \"section23b\"\n+    run_dump_test \"section24a\"\n+    run_dump_test \"section24b\"\n     run_dump_test \"sh-link-zero\"\n-\n     run_dump_test \"dwarf2-1\" $dump_opts\n     run_dump_test \"dwarf2-2\" $dump_opts\n     run_dump_test \"dwarf2-3\" $dump_opts"
    },
    {
      "sha": "6aa7b088b1b9c4f38d3890781b6a15b1c9083e38",
      "filename": "gas/testsuite/gas/elf/section10.d",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/99fabbc9739a87ba3433e66792e93b773896790e/gas/testsuite/gas/elf/section10.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/99fabbc9739a87ba3433e66792e93b773896790e/gas/testsuite/gas/elf/section10.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/elf/section10.d?ref=99fabbc9739a87ba3433e66792e93b773896790e",
      "patch": "@@ -18,15 +18,15 @@\n #...\n [ \t]*\\[.*\\][ \t]+sec3\n [ \t]*PROGBITS.*\n-[ \t]*\\[.*fefff030\\]: MERGE, STRINGS,.* EXCLUDE, OS \\(.*ef00000\\), PROC \\(.*[3467]0000000\\), UNKNOWN \\(0+0ff000\\)\n+[ \t]*\\[.*fedff030\\]: MERGE, STRINGS,.* EXCLUDE, OS \\(.*ed00000\\), PROC \\(.*[3467]0000000\\), UNKNOWN \\(0+0ff000\\)\n #...\n [ \t]*\\[.*\\][ \t]+sec4\n [ \t]*LOOS\\+0x11[ \t].*\n [ \t]*\\[0+06\\]: ALLOC, EXEC\n #...\n [ \t]*\\[.*\\][ \t]+sec5\n [ \t]*LOUSER\\+0x9[ \t].*\n-[ \t]*\\[.*feff0000\\]:.* EXCLUDE, OS \\(.*ef00000\\), PROC \\(.*[3467]0000000\\), UNKNOWN \\(.*f0000\\)\n+[ \t]*\\[.*fedf0000\\]:.* EXCLUDE, OS \\(.*ed00000\\), PROC \\(.*[3467]0000000\\), UNKNOWN \\(.*f0000\\)\n [ \t]*\\[.*\\][ \t]+.data.foo\n [ \t]*LOUSER\\+0x7f000000[ \t].*\n [ \t]*\\[0+003\\]: WRITE, ALLOC"
    },
    {
      "sha": "d52b3458fb1279cdaea4025ed98a366d840ca3d6",
      "filename": "gas/testsuite/gas/elf/section10.s",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/99fabbc9739a87ba3433e66792e93b773896790e/gas/testsuite/gas/elf/section10.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/99fabbc9739a87ba3433e66792e93b773896790e/gas/testsuite/gas/elf/section10.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/elf/section10.s?ref=99fabbc9739a87ba3433e66792e93b773896790e",
      "patch": "@@ -7,7 +7,7 @@\n \t.word 2\n \n \t# Make sure that specifying further arguments to .sections is still supported\n-\t.section sec3, \"0xfefff000MS\", %progbits, 32\n+\t.section sec3, \"0xfedff000MS\", %progbits, 32\n \t.word 3\n \n \t# Make sure that extra flags can be set for well known sections as well.\n@@ -19,7 +19,7 @@\n \t.word 5\n \n \t# Test both together, with a quoted type value.\n-\t.section sec5, \"0xfeff0000\", \"0x80000009\"\n+\t.section sec5, \"0xfedf0000\", \"0x80000009\"\n \t.word 6\n \n \t# Test that declaring an extended version of a known special section works."
    },
    {
      "sha": "8aa7fcfc34e0259978f3de0d25a77dd752876614",
      "filename": "gas/testsuite/gas/elf/section22.d",
      "status": "added",
      "additions": 19,
      "deletions": 0,
      "changes": 19,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/99fabbc9739a87ba3433e66792e93b773896790e/gas/testsuite/gas/elf/section22.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/99fabbc9739a87ba3433e66792e93b773896790e/gas/testsuite/gas/elf/section22.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/elf/section22.d?ref=99fabbc9739a87ba3433e66792e93b773896790e",
      "patch": "@@ -0,0 +1,19 @@\n+#readelf: -h -S --wide\n+#name: SHF_GNU_RETAIN sections 22\n+#notarget: ![supports_gnu_osabi]\n+\n+#...\n+ +OS/ABI: +UNIX - GNU\n+#...\n+  \\[..\\] .text.discard0[ \t]+PROGBITS[ \t]+[0-9a-f]+ [0-9a-f]+ [0-9a-f]+ 00  AX.*\n+#...\n+  \\[..\\] .data.discard1[ \t]+PROGBITS[ \t]+[0-9a-f]+ [0-9a-f]+ [0-9a-f]+ 00  WA.*\n+#...\n+  \\[..\\] .bss.discard2[ \t]+NOBITS[ \t]+[0-9a-f]+ [0-9a-f]+ [0-9a-f]+ 00  WA.*\n+#...\n+  \\[..\\] .bss.retain0[ \t]+NOBITS[ \t]+[0-9a-f]+ [0-9a-f]+ [0-9a-f]+ 00 WAR.*\n+#...\n+  \\[..\\] .data.retain1[ \t]+PROGBITS[ \t]+[0-9a-f]+ [0-9a-f]+ [0-9a-f]+ 00 WAR.*\n+#...\n+  \\[..\\] .text.retain2[ \t]+PROGBITS[ \t]+[0-9a-f]+ [0-9a-f]+ [0-9a-f]+ 00 AXR.*\n+#pass"
    },
    {
      "sha": "66ed990e575c11a96d2cdaaaeafcdad35d639bbf",
      "filename": "gas/testsuite/gas/elf/section22.s",
      "status": "added",
      "additions": 34,
      "deletions": 0,
      "changes": 34,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/99fabbc9739a87ba3433e66792e93b773896790e/gas/testsuite/gas/elf/section22.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/99fabbc9739a87ba3433e66792e93b773896790e/gas/testsuite/gas/elf/section22.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/elf/section22.s?ref=99fabbc9739a87ba3433e66792e93b773896790e",
      "patch": "@@ -0,0 +1,34 @@\n+\t.section\t.text.discard0,\"ax\",%progbits\n+\t.global\tdiscard0\n+\t.type\tdiscard0, %function\n+discard0:\n+\t.word\t0\n+\n+\t.section\t.data.discard1,\"aw\"\n+\t.global\tdiscard1\n+\t.type\tdiscard1, %object\n+discard1:\n+\t.word\t1\n+\n+\t.section\t.bss.discard2,\"aw\"\n+\t.global\tdiscard2\n+\t.type\tdiscard2, %object\n+discard2:\n+\t.zero\t2\n+\n+\t.section\t.bss.retain0,\"awR\",%nobits\n+\t.global\tretain0\n+\t.type\tretain0, %object\n+retain0:\n+\t.zero\t2\n+\n+\t.section\t.data.retain1,\"awR\",%progbits\n+\t.type\tretain1, %object\n+retain1:\n+\t.word\t1\n+\n+\t.section\t.text.retain2,\"axR\",%progbits\n+\t.global\tretain2\n+\t.type\tretain2, %function\n+retain2:\n+\t.word\t0"
    },
    {
      "sha": "d671119bcaa2d25d53ca6ca19021de2018462092",
      "filename": "gas/testsuite/gas/elf/section23.s",
      "status": "added",
      "additions": 11,
      "deletions": 0,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/99fabbc9739a87ba3433e66792e93b773896790e/gas/testsuite/gas/elf/section23.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/99fabbc9739a87ba3433e66792e93b773896790e/gas/testsuite/gas/elf/section23.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/elf/section23.s?ref=99fabbc9739a87ba3433e66792e93b773896790e",
      "patch": "@@ -0,0 +1,11 @@\n+  .section\t.data.retain_var,\"0x200003\"\n+\t.global\tretain_var\n+\t.type\tretain_var, %object\n+retain_var:\n+\t.long\t2\n+\n+\t.section\t.text._start,\"ax\"\n+\t.global\t_start\n+\t.type\t_start, %function\n+_start:\n+\t.word 0"
    },
    {
      "sha": "2e413e1ceca4f5eb75a2dc16f62787ad1c376b4f",
      "filename": "gas/testsuite/gas/elf/section23a.d",
      "status": "added",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/99fabbc9739a87ba3433e66792e93b773896790e/gas/testsuite/gas/elf/section23a.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/99fabbc9739a87ba3433e66792e93b773896790e/gas/testsuite/gas/elf/section23a.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/elf/section23a.d?ref=99fabbc9739a87ba3433e66792e93b773896790e",
      "patch": "@@ -0,0 +1,10 @@\n+#name: SHF_GNU_RETAIN set with numeric flag value in .section\n+#source: section23.s\n+#target: [supports_gnu_osabi]\n+#readelf: -h -S --wide\n+\n+#...\n+ +OS/ABI: +UNIX - GNU\n+#...\n+  \\[..\\] .data.retain_var[ \t]+PROGBITS[ \t]+[0-9a-f]+ [0-9a-f]+ [0-9a-f]+ 00 WAR.*\n+#pass"
    },
    {
      "sha": "c85200e5ff7eda2eecf94fbf4fdd02bdbe3a66dc",
      "filename": "gas/testsuite/gas/elf/section23b.d",
      "status": "added",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/99fabbc9739a87ba3433e66792e93b773896790e/gas/testsuite/gas/elf/section23b.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/99fabbc9739a87ba3433e66792e93b773896790e/gas/testsuite/gas/elf/section23b.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/elf/section23b.d?ref=99fabbc9739a87ba3433e66792e93b773896790e",
      "patch": "@@ -0,0 +1,6 @@\n+#name: SHF_GNU_RETAIN set with numeric flag value in .section for non-GNU OSABI target\n+#source: section23.s\n+#error_output: section23b.err\n+#target: msp430-*-elf visium-*-elf\n+\n+# This test only runs for targets which set ELFOSABI_STANDALONE."
    },
    {
      "sha": "83de60c3975fc088222416a411544fdfa83c755f",
      "filename": "gas/testsuite/gas/elf/section23b.err",
      "status": "added",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/99fabbc9739a87ba3433e66792e93b773896790e/gas/testsuite/gas/elf/section23b.err",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/99fabbc9739a87ba3433e66792e93b773896790e/gas/testsuite/gas/elf/section23b.err",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/elf/section23b.err?ref=99fabbc9739a87ba3433e66792e93b773896790e",
      "patch": "@@ -0,0 +1,2 @@\n+.*: Assembler messages:\n+.*:1: Error: GNU_RETAIN section is supported only by GNU and FreeBSD targets"
    },
    {
      "sha": "adcff4a0e1a3b280c4b95bd03836eda03153b838",
      "filename": "gas/testsuite/gas/elf/section24.s",
      "status": "added",
      "additions": 38,
      "deletions": 0,
      "changes": 38,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/99fabbc9739a87ba3433e66792e93b773896790e/gas/testsuite/gas/elf/section24.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/99fabbc9739a87ba3433e66792e93b773896790e/gas/testsuite/gas/elf/section24.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/elf/section24.s?ref=99fabbc9739a87ba3433e66792e93b773896790e",
      "patch": "@@ -0,0 +1,38 @@\n+\t.section\t.text,\"ax\",%progbits\n+  .word 0\n+\t.section\t.data,\"aw\"\n+  .word 0\n+\t.section\t.bss,\"aw\",%nobits\n+  .word 0\n+\t.section\t.rodata,\"a\"\n+  .word 0\n+\n+/* Test that we can set the 'R' flag on an existing section.  */\n+\t.section\t.text,\"axR\",%progbits\n+  .word 0\n+\t.section\t.data,\"awR\"\n+  .word 0\n+\t.section\t.bss,\"awR\",%nobits\n+  .word 0\n+\t.section\t.rodata,\"aR\"\n+  .word 0\n+\n+/* Test that the 'R' flag does not get clobbered when the section is switched\n+   back to.  */\n+\t.section\t.text,\"ax\",%progbits\n+  .word 0\n+\t.section\t.data,\"aw\"\n+  .word 0\n+\t.section\t.bss,\"aw\",%nobits\n+  .word 0\n+\t.section\t.rodata,\"a\"\n+  .word 0\n+\n+\t.section\t.text\n+  .word 0\n+\t.section\t.data\n+  .word 0\n+\t.section\t.bss\n+  .word 0\n+\t.section\t.rodata\n+  .word 0"
    },
    {
      "sha": "8f316d3196d76a5227caf7940845514d4601ba4d",
      "filename": "gas/testsuite/gas/elf/section24a.d",
      "status": "added",
      "additions": 17,
      "deletions": 0,
      "changes": 17,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/99fabbc9739a87ba3433e66792e93b773896790e/gas/testsuite/gas/elf/section24a.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/99fabbc9739a87ba3433e66792e93b773896790e/gas/testsuite/gas/elf/section24a.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/elf/section24a.d?ref=99fabbc9739a87ba3433e66792e93b773896790e",
      "patch": "@@ -0,0 +1,17 @@\n+#name: Merge SHF_GNU_RETAIN for non-unique sections\n+#notarget: ![supports_gnu_osabi]\n+#source: section24.s\n+#readelf: -h -S --wide\n+\n+#...\n+ +OS/ABI: +UNIX - GNU\n+#...\n+  \\[..\\] .text[ \t]+PROGBITS[ \t]+[0-9a-f]+ [0-9a-f]+ [0-9a-f]+ 00 AXR .*\n+#...\n+  \\[..\\] .data[ \t]+PROGBITS[ \t]+[0-9a-f]+ [0-9a-f]+ [0-9a-f]+ 00 WAR .*\n+#...\n+  \\[..\\] .bss[ \t]+NOBITS[ \t]+[0-9a-f]+ [0-9a-f]+ [0-9a-f]+ 00 WAR .*\n+#...\n+  \\[..\\] .rodata[ \t]+PROGBITS[ \t]+[0-9a-f]+ [0-9a-f]+ [0-9a-f]+ 00  AR .*\n+#pass\n+"
    },
    {
      "sha": "451ec21635420acaf6959327674c502e0d46ad60",
      "filename": "gas/testsuite/gas/elf/section24b.d",
      "status": "added",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/99fabbc9739a87ba3433e66792e93b773896790e/gas/testsuite/gas/elf/section24b.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/99fabbc9739a87ba3433e66792e93b773896790e/gas/testsuite/gas/elf/section24b.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/elf/section24b.d?ref=99fabbc9739a87ba3433e66792e93b773896790e",
      "patch": "@@ -0,0 +1,10 @@\n+#name: Merge SHF_GNU_RETAIN for non-unique sections (check no unmerged)\n+#notarget: ![supports_gnu_osabi]\n+#source: section24.s\n+#readelf: -S --wide\n+\n+#failif\n+#...\n+  \\[..\\] .(text|data|bss|rodata)[ \t]+PROGBITS[ \t]+[0-9a-f]+ [0-9a-f]+ [0-9a-f]+ 00 [^R] .*\n+#pass\n+"
    },
    {
      "sha": "c8163aecd944a5f9e05bd7d5be054d1a65f80321",
      "filename": "include/ChangeLog",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/99fabbc9739a87ba3433e66792e93b773896790e/include/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/99fabbc9739a87ba3433e66792e93b773896790e/include/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/ChangeLog?ref=99fabbc9739a87ba3433e66792e93b773896790e",
      "patch": "@@ -1,3 +1,7 @@\n+2020-11-18  Jozef Lawrynowicz  <jozef.l@mittosystems.com>\n+\n+\t* elf/common.h (SHF_GNU_RETAIN): Define.\n+\n 2020-11-16  Przemyslaw Wirkus  <przemyslaw.wirkus@arm.com>\n \n \t* opcode/aarch64.h (AARCH64_FEATURE_FLAGM): Add new feature."
    },
    {
      "sha": "95a852f0cf5341b8214090fd968cc2ef689fb013",
      "filename": "include/elf/common.h",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/99fabbc9739a87ba3433e66792e93b773896790e/include/elf/common.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/99fabbc9739a87ba3433e66792e93b773896790e/include/elf/common.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/elf/common.h?ref=99fabbc9739a87ba3433e66792e93b773896790e",
      "patch": "@@ -554,6 +554,7 @@\n /* #define SHF_MASKOS\t0x0F000000    *//* OS-specific semantics */\n #define SHF_MASKOS\t0x0FF00000\t/* New value, Oct 4, 1999 Draft */\n #define SHF_GNU_BUILD_NOTE    (1 << 20)\t/* Section contains GNU BUILD ATTRIBUTE notes.  */\n+#define SHF_GNU_RETAIN\t      (1 << 21)\t/* Section should not be garbage collected by the linker.  */\n #define SHF_MASKPROC\t0xF0000000\t/* Processor-specific semantics */\n \n /* This used to be implemented as a processor specific section flag."
    },
    {
      "sha": "0e2ddeeed6b4ee9749dc6378021859430cf6147d",
      "filename": "ld/ChangeLog",
      "status": "modified",
      "additions": 25,
      "deletions": 0,
      "changes": 25,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/99fabbc9739a87ba3433e66792e93b773896790e/ld/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/99fabbc9739a87ba3433e66792e93b773896790e/ld/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ChangeLog?ref=99fabbc9739a87ba3433e66792e93b773896790e",
      "patch": "@@ -1,3 +1,28 @@\n+2020-11-18  Jozef Lawrynowicz  <jozef.l@mittosystems.com>\n+\n+\t* NEWS: Announce support for SHF_GNU_RETAIN.\n+\t* ld.texi (garbage collection): Document SHF_GNU_RETAIN.\n+\t(Output Section Discarding): Likewise.\n+\t* testsuite/ld-elf/elf.exp: Run new tests.\n+\t* testsuite/ld-elf/retain1.s: New test.\n+\t* testsuite/ld-elf/retain1a.d: New test.\n+\t* testsuite/ld-elf/retain1b.d: New test.\n+\t* testsuite/ld-elf/retain2.d: New test.\n+\t* testsuite/ld-elf/retain2.ld: New test.\n+\t* testsuite/ld-elf/retain2.map: New test.\n+\t* testsuite/ld-elf/retain3.d: New test.\n+\t* testsuite/ld-elf/retain3.s: New test.\n+\t* testsuite/ld-elf/retain4.d: New test.\n+\t* testsuite/ld-elf/retain4.s: New test.\n+\t* testsuite/ld-elf/retain5.d: New test.\n+\t* testsuite/ld-elf/retain5.map: New test.\n+\t* testsuite/ld-elf/retain5lib.s: New test.\n+\t* testsuite/ld-elf/retain5main.s: New test.\n+\t* testsuite/ld-elf/retain6a.d: New test.\n+\t* testsuite/ld-elf/retain6b.d: New test.\n+\t* testsuite/ld-elf/retain6lib.s: New test.\n+\t* testsuite/ld-elf/retain6main.s: New test.\n+\n 2020-11-17  Alan Modra  <amodra@gmail.com>\n \n \tPR 26882"
    },
    {
      "sha": "607030bddd95225f7b55a7f9398d9a473dcb690a",
      "filename": "ld/NEWS",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/99fabbc9739a87ba3433e66792e93b773896790e/ld/NEWS",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/99fabbc9739a87ba3433e66792e93b773896790e/ld/NEWS",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/NEWS?ref=99fabbc9739a87ba3433e66792e93b773896790e",
      "patch": "@@ -23,6 +23,10 @@\n   unless you are working on a project that has its own analogue\n   of symbol tables that are not reflected in the ELF symtabs.\n \n+* Add support for the SHF_GNU_RETAIN ELF section flag.\n+  This flag specifies that the section should not be garbage collected by the\n+  linker.\n+\n Changes in 2.35:\n \n * X86 NaCl target support is removed."
    },
    {
      "sha": "8e3c7da145e5306ea0b19b84d45339ded177e330",
      "filename": "ld/ld.texi",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/99fabbc9739a87ba3433e66792e93b773896790e/ld/ld.texi",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/99fabbc9739a87ba3433e66792e93b773896790e/ld/ld.texi",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ld.texi?ref=99fabbc9739a87ba3433e66792e93b773896790e",
      "patch": "@@ -1807,6 +1807,9 @@ specified either by one of the options @samp{--entry},\n @samp{--undefined}, or @samp{--gc-keep-exported} or by a @code{ENTRY}\n command in the linker script.\n \n+As a GNU extension, ELF input sections marked with the\n+@code{SHF_GNU_RETAIN} flag will not be garbage collected.\n+\n @kindex --print-gc-sections\n @kindex --no-print-gc-sections\n @cindex garbage collection\n@@ -5291,6 +5294,10 @@ The special output section name @samp{/DISCARD/} may be used to discard\n input sections.  Any input sections which are assigned to an output\n section named @samp{/DISCARD/} are not included in the output file.\n \n+This can be used to discard input sections marked with the ELF flag\n+@code{SHF_GNU_RETAIN}, which would otherwise have been saved from linker\n+garbage collection.\n+\n Note, sections that match the @samp{/DISCARD/} output section will be\n discarded even if they are in an ELF section group which has other\n members which are not being discarded.  This is deliberate."
    },
    {
      "sha": "6e61c7fb13b4527bc8d7a4b30a31edffa9cbf78c",
      "filename": "ld/testsuite/ld-elf/elf.exp",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/99fabbc9739a87ba3433e66792e93b773896790e/ld/testsuite/ld-elf/elf.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/99fabbc9739a87ba3433e66792e93b773896790e/ld/testsuite/ld-elf/elf.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-elf/elf.exp?ref=99fabbc9739a87ba3433e66792e93b773896790e",
      "patch": "@@ -119,6 +119,16 @@ if { [istarget \"i?86-*-*\"] || [istarget \"x86_64-*-*\"] } {\n     set ASFLAGS \"$ASFLAGS -mx86-used-note=no\"\n }\n \n+# Build libraries required for SHF_GNU_RETAIN tests.\n+if { [check_gc_sections_available] && [supports_gnu_osabi] } {\n+    run_ld_link_tests [list \\\n+\t[list \"Build libretain5.a\" \"\" \"\" \"\" \\\n+\t    {retain5lib.s} {} \"libretain5.a\"] \\\n+\t[list \"Build libretain6.a\" \"\" \"\" \"\" \\\n+\t    {retain6lib.s} {} \"libretain6.a\"] \\\n+\t]\n+}\n+\n set test_list [lsort [glob -nocomplain $srcdir/$subdir/*.d]]\n foreach t $test_list {\n     # We need to strip the \".d\", but can leave the dirname."
    },
    {
      "sha": "f7716faabe98c7a92722c93a282d28b72d9af7c3",
      "filename": "ld/testsuite/ld-elf/retain1.s",
      "status": "added",
      "additions": 104,
      "deletions": 0,
      "changes": 104,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/99fabbc9739a87ba3433e66792e93b773896790e/ld/testsuite/ld-elf/retain1.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/99fabbc9739a87ba3433e66792e93b773896790e/ld/testsuite/ld-elf/retain1.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-elf/retain1.s?ref=99fabbc9739a87ba3433e66792e93b773896790e",
      "patch": "@@ -0,0 +1,104 @@\n+\t.global\tdiscard0\n+\t.section\t.bss.discard0,\"aw\"\n+\t.type\tdiscard0, %object\n+discard0:\n+\t.zero\t2\n+\n+\t.global\tdiscard1\n+\t.section\t.bss.discard1,\"aw\"\n+\t.type\tdiscard1, %object\n+discard1:\n+\t.zero\t2\n+\n+\t.global\tdiscard2\n+\t.section\t.data.discard2,\"aw\"\n+\t.type\tdiscard2, %object\n+discard2:\n+\t.word\t1\n+\n+\t.section\t.bss.sdiscard0,\"aw\"\n+\t.type\tsdiscard0, %object\n+sdiscard0:\n+\t.zero\t2\n+\n+\t.section\t.bss.sdiscard1,\"aw\"\n+\t.type\tsdiscard1, %object\n+sdiscard1:\n+\t.zero\t2\n+\n+\t.section\t.data.sdiscard2,\"aw\"\n+\t.type\tsdiscard2, %object\n+sdiscard2:\n+\t.word\t1\n+\n+\t.section\t.text.fndiscard0,\"ax\"\n+\t.global\tfndiscard0\n+\t.type\tfndiscard0, %function\n+fndiscard0:\n+\t.word 0\n+\n+\t.global\tretain0\n+\t.section\t.bss.retain0,\"awR\"\n+\t.type\tretain0, %object\n+retain0:\n+\t.zero\t2\n+\n+\t.global\tretain1\n+\t.section\t.bss.retain1,\"awR\"\n+\t.type\tretain1, %object\n+retain1:\n+\t.zero\t2\n+\n+\t.global\tretain2\n+\t.section\t.data.retain2,\"awR\"\n+\t.type\tretain2, %object\n+retain2:\n+\t.word\t1\n+\n+\t.section\t.bss.sretain0,\"awR\"\n+\t.type\tsretain0, %object\n+sretain0:\n+\t.zero\t2\n+\n+\t.section\t.bss.sretain1,\"awR\"\n+\t.type\tsretain1, %object\n+sretain1:\n+\t.zero\t2\n+\n+\t.section\t.data.sretain2,\"aRw\"\n+\t.type\tsretain2, %object\n+sretain2:\n+\t.word\t1\n+\n+\t.section\t.text.fnretain1,\"Rax\"\n+\t.global\tfnretain1\n+\t.type\tfnretain1, %function\n+fnretain1:\n+\t.word\t0\n+\n+\t.section\t.text.fndiscard2,\"ax\"\n+\t.global\tfndiscard2\n+\t.type\tfndiscard2, %function\n+fndiscard2:\n+\t.word\t0\n+\n+\t.section\t.bss.lsretain0,\"awR\"\n+\t.type\tlsretain0.2, %object\n+lsretain0.2:\n+\t.zero\t2\n+\n+\t.section\t.bss.lsretain1,\"aRw\"\n+\t.type\tlsretain1.1, %object\n+lsretain1.1:\n+\t.zero\t2\n+\n+\t.section\t.data.lsretain2,\"aRw\"\n+\t.type\tlsretain2.0, %object\n+lsretain2.0:\n+\t.word\t1\n+\n+\t.section\t.text._start,\"ax\"\n+\t.global\t_start\n+\t.type\t_start, %function\n+_start:\n+\t.word 0"
    },
    {
      "sha": "29adb5d2c9155831aaad1c817fc9c11c4cb57287",
      "filename": "ld/testsuite/ld-elf/retain1a.d",
      "status": "added",
      "additions": 27,
      "deletions": 0,
      "changes": 27,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/99fabbc9739a87ba3433e66792e93b773896790e/ld/testsuite/ld-elf/retain1a.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/99fabbc9739a87ba3433e66792e93b773896790e/ld/testsuite/ld-elf/retain1a.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-elf/retain1a.d?ref=99fabbc9739a87ba3433e66792e93b773896790e",
      "patch": "@@ -0,0 +1,27 @@\n+#name: SHF_GNU_RETAIN 1a\n+#source: retain1.s\n+#ld: -e _start --gc-sections\n+#notarget: ![supports_gnu_osabi] ![check_gc_sections_available]\n+#DUMPPROG: nm\n+\n+#...\n+[0-9a-f]+ . fnretain1\n+#...\n+[0-9a-f]+ . lsretain0.2\n+#...\n+[0-9a-f]+ . lsretain1.1\n+#...\n+[0-9a-f]+ . lsretain2.0\n+#...\n+[0-9a-f]+ . retain0\n+#...\n+[0-9a-f]+ . retain1\n+#...\n+[0-9a-f]+ . retain2\n+#...\n+[0-9a-f]+ . sretain0\n+#...\n+[0-9a-f]+ . sretain1\n+#...\n+[0-9a-f]+ . sretain2\n+#pass"
    },
    {
      "sha": "b1cafc9d1c2d77ab0155b6cb05c2cdad66f4f5a8",
      "filename": "ld/testsuite/ld-elf/retain1b.d",
      "status": "added",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/99fabbc9739a87ba3433e66792e93b773896790e/ld/testsuite/ld-elf/retain1b.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/99fabbc9739a87ba3433e66792e93b773896790e/ld/testsuite/ld-elf/retain1b.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-elf/retain1b.d?ref=99fabbc9739a87ba3433e66792e93b773896790e",
      "patch": "@@ -0,0 +1,10 @@\n+#name: SHF_GNU_RETAIN 1b\n+#source: retain1.s\n+#ld: -e _start --gc-sections\n+#notarget: ![supports_gnu_osabi] ![check_gc_sections_available]\n+#nm: -n\n+\n+#failif\n+#...\n+[0-9a-f]+ . .*discard.*\n+#..."
    },
    {
      "sha": "1a63f51aab597d09ad8d37ee9eb0289d80124982",
      "filename": "ld/testsuite/ld-elf/retain2.d",
      "status": "added",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/99fabbc9739a87ba3433e66792e93b773896790e/ld/testsuite/ld-elf/retain2.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/99fabbc9739a87ba3433e66792e93b773896790e/ld/testsuite/ld-elf/retain2.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-elf/retain2.d?ref=99fabbc9739a87ba3433e66792e93b773896790e",
      "patch": "@@ -0,0 +1,5 @@\n+#name: SHF_GNU_RETAIN 2 (remove SHF_GNU_RETAIN sections by placing in /DISCARD/)\n+#source: retain1.s\n+#ld: -e _start -Map=retain2.map --gc-sections --script=retain2.ld\n+#map: retain2.map\n+#notarget: ![supports_gnu_osabi] ![check_gc_sections_available]"
    },
    {
      "sha": "8ef982753c0e6d5f452f113904c381cecd422835",
      "filename": "ld/testsuite/ld-elf/retain2.ld",
      "status": "added",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/99fabbc9739a87ba3433e66792e93b773896790e/ld/testsuite/ld-elf/retain2.ld",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/99fabbc9739a87ba3433e66792e93b773896790e/ld/testsuite/ld-elf/retain2.ld",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-elf/retain2.ld?ref=99fabbc9739a87ba3433e66792e93b773896790e",
      "patch": "@@ -0,0 +1,7 @@\n+SECTIONS\n+{\n+  /DISCARD/ :\n+  {\n+    *(.text.fnretain1)\n+  }\n+}"
    },
    {
      "sha": "4028aa1f58387c0f841ee7940acd0666332e917b",
      "filename": "ld/testsuite/ld-elf/retain2.map",
      "status": "added",
      "additions": 32,
      "deletions": 0,
      "changes": 32,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/99fabbc9739a87ba3433e66792e93b773896790e/ld/testsuite/ld-elf/retain2.map",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/99fabbc9739a87ba3433e66792e93b773896790e/ld/testsuite/ld-elf/retain2.map",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-elf/retain2.map?ref=99fabbc9739a87ba3433e66792e93b773896790e",
      "patch": "@@ -0,0 +1,32 @@\n+# Test that .text.fnretain1, which has the SHF_GNU_RETAIN flag, can still be\n+# explicitly discarded from the output file.\n+\n+#...\n+Discarded input sections\n+\n+ .text.*\n+#...\n+ .data.*\n+#...\n+ .bss.*\n+#...\n+ .bss.discard0.*\n+#...\n+ .bss.discard1.*\n+#...\n+ .data.discard2.*\n+#...\n+ .bss.sdiscard0.*\n+#...\n+ .bss.sdiscard1.*\n+#...\n+ .data.sdiscard2.*\n+#...\n+ .text.fndiscard0.*\n+#...\n+ .text.fnretain1.*\n+#...\n+ .text.fndiscard2.*\n+#...\n+Memory Configuration\n+#pass"
    },
    {
      "sha": "3c81a88e510b9bb7cc21ee8b1929baead804ffd0",
      "filename": "ld/testsuite/ld-elf/retain3.d",
      "status": "added",
      "additions": 11,
      "deletions": 0,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/99fabbc9739a87ba3433e66792e93b773896790e/ld/testsuite/ld-elf/retain3.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/99fabbc9739a87ba3433e66792e93b773896790e/ld/testsuite/ld-elf/retain3.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-elf/retain3.d?ref=99fabbc9739a87ba3433e66792e93b773896790e",
      "patch": "@@ -0,0 +1,11 @@\n+#name: SHF_GNU_RETAIN 3 (keep sections referenced by retained sections)\n+#source: retain3.s\n+#ld: -e _start --gc-sections\n+#notarget: ![supports_gnu_osabi] ![check_gc_sections_available]\n+#DUMPPROG: nm\n+\n+#...\n+[0-9a-f]+ . bar\n+#...\n+[0-9a-f]+ . foo\n+#pass"
    },
    {
      "sha": "ce315cbaa632f80ded2593d7324791d2c4ac74f7",
      "filename": "ld/testsuite/ld-elf/retain3.s",
      "status": "added",
      "additions": 19,
      "deletions": 0,
      "changes": 19,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/99fabbc9739a87ba3433e66792e93b773896790e/ld/testsuite/ld-elf/retain3.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/99fabbc9739a87ba3433e66792e93b773896790e/ld/testsuite/ld-elf/retain3.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-elf/retain3.s?ref=99fabbc9739a87ba3433e66792e93b773896790e",
      "patch": "@@ -0,0 +1,19 @@\n+/* The retention of bar should also prevent foo from being gc'ed, since bar\n+   references foo.  */\n+\t.section\t.text.foo,\"ax\"\n+\t.global\tfoo\n+\t.type\tfoo, %function\n+foo:\n+\t.word 0\n+\n+\t.section\t.text.bar,\"axR\"\n+\t.global\tbar\n+\t.type\tbar, %function\n+bar:\n+\t.long foo\n+\n+\t.section\t.text._start,\"ax\"\n+\t.global\t_start\n+\t.type\t_start, %function\n+_start:\n+\t.word 0"
    },
    {
      "sha": "b423fb9584ebb5717560e2fe36f12bad36c0b442",
      "filename": "ld/testsuite/ld-elf/retain4.d",
      "status": "added",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/99fabbc9739a87ba3433e66792e93b773896790e/ld/testsuite/ld-elf/retain4.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/99fabbc9739a87ba3433e66792e93b773896790e/ld/testsuite/ld-elf/retain4.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-elf/retain4.d?ref=99fabbc9739a87ba3433e66792e93b773896790e",
      "patch": "@@ -0,0 +1,9 @@\n+#name: SHF_GNU_RETAIN 4 (keep orphaned sections when not discarding)\n+#source: retain4.s\n+#ld: -e _start --gc-sections --orphan-handling=place\n+#notarget: ![supports_gnu_osabi] ![check_gc_sections_available]\n+#DUMPPROG: nm\n+\n+#...\n+[0-9a-f]+ . orphaned_fn\n+#pass"
    },
    {
      "sha": "f30f1216c7633bcf5761d5b1bc07a2d7d8588522",
      "filename": "ld/testsuite/ld-elf/retain4.s",
      "status": "added",
      "additions": 13,
      "deletions": 0,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/99fabbc9739a87ba3433e66792e93b773896790e/ld/testsuite/ld-elf/retain4.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/99fabbc9739a87ba3433e66792e93b773896790e/ld/testsuite/ld-elf/retain4.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-elf/retain4.s?ref=99fabbc9739a87ba3433e66792e93b773896790e",
      "patch": "@@ -0,0 +1,13 @@\n+/* A section that doesn't match any linker script input section rules but\n+   has SHF_GNU_RETAIN applied should not be garbage collected.  */\n+\t.section\t.orphaned_section,\"axR\"\n+\t.global\torphaned_fn\n+\t.type\torphaned_fn, %function\n+orphaned_fn:\n+\t.word 0\n+\n+\t.section\t.text._start,\"ax\"\n+\t.global\t_start\n+\t.type\t_start, %function\n+_start:\n+\t.word 0"
    },
    {
      "sha": "86e85f8da5d5f90eee3a6ce7326f6ff437034569",
      "filename": "ld/testsuite/ld-elf/retain5.d",
      "status": "added",
      "additions": 11,
      "deletions": 0,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/99fabbc9739a87ba3433e66792e93b773896790e/ld/testsuite/ld-elf/retain5.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/99fabbc9739a87ba3433e66792e93b773896790e/ld/testsuite/ld-elf/retain5.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-elf/retain5.d?ref=99fabbc9739a87ba3433e66792e93b773896790e",
      "patch": "@@ -0,0 +1,11 @@\n+#name: SHF_GNU_RETAIN 5 (don't pull SHF_GNU_RETAIN section out of lib)\n+#source: retain5main.s\n+#ld: --gc-sections -e _start --print-gc-sections -Ltmpdir -lretain5 -Map=retain5.map\n+#notarget: ![supports_gnu_osabi] ![check_gc_sections_available]\n+#map: retain5.map\n+#DUMPPROG: nm\n+\n+#failif\n+#...\n+[0-9a-f]+ . foo\n+#..."
    },
    {
      "sha": "6b97c2a2206bedf16b53fdcc8c015779543ecf2c",
      "filename": "ld/testsuite/ld-elf/retain5.map",
      "status": "added",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/99fabbc9739a87ba3433e66792e93b773896790e/ld/testsuite/ld-elf/retain5.map",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/99fabbc9739a87ba3433e66792e93b773896790e/ld/testsuite/ld-elf/retain5.map",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-elf/retain5.map?ref=99fabbc9739a87ba3433e66792e93b773896790e",
      "patch": "@@ -0,0 +1,5 @@\n+# Check that the library was actually loaded to catch any false PASS.\n+\n+#...\n+LOAD tmpdir/libretain5.a\n+#pass"
    },
    {
      "sha": "4e8373171938c7b6a3e00f3b8149e7a64104a2f2",
      "filename": "ld/testsuite/ld-elf/retain5lib.s",
      "status": "added",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/99fabbc9739a87ba3433e66792e93b773896790e/ld/testsuite/ld-elf/retain5lib.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/99fabbc9739a87ba3433e66792e93b773896790e/ld/testsuite/ld-elf/retain5lib.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-elf/retain5lib.s?ref=99fabbc9739a87ba3433e66792e93b773896790e",
      "patch": "@@ -0,0 +1,6 @@\n+/* The link will fail if foo is included because undefined_sym is not defined.  */\n+\t.section\t.text.foo,\"axR\"\n+\t.global\tfoo\n+\t.type\tfoo, %function\n+foo:\n+\t.long undefined_sym"
    },
    {
      "sha": "89a7784d13ffd6a4428353f31735dd0a74dbb0e4",
      "filename": "ld/testsuite/ld-elf/retain5main.s",
      "status": "added",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/99fabbc9739a87ba3433e66792e93b773896790e/ld/testsuite/ld-elf/retain5main.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/99fabbc9739a87ba3433e66792e93b773896790e/ld/testsuite/ld-elf/retain5main.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-elf/retain5main.s?ref=99fabbc9739a87ba3433e66792e93b773896790e",
      "patch": "@@ -0,0 +1,5 @@\n+\t.section\t.text._start,\"ax\"\n+\t.global\t_start\n+\t.type\t_start, %function\n+_start:\n+\t.word 0"
    },
    {
      "sha": "aa93117ae74d59f87a2dba45407eb7cba08acc67",
      "filename": "ld/testsuite/ld-elf/retain6a.d",
      "status": "added",
      "additions": 13,
      "deletions": 0,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/99fabbc9739a87ba3433e66792e93b773896790e/ld/testsuite/ld-elf/retain6a.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/99fabbc9739a87ba3433e66792e93b773896790e/ld/testsuite/ld-elf/retain6a.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-elf/retain6a.d?ref=99fabbc9739a87ba3433e66792e93b773896790e",
      "patch": "@@ -0,0 +1,13 @@\n+#name: SHF_GNU_RETAIN 6a (pull section out of lib required by SHF_GNU_RETAIN section)\n+#source: retain6main.s\n+#ld: --gc-sections -e _start -u bar -Ltmpdir -lretain6\n+#notarget: ![supports_gnu_osabi] ![check_gc_sections_available]\n+#DUMPPROG: nm\n+\n+#...\n+[0-9a-f]+ . bar\n+#...\n+[0-9a-f]+ . retain_from_lib\n+#...\n+[0-9a-f]+ . retained_fn\n+#pass"
    },
    {
      "sha": "f29ba71dd91c0ad7f47ac9a70983a813f8dc336a",
      "filename": "ld/testsuite/ld-elf/retain6b.d",
      "status": "added",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/99fabbc9739a87ba3433e66792e93b773896790e/ld/testsuite/ld-elf/retain6b.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/99fabbc9739a87ba3433e66792e93b773896790e/ld/testsuite/ld-elf/retain6b.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-elf/retain6b.d?ref=99fabbc9739a87ba3433e66792e93b773896790e",
      "patch": "@@ -0,0 +1,10 @@\n+#name: SHF_GNU_RETAIN 6b (pull section out of lib required by SHF_GNU_RETAIN section)\n+#source: retain6main.s\n+#ld: --gc-sections -e _start -u bar -Ltmpdir -lretain6\n+#notarget: ![supports_gnu_osabi] ![check_gc_sections_available]\n+#DUMPPROG: nm\n+\n+#failif\n+#...\n+[0-9a-f]+ . .*discard.*\n+#..."
    },
    {
      "sha": "a393dbac617be5d03b1a4ce841d44be8a1cdd8ce",
      "filename": "ld/testsuite/ld-elf/retain6lib.s",
      "status": "added",
      "additions": 17,
      "deletions": 0,
      "changes": 17,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/99fabbc9739a87ba3433e66792e93b773896790e/ld/testsuite/ld-elf/retain6lib.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/99fabbc9739a87ba3433e66792e93b773896790e/ld/testsuite/ld-elf/retain6lib.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-elf/retain6lib.s?ref=99fabbc9739a87ba3433e66792e93b773896790e",
      "patch": "@@ -0,0 +1,17 @@\n+\t.section\t.text.bar,\"ax\"\n+\t.global\tbar\n+\t.type\tbar, %function\n+bar:\n+\t.word 0\n+\n+\t.section\t.text.retain_from_lib,\"axR\"\n+\t.global\tretain_from_lib\n+\t.type\tretain_from_lib, %function\n+retain_from_lib:\n+\t.word 0\n+\n+\t.section\t.text.discard_from_lib,\"ax\"\n+\t.global\tdiscard_from_lib\n+\t.type\tdiscard_from_lib, %function\n+discard_from_lib:\n+\t.word 0"
    },
    {
      "sha": "a66c5b3247ea18125cc4bca19972596b94fa1d2c",
      "filename": "ld/testsuite/ld-elf/retain6main.s",
      "status": "added",
      "additions": 13,
      "deletions": 0,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/99fabbc9739a87ba3433e66792e93b773896790e/ld/testsuite/ld-elf/retain6main.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/99fabbc9739a87ba3433e66792e93b773896790e/ld/testsuite/ld-elf/retain6main.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-elf/retain6main.s?ref=99fabbc9739a87ba3433e66792e93b773896790e",
      "patch": "@@ -0,0 +1,13 @@\n+/* Undefined symbol reference in retained section .text.retained_fn requires\n+   symbol definition to be pulled out of library.  */\n+\t.section\t.text.retained_fn,\"axR\"\n+\t.global\tretained_fn\n+\t.type\tretained_fn, %function\n+retained_fn:\n+\t.long bar\n+\n+\t.section\t.text._start,\"ax\"\n+\t.global\t_start\n+\t.type\t_start, %function\n+_start:\n+\t.word 0"
    }
  ]
}