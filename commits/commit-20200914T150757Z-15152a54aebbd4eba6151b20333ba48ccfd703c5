{
  "sha": "15152a54aebbd4eba6151b20333ba48ccfd703c5",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MTUxNTJhNTRhZWJiZDRlYmE2MTUxYjIwMzMzYmE0OGNjZmQ3MDNjNQ==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-09-14T15:07:57Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-09-14T15:07:57Z"
    },
    "message": "gdb: add type::has_no_signedness / type::set_has_no_signedness\n\nAdd the `has_no_signedness` and `set_has_no_signednes` methods on `struct\ntype`, in order to remove the `TYPE_NOSIGN` macro.  In this patch, the macro is\nchanged to use the getter, so all the call sites of the macro that are used as\na setter are changed to use the setter method directly.  The next patch will\nremove the macro completely.\n\ngdb/ChangeLog:\n\n\t* gdbtypes.h (struct type) <has_no_signedness,\n\tset_has_no_signedness>: New methods.\n\t(TYPE_NOSIGN): Use type::has_no_signedness, change all write\n\tcall sites to use type::set_has_no_signedness.\n\nChange-Id: I80d8e774316d146fbd814b2928ad5392bada39d5",
    "tree": {
      "sha": "454753d02fe51d8c5f0e714aa82fbf14b9ae8efe",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/454753d02fe51d8c5f0e714aa82fbf14b9ae8efe"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/15152a54aebbd4eba6151b20333ba48ccfd703c5",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/15152a54aebbd4eba6151b20333ba48ccfd703c5",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/15152a54aebbd4eba6151b20333ba48ccfd703c5",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/15152a54aebbd4eba6151b20333ba48ccfd703c5/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "c6d940a9569deb4a89a5628caa78b1ccfcfd2bdf",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c6d940a9569deb4a89a5628caa78b1ccfcfd2bdf",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/c6d940a9569deb4a89a5628caa78b1ccfcfd2bdf"
    }
  ],
  "stats": {
    "total": 35,
    "additions": 26,
    "deletions": 9
  },
  "files": [
    {
      "sha": "a761ebeb5d938edee391f6dc1564b45072bbde56",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/15152a54aebbd4eba6151b20333ba48ccfd703c5/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/15152a54aebbd4eba6151b20333ba48ccfd703c5/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=15152a54aebbd4eba6151b20333ba48ccfd703c5",
      "patch": "@@ -1,3 +1,10 @@\n+2020-09-14  Simon Marchi  <simon.marchi@efficios.com>\n+\n+\t* gdbtypes.h (struct type) <has_no_signedness,\n+\tset_has_no_signedness>: New methods.\n+\t(TYPE_NOSIGN): Use type::has_no_signedness, change all write\n+\tcall sites to use type::set_has_no_signedness.\n+\n 2020-09-14  Simon Marchi  <simon.marchi@efficios.com>\n \n \t* gdbtypes.h (TYPE_UNSIGNED): Remove, replace all uses with"
    },
    {
      "sha": "14f64047fc16b2d4e86f1cb0980fe7a25b6471f8",
      "filename": "gdb/ctfread.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/15152a54aebbd4eba6151b20333ba48ccfd703c5/gdb/ctfread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/15152a54aebbd4eba6151b20333ba48ccfd703c5/gdb/ctfread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ctfread.c?ref=15152a54aebbd4eba6151b20333ba48ccfd703c5",
      "patch": "@@ -566,7 +566,7 @@ read_base_type (struct ctf_context *ccp, ctf_id_t tid)\n     }\n \n   if (name != NULL && strcmp (name, \"char\") == 0)\n-    TYPE_NOSIGN (type) = 1;\n+    type->set_has_no_signedness (true);\n \n   return set_tid_type (of, tid, type);\n }"
    },
    {
      "sha": "299b04b4ae2c1d2dc14c51ba197f2228ea7bb975",
      "filename": "gdb/dwarf2/read.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/15152a54aebbd4eba6151b20333ba48ccfd703c5/gdb/dwarf2/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/15152a54aebbd4eba6151b20333ba48ccfd703c5/gdb/dwarf2/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.c?ref=15152a54aebbd4eba6151b20333ba48ccfd703c5",
      "patch": "@@ -18058,7 +18058,7 @@ read_base_type (struct die_info *die, struct dwarf2_cu *cu)\n     }\n \n   if (name && strcmp (name, \"char\") == 0)\n-    TYPE_NOSIGN (type) = 1;\n+    type->set_has_no_signedness (true);\n \n   maybe_set_alignment (cu, die, type);\n "
    },
    {
      "sha": "88d9f7e4d9ee3f14c5303164abb757add3830a75",
      "filename": "gdb/gdbtypes.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/15152a54aebbd4eba6151b20333ba48ccfd703c5/gdb/gdbtypes.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/15152a54aebbd4eba6151b20333ba48ccfd703c5/gdb/gdbtypes.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbtypes.c?ref=15152a54aebbd4eba6151b20333ba48ccfd703c5",
      "patch": "@@ -5725,7 +5725,7 @@ gdbtypes_post_init (struct gdbarch *gdbarch)\n   builtin_type->builtin_char\n     = arch_integer_type (gdbarch, TARGET_CHAR_BIT,\n \t\t\t !gdbarch_char_signed (gdbarch), \"char\");\n-  TYPE_NOSIGN (builtin_type->builtin_char) = 1;\n+  builtin_type->builtin_char->set_has_no_signedness (true);\n   builtin_type->builtin_signed_char\n     = arch_integer_type (gdbarch, TARGET_CHAR_BIT,\n \t\t\t 0, \"signed char\");\n@@ -5884,7 +5884,7 @@ objfile_type (struct objfile *objfile)\n   objfile_type->builtin_char\n     = init_integer_type (objfile, TARGET_CHAR_BIT,\n \t\t\t !gdbarch_char_signed (gdbarch), \"char\");\n-  TYPE_NOSIGN (objfile_type->builtin_char) = 1;\n+  objfile_type->builtin_char->set_has_no_signedness (true);\n   objfile_type->builtin_signed_char\n     = init_integer_type (objfile, TARGET_CHAR_BIT,\n \t\t\t 0, \"signed char\");"
    },
    {
      "sha": "623b8ccf37ae551a5b85124b3f5400fb2d75bcd0",
      "filename": "gdb/gdbtypes.h",
      "status": "modified",
      "additions": 12,
      "deletions": 2,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/15152a54aebbd4eba6151b20333ba48ccfd703c5/gdb/gdbtypes.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/15152a54aebbd4eba6151b20333ba48ccfd703c5/gdb/gdbtypes.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbtypes.h?ref=15152a54aebbd4eba6151b20333ba48ccfd703c5",
      "patch": "@@ -214,7 +214,7 @@ DEF_ENUM_FLAGS_TYPE (enum type_instance_flag_value, type_instance_flags);\n    \"unsigned char\" are distinct types; so we need an extra flag to\n    indicate the absence of a sign!  */\n \n-#define TYPE_NOSIGN(t)\t\t(TYPE_MAIN_TYPE (t)->flag_nosign)\n+#define TYPE_NOSIGN(t)\t\t((t)->has_no_signedness ())\n \n /* * A compiler may supply dwarf instrumentation\n    that indicates the desired endian interpretation of the variable\n@@ -851,7 +851,7 @@ struct main_type\n      documentation about these fields.  */\n \n   unsigned int m_flag_unsigned : 1;\n-  unsigned int flag_nosign : 1;\n+  unsigned int m_flag_nosign : 1;\n   unsigned int flag_stub : 1;\n   unsigned int flag_target_stub : 1;\n   unsigned int flag_prototyped : 1;\n@@ -1076,6 +1076,16 @@ struct type\n     this->main_type->m_flag_unsigned = is_unsigned;\n   }\n \n+  bool has_no_signedness () const\n+  {\n+    return this->main_type->m_flag_nosign;\n+  }\n+\n+  void set_has_no_signedness (bool has_no_signedness)\n+  {\n+    this->main_type->m_flag_nosign = has_no_signedness;\n+  }\n+\n   /* * Return the dynamic property of the requested KIND from this type's\n      list of dynamic properties.  */\n   dynamic_prop *dyn_prop (dynamic_prop_node_kind kind) const;"
    },
    {
      "sha": "4fd3de13e070dd25c3be9e7ec378565c58152874",
      "filename": "gdb/mdebugread.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/15152a54aebbd4eba6151b20333ba48ccfd703c5/gdb/mdebugread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/15152a54aebbd4eba6151b20333ba48ccfd703c5/gdb/mdebugread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/mdebugread.c?ref=15152a54aebbd4eba6151b20333ba48ccfd703c5",
      "patch": "@@ -1387,7 +1387,7 @@ basic_type (int bt, struct objfile *objfile)\n \n     case btChar:\n       tp = init_integer_type (objfile, 8, 0, \"char\");\n-      TYPE_NOSIGN (tp) = 1;\n+      tp->set_has_no_signedness (true);\n       break;\n \n     case btUChar:"
    },
    {
      "sha": "5f654e7ed2462f26342734365b4bf60693065f56",
      "filename": "gdb/stabsread.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/15152a54aebbd4eba6151b20333ba48ccfd703c5/gdb/stabsread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/15152a54aebbd4eba6151b20333ba48ccfd703c5/gdb/stabsread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/stabsread.c?ref=15152a54aebbd4eba6151b20333ba48ccfd703c5",
      "patch": "@@ -2066,7 +2066,7 @@ rs6000_builtin_type (int typenum, struct objfile *objfile)\n       break;\n     case 2:\n       rettype = init_integer_type (objfile, 8, 0, \"char\");\n-      TYPE_NOSIGN (rettype) = 1;\n+      rettype->set_has_no_signedness (true);\n       break;\n     case 3:\n       rettype = init_integer_type (objfile, 16, 0, \"short\");\n@@ -4090,7 +4090,7 @@ read_range_type (const char **pp, int typenums[2], int type_size,\n     {\n       struct type *type = init_integer_type (objfile, TARGET_CHAR_BIT,\n \t\t\t\t\t     0, NULL);\n-      TYPE_NOSIGN (type) = 1;\n+      type->set_has_no_signedness (true);\n       return type;\n     }\n   /* We used to do this only for subrange of self or subrange of int.  */"
    }
  ]
}