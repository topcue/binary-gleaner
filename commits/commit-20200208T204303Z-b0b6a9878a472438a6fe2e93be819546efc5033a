{
  "sha": "b0b6a9878a472438a6fe2e93be819546efc5033a",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YjBiNmE5ODc4YTQ3MjQzOGE2ZmUyZTkzYmU4MTk1NDZlZmM1MDMzYQ==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-02-08T20:40:54Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-02-08T20:43:03Z"
    },
    "message": "Change dwarf2_per_objfile::signatured_types to be htab_up\n\nThis changes dwarf2_per_objfile::signatured_types to be an htab_up.\nThis in turn lets us change it not to use the objfile obstack for\nallocation; obstack allocation for hash tables is a bad practice\nbecause it leads to excess memory use if the table is ever resized.\n\ngdb/ChangeLog\n2020-02-08  Tom Tromey  <tom@tromey.com>\n\n\t* dwarf2/read.h (struct dwarf2_per_objfile) <signatured_types>:\n\tChange type to htab_up.\n\t* dwarf2/read.c (create_signatured_type_table_from_index)\n\t(create_signatured_type_table_from_debug_names)\n\t(create_all_type_units, add_type_unit)\n\t(lookup_dwo_signatured_type, lookup_signatured_type)\n\t(process_skeletonless_type_unit): Update.\n\t(create_debug_type_hash_table, create_debug_types_hash_table):\n\tChange type of types_htab.\n\t(allocate_signatured_type_table, allocate_dwo_unit_table): Return\n\thtab_up.  Don't allocate on obstack.\n\t(create_cus_hash_table): Change type of cus_htab parameter.\n\t(struct dwo_file) <cus, tus>: Now htab_up.\n\t(lookup_dwo_signatured_type, lookup_dwo_cutu)\n\t(process_dwo_file_for_skeletonless_type_units, lookup_dwo_cutu)\n\t(queue_and_load_all_dwo_tus): Update.\n\t* dwarf2/index-write.c (write_gdbindex): Update.\n\t(write_debug_names): Update.\n\nChange-Id: I290a209b96945fb5f415c82723b62830e9c4b467",
    "tree": {
      "sha": "1178c3d311b6f879acbeabef441a6a8fa9781332",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/1178c3d311b6f879acbeabef441a6a8fa9781332"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/b0b6a9878a472438a6fe2e93be819546efc5033a",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b0b6a9878a472438a6fe2e93be819546efc5033a",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/b0b6a9878a472438a6fe2e93be819546efc5033a",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b0b6a9878a472438a6fe2e93be819546efc5033a/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "39856def4f717a1d938b80f76d86202dd88abc10",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/39856def4f717a1d938b80f76d86202dd88abc10",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/39856def4f717a1d938b80f76d86202dd88abc10"
    }
  ],
  "stats": {
    "total": 123,
    "additions": 71,
    "deletions": 52
  },
  "files": [
    {
      "sha": "50aecc7bb0704c5f8b37f3e2f01adbd2246b26c0",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 21,
      "deletions": 0,
      "changes": 21,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b0b6a9878a472438a6fe2e93be819546efc5033a/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b0b6a9878a472438a6fe2e93be819546efc5033a/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=b0b6a9878a472438a6fe2e93be819546efc5033a",
      "patch": "@@ -1,3 +1,24 @@\n+2020-02-08  Tom Tromey  <tom@tromey.com>\n+\n+\t* dwarf2/read.h (struct dwarf2_per_objfile) <signatured_types>:\n+\tChange type to htab_up.\n+\t* dwarf2/read.c (create_signatured_type_table_from_index)\n+\t(create_signatured_type_table_from_debug_names)\n+\t(create_all_type_units, add_type_unit)\n+\t(lookup_dwo_signatured_type, lookup_signatured_type)\n+\t(process_skeletonless_type_unit): Update.\n+\t(create_debug_type_hash_table, create_debug_types_hash_table):\n+\tChange type of types_htab.\n+\t(allocate_signatured_type_table, allocate_dwo_unit_table): Return\n+\thtab_up.  Don't allocate on obstack.\n+\t(create_cus_hash_table): Change type of cus_htab parameter.\n+\t(struct dwo_file) <cus, tus>: Now htab_up.\n+\t(lookup_dwo_signatured_type, lookup_dwo_cutu)\n+\t(process_dwo_file_for_skeletonless_type_units, lookup_dwo_cutu)\n+\t(queue_and_load_all_dwo_tus): Update.\n+\t* dwarf2/index-write.c (write_gdbindex): Update.\n+\t(write_debug_names): Update.\n+\n 2020-02-08  Tom Tromey  <tom@tromey.com>\n \n \t* dwarf2/read.h (struct dwarf2_queue_item): Move from"
    },
    {
      "sha": "2cbf2ebd202d59f5e12b6404909e92c6888dadd6",
      "filename": "gdb/dwarf2/index-write.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b0b6a9878a472438a6fe2e93be819546efc5033a/gdb/dwarf2/index-write.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b0b6a9878a472438a6fe2e93be819546efc5033a/gdb/dwarf2/index-write.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/index-write.c?ref=b0b6a9878a472438a6fe2e93be819546efc5033a",
      "patch": "@@ -1461,7 +1461,7 @@ write_gdbindex (struct dwarf2_per_objfile *dwarf2_per_objfile, FILE *out_file,\n       sig_data.objfile = objfile;\n       sig_data.symtab = &symtab;\n       sig_data.cu_index = dwarf2_per_objfile->all_comp_units.size ();\n-      htab_traverse_noresize (dwarf2_per_objfile->signatured_types,\n+      htab_traverse_noresize (dwarf2_per_objfile->signatured_types.get (),\n \t\t\t      write_one_signatured_type, &sig_data);\n     }\n \n@@ -1534,7 +1534,7 @@ write_debug_names (struct dwarf2_per_objfile *dwarf2_per_objfile,\n       /* It is used only for gdb_index.  */\n       sig_data.info.symtab = nullptr;\n       sig_data.info.cu_index = 0;\n-      htab_traverse_noresize (dwarf2_per_objfile->signatured_types,\n+      htab_traverse_noresize (dwarf2_per_objfile->signatured_types.get (),\n \t\t\t      debug_names::write_one_signatured_type,\n \t\t\t      &sig_data);\n     }"
    },
    {
      "sha": "d47a90bac23e070fff0625d13e61f745d6387e5f",
      "filename": "gdb/dwarf2/read.c",
      "status": "modified",
      "additions": 47,
      "deletions": 49,
      "changes": 96,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b0b6a9878a472438a6fe2e93be819546efc5033a/gdb/dwarf2/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b0b6a9878a472438a6fe2e93be819546efc5033a/gdb/dwarf2/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.c?ref=b0b6a9878a472438a6fe2e93be819546efc5033a",
      "patch": "@@ -727,11 +727,11 @@ struct dwo_file\n      Each element is a struct dwo_unit. Multiple CUs per DWO are supported as\n      an extension to handle LLVM's Link Time Optimization output (where\n      multiple source files may be compiled into a single object/dwo pair). */\n-  htab_t cus {};\n+  htab_up cus;\n \n   /* Table of TUs in the file.\n      Each element is a struct dwo_unit.  */\n-  htab_t tus {};\n+  htab_up tus;\n };\n \n /* These sections are what may appear in a DWP file.  */\n@@ -1868,9 +1868,9 @@ static const gdb_byte *read_and_check_comp_unit_head\n    struct dwarf2_section_info *abbrev_section, const gdb_byte *info_ptr,\n    rcuh_kind section_kind);\n \n-static htab_t allocate_signatured_type_table (struct objfile *objfile);\n+static htab_up allocate_signatured_type_table (struct objfile *objfile);\n \n-static htab_t allocate_dwo_unit_table (struct objfile *objfile);\n+static htab_up allocate_dwo_unit_table (struct objfile *objfile);\n \n static struct dwo_unit *lookup_dwo_unit_in_dwp\n   (struct dwarf2_per_objfile *dwarf2_per_objfile,\n@@ -2739,7 +2739,7 @@ create_signatured_type_table_from_index\n   gdb_assert (dwarf2_per_objfile->all_type_units.empty ());\n   dwarf2_per_objfile->all_type_units.reserve (elements / 3);\n \n-  htab_t sig_types_hash = allocate_signatured_type_table (objfile);\n+  htab_up sig_types_hash = allocate_signatured_type_table (objfile);\n \n   for (offset_type i = 0; i < elements; i += 3)\n     {\n@@ -2769,13 +2769,13 @@ create_signatured_type_table_from_index\n \t= OBSTACK_ZALLOC (&objfile->objfile_obstack,\n \t\t\t  struct dwarf2_per_cu_quick_data);\n \n-      slot = htab_find_slot (sig_types_hash, sig_type, INSERT);\n+      slot = htab_find_slot (sig_types_hash.get (), sig_type, INSERT);\n       *slot = sig_type;\n \n       dwarf2_per_objfile->all_type_units.push_back (sig_type);\n     }\n \n-  dwarf2_per_objfile->signatured_types = sig_types_hash;\n+  dwarf2_per_objfile->signatured_types = std::move (sig_types_hash);\n }\n \n /* Create the signatured type hash table from .debug_names.  */\n@@ -2795,7 +2795,7 @@ create_signatured_type_table_from_debug_names\n   gdb_assert (dwarf2_per_objfile->all_type_units.empty ());\n   dwarf2_per_objfile->all_type_units.reserve (map.tu_count);\n \n-  htab_t sig_types_hash = allocate_signatured_type_table (objfile);\n+  htab_up sig_types_hash = allocate_signatured_type_table (objfile);\n \n   for (uint32_t i = 0; i < map.tu_count; ++i)\n     {\n@@ -2826,13 +2826,13 @@ create_signatured_type_table_from_debug_names\n \t= OBSTACK_ZALLOC (&objfile->objfile_obstack,\n \t\t\t  struct dwarf2_per_cu_quick_data);\n \n-      slot = htab_find_slot (sig_types_hash, sig_type, INSERT);\n+      slot = htab_find_slot (sig_types_hash.get (), sig_type, INSERT);\n       *slot = sig_type;\n \n       dwarf2_per_objfile->all_type_units.push_back (sig_type);\n     }\n \n-  dwarf2_per_objfile->signatured_types = sig_types_hash;\n+  dwarf2_per_objfile->signatured_types = std::move (sig_types_hash);\n }\n \n /* Read the address map data from the mapped index, and use it to\n@@ -6400,16 +6400,13 @@ eq_signatured_type (const void *item_lhs, const void *item_rhs)\n \n /* Allocate a hash table for signatured types.  */\n \n-static htab_t\n+static htab_up\n allocate_signatured_type_table (struct objfile *objfile)\n {\n-  return htab_create_alloc_ex (41,\n-\t\t\t       hash_signatured_type,\n-\t\t\t       eq_signatured_type,\n-\t\t\t       NULL,\n-\t\t\t       &objfile->objfile_obstack,\n-\t\t\t       hashtab_obstack_allocate,\n-\t\t\t       dummy_obstack_deallocate);\n+  return htab_up (htab_create_alloc (41,\n+\t\t\t\t     hash_signatured_type,\n+\t\t\t\t     eq_signatured_type,\n+\t\t\t\t     NULL, xcalloc, xfree));\n }\n \n /* A helper function to add a signatured type CU to a table.  */\n@@ -6433,7 +6430,7 @@ add_signatured_type_cu_to_table (void **slot, void *datum)\n static void\n create_debug_type_hash_table (struct dwarf2_per_objfile *dwarf2_per_objfile,\n \t\t\t      struct dwo_file *dwo_file,\n-\t\t\t      dwarf2_section_info *section, htab_t &types_htab,\n+\t\t\t      dwarf2_section_info *section, htab_up &types_htab,\n \t\t\t      rcuh_kind section_kind)\n {\n   struct objfile *objfile = dwarf2_per_objfile->objfile;\n@@ -6532,7 +6529,7 @@ create_debug_type_hash_table (struct dwarf2_per_objfile *dwarf2_per_objfile,\n \t  sig_type->per_cu.length = length;\n \t}\n \n-      slot = htab_find_slot (types_htab,\n+      slot = htab_find_slot (types_htab.get (),\n \t\t\t     dwo_file ? (void*) dwo_tu : (void *) sig_type,\n \t\t\t     INSERT);\n       gdb_assert (slot != NULL);\n@@ -6584,7 +6581,7 @@ static void\n create_debug_types_hash_table (struct dwarf2_per_objfile *dwarf2_per_objfile,\n \t\t\t       struct dwo_file *dwo_file,\n \t\t\t       gdb::array_view<dwarf2_section_info> type_sections,\n-\t\t\t       htab_t &types_htab)\n+\t\t\t       htab_up &types_htab)\n {\n   for (dwarf2_section_info &section : type_sections)\n     create_debug_type_hash_table (dwarf2_per_objfile, dwo_file, &section,\n@@ -6599,7 +6596,7 @@ create_debug_types_hash_table (struct dwarf2_per_objfile *dwarf2_per_objfile,\n static int\n create_all_type_units (struct dwarf2_per_objfile *dwarf2_per_objfile)\n {\n-  htab_t types_htab = NULL;\n+  htab_up types_htab;\n \n   create_debug_type_hash_table (dwarf2_per_objfile, NULL,\n \t\t\t\t&dwarf2_per_objfile->info, types_htab,\n@@ -6612,12 +6609,14 @@ create_all_type_units (struct dwarf2_per_objfile *dwarf2_per_objfile)\n       return 0;\n     }\n \n-  dwarf2_per_objfile->signatured_types = types_htab;\n+  dwarf2_per_objfile->signatured_types = std::move (types_htab);\n \n   gdb_assert (dwarf2_per_objfile->all_type_units.empty ());\n-  dwarf2_per_objfile->all_type_units.reserve (htab_elements (types_htab));\n+  dwarf2_per_objfile->all_type_units.reserve\n+    (htab_elements (dwarf2_per_objfile->signatured_types.get ()));\n \n-  htab_traverse_noresize (types_htab, add_signatured_type_cu_to_table,\n+  htab_traverse_noresize (dwarf2_per_objfile->signatured_types.get (),\n+\t\t\t  add_signatured_type_cu_to_table,\n \t\t\t  &dwarf2_per_objfile->all_type_units);\n \n   return 1;\n@@ -6652,7 +6651,7 @@ add_type_unit (struct dwarf2_per_objfile *dwarf2_per_objfile, ULONGEST sig,\n \n   if (slot == NULL)\n     {\n-      slot = htab_find_slot (dwarf2_per_objfile->signatured_types,\n+      slot = htab_find_slot (dwarf2_per_objfile->signatured_types.get (),\n \t\t\t     sig_type, INSERT);\n     }\n   gdb_assert (*slot == NULL);\n@@ -6733,7 +6732,7 @@ lookup_dwo_signatured_type (struct dwarf2_cu *cu, ULONGEST sig)\n      .gdb_index with this TU.  */\n \n   find_sig_entry.signature = sig;\n-  slot = htab_find_slot (dwarf2_per_objfile->signatured_types,\n+  slot = htab_find_slot (dwarf2_per_objfile->signatured_types.get (),\n \t\t\t &find_sig_entry, INSERT);\n   sig_entry = (struct signatured_type *) *slot;\n \n@@ -6757,7 +6756,8 @@ lookup_dwo_signatured_type (struct dwarf2_cu *cu, ULONGEST sig)\n   if (dwo_file->tus == NULL)\n     return NULL;\n   find_dwo_entry.signature = sig;\n-  dwo_entry = (struct dwo_unit *) htab_find (dwo_file->tus, &find_dwo_entry);\n+  dwo_entry = (struct dwo_unit *) htab_find (dwo_file->tus.get (),\n+\t\t\t\t\t     &find_dwo_entry);\n   if (dwo_entry == NULL)\n     return NULL;\n \n@@ -6798,7 +6798,7 @@ lookup_dwp_signatured_type (struct dwarf2_cu *cu, ULONGEST sig)\n     }\n \n   find_sig_entry.signature = sig;\n-  slot = htab_find_slot (dwarf2_per_objfile->signatured_types,\n+  slot = htab_find_slot (dwarf2_per_objfile->signatured_types.get (),\n \t\t\t &find_sig_entry, INSERT);\n   sig_entry = (struct signatured_type *) *slot;\n \n@@ -6849,7 +6849,8 @@ lookup_signatured_type (struct dwarf2_cu *cu, ULONGEST sig)\n \treturn NULL;\n       find_entry.signature = sig;\n       entry = ((struct signatured_type *)\n-\t       htab_find (dwarf2_per_objfile->signatured_types, &find_entry));\n+\t       htab_find (dwarf2_per_objfile->signatured_types.get (),\n+\t\t\t  &find_entry));\n       return entry;\n     }\n }\n@@ -8075,8 +8076,8 @@ process_skeletonless_type_unit (void **slot, void *info)\n     }\n \n   find_entry.signature = dwo_unit->signature;\n-  slot = htab_find_slot (dwarf2_per_objfile->signatured_types, &find_entry,\n-\t\t\t INSERT);\n+  slot = htab_find_slot (dwarf2_per_objfile->signatured_types.get (),\n+\t\t\t &find_entry, INSERT);\n   /* If we've already seen this type there's nothing to do.  What's happening\n      is we're doing our own version of comdat-folding here.  */\n   if (*slot != NULL)\n@@ -8105,10 +8106,8 @@ process_dwo_file_for_skeletonless_type_units (void **slot, void *info)\n   struct dwo_file *dwo_file = (struct dwo_file *) *slot;\n \n   if (dwo_file->tus != NULL)\n-    {\n-      htab_traverse_noresize (dwo_file->tus,\n-\t\t\t      process_skeletonless_type_unit, info);\n-    }\n+    htab_traverse_noresize (dwo_file->tus.get (),\n+\t\t\t    process_skeletonless_type_unit, info);\n \n   return 1;\n }\n@@ -11483,18 +11482,15 @@ eq_dwo_unit (const void *item_lhs, const void *item_rhs)\n /* Allocate a hash table for DWO CUs,TUs.\n    There is one of these tables for each of CUs,TUs for each DWO file.  */\n \n-static htab_t\n+static htab_up\n allocate_dwo_unit_table (struct objfile *objfile)\n {\n   /* Start out with a pretty small number.\n      Generally DWO files contain only one CU and maybe some TUs.  */\n-  return htab_create_alloc_ex (3,\n-\t\t\t       hash_dwo_unit,\n-\t\t\t       eq_dwo_unit,\n-\t\t\t       NULL,\n-\t\t\t       &objfile->objfile_obstack,\n-\t\t\t       hashtab_obstack_allocate,\n-\t\t\t       dummy_obstack_deallocate);\n+  return htab_up (htab_create_alloc (3,\n+\t\t\t\t     hash_dwo_unit,\n+\t\t\t\t     eq_dwo_unit,\n+\t\t\t\t     NULL, xcalloc, xfree));\n }\n \n /* die_reader_func for create_dwo_cu.  */\n@@ -11537,7 +11533,7 @@ create_dwo_cu_reader (const struct die_reader_specs *reader,\n static void\n create_cus_hash_table (struct dwarf2_per_objfile *dwarf2_per_objfile,\n \t\t       dwarf2_cu *cu, struct dwo_file &dwo_file,\n-\t\t       dwarf2_section_info &section, htab_t &cus_htab)\n+\t\t       dwarf2_section_info &section, htab_up &cus_htab)\n {\n   struct objfile *objfile = dwarf2_per_objfile->objfile;\n   const gdb_byte *info_ptr, *end_ptr;\n@@ -11585,7 +11581,7 @@ create_cus_hash_table (struct dwarf2_per_objfile *dwarf2_per_objfile,\n \n       dwo_unit = OBSTACK_ZALLOC (&objfile->objfile_obstack, struct dwo_unit);\n       *dwo_unit = read_unit;\n-      slot = htab_find_slot (cus_htab, dwo_unit, INSERT);\n+      slot = htab_find_slot (cus_htab.get (), dwo_unit, INSERT);\n       gdb_assert (slot != NULL);\n       if (*slot != NULL)\n \t{\n@@ -12986,15 +12982,16 @@ lookup_dwo_cutu (struct dwarf2_per_cu_data *this_unit,\n \t      memset (&find_dwo_cutu, 0, sizeof (find_dwo_cutu));\n \t      find_dwo_cutu.signature = signature;\n \t      dwo_cutu\n-\t\t= (struct dwo_unit *) htab_find (dwo_file->tus, &find_dwo_cutu);\n+\t\t= (struct dwo_unit *) htab_find (dwo_file->tus.get (),\n+\t\t\t\t\t\t &find_dwo_cutu);\n \t    }\n \t  else if (!is_debug_types && dwo_file->cus)\n \t    {\n \t      struct dwo_unit find_dwo_cutu;\n \n \t      memset (&find_dwo_cutu, 0, sizeof (find_dwo_cutu));\n \t      find_dwo_cutu.signature = signature;\n-\t      dwo_cutu = (struct dwo_unit *)htab_find (dwo_file->cus,\n+\t      dwo_cutu = (struct dwo_unit *)htab_find (dwo_file->cus.get (),\n \t\t\t\t\t\t       &find_dwo_cutu);\n \t    }\n \n@@ -13109,7 +13106,8 @@ queue_and_load_all_dwo_tus (struct dwarf2_per_cu_data *per_cu)\n \n   dwo_file = dwo_unit->dwo_file;\n   if (dwo_file->tus != NULL)\n-    htab_traverse_noresize (dwo_file->tus, queue_and_load_dwo_tu, per_cu);\n+    htab_traverse_noresize (dwo_file->tus.get (), queue_and_load_dwo_tu,\n+\t\t\t    per_cu);\n }\n \n /* Read in various DIEs.  */"
    },
    {
      "sha": "ac87258c664dd0eace2092b4c542d2aed8efc141",
      "filename": "gdb/dwarf2/read.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b0b6a9878a472438a6fe2e93be819546efc5033a/gdb/dwarf2/read.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b0b6a9878a472438a6fe2e93be819546efc5033a/gdb/dwarf2/read.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.h?ref=b0b6a9878a472438a6fe2e93be819546efc5033a",
      "patch": "@@ -157,7 +157,7 @@ struct dwarf2_per_objfile\n \n   /* A table mapping .debug_types signatures to its signatured_type entry.\n      This is NULL if the .debug_types section hasn't been read in yet.  */\n-  htab_t signatured_types {};\n+  htab_up signatured_types;\n \n   /* Type unit statistics, to see how well the scaling improvements\n      are doing.  */"
    }
  ]
}