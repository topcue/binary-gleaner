{
  "sha": "0d79cdc494d5eb9db26a602d62c92d49f83f407e",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MGQ3OWNkYzQ5NGQ1ZWI5ZGIyNmE2MDJkNjJjOTJkNDlmODNmNDA3ZQ==",
  "commit": {
    "author": {
      "name": "Aaron Merey",
      "email": "amerey@redhat.com",
      "date": "2020-02-26T22:40:49Z"
    },
    "committer": {
      "name": "Aaron Merey",
      "email": "amerey@redhat.com",
      "date": "2020-02-26T22:40:49Z"
    },
    "message": "Add debuginfod support to GDB\n\ndebuginfod is a lightweight web service that indexes ELF/DWARF debugging\nresources by build-id and serves them over HTTP.\n\nThis patch enables GDB to query debuginfod servers for separate debug\nfiles and source code when it is otherwise not able to find them.\n\nGDB can be built with debuginfod using the --with-debuginfod configure\noption.\n\nThis requires that libdebuginfod be installed and found at configure time.\n\ndebuginfod is packaged with elfutils, starting with version 0.178.\n\nFor more information see https://sourceware.org/elfutils/.\n\nTested on x86_64 Fedora 31.\n\ngdb/ChangeLog:\n2020-02-26  Aaron Merey  <amerey@redhat.com>\n\n        * Makefile.in: Handle optional debuginfod support.\n        * NEWS: Update.\n        * README: Add --with-debuginfod summary.\n        * config.in: Regenerate.\n        * configure: Regenerate.\n        * configure.ac: Handle optional debuginfod support.\n        * debuginfod-support.c: debuginfod helper functions.\n        * debuginfod-support.h: Ditto.\n        * doc/gdb.texinfo: Add --with-debuginfod to configure options\n        summary.\n        * dwarf2/read.c (dwarf2_get_dwz_file): Query debuginfod servers\n        when a dwz file cannot be found.\n        * elfread.c (elf_symfile_read): Query debuginfod servers when a\n        debuginfo file cannot be found.\n        * source.c (open_source_file): Query debuginfod servers when a\n        source file cannot be found.\n        * top.c (print_gdb_configuration): Include\n        --{with,without}-debuginfod in the output.\n\ngdb/testsuite/ChangeLog:\n2020-02-26  Aaron Merey  <amerey@redhat.com>\n\n        * gdb.debuginfod: New directory for debuginfod tests.\n        * gdb.debuginfod/main.c: New test file.\n        * gdb.debuginfod/fetch_src_and_symbols.exp: New tests.",
    "tree": {
      "sha": "c30e35ac87c7ee38f63fe479af9e6940cad8574e",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/c30e35ac87c7ee38f63fe479af9e6940cad8574e"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/0d79cdc494d5eb9db26a602d62c92d49f83f407e",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0d79cdc494d5eb9db26a602d62c92d49f83f407e",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/0d79cdc494d5eb9db26a602d62c92d49f83f407e",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0d79cdc494d5eb9db26a602d62c92d49f83f407e/comments",
  "author": {
    "login": "aaronmerey",
    "id": 28735867,
    "node_id": "MDQ6VXNlcjI4NzM1ODY3",
    "avatar_url": "https://avatars.githubusercontent.com/u/28735867?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/aaronmerey",
    "html_url": "https://github.com/aaronmerey",
    "followers_url": "https://api.github.com/users/aaronmerey/followers",
    "following_url": "https://api.github.com/users/aaronmerey/following{/other_user}",
    "gists_url": "https://api.github.com/users/aaronmerey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/aaronmerey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/aaronmerey/subscriptions",
    "organizations_url": "https://api.github.com/users/aaronmerey/orgs",
    "repos_url": "https://api.github.com/users/aaronmerey/repos",
    "events_url": "https://api.github.com/users/aaronmerey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/aaronmerey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "aaronmerey",
    "id": 28735867,
    "node_id": "MDQ6VXNlcjI4NzM1ODY3",
    "avatar_url": "https://avatars.githubusercontent.com/u/28735867?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/aaronmerey",
    "html_url": "https://github.com/aaronmerey",
    "followers_url": "https://api.github.com/users/aaronmerey/followers",
    "following_url": "https://api.github.com/users/aaronmerey/following{/other_user}",
    "gists_url": "https://api.github.com/users/aaronmerey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/aaronmerey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/aaronmerey/subscriptions",
    "organizations_url": "https://api.github.com/users/aaronmerey/orgs",
    "repos_url": "https://api.github.com/users/aaronmerey/repos",
    "events_url": "https://api.github.com/users/aaronmerey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/aaronmerey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "b65ce565416b950d8730b34106c54779c48efd29",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b65ce565416b950d8730b34106c54779c48efd29",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/b65ce565416b950d8730b34106c54779c48efd29"
    }
  ],
  "stats": {
    "total": 805,
    "additions": 755,
    "deletions": 50
  },
  "files": [
    {
      "sha": "9f2387d5f50a923e66260b41c4010a0992f1e3f7",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 21,
      "deletions": 0,
      "changes": 21,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0d79cdc494d5eb9db26a602d62c92d49f83f407e/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0d79cdc494d5eb9db26a602d62c92d49f83f407e/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=0d79cdc494d5eb9db26a602d62c92d49f83f407e",
      "patch": "@@ -1,3 +1,24 @@\n+2020-02-26  Aaron Merey  <amerey@redhat.com>\n+\n+\t* Makefile.in: Handle optional debuginfod support.\n+\t* NEWS: Update.\n+\t* README: Add --with-debuginfod summary.\n+\t* config.in: Regenerate.\n+\t* configure: Regenerate.\n+\t* configure.ac: Handle optional debuginfod support.\n+\t* debuginfod-support.c: debuginfod helper functions.\n+\t* debuginfod-support.h: Ditto.\n+\t* doc/gdb.texinfo: Add --with-debuginfod to configure options\n+\tsummary.\n+\t* dwarf2/read.c (dwarf2_get_dwz_file): Query debuginfod servers\n+\twhen a dwz file cannot be found.\n+\t* elfread.c (elf_symfile_read): Query debuginfod servers when a\n+\tdebuginfo file cannot be found.\n+\t* source.c (open_source_file): Query debuginfod servers when a\n+\tsource file cannot be found.\n+\t* top.c (print_gdb_configuration): Include\n+\t--{with,without}-debuginfod in the output.\n+\n 2020-02-26  J\u00e9r\u00e9mie Galarneau  <jeremie.galarneau@efficios.com>\n \n \t* thread.c (thr_try_catch_cmd): Print thread name."
    },
    {
      "sha": "7c0a0aefbc2998b80e6054e9aecf59f607724f3a",
      "filename": "gdb/Makefile.in",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0d79cdc494d5eb9db26a602d62c92d49f83f407e/gdb/Makefile.in",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0d79cdc494d5eb9db26a602d62c92d49f83f407e/gdb/Makefile.in",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/Makefile.in?ref=0d79cdc494d5eb9db26a602d62c92d49f83f407e",
      "patch": "@@ -617,7 +617,8 @@ CLIBS = $(SIM) $(READLINE) $(OPCODES) $(BFD) $(LIBCTF) $(ZLIB) \\\n \t@LIBS@ @GUILE_LIBS@ @PYTHON_LIBS@ \\\n \t$(LIBEXPAT) $(LIBLZMA) $(LIBBABELTRACE) $(LIBIPT) \\\n \t$(WIN32LIBS) $(LIBGNU) $(LIBICONV) \\\n-\t$(LIBMPFR) $(SRCHIGH_LIBS) $(LIBXXHASH) $(PTHREAD_LIBS)\n+\t$(LIBMPFR) $(SRCHIGH_LIBS) $(LIBXXHASH) $(PTHREAD_LIBS) \\\n+\t@LIBDEBUGINFOD@\n CDEPS = $(NAT_CDEPS) $(SIM) $(BFD) $(READLINE_DEPS) $(LIBCTF) \\\n \t$(OPCODES) $(INTL_DEPS) $(LIBIBERTY) $(CONFIG_DEPS) $(LIBGNU) \\\n \t$(LIBSUPPORT)\n@@ -991,6 +992,7 @@ COMMON_SFILES = \\\n \tdbxread.c \\\n \tdcache.c \\\n \tdebug.c \\\n+\tdebuginfod-support.c \\\n \tdictionary.c \\\n \tdisasm.c \\\n \tdisasm-selftests.c \\"
    },
    {
      "sha": "d3a3605a58553b497e44b8041856b8c1d7276239",
      "filename": "gdb/NEWS",
      "status": "modified",
      "additions": 14,
      "deletions": 0,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0d79cdc494d5eb9db26a602d62c92d49f83f407e/gdb/NEWS",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0d79cdc494d5eb9db26a602d62c92d49f83f407e/gdb/NEWS",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/NEWS?ref=0d79cdc494d5eb9db26a602d62c92d49f83f407e",
      "patch": "@@ -3,6 +3,20 @@\n \n *** Changes since GDB 9\n \n+* GDB now supports debuginfod, an HTTP server for distributing ELF/DWARF\n+  debugging information as well as source code.\n+\n+  When built with debuginfod, GDB can automatically query debuginfod\n+  servers for the separate debug files and source code of the executable\n+  being debugged.\n+\n+  To build GDB with debuginfod, pass --with-debuginfod to configure (this\n+  requires libdebuginfod, the debuginfod client library).\n+\n+  debuginfod is distributed with elfutils, starting with version 0.178.\n+\n+  You can get the latest version from https://sourceware.org/elfutils.\n+\n * New features in the GDB remote stub, GDBserver\n \n   ** GDBserver is now supported on RISC-V GNU/Linux."
    },
    {
      "sha": "0ec1605ce5a79ebbd4ad08d78ce8c30bc36c9483",
      "filename": "gdb/README",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0d79cdc494d5eb9db26a602d62c92d49f83f407e/gdb/README",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0d79cdc494d5eb9db26a602d62c92d49f83f407e/gdb/README",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/README?ref=0d79cdc494d5eb9db26a602d62c92d49f83f407e",
      "patch": "@@ -432,6 +432,15 @@ more obscure GDB `configure' options are not listed here.\n      Use the curses library instead of the termcap library, for\n      text-mode terminal operations.\n \n+`--with-debuginfod'\n+     Build GDB with libdebuginfod, the debuginfod client library.  Used\n+     to automatically fetch source files and separate debug files from\n+     debuginfod servers using the associated executable's build ID.\n+     Enabled by default if libdebuginfod is installed and found at\n+     configure time.  debuginfod is packaged with elfutils, starting\n+     with version 0.178.  You can get the latest version from\n+     'https://sourceware.org/elfutils/'.\n+\n `--with-libunwind-ia64'\n      Use the libunwind library for unwinding function call stack on ia64\n      target platforms."
    },
    {
      "sha": "7a34b85e57542c2d429af24584be71b63505ce87",
      "filename": "gdb/config.in",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0d79cdc494d5eb9db26a602d62c92d49f83f407e/gdb/config.in",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0d79cdc494d5eb9db26a602d62c92d49f83f407e/gdb/config.in",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/config.in?ref=0d79cdc494d5eb9db26a602d62c92d49f83f407e",
      "patch": "@@ -227,6 +227,9 @@\n /* Define if you have the babeltrace library. */\n #undef HAVE_LIBBABELTRACE\n \n+/* Define to 1 if debuginfod is enabled. */\n+#undef HAVE_LIBDEBUGINFOD\n+\n /* Define if you have the expat library. */\n #undef HAVE_LIBEXPAT\n "
    },
    {
      "sha": "f99cbe40f11fc6af01c377248e60d222e2d3856b",
      "filename": "gdb/configure",
      "status": "modified",
      "additions": 135,
      "deletions": 47,
      "changes": 182,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0d79cdc494d5eb9db26a602d62c92d49f83f407e/gdb/configure",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0d79cdc494d5eb9db26a602d62c92d49f83f407e/gdb/configure",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/configure?ref=0d79cdc494d5eb9db26a602d62c92d49f83f407e",
      "patch": "@@ -758,6 +758,7 @@ REPORT_BUGS_TEXI\n REPORT_BUGS_TO\n PKGVERSION\n CODESIGN_CERT\n+LIBDEBUGINFOD\n HAVE_NATIVE_GCORE_TARGET\n TARGET_OBS\n subdirs\n@@ -869,6 +870,7 @@ enable_64_bit_bfd\n enable_gdbmi\n enable_tui\n enable_gdbtk\n+with_debuginfod\n with_libunwind_ia64\n with_curses\n enable_profiling\n@@ -1602,6 +1604,8 @@ Optional Packages:\n                           [--with-auto-load-dir]\n   --without-auto-load-safe-path\n                           do not restrict auto-loaded files locations\n+  --with-debuginfod       Enable debuginfo lookups with debuginfod\n+                          (auto/yes/no)\n   --with-libunwind-ia64   use libunwind frame unwinding for ia64 targets\n   --with-curses           use the curses library instead of the termcap\n                           library\n@@ -2264,6 +2268,52 @@ rm -f conftest.val\n \n } # ac_fn_c_compute_int\n \n+# ac_fn_c_check_decl LINENO SYMBOL VAR INCLUDES\n+# ---------------------------------------------\n+# Tests whether SYMBOL is declared in INCLUDES, setting cache variable VAR\n+# accordingly.\n+ac_fn_c_check_decl ()\n+{\n+  as_lineno=${as_lineno-\"$1\"} as_lineno_stack=as_lineno_stack=$as_lineno_stack\n+  as_decl_name=`echo $2|sed 's/ *(.*//'`\n+  as_decl_use=`echo $2|sed -e 's/(/((/' -e 's/)/) 0&/' -e 's/,/) 0& (/g'`\n+  { $as_echo \"$as_me:${as_lineno-$LINENO}: checking whether $as_decl_name is declared\" >&5\n+$as_echo_n \"checking whether $as_decl_name is declared... \" >&6; }\n+if eval \\${$3+:} false; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+  cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+$4\n+int\n+main ()\n+{\n+#ifndef $as_decl_name\n+#ifdef __cplusplus\n+  (void) $as_decl_use;\n+#else\n+  (void) $as_decl_name;\n+#endif\n+#endif\n+\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_c_try_compile \"$LINENO\"; then :\n+  eval \"$3=yes\"\n+else\n+  eval \"$3=no\"\n+fi\n+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n+fi\n+eval ac_res=\\$$3\n+\t       { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_res\" >&5\n+$as_echo \"$ac_res\" >&6; }\n+  eval $as_lineno_stack; ${as_lineno_stack:+:} unset as_lineno\n+\n+} # ac_fn_c_check_decl\n+\n # ac_fn_c_check_func LINENO FUNC VAR\n # ----------------------------------\n # Tests whether FUNC exists, setting the cache variable VAR accordingly\n@@ -2385,52 +2435,6 @@ $as_echo \"$ac_res\" >&6; }\n \n } # ac_fn_c_check_type\n \n-# ac_fn_c_check_decl LINENO SYMBOL VAR INCLUDES\n-# ---------------------------------------------\n-# Tests whether SYMBOL is declared in INCLUDES, setting cache variable VAR\n-# accordingly.\n-ac_fn_c_check_decl ()\n-{\n-  as_lineno=${as_lineno-\"$1\"} as_lineno_stack=as_lineno_stack=$as_lineno_stack\n-  as_decl_name=`echo $2|sed 's/ *(.*//'`\n-  as_decl_use=`echo $2|sed -e 's/(/((/' -e 's/)/) 0&/' -e 's/,/) 0& (/g'`\n-  { $as_echo \"$as_me:${as_lineno-$LINENO}: checking whether $as_decl_name is declared\" >&5\n-$as_echo_n \"checking whether $as_decl_name is declared... \" >&6; }\n-if eval \\${$3+:} false; then :\n-  $as_echo_n \"(cached) \" >&6\n-else\n-  cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n-/* end confdefs.h.  */\n-$4\n-int\n-main ()\n-{\n-#ifndef $as_decl_name\n-#ifdef __cplusplus\n-  (void) $as_decl_use;\n-#else\n-  (void) $as_decl_name;\n-#endif\n-#endif\n-\n-  ;\n-  return 0;\n-}\n-_ACEOF\n-if ac_fn_c_try_compile \"$LINENO\"; then :\n-  eval \"$3=yes\"\n-else\n-  eval \"$3=no\"\n-fi\n-rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n-fi\n-eval ac_res=\\$$3\n-\t       { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_res\" >&5\n-$as_echo \"$ac_res\" >&6; }\n-  eval $as_lineno_stack; ${as_lineno_stack:+:} unset as_lineno\n-\n-} # ac_fn_c_check_decl\n-\n # ac_fn_c_check_member LINENO AGGR MEMBER VAR INCLUDES\n # ----------------------------------------------------\n # Tries to find if the field MEMBER exists in type AGGR, after including\n@@ -6836,8 +6840,92 @@ $as_echo \"$as_me: WARNING: gdbtk isn't supported on $host; disabling\" >&2;}\n     enable_gdbtk=no ;;\n esac\n \n-# Libunwind support for ia64.\n+# Handle optional debuginfod support\n+\n+# Enable debuginfod\n+\n+# Check whether --with-debuginfod was given.\n+if test \"${with_debuginfod+set}\" = set; then :\n+  withval=$with_debuginfod;\n+else\n+  with_debuginfod=auto\n+fi\n+\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking whether to use debuginfod\" >&5\n+$as_echo_n \"checking whether to use debuginfod... \" >&6; }\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $with_debuginfod\" >&5\n+$as_echo \"$with_debuginfod\" >&6; }\n \n+if test \"${with_debuginfod}\" = no; then\n+  { $as_echo \"$as_me:${as_lineno-$LINENO}: WARNING: debuginfod support disabled; some features may be unavailable.\" >&5\n+$as_echo \"$as_me: WARNING: debuginfod support disabled; some features may be unavailable.\" >&2;}\n+else\n+  { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for debuginfod_begin in -ldebuginfod\" >&5\n+$as_echo_n \"checking for debuginfod_begin in -ldebuginfod... \" >&6; }\n+if ${ac_cv_lib_debuginfod_debuginfod_begin+:} false; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+  ac_check_lib_save_LIBS=$LIBS\n+LIBS=\"-ldebuginfod  $LIBS\"\n+cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+\n+/* Override any GCC internal prototype to avoid an error.\n+   Use char because int might match the return type of a GCC\n+   builtin and then its argument prototype would still apply.  */\n+#ifdef __cplusplus\n+extern \"C\"\n+#endif\n+char debuginfod_begin ();\n+int\n+main ()\n+{\n+return debuginfod_begin ();\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_c_try_link \"$LINENO\"; then :\n+  ac_cv_lib_debuginfod_debuginfod_begin=yes\n+else\n+  ac_cv_lib_debuginfod_debuginfod_begin=no\n+fi\n+rm -f core conftest.err conftest.$ac_objext \\\n+    conftest$ac_exeext conftest.$ac_ext\n+LIBS=$ac_check_lib_save_LIBS\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_cv_lib_debuginfod_debuginfod_begin\" >&5\n+$as_echo \"$ac_cv_lib_debuginfod_debuginfod_begin\" >&6; }\n+if test \"x$ac_cv_lib_debuginfod_debuginfod_begin\" = xyes; then :\n+  have_debuginfod_lib=yes\n+fi\n+\n+  ac_fn_c_check_decl \"$LINENO\" \"debuginfod_begin\" \"ac_cv_have_decl_debuginfod_begin\" \"#include <elfutils/debuginfod.h>\n+\"\n+if test \"x$ac_cv_have_decl_debuginfod_begin\" = xyes; then :\n+  have_debuginfod_h=yes\n+fi\n+\n+  if test \"x$have_debuginfod_lib\" = \"xyes\" -a \\\n+          \"x$have_debuginfod_h\" = \"xyes\"; then\n+\n+$as_echo \"#define HAVE_LIBDEBUGINFOD 1\" >>confdefs.h\n+\n+    LIBDEBUGINFOD=\"-ldebuginfod\"\n+\n+  else\n+\n+    if test \"$with_debuginfod\" = yes; then\n+      as_fn_error $? \"debuginfod is missing or unusable\" \"$LINENO\" 5\n+    else\n+      { $as_echo \"$as_me:${as_lineno-$LINENO}: WARNING: debuginfod is missing or unusable; some features may be unavailable.\" >&5\n+$as_echo \"$as_me: WARNING: debuginfod is missing or unusable; some features may be unavailable.\" >&2;}\n+    fi\n+  fi\n+fi\n+\n+\n+# Libunwind support for ia64.\n \n # Check whether --with-libunwind-ia64 was given.\n if test \"${with_libunwind_ia64+set}\" = set; then :"
    },
    {
      "sha": "1cba1e832bbf039823405470d6dc3ba8344ff067",
      "filename": "gdb/configure.ac",
      "status": "modified",
      "additions": 5,
      "deletions": 1,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0d79cdc494d5eb9db26a602d62c92d49f83f407e/gdb/configure.ac",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0d79cdc494d5eb9db26a602d62c92d49f83f407e/gdb/configure.ac",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/configure.ac?ref=0d79cdc494d5eb9db26a602d62c92d49f83f407e",
      "patch": "@@ -18,6 +18,8 @@ dnl along with this program.  If not, see <http://www.gnu.org/licenses/>.\n \n dnl Process this file with autoconf to produce a configure script.\n \n+m4_include(../config/debuginfod.m4)\n+\n AC_INIT(main.c)\n AC_CONFIG_HEADERS(config.h:config.in, [echo > stamp-h])\n AM_MAINTAINER_MODE\n@@ -322,8 +324,10 @@ case $host_os in\n     enable_gdbtk=no ;;\n esac\n \n-# Libunwind support for ia64.\n+# Handle optional debuginfod support\n+AC_DEBUGINFOD\n \n+# Libunwind support for ia64.\n AC_ARG_WITH(libunwind-ia64,\n AS_HELP_STRING([--with-libunwind-ia64],\n \t       [use libunwind frame unwinding for ia64 targets]),,"
    },
    {
      "sha": "e0f0fac07665ec2a3579f1f9004da7b657f0bacb",
      "filename": "gdb/debuginfod-support.c",
      "status": "added",
      "additions": 155,
      "deletions": 0,
      "changes": 155,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0d79cdc494d5eb9db26a602d62c92d49f83f407e/gdb/debuginfod-support.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0d79cdc494d5eb9db26a602d62c92d49f83f407e/gdb/debuginfod-support.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/debuginfod-support.c?ref=0d79cdc494d5eb9db26a602d62c92d49f83f407e",
      "patch": "@@ -0,0 +1,155 @@\n+/* debuginfod utilities for GDB.\n+   Copyright (C) 2020 Free Software Foundation, Inc.\n+\n+   This file is part of GDB.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+#include <errno.h>\n+#include \"defs.h\"\n+#include \"cli/cli-style.h\"\n+#include \"gdbsupport/scoped_fd.h\"\n+#include \"debuginfod-support.h\"\n+\n+#ifndef HAVE_LIBDEBUGINFOD\n+scoped_fd\n+debuginfod_source_query (const unsigned char *build_id,\n+\t\t\t int build_id_len,\n+\t\t\t const char *srcpath,\n+\t\t\t gdb::unique_xmalloc_ptr<char> *destname)\n+{\n+  return scoped_fd (-ENOSYS);\n+}\n+\n+scoped_fd\n+debuginfod_debuginfo_query (const unsigned char *build_id,\n+\t\t\t    int build_id_len,\n+\t\t\t    const char *filename,\n+\t\t\t    gdb::unique_xmalloc_ptr<char> *destname)\n+{\n+  return scoped_fd (-ENOSYS);\n+}\n+#else\n+#include <elfutils/debuginfod.h>\n+\n+/* TODO: Use debuginfod API extensions instead of these globals.  */\n+static std::string desc;\n+static std::string fname;\n+static bool has_printed;\n+\n+static int\n+progressfn (debuginfod_client *c, long cur, long total)\n+{\n+  if (check_quit_flag ())\n+    {\n+      printf_filtered (\"Cancelling download of %s %ps...\\n\",\n+\t\t       desc.c_str (),\n+\t\t       styled_string (file_name_style.style (), fname.c_str ()));\n+      return 1;\n+    }\n+\n+  if (!has_printed && total != 0)\n+    {\n+      /* Print this message only once.  */\n+      has_printed = true;\n+      printf_filtered (\"Downloading %s %ps...\\n\",\n+\t\t       desc.c_str (),\n+\t\t       styled_string (file_name_style.style (), fname.c_str ()));\n+    }\n+\n+  return 0;\n+}\n+\n+static debuginfod_client *\n+debuginfod_init ()\n+{\n+  debuginfod_client *c = debuginfod_begin ();\n+\n+  if (c != nullptr)\n+    debuginfod_set_progressfn (c, progressfn);\n+\n+  return c;\n+}\n+\n+/* See debuginfod-support.h  */\n+\n+scoped_fd\n+debuginfod_source_query (const unsigned char *build_id,\n+\t\t\t int build_id_len,\n+\t\t\t const char *srcpath,\n+\t\t\t gdb::unique_xmalloc_ptr<char> *destname)\n+{\n+  if (getenv (DEBUGINFOD_URLS_ENV_VAR) == NULL)\n+    return scoped_fd (-ENOSYS);\n+\n+  debuginfod_client *c = debuginfod_init ();\n+\n+  if (c == nullptr)\n+    return scoped_fd (-ENOMEM);\n+\n+  desc = std::string (\"source file\");\n+  fname = std::string (srcpath);\n+  has_printed = false;\n+\n+  scoped_fd fd (debuginfod_find_source (c,\n+\t\t\t\t\tbuild_id,\n+\t\t\t\t\tbuild_id_len,\n+\t\t\t\t\tsrcpath,\n+\t\t\t\t\tnullptr));\n+\n+  /* TODO: Add 'set debug debuginfod' command to control when error messages are shown.  */\n+  if (fd.get () < 0 && fd.get () != -ENOENT)\n+    printf_filtered (_(\"Download failed: %s.  Continuing without source file %ps.\\n\"),\n+\t\t     safe_strerror (-fd.get ()),\n+\t\t     styled_string (file_name_style.style (),  srcpath));\n+  else\n+    destname->reset (xstrdup (srcpath));\n+\n+  debuginfod_end (c);\n+  return fd;\n+}\n+\n+/* See debuginfod-support.h  */\n+\n+scoped_fd\n+debuginfod_debuginfo_query (const unsigned char *build_id,\n+\t\t\t    int build_id_len,\n+\t\t\t    const char *filename,\n+\t\t\t    gdb::unique_xmalloc_ptr<char> *destname)\n+{\n+  if (getenv (DEBUGINFOD_URLS_ENV_VAR) == NULL)\n+    return scoped_fd (-ENOSYS);\n+\n+  debuginfod_client *c = debuginfod_init ();\n+\n+  if (c == nullptr)\n+    return scoped_fd (-ENOMEM);\n+\n+  desc = std::string (\"separate debug info for\");\n+  fname = std::string (filename);\n+  has_printed = false;\n+  char *dname = nullptr;\n+\n+  scoped_fd fd (debuginfod_find_debuginfo (c, build_id, build_id_len, &dname));\n+\n+  if (fd.get () < 0 && fd.get () != -ENOENT)\n+    printf_filtered (_(\"Download failed: %s.  Continuing without debug info for %ps.\\n\"),\n+\t\t     safe_strerror (-fd.get ()),\n+\t\t     styled_string (file_name_style.style (),  filename));\n+\n+  destname->reset (dname);\n+  debuginfod_end (c);\n+  return fd;\n+}\n+#endif"
    },
    {
      "sha": "676c217b6485f6948f75efb2f524ec5273763941",
      "filename": "gdb/debuginfod-support.h",
      "status": "added",
      "additions": 62,
      "deletions": 0,
      "changes": 62,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0d79cdc494d5eb9db26a602d62c92d49f83f407e/gdb/debuginfod-support.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0d79cdc494d5eb9db26a602d62c92d49f83f407e/gdb/debuginfod-support.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/debuginfod-support.h?ref=0d79cdc494d5eb9db26a602d62c92d49f83f407e",
      "patch": "@@ -0,0 +1,62 @@\n+/* debuginfod utilities for GDB.\n+   Copyright (C) 2020 Free Software Foundation, Inc.\n+\n+   This file is part of GDB.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+#ifndef DEBUGINFOD_SUPPORT_H\n+#define DEBUGINFOD_SUPPORT_H\n+\n+/* Query debuginfod servers for a source file associated with an\n+   executable with BUILD_ID.  BUILD_ID can be given as a binary blob or\n+   a null-terminated string.  If given as a binary blob, BUILD_ID_LEN\n+   should be the number of bytes.  If given as a null-terminated string,\n+   BUILD_ID_LEN should be 0.\n+\n+   SRC_PATH should be the source file's absolute path that includes the\n+   compilation directory of the CU associated with the source file.\n+   For example if a CU's compilation directory is `/my/build` and the\n+   source file path is `/my/source/foo.c`, then SRC_PATH should be\n+   `/my/build/../source/foo.c`.\n+\n+   If the file is successfully retrieved, its path on the local machine\n+   is stored in DESTNAME.  If GDB is not built with debuginfod, this\n+   function returns -ENOSYS.  */\n+\n+extern scoped_fd\n+debuginfod_source_query (const unsigned char *build_id,\n+\t\t\t int build_id_len,\n+\t\t\t const char *src_path,\n+\t\t\t gdb::unique_xmalloc_ptr<char> *destname);\n+\n+/* Query debuginfod servers for a debug info file with BUILD_ID.\n+   BUILD_ID can be given as a binary blob or a null-terminated string.\n+   If given as a binary blob, BUILD_ID_LEN should be the number of bytes.\n+   If given as a null-terminated string, BUILD_ID_LEN should be 0.\n+\n+   FILENAME should be the name or path of the main binary associated with\n+   the separate debug info.  It is used for printing messages to the user.\n+\n+   If the file is successfully retrieved, its path on the local machine\n+   is stored in DESTNAME.  If GDB is not built with debuginfod, this\n+   function returns -ENOSYS.  */\n+\n+extern scoped_fd\n+debuginfod_debuginfo_query (const unsigned char *build_id,\n+\t\t\t    int build_id_len,\n+\t\t\t    const char *filename,\n+\t\t\t    gdb::unique_xmalloc_ptr<char> *destname);\n+\n+#endif /* DEBUGINFOD_SUPPORT_H */"
    },
    {
      "sha": "b947c5dfb48e6d7a2a65ab63c7624daae4609d88",
      "filename": "gdb/doc/gdb.texinfo",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0d79cdc494d5eb9db26a602d62c92d49f83f407e/gdb/doc/gdb.texinfo",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0d79cdc494d5eb9db26a602d62c92d49f83f407e/gdb/doc/gdb.texinfo",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/doc/gdb.texinfo?ref=0d79cdc494d5eb9db26a602d62c92d49f83f407e",
      "patch": "@@ -37848,6 +37848,14 @@ supported).\n Use the curses library instead of the termcap library, for text-mode\n terminal operations.\n \n+@item --with-debuginfod\n+Build @value{GDBN} with libdebuginfod, the debuginfod client library.\n+Used to automatically fetch source files and separate debug files from\n+debuginfod servers using the associated executable's build ID. Enabled\n+by default if libdebuginfod is installed and found at configure time.\n+debuginfod is packaged with elfutils, starting with version 0.178. You\n+can get the latest version from `https://sourceware.org/elfutils/'.\n+\n @item --with-libunwind-ia64\n Use the libunwind library for unwinding function call stack on ia64\n target platforms.  See http://www.nongnu.org/libunwind/index.html for"
    },
    {
      "sha": "d6b34d8586ee54c2029a4ad8f3e8ea4ed0496d74",
      "filename": "gdb/dwarf2/read.c",
      "status": "modified",
      "additions": 24,
      "deletions": 0,
      "changes": 24,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0d79cdc494d5eb9db26a602d62c92d49f83f407e/gdb/dwarf2/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0d79cdc494d5eb9db26a602d62c92d49f83f407e/gdb/dwarf2/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.c?ref=0d79cdc494d5eb9db26a602d62c92d49f83f407e",
      "patch": "@@ -83,6 +83,7 @@\n #include \"rust-lang.h\"\n #include \"gdbsupport/pathstuff.h\"\n #include \"count-one-bits.h\"\n+#include \"debuginfod-support.h\"\n \n /* When == 1, print basic high level tracing messages.\n    When > 1, be more verbose.\n@@ -2147,6 +2148,29 @@ dwarf2_get_dwz_file (struct dwarf2_per_objfile *dwarf2_per_objfile)\n   if (dwz_bfd == NULL)\n     dwz_bfd = build_id_to_debug_bfd (buildid_len, buildid);\n \n+  if (dwz_bfd == nullptr)\n+    {\n+      gdb::unique_xmalloc_ptr<char> alt_filename;\n+      const char *origname = dwarf2_per_objfile->objfile->original_name;\n+\n+      scoped_fd fd (debuginfod_debuginfo_query (buildid,\n+\t\t\t\t\t\tbuildid_len,\n+\t\t\t\t\t\torigname,\n+\t\t\t\t\t\t&alt_filename));\n+\n+      if (fd.get () >= 0)\n+\t{\n+\t  /* File successfully retrieved from server.  */\n+\t  dwz_bfd = gdb_bfd_open (alt_filename.get (), gnutarget, -1);\n+\n+\t  if (dwz_bfd == nullptr)\n+\t    warning (_(\"File \\\"%s\\\" from debuginfod cannot be opened as bfd\"),\n+\t\t     alt_filename.get ());\n+\t  else if (!build_id_verify (dwz_bfd.get (), buildid_len, buildid))\n+\t    dwz_bfd.reset (nullptr);\n+\t}\n+    }\n+\n   if (dwz_bfd == NULL)\n     error (_(\"could not find '.gnu_debugaltlink' file for %s\"),\n \t   objfile_name (dwarf2_per_objfile->objfile));"
    },
    {
      "sha": "d842d5b573dd5ed67634d8545f3bcf92002fc905",
      "filename": "gdb/elfread.c",
      "status": "modified",
      "additions": 31,
      "deletions": 1,
      "changes": 32,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0d79cdc494d5eb9db26a602d62c92d49f83f407e/gdb/elfread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0d79cdc494d5eb9db26a602d62c92d49f83f407e/gdb/elfread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/elfread.c?ref=0d79cdc494d5eb9db26a602d62c92d49f83f407e",
      "patch": "@@ -49,6 +49,8 @@\n #include \"mdebugread.h\"\n #include \"ctfread.h\"\n #include \"gdbsupport/gdb_string_view.h\"\n+#include \"gdbsupport/scoped_fd.h\"\n+#include \"debuginfod-support.h\"\n \n /* Forward declarations.  */\n extern const struct sym_fns elf_sym_fns_gdb_index;\n@@ -1316,8 +1318,36 @@ elf_symfile_read (struct objfile *objfile, symfile_add_flags symfile_flags)\n \t  symbol_file_add_separate (debug_bfd.get (), debugfile.c_str (),\n \t\t\t\t    symfile_flags, objfile);\n \t}\n-\telse\n+      else\n+\t{\n \t  has_dwarf2 = false;\n+\t  const struct bfd_build_id *build_id = build_id_bfd_get (objfile->obfd);\n+\n+\t  if (build_id != nullptr)\n+\t    {\n+\t      gdb::unique_xmalloc_ptr<char> symfile_path;\n+\t      scoped_fd fd (debuginfod_debuginfo_query (build_id->data,\n+\t\t\t\t\t\t\tbuild_id->size,\n+\t\t\t\t\t\t\tobjfile->original_name,\n+\t\t\t\t\t\t\t&symfile_path));\n+\n+\t      if (fd.get () >= 0)\n+\t\t{\n+\t\t  /* File successfully retrieved from server.  */\n+\t\t  gdb_bfd_ref_ptr debug_bfd (symfile_bfd_open (symfile_path.get ()));\n+\n+\t\t  if (debug_bfd == nullptr)\n+\t\t    warning (_(\"File \\\"%s\\\" from debuginfod cannot be opened as bfd\"),\n+\t\t\t     objfile->original_name);\n+\t\t  else if (build_id_verify (debug_bfd.get (), build_id->size, build_id->data))\n+\t\t    {\n+\t\t      symbol_file_add_separate (debug_bfd.get (), symfile_path.get (),\n+\t\t\t\t\t\tsymfile_flags, objfile);\n+\t\t      has_dwarf2 = true;\n+\t\t    }\n+\t\t}\n+\t    }\n+\t}\n     }\n \n   /* Read the CTF section only if there is no DWARF info.  */"
    },
    {
      "sha": "051caf5c57fa13f6bcf0af2d155d5d67d0104ea2",
      "filename": "gdb/source.c",
      "status": "modified",
      "additions": 30,
      "deletions": 0,
      "changes": 30,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0d79cdc494d5eb9db26a602d62c92d49f83f407e/gdb/source.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0d79cdc494d5eb9db26a602d62c92d49f83f407e/gdb/source.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/source.c?ref=0d79cdc494d5eb9db26a602d62c92d49f83f407e",
      "patch": "@@ -48,6 +48,8 @@\n #include \"source-cache.h\"\n #include \"cli/cli-style.h\"\n #include \"observable.h\"\n+#include \"build-id.h\"\n+#include \"debuginfod-support.h\"\n \n #define OPEN_MODE (O_RDONLY | O_BINARY)\n #define FDOPEN_MODE FOPEN_RB\n@@ -1148,6 +1150,34 @@ open_source_file (struct symtab *s)\n   s->fullname = NULL;\n   scoped_fd fd = find_and_open_source (s->filename, SYMTAB_DIRNAME (s),\n \t\t\t\t       &fullname);\n+\n+  if (fd.get () < 0)\n+    {\n+      if (SYMTAB_COMPUNIT (s) != nullptr)\n+\t{\n+\t  const objfile *ofp = COMPUNIT_OBJFILE (SYMTAB_COMPUNIT (s));\n+\n+\t  std::string srcpath;\n+\t  if (IS_ABSOLUTE_PATH (s->filename))\n+\t    srcpath = s->filename;\n+\t  else\n+\t    {\n+\t      srcpath = SYMTAB_DIRNAME (s);\n+\t      srcpath += SLASH_STRING;\n+\t      srcpath += s->filename;\n+\t    }\n+\n+\t  const struct bfd_build_id *build_id = build_id_bfd_get (ofp->obfd);\n+\n+\t  /* Query debuginfod for the source file.  */\n+\t  if (build_id != nullptr)\n+\t    fd = debuginfod_source_query (build_id->data,\n+\t\t\t\t\t  build_id->size,\n+\t\t\t\t\t  srcpath.c_str (),\n+\t\t\t\t\t  &fullname);\n+\t}\n+    }\n+\n   s->fullname = fullname.release ();\n   return fd;\n }"
    },
    {
      "sha": "52c46f9e2f066b600baa09d5cfd6af7fe91a9632",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0d79cdc494d5eb9db26a602d62c92d49f83f407e/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0d79cdc494d5eb9db26a602d62c92d49f83f407e/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=0d79cdc494d5eb9db26a602d62c92d49f83f407e",
      "patch": "@@ -1,3 +1,9 @@\n+2020-02-26  Aaron Merey  <amerey@redhat.com>\n+\n+\t* gdb.debuginfod: New directory for debuginfod tests.\n+\t* gdb.debuginfod/main.c: New test file.\n+\t* gdb.debuginfod/fetch_src_and_symbols.exp: New tests.\n+\n 2020-02-26  Tom de Vries  <tdevries@suse.de>\n \n \tPR gdb/25603"
    },
    {
      "sha": "0bf18f2d124d8facc500416098c5f478cbdcff4d",
      "filename": "gdb/testsuite/gdb.debuginfod/fetch_src_and_symbols.exp",
      "status": "added",
      "additions": 214,
      "deletions": 0,
      "changes": 214,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0d79cdc494d5eb9db26a602d62c92d49f83f407e/gdb/testsuite/gdb.debuginfod/fetch_src_and_symbols.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0d79cdc494d5eb9db26a602d62c92d49f83f407e/gdb/testsuite/gdb.debuginfod/fetch_src_and_symbols.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.debuginfod/fetch_src_and_symbols.exp?ref=0d79cdc494d5eb9db26a602d62c92d49f83f407e",
      "patch": "@@ -0,0 +1,214 @@\n+# Copyright 2020 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+# Test debuginfod functionality\n+\n+standard_testfile main.c\n+\n+load_lib dwarf.exp\n+\n+if { [which debuginfod] == 0 } {\n+    untested \"cannot find debuginfod\"\n+    return -1\n+}\n+\n+if { [which curl] == 0 } {\n+    untested \"cannot find curl\"\n+    return -1\n+}\n+\n+# Skip testing if gdb was not configured with debuginfod\n+if { [string first \"with-debuginfod\" [exec $GDB --configuration]] == -1 } {\n+    untested \"gdb not configured with debuginfod\"\n+    return -1\n+}\n+\n+set cache [standard_output_file \".client_cache\"]\n+set db [standard_output_file \".debuginfod.db\"]\n+\n+# Delete any preexisting test files\n+file delete -force $cache\n+file delete -force $db\n+\n+set sourcetmp [standard_output_file tmp-${srcfile}]\n+set outputdir [standard_output_file {}]\n+\n+# Make a copy source file that we can move around\n+if { [catch {file copy -force ${srcdir}/${subdir}/${srcfile} \\\n+\t     [standard_output_file ${sourcetmp}]}] != 0 } {\n+    error \"create temporary file\"\n+    return -1\n+}\n+\n+if { [gdb_compile \"$sourcetmp\" \"$binfile\" executable {debug}] != \"\" } {\n+    fail \"compile\"\n+    return -1\n+}\n+\n+setenv DEBUGINFOD_URLS \"\"\n+setenv DEBUGINFOD_TIMEOUT 30\n+setenv DEBUGINFOD_CACHE_PATH $cache\n+\n+# Test that gdb cannot find source without debuginfod\n+clean_restart $binfile\n+gdb_test_no_output \"set substitute-path $outputdir /dev/null\"\n+gdb_test \"list\" \".*No such file or directory.*\"\n+\n+# Strip symbols into separate file and move it so gdb cannot find it without debuginfod\n+if { [gdb_gnu_strip_debug $binfile \"\"] != 0 } {\n+    fail \"strip debuginfo\"\n+    return -1\n+}\n+\n+set debugdir [standard_output_file \"debug\"]\n+set debuginfo [standard_output_file \"fetch_src_and_symbols.debug\"]\n+\n+file mkdir $debugdir\n+file rename -force $debuginfo $debugdir\n+\n+# Test that gdb cannot find symbols without debuginfod\n+clean_restart $binfile\n+gdb_test \"file\" \".*No symbol file.*\"\n+\n+# Write some assembly that just has a .gnu_debugaltlink section.\n+# Copied from testsuite/gdb.dwarf2/dwzbuildid.exp.\n+proc write_just_debugaltlink {filename dwzname buildid} {\n+    set asm_file [standard_output_file $filename]\n+\n+    Dwarf::assemble $asm_file {\n+\tupvar dwzname dwzname\n+\tupvar buildid buildid\n+\n+\tgnu_debugaltlink $dwzname $buildid\n+\n+\t# Only the DWARF reader checks .gnu_debugaltlink, so make sure\n+\t# there is a bit of DWARF in here.\n+\tcu {} {\n+\t    compile_unit {{language @DW_LANG_C}} {\n+\t    }\n+\t}\n+    }\n+}\n+\n+# Write some DWARF that also sets the buildid.\n+# Copied from testsuite/gdb.dwarf2/dwzbuildid.exp.\n+proc write_dwarf_file {filename buildid {value 99}} {\n+    set asm_file [standard_output_file $filename]\n+\n+    Dwarf::assemble $asm_file {\n+\tdeclare_labels int_label int_label2\n+\n+\tupvar buildid buildid\n+\tupvar value value\n+\n+\tbuild_id $buildid\n+\n+\tcu {} {\n+\t    compile_unit {{language @DW_LANG_C}} {\n+\t        int_label2: base_type {\n+\t\t    {name int}\n+\t\t    {byte_size 4 sdata}\n+\t\t    {encoding @DW_ATE_signed}\n+\t\t}\n+\n+\t\tconstant {\n+\t\t    {name the_int}\n+\t\t    {type :$int_label2}\n+\t\t    {const_value $value data1}\n+\t\t}\n+\t    }\n+\t}\n+    }\n+}\n+\n+set buildid \"01234567890abcdef0123456\"\n+\n+write_just_debugaltlink ${binfile}_has_altlink.S ${binfile}_dwz.o $buildid\n+write_dwarf_file ${binfile}_dwz.S $buildid\n+\n+if {[gdb_compile ${binfile}_has_altlink.S ${binfile}_alt.o object nodebug] != \"\"} {\n+    fail \"compile main with altlink\"\n+    return -1\n+}\n+\n+if {[gdb_compile ${binfile}_dwz.S ${binfile}_dwz.o object nodebug] != \"\"} {\n+    fail \"compile altlink\"\n+    return -1\n+}\n+\n+file rename -force ${binfile}_dwz.o $debugdir\n+\n+# Test that gdb cannot find dwz without debuginfod.\n+clean_restart\n+gdb_test \"file ${binfile}_alt.o\" \".*could not find '.gnu_debugaltlink'.*\"\n+\n+# Find an unused port\n+set port 7999\n+set found 0\n+while { ! $found } {\n+  incr port\n+  if { $port == 65536 } {\n+    fail \"no available ports\"\n+    return -1\n+  }\n+\n+  spawn debuginfod -vvvv -d $db -p $port -F $debugdir\n+  expect {\n+    \"started http server on IPv4 IPv6 port=$port\" { set found 1 }\n+    \"failed to bind to port\" { kill_wait_spawned_process $spawn_id }\n+    timeout {\n+      fail \"find port timeout\"\n+      return -1\n+    }\n+  }\n+}\n+\n+set metrics [list \"ready 1\" \\\n+\t     \"thread_work_total{role=\\\"traverse\\\"} 1\" \\\n+\t     \"thread_work_pending{role=\\\"scan\\\"} 0\" \\\n+\t     \"thread_busy{role=\\\"scan\\\"} 0\"]\n+\n+# Check server metrics to confirm init has completed.\n+foreach m $metrics {\n+  set timelim 20\n+  while { $timelim != 0 } {\n+    sleep 0.5\n+    catch {exec curl -s http://127.0.0.1:$port/metrics} got\n+\n+    if { [regexp $m $got] } {\n+      break\n+    }\n+\n+    incr timelim -1\n+  }\n+\n+  if { $timelim == 0 } {\n+    fail \"server init timeout\"\n+    return -1\n+  }\n+}\n+\n+# Point the client to the server\n+setenv DEBUGINFOD_URLS http://127.0.0.1:$port\n+\n+# gdb should now find the symbol and source files\n+clean_restart $binfile\n+gdb_test_no_output \"set substitute-path $outputdir /dev/null\"\n+gdb_test \"br main\" \"Breakpoint 1 at.*file.*\"\n+gdb_test \"l\" \".*This program is distributed in the hope.*\"\n+\n+# gdb should now find the debugaltlink file\n+clean_restart\n+gdb_test \"file ${binfile}_alt.o\" \".*Reading symbols from ${binfile}_alt.o\\.\\.\\.*\""
    },
    {
      "sha": "73abaf58b1c5141bd175c3a6a966bbba040bf8dc",
      "filename": "gdb/testsuite/gdb.debuginfod/main.c",
      "status": "added",
      "additions": 25,
      "deletions": 0,
      "changes": 25,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0d79cdc494d5eb9db26a602d62c92d49f83f407e/gdb/testsuite/gdb.debuginfod/main.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0d79cdc494d5eb9db26a602d62c92d49f83f407e/gdb/testsuite/gdb.debuginfod/main.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.debuginfod/main.c?ref=0d79cdc494d5eb9db26a602d62c92d49f83f407e",
      "patch": "@@ -0,0 +1,25 @@\n+/* This testcase is part of GDB, the GNU debugger.\n+\n+   Copyright 2020 Free Software Foundation, Inc.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+/* Dummy main function.  */\n+\n+int\n+main()\n+{\n+  asm (\"main_label: .globl main_label\");\n+  return 0;\n+}"
    },
    {
      "sha": "1a98ae198c04cf78e555b013dabd820ca17d2fb8",
      "filename": "gdb/top.c",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0d79cdc494d5eb9db26a602d62c92d49f83f407e/gdb/top.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0d79cdc494d5eb9db26a602d62c92d49f83f407e/gdb/top.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/top.c?ref=0d79cdc494d5eb9db26a602d62c92d49f83f407e",
      "patch": "@@ -1528,6 +1528,16 @@ This GDB was configured as follows:\\n\\\n \"));\n #endif\n \n+#if HAVE_LIBDEBUGINFOD\n+  fprintf_filtered (stream, _(\"\\\n+             --with-debuginfod\\n\\\n+\"));\n+#else\n+   fprintf_filtered (stream, _(\"\\\n+             --without-debuginfod\\n\\\n+\"));\n+#endif\n+\n #if HAVE_GUILE\n   fprintf_filtered (stream, _(\"\\\n              --with-guile\\n\\"
    }
  ]
}