{
  "sha": "a7e40a99318c46ec57a9c0a64c622b6ec0ed89ff",
  "node_id": "C_kwDOANOeidoAKGE3ZTQwYTk5MzE4YzQ2ZWM1N2E5YzBhNjRjNjIyYjZlYzBlZDg5ZmY",
  "commit": {
    "author": {
      "name": "Mike Frysinger",
      "email": "vapier@gentoo.org",
      "date": "2021-07-07T02:10:53Z"
    },
    "committer": {
      "name": "Mike Frysinger",
      "email": "vapier@gentoo.org",
      "date": "2021-10-31T08:31:28Z"
    },
    "message": "sim: nltvals: pull target errno out into a dedicated source file\n\nThe current system maintains a list of target errno constants in the\nnltvals.def file, then runs a build-time tool to turn that into a C\nfile.  This list of errno values is the same for all arches, so we\ndon't need the arch-specific flexibility.  Further, these are only\nfor newlib/libgloss environments, which makes it confusing to support\nother userland runtimes (like Linux).  Let's simplify to make this\neasier to understand & build.  We don't namespace the variables yet,\nbut sets up the framework for it.\n\nCreate a new target-newlib-errno.c template file.  The template file\nis hand written, but the inline map is still automatically generated.\n\nThis allows us to move it to the common set of objects so it's only\nbuilt once in a multi-target build.\n\nNow we can remove the output from the gentmap build-time tool since\nit's checked into the tree.\n\nThen we stop including the errno lists in nltvals.def since nothing\nuses it.",
    "tree": {
      "sha": "85e48ec389ff5f1d3b5a60289517a558cc2937e0",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/85e48ec389ff5f1d3b5a60289517a558cc2937e0"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/a7e40a99318c46ec57a9c0a64c622b6ec0ed89ff",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a7e40a99318c46ec57a9c0a64c622b6ec0ed89ff",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/a7e40a99318c46ec57a9c0a64c622b6ec0ed89ff",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a7e40a99318c46ec57a9c0a64c622b6ec0ed89ff/comments",
  "author": {
    "login": "vapier",
    "id": 176950,
    "node_id": "MDQ6VXNlcjE3Njk1MA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/176950?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vapier",
    "html_url": "https://github.com/vapier",
    "followers_url": "https://api.github.com/users/vapier/followers",
    "following_url": "https://api.github.com/users/vapier/following{/other_user}",
    "gists_url": "https://api.github.com/users/vapier/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vapier/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vapier/subscriptions",
    "organizations_url": "https://api.github.com/users/vapier/orgs",
    "repos_url": "https://api.github.com/users/vapier/repos",
    "events_url": "https://api.github.com/users/vapier/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vapier/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "vapier",
    "id": 176950,
    "node_id": "MDQ6VXNlcjE3Njk1MA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/176950?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vapier",
    "html_url": "https://github.com/vapier",
    "followers_url": "https://api.github.com/users/vapier/followers",
    "following_url": "https://api.github.com/users/vapier/following{/other_user}",
    "gists_url": "https://api.github.com/users/vapier/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vapier/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vapier/subscriptions",
    "organizations_url": "https://api.github.com/users/vapier/orgs",
    "repos_url": "https://api.github.com/users/vapier/repos",
    "events_url": "https://api.github.com/users/vapier/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vapier/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "f9cd2be59c1c1d56d95a191f82298ee92cf41231",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f9cd2be59c1c1d56d95a191f82298ee92cf41231",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/f9cd2be59c1c1d56d95a191f82298ee92cf41231"
    }
  ],
  "stats": {
    "total": 531,
    "additions": 384,
    "deletions": 147
  },
  "files": [
    {
      "sha": "e0be7cfb33806c33c29d66202b8a125b2e64b72d",
      "filename": "sim/Makefile.in",
      "status": "modified",
      "additions": 19,
      "deletions": 0,
      "changes": 19,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a7e40a99318c46ec57a9c0a64c622b6ec0ed89ff/sim/Makefile.in",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a7e40a99318c46ec57a9c0a64c622b6ec0ed89ff/sim/Makefile.in",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/Makefile.in?ref=a7e40a99318c46ec57a9c0a64c622b6ec0ed89ff",
      "patch": "@@ -253,6 +253,7 @@ am__dirstamp = $(am__leading_dot)dirstamp\n am_common_libcommon_a_OBJECTS =  \\\n \tcommon/common_libcommon_a-portability.$(OBJEXT) \\\n \tcommon/common_libcommon_a-sim-load.$(OBJEXT) \\\n+\tcommon/common_libcommon_a-target-newlib-errno.$(OBJEXT) \\\n \tcommon/common_libcommon_a-version.$(OBJEXT)\n common_libcommon_a_OBJECTS = $(am_common_libcommon_a_OBJECTS)\n igen_libigen_a_AR = $(AR) $(ARFLAGS)\n@@ -843,6 +844,7 @@ common_libcommon_a_CPPFLAGS = \\\n common_libcommon_a_SOURCES = \\\n \tcommon/portability.c \\\n \tcommon/sim-load.c \\\n+\tcommon/target-newlib-errno.c \\\n \tcommon/version.c\n \n @SIM_ENABLE_IGEN_TRUE@igen_libigen_a_SOURCES = \\\n@@ -1015,6 +1017,8 @@ common/common_libcommon_a-portability.$(OBJEXT):  \\\n \tcommon/$(am__dirstamp) common/$(DEPDIR)/$(am__dirstamp)\n common/common_libcommon_a-sim-load.$(OBJEXT): common/$(am__dirstamp) \\\n \tcommon/$(DEPDIR)/$(am__dirstamp)\n+common/common_libcommon_a-target-newlib-errno.$(OBJEXT):  \\\n+\tcommon/$(am__dirstamp) common/$(DEPDIR)/$(am__dirstamp)\n common/common_libcommon_a-version.$(OBJEXT): common/$(am__dirstamp) \\\n \tcommon/$(DEPDIR)/$(am__dirstamp)\n \n@@ -1137,6 +1141,7 @@ distclean-compile:\n \n @AMDEP_TRUE@@am__include@ @am__quote@common/$(DEPDIR)/common_libcommon_a-portability.Po@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@common/$(DEPDIR)/common_libcommon_a-sim-load.Po@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@common/$(DEPDIR)/common_libcommon_a-target-newlib-errno.Po@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@common/$(DEPDIR)/common_libcommon_a-version.Po@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@igen/$(DEPDIR)/filter.Po@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@igen/$(DEPDIR)/filter_host.Po@am__quote@\n@@ -1215,6 +1220,20 @@ common/common_libcommon_a-sim-load.obj: common/sim-load.c\n @AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n @am__fastdepCC_FALSE@\t$(AM_V_CC@am__nodep@)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(common_libcommon_a_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o common/common_libcommon_a-sim-load.obj `if test -f 'common/sim-load.c'; then $(CYGPATH_W) 'common/sim-load.c'; else $(CYGPATH_W) '$(srcdir)/common/sim-load.c'; fi`\n \n+common/common_libcommon_a-target-newlib-errno.o: common/target-newlib-errno.c\n+@am__fastdepCC_TRUE@\t$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(common_libcommon_a_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT common/common_libcommon_a-target-newlib-errno.o -MD -MP -MF common/$(DEPDIR)/common_libcommon_a-target-newlib-errno.Tpo -c -o common/common_libcommon_a-target-newlib-errno.o `test -f 'common/target-newlib-errno.c' || echo '$(srcdir)/'`common/target-newlib-errno.c\n+@am__fastdepCC_TRUE@\t$(AM_V_at)$(am__mv) common/$(DEPDIR)/common_libcommon_a-target-newlib-errno.Tpo common/$(DEPDIR)/common_libcommon_a-target-newlib-errno.Po\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\t$(AM_V_CC)source='common/target-newlib-errno.c' object='common/common_libcommon_a-target-newlib-errno.o' libtool=no @AMDEPBACKSLASH@\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n+@am__fastdepCC_FALSE@\t$(AM_V_CC@am__nodep@)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(common_libcommon_a_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o common/common_libcommon_a-target-newlib-errno.o `test -f 'common/target-newlib-errno.c' || echo '$(srcdir)/'`common/target-newlib-errno.c\n+\n+common/common_libcommon_a-target-newlib-errno.obj: common/target-newlib-errno.c\n+@am__fastdepCC_TRUE@\t$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(common_libcommon_a_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT common/common_libcommon_a-target-newlib-errno.obj -MD -MP -MF common/$(DEPDIR)/common_libcommon_a-target-newlib-errno.Tpo -c -o common/common_libcommon_a-target-newlib-errno.obj `if test -f 'common/target-newlib-errno.c'; then $(CYGPATH_W) 'common/target-newlib-errno.c'; else $(CYGPATH_W) '$(srcdir)/common/target-newlib-errno.c'; fi`\n+@am__fastdepCC_TRUE@\t$(AM_V_at)$(am__mv) common/$(DEPDIR)/common_libcommon_a-target-newlib-errno.Tpo common/$(DEPDIR)/common_libcommon_a-target-newlib-errno.Po\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\t$(AM_V_CC)source='common/target-newlib-errno.c' object='common/common_libcommon_a-target-newlib-errno.obj' libtool=no @AMDEPBACKSLASH@\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n+@am__fastdepCC_FALSE@\t$(AM_V_CC@am__nodep@)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(common_libcommon_a_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o common/common_libcommon_a-target-newlib-errno.obj `if test -f 'common/target-newlib-errno.c'; then $(CYGPATH_W) 'common/target-newlib-errno.c'; else $(CYGPATH_W) '$(srcdir)/common/target-newlib-errno.c'; fi`\n+\n common/common_libcommon_a-version.o: common/version.c\n @am__fastdepCC_TRUE@\t$(AM_V_CC)$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(common_libcommon_a_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT common/common_libcommon_a-version.o -MD -MP -MF common/$(DEPDIR)/common_libcommon_a-version.Tpo -c -o common/common_libcommon_a-version.o `test -f 'common/version.c' || echo '$(srcdir)/'`common/version.c\n @am__fastdepCC_TRUE@\t$(AM_V_at)$(am__mv) common/$(DEPDIR)/common_libcommon_a-version.Tpo common/$(DEPDIR)/common_libcommon_a-version.Po"
    },
    {
      "sha": "5db835713e7c0d3c9281efbde57b576fd7e82cdc",
      "filename": "sim/common/Make-common.in",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a7e40a99318c46ec57a9c0a64c622b6ec0ed89ff/sim/common/Make-common.in",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a7e40a99318c46ec57a9c0a64c622b6ec0ed89ff/sim/common/Make-common.in",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/common/Make-common.in?ref=a7e40a99318c46ec57a9c0a64c622b6ec0ed89ff",
      "patch": "@@ -231,6 +231,7 @@ EXTRA_LIBS = $(BFD_LIB) $(OPCODES_LIB) $(LIBINTL) $(LIBIBERTY_LIB) \\\n COMMON_OBJS_NAMES = \\\n \tportability.o \\\n \tsim-load.o \\\n+\ttarget-newlib-errno.o \\\n \tversion.o\n COMMON_OBJS = $(COMMON_OBJS_NAMES:%=../common/common_libcommon_a-%)\n "
    },
    {
      "sha": "3006f7f58fe4743aa503c4b3802449c29382e249",
      "filename": "sim/common/gennltvals.py",
      "status": "modified",
      "additions": 74,
      "deletions": 35,
      "changes": 109,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a7e40a99318c46ec57a9c0a64c622b6ec0ed89ff/sim/common/gennltvals.py",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a7e40a99318c46ec57a9c0a64c622b6ec0ed89ff/sim/common/gennltvals.py",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/common/gennltvals.py?ref=a7e40a99318c46ec57a9c0a64c622b6ec0ed89ff",
      "patch": "@@ -63,8 +63,43 @@\n /* This file is machine generated by {PROG}.  */\\\n \"\"\"\n \n+# Used to update sections of files.\n+START_MARKER = 'gennltvals: START'\n+END_MARKER = 'gennltvals: END'\n \n-def gentvals(output: TextIO, cpp: str, srctype: str, srcdir: Path,\n+\n+def extract_syms(cpp: str, srcdir: Path,\n+                 headers: Iterable[str],\n+                 pattern: str,\n+                 filter: str = r'^$') -> dict:\n+    \"\"\"Extract all the symbols from |headers| matching |pattern| using |cpp|.\"\"\"\n+    srcfile = ''.join(f'#include <{x}>\\n' for x in headers)\n+    syms = set()\n+    define_pattern = re.compile(r'^#\\s*define\\s+(' + pattern + ')')\n+    filter_pattern = re.compile(filter)\n+    for header in headers:\n+        with open(srcdir / header, 'r', encoding='utf-8') as fp:\n+            data = fp.read()\n+        for line in data.splitlines():\n+            m = define_pattern.match(line)\n+            if m and not filter_pattern.search(line):\n+                syms.add(m.group(1))\n+    for sym in syms:\n+        srcfile += f'#ifdef {sym}\\nDEFVAL \"{sym}\" {sym}\\n#endif\\n'\n+\n+    result = subprocess.run(\n+        f'{cpp} -E -I\"{srcdir}\" -', shell=True, check=True, encoding='utf-8',\n+        input=srcfile, capture_output=True)\n+    ret = {}\n+    for line in result.stdout.splitlines():\n+        if line.startswith('DEFVAL '):\n+            _, sym, val = line.split()\n+            ret[sym.strip('\"')] = val\n+    return ret\n+\n+\n+def gentvals(output_dir: Path, output: TextIO,\n+             cpp: str, srctype: str, srcdir: Path,\n              headers: Iterable[str],\n              pattern: str,\n              filter: str = r'^$',\n@@ -80,6 +115,29 @@ def gentvals(output: TextIO, cpp: str, srctype: str, srcdir: Path,\n         fullpath = srcdir / header\n         assert fullpath.exists(), f'{fullpath} does not exist'\n \n+    syms = extract_syms(cpp, srcdir, headers, pattern, filter)\n+\n+    # If we have a map file, use it directly.\n+    target_map = output_dir / f'target-newlib-{srctype}.c'\n+    if target_map.exists():\n+        old_lines = target_map.read_text().splitlines()\n+        start_i = end_i = None\n+        for i, line in enumerate(old_lines):\n+            if START_MARKER in line:\n+                start_i = i\n+            if END_MARKER in line:\n+                end_i = i\n+        assert start_i and end_i\n+        new_lines = old_lines[0:start_i + 1]\n+        new_lines.extend(\n+            f'#ifdef {sym}\\n'\n+            f'  {{ \"{sym}\", {sym}, {val} }},\\n'\n+            f'#endif' for sym, val in sorted(syms.items()))\n+        new_lines.extend(old_lines[end_i:])\n+        target_map.write_text('\\n'.join(new_lines) + '\\n')\n+        return\n+\n+    # Fallback to classic nltvals.def.\n     if target is not None:\n         print(f'#ifdef NL_TARGET_{target}', file=output)\n     print(f'#ifdef {srctype}_defs', file=output)\n@@ -91,27 +149,8 @@ def gentvals(output: TextIO, cpp: str, srctype: str, srcdir: Path,\n     else:\n         print(f'/* begin {target} {srctype} target macros */', file=output)\n \n-    # Extract all the symbols.\n-    srcfile = ''.join(f'#include <{x}>\\n' for x in headers)\n-    syms = set()\n-    define_pattern = re.compile(r'^#\\s*define\\s+(' + pattern + ')')\n-    filter_pattern = re.compile(filter)\n-    for header in headers:\n-        with open(srcdir / header, 'r', encoding='utf-8') as fp:\n-            data = fp.read()\n-        for line in data.splitlines():\n-            m = define_pattern.match(line)\n-            if m and not filter_pattern.search(line):\n-                syms.add(m.group(1))\n-    for sym in sorted(syms):\n-        srcfile += f'#ifdef {sym}\\nDEFVAL {{ \"{sym}\", {sym} }},\\n#endif\\n'\n-\n-    result = subprocess.run(\n-        f'{cpp} -E -I\"{srcdir}\" -', shell=True, check=True, encoding='utf-8',\n-        input=srcfile, capture_output=True)\n-    for line in result.stdout.splitlines():\n-        if line.startswith('DEFVAL '):\n-            print(line[6:].rstrip(), file=output)\n+    for sym, val in sorted(syms.items()):\n+        print(f' {{ \"{sym}\", {val} }},', file=output)\n \n     print(f'#undef {srctype}_defs', file=output)\n     if target is None:\n@@ -122,37 +161,37 @@ def gentvals(output: TextIO, cpp: str, srctype: str, srcdir: Path,\n     print('#endif', file=output)\n \n \n-def gen_common(output: TextIO, newlib: Path, cpp: str):\n+def gen_common(output_dir: Path, output: TextIO, newlib: Path, cpp: str):\n     \"\"\"Generate the common C library constants.\n \n     No arch should override these.\n     \"\"\"\n-    gentvals(output, cpp, 'errno', newlib / 'newlib/libc/include',\n+    gentvals(output_dir, output, cpp, 'errno', newlib / 'newlib/libc/include',\n              ('errno.h', 'sys/errno.h'), 'E[A-Z0-9]*')\n \n-    gentvals(output, cpp, 'signal', newlib / 'newlib/libc/include',\n+    gentvals(output_dir, output, cpp, 'signal', newlib / 'newlib/libc/include',\n              ('signal.h', 'sys/signal.h'), r'SIG[A-Z0-9]*', filter=r'SIGSTKSZ')\n \n-    gentvals(output, cpp, 'open', newlib / 'newlib/libc/include',\n+    gentvals(output_dir, output, cpp, 'open', newlib / 'newlib/libc/include',\n              ('fcntl.h', 'sys/fcntl.h', 'sys/_default_fcntl.h'), r'O_[A-Z0-9]*')\n \n \n-def gen_targets(output: TextIO, newlib: Path, cpp: str):\n+def gen_targets(output_dir: Path, output: TextIO, newlib: Path, cpp: str):\n     \"\"\"Generate the target-specific lists.\"\"\"\n     for target, subdir in sorted(TARGET_DIRS.items()):\n-        gentvals(output, cpp, 'sys', newlib / subdir, ('syscall.h',),\n-                 r'SYS_[_a-zA-Z0-9]*', target=target)\n+        gentvals(output_dir, output, cpp, 'sys', newlib / subdir,\n+                 ('syscall.h',), r'SYS_[_a-zA-Z0-9]*', target=target)\n \n     # Then output the common syscall targets.\n-    gentvals(output, cpp, 'sys', newlib / 'libgloss', ('syscall.h',),\n-             r'SYS_[_a-zA-Z0-9]*')\n+    gentvals(output_dir, output, cpp, 'sys', newlib / 'libgloss',\n+             ('syscall.h',), r'SYS_[_a-zA-Z0-9]*')\n \n \n-def gen(output: TextIO, newlib: Path, cpp: str):\n+def gen(output_dir: Path, output: TextIO, newlib: Path, cpp: str):\n     \"\"\"Generate all the things!\"\"\"\n     print(FILE_HEADER, file=output)\n-    gen_common(output, newlib, cpp)\n-    gen_targets(output, newlib, cpp)\n+    gen_common(output_dir, output, newlib, cpp)\n+    gen_targets(output_dir, output, newlib, cpp)\n \n \n def get_parser() -> argparse.ArgumentParser:\n@@ -212,7 +251,7 @@ def main(argv: List[str]) -> int:\n \n     output = (opts.output / 'nltvals.def').open('w', encoding='utf-8')\n \n-    gen(output, opts.newlib, opts.cpp)\n+    gen(opts.output, output, opts.newlib, opts.cpp)\n     return 0\n \n "
    },
    {
      "sha": "8e6e3aeda325060f022dd0bc398aab496215c5b7",
      "filename": "sim/common/gentmap.c",
      "status": "modified",
      "additions": 0,
      "deletions": 20,
      "changes": 20,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a7e40a99318c46ec57a9c0a64c622b6ec0ed89ff/sim/common/gentmap.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a7e40a99318c46ec57a9c0a64c622b6ec0ed89ff/sim/common/gentmap.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/common/gentmap.c?ref=a7e40a99318c46ec57a9c0a64c622b6ec0ed89ff",
      "patch": "@@ -16,13 +16,6 @@ static struct tdefs sys_tdefs[] = {\n   { 0, 0 }\n };\n \n-static struct tdefs errno_tdefs[] =  {\n-#define errno_defs\n-#include \"nltvals.def\"\n-#undef errno_defs\n-  { 0, 0 }\n-};\n-\n static struct tdefs signal_tdefs[] = {\n #define signal_defs\n #include \"nltvals.def\"\n@@ -75,7 +68,6 @@ gen_targ_map_c (void)\n   printf (\"/* This file is machine generated by gentmap.c.  */\\n\\n\");\n \n   printf (\"#include \\\"defs.h\\\"\\n\");\n-  printf (\"#include <errno.h>\\n\");\n   printf (\"#include <fcntl.h>\\n\");\n   printf (\"#include <signal.h>\\n\");\n   printf (\"#include \\\"ansidecl.h\\\"\\n\");\n@@ -95,18 +87,6 @@ gen_targ_map_c (void)\n   printf (\"  { 0, -1, -1 }\\n\");\n   printf (\"};\\n\\n\");\n \n-  printf (\"/* errno mapping table */\\n\");\n-  printf (\"CB_TARGET_DEFS_MAP cb_init_errno_map[] = {\\n\");\n-  for (t = &errno_tdefs[0]; t->symbol; ++t)\n-    {\n-      printf (\"#define TARGET_%s %d\\n\", t->symbol, t->value);\n-      printf (\"#ifdef %s\\n\", t->symbol);\n-      printf (\"  { \\\"%s\\\", %s, TARGET_%s },\\n\", t->symbol, t->symbol, t->symbol);\n-      printf (\"#endif\\n\");\n-    }\n-  printf (\"  { 0, 0, 0 }\\n\");\n-  printf (\"};\\n\\n\");\n-\n   printf (\"/* signals mapping table */\\n\");\n   printf (\"CB_TARGET_DEFS_MAP cb_init_signal_map[] = {\\n\");\n   for (t = &signal_tdefs[0]; t->symbol; ++t)"
    },
    {
      "sha": "71a931715c2d23ee85141a8955b9169897e185c9",
      "filename": "sim/common/local.mk",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a7e40a99318c46ec57a9c0a64c622b6ec0ed89ff/sim/common/local.mk",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a7e40a99318c46ec57a9c0a64c622b6ec0ed89ff/sim/common/local.mk",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/common/local.mk?ref=a7e40a99318c46ec57a9c0a64c622b6ec0ed89ff",
      "patch": "@@ -36,6 +36,7 @@ noinst_LIBRARIES += %D%/libcommon.a\n %C%_libcommon_a_SOURCES = \\\n \t%D%/portability.c \\\n \t%D%/sim-load.c \\\n+\t%D%/target-newlib-errno.c \\\n \t%D%/version.c\n \n %D%/version.c: %D%/version.c-stamp ; @true"
    },
    {
      "sha": "5e72e596ee80d7d4e0154a7b9cde892c839f0268",
      "filename": "sim/common/nltvals.def",
      "status": "modified",
      "additions": 0,
      "deletions": 92,
      "changes": 92,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a7e40a99318c46ec57a9c0a64c622b6ec0ed89ff/sim/common/nltvals.def",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a7e40a99318c46ec57a9c0a64c622b6ec0ed89ff/sim/common/nltvals.def",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/common/nltvals.def?ref=a7e40a99318c46ec57a9c0a64c622b6ec0ed89ff",
      "patch": "@@ -1,97 +1,5 @@\n /* Newlib/libgloss macro values needed by remote target support.  */\n /* This file is machine generated by gennltvals.py.  */\n-#ifdef errno_defs\n-/* from errno.h */\n-/* from sys/errno.h */\n-/* begin errno target macros */\n- { \"E2BIG\", 7 },\n- { \"EACCES\", 13 },\n- { \"EADDRINUSE\", 112 },\n- { \"EADDRNOTAVAIL\", 125 },\n- { \"EAFNOSUPPORT\", 106 },\n- { \"EAGAIN\", 11 },\n- { \"EALREADY\", 120 },\n- { \"EBADF\", 9 },\n- { \"EBADMSG\", 77 },\n- { \"EBUSY\", 16 },\n- { \"ECANCELED\", 140 },\n- { \"ECHILD\", 10 },\n- { \"ECONNABORTED\", 113 },\n- { \"ECONNREFUSED\", 111 },\n- { \"ECONNRESET\", 104 },\n- { \"EDEADLK\", 45 },\n- { \"EDESTADDRREQ\", 121 },\n- { \"EDOM\", 33 },\n- { \"EDQUOT\", 132 },\n- { \"EEXIST\", 17 },\n- { \"EFAULT\", 14 },\n- { \"EFBIG\", 27 },\n- { \"EFTYPE\", 79 },\n- { \"EHOSTDOWN\", 117 },\n- { \"EHOSTUNREACH\", 118 },\n- { \"EIDRM\", 36 },\n- { \"EILSEQ\", 138 },\n- { \"EINPROGRESS\", 119 },\n- { \"EINTR\", 4 },\n- { \"EINVAL\", 22 },\n- { \"EIO\", 5 },\n- { \"EISCONN\", 127 },\n- { \"EISDIR\", 21 },\n- { \"ELOOP\", 92 },\n- { \"EMFILE\", 24 },\n- { \"EMLINK\", 31 },\n- { \"EMSGSIZE\", 122 },\n- { \"EMULTIHOP\", 74 },\n- { \"ENAMETOOLONG\", 91 },\n- { \"ENETDOWN\", 115 },\n- { \"ENETRESET\", 126 },\n- { \"ENETUNREACH\", 114 },\n- { \"ENFILE\", 23 },\n- { \"ENOBUFS\", 105 },\n- { \"ENODATA\", 61 },\n- { \"ENODEV\", 19 },\n- { \"ENOENT\", 2 },\n- { \"ENOEXEC\", 8 },\n- { \"ENOLCK\", 46 },\n- { \"ENOLINK\", 67 },\n- { \"ENOMEM\", 12 },\n- { \"ENOMSG\", 35 },\n- { \"ENOPROTOOPT\", 109 },\n- { \"ENOSPC\", 28 },\n- { \"ENOSR\", 63 },\n- { \"ENOSTR\", 60 },\n- { \"ENOSYS\", 88 },\n- { \"ENOTCONN\", 128 },\n- { \"ENOTDIR\", 20 },\n- { \"ENOTEMPTY\", 90 },\n- { \"ENOTRECOVERABLE\", 141 },\n- { \"ENOTSOCK\", 108 },\n- { \"ENOTSUP\", 134 },\n- { \"ENOTTY\", 25 },\n- { \"ENXIO\", 6 },\n- { \"EOPNOTSUPP\", 95 },\n- { \"EOVERFLOW\", 139 },\n- { \"EOWNERDEAD\", 142 },\n- { \"EPERM\", 1 },\n- { \"EPFNOSUPPORT\", 96 },\n- { \"EPIPE\", 32 },\n- { \"EPROTO\", 71 },\n- { \"EPROTONOSUPPORT\", 123 },\n- { \"EPROTOTYPE\", 107 },\n- { \"ERANGE\", 34 },\n- { \"EROFS\", 30 },\n- { \"ESPIPE\", 29 },\n- { \"ESRCH\", 3 },\n- { \"ESTALE\", 133 },\n- { \"ETIME\", 62 },\n- { \"ETIMEDOUT\", 116 },\n- { \"ETOOMANYREFS\", 129 },\n- { \"ETXTBSY\", 26 },\n- { \"EWOULDBLOCK\", 11 },\n- { \"EXDEV\", 18 },\n-#undef errno_defs\n-/* end errno target macros */\n-#endif\n #ifdef signal_defs\n /* from signal.h */\n /* from sys/signal.h */"
    },
    {
      "sha": "af223afebefd2ab00888fced510aa667ebd28083",
      "filename": "sim/common/target-newlib-errno.c",
      "status": "added",
      "additions": 289,
      "deletions": 0,
      "changes": 289,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a7e40a99318c46ec57a9c0a64c622b6ec0ed89ff/sim/common/target-newlib-errno.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a7e40a99318c46ec57a9c0a64c622b6ec0ed89ff/sim/common/target-newlib-errno.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/common/target-newlib-errno.c?ref=a7e40a99318c46ec57a9c0a64c622b6ec0ed89ff",
      "patch": "@@ -0,0 +1,289 @@\n+/* Target errno mappings for newlib/libgloss environment.\n+   Copyright 1995-2021 Free Software Foundation, Inc.\n+   Contributed by Mike Frysinger.\n+\n+   This file is part of simulators.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+/* This must come before any other includes.  */\n+#include \"defs.h\"\n+\n+#include <errno.h>\n+\n+#include \"sim/callback.h\"\n+\n+/* This file is kept up-to-date via the gennltvals.py script.  Do not edit\n+   anything between the START & END comment blocks below.  */\n+\n+CB_TARGET_DEFS_MAP cb_init_errno_map[] = {\n+  /* gennltvals: START */\n+#ifdef E2BIG\n+  { \"E2BIG\", E2BIG, 7 },\n+#endif\n+#ifdef EACCES\n+  { \"EACCES\", EACCES, 13 },\n+#endif\n+#ifdef EADDRINUSE\n+  { \"EADDRINUSE\", EADDRINUSE, 112 },\n+#endif\n+#ifdef EADDRNOTAVAIL\n+  { \"EADDRNOTAVAIL\", EADDRNOTAVAIL, 125 },\n+#endif\n+#ifdef EAFNOSUPPORT\n+  { \"EAFNOSUPPORT\", EAFNOSUPPORT, 106 },\n+#endif\n+#ifdef EAGAIN\n+  { \"EAGAIN\", EAGAIN, 11 },\n+#endif\n+#ifdef EALREADY\n+  { \"EALREADY\", EALREADY, 120 },\n+#endif\n+#ifdef EBADF\n+  { \"EBADF\", EBADF, 9 },\n+#endif\n+#ifdef EBADMSG\n+  { \"EBADMSG\", EBADMSG, 77 },\n+#endif\n+#ifdef EBUSY\n+  { \"EBUSY\", EBUSY, 16 },\n+#endif\n+#ifdef ECANCELED\n+  { \"ECANCELED\", ECANCELED, 140 },\n+#endif\n+#ifdef ECHILD\n+  { \"ECHILD\", ECHILD, 10 },\n+#endif\n+#ifdef ECONNABORTED\n+  { \"ECONNABORTED\", ECONNABORTED, 113 },\n+#endif\n+#ifdef ECONNREFUSED\n+  { \"ECONNREFUSED\", ECONNREFUSED, 111 },\n+#endif\n+#ifdef ECONNRESET\n+  { \"ECONNRESET\", ECONNRESET, 104 },\n+#endif\n+#ifdef EDEADLK\n+  { \"EDEADLK\", EDEADLK, 45 },\n+#endif\n+#ifdef EDESTADDRREQ\n+  { \"EDESTADDRREQ\", EDESTADDRREQ, 121 },\n+#endif\n+#ifdef EDOM\n+  { \"EDOM\", EDOM, 33 },\n+#endif\n+#ifdef EDQUOT\n+  { \"EDQUOT\", EDQUOT, 132 },\n+#endif\n+#ifdef EEXIST\n+  { \"EEXIST\", EEXIST, 17 },\n+#endif\n+#ifdef EFAULT\n+  { \"EFAULT\", EFAULT, 14 },\n+#endif\n+#ifdef EFBIG\n+  { \"EFBIG\", EFBIG, 27 },\n+#endif\n+#ifdef EFTYPE\n+  { \"EFTYPE\", EFTYPE, 79 },\n+#endif\n+#ifdef EHOSTDOWN\n+  { \"EHOSTDOWN\", EHOSTDOWN, 117 },\n+#endif\n+#ifdef EHOSTUNREACH\n+  { \"EHOSTUNREACH\", EHOSTUNREACH, 118 },\n+#endif\n+#ifdef EIDRM\n+  { \"EIDRM\", EIDRM, 36 },\n+#endif\n+#ifdef EILSEQ\n+  { \"EILSEQ\", EILSEQ, 138 },\n+#endif\n+#ifdef EINPROGRESS\n+  { \"EINPROGRESS\", EINPROGRESS, 119 },\n+#endif\n+#ifdef EINTR\n+  { \"EINTR\", EINTR, 4 },\n+#endif\n+#ifdef EINVAL\n+  { \"EINVAL\", EINVAL, 22 },\n+#endif\n+#ifdef EIO\n+  { \"EIO\", EIO, 5 },\n+#endif\n+#ifdef EISCONN\n+  { \"EISCONN\", EISCONN, 127 },\n+#endif\n+#ifdef EISDIR\n+  { \"EISDIR\", EISDIR, 21 },\n+#endif\n+#ifdef ELOOP\n+  { \"ELOOP\", ELOOP, 92 },\n+#endif\n+#ifdef EMFILE\n+  { \"EMFILE\", EMFILE, 24 },\n+#endif\n+#ifdef EMLINK\n+  { \"EMLINK\", EMLINK, 31 },\n+#endif\n+#ifdef EMSGSIZE\n+  { \"EMSGSIZE\", EMSGSIZE, 122 },\n+#endif\n+#ifdef EMULTIHOP\n+  { \"EMULTIHOP\", EMULTIHOP, 74 },\n+#endif\n+#ifdef ENAMETOOLONG\n+  { \"ENAMETOOLONG\", ENAMETOOLONG, 91 },\n+#endif\n+#ifdef ENETDOWN\n+  { \"ENETDOWN\", ENETDOWN, 115 },\n+#endif\n+#ifdef ENETRESET\n+  { \"ENETRESET\", ENETRESET, 126 },\n+#endif\n+#ifdef ENETUNREACH\n+  { \"ENETUNREACH\", ENETUNREACH, 114 },\n+#endif\n+#ifdef ENFILE\n+  { \"ENFILE\", ENFILE, 23 },\n+#endif\n+#ifdef ENOBUFS\n+  { \"ENOBUFS\", ENOBUFS, 105 },\n+#endif\n+#ifdef ENODATA\n+  { \"ENODATA\", ENODATA, 61 },\n+#endif\n+#ifdef ENODEV\n+  { \"ENODEV\", ENODEV, 19 },\n+#endif\n+#ifdef ENOENT\n+  { \"ENOENT\", ENOENT, 2 },\n+#endif\n+#ifdef ENOEXEC\n+  { \"ENOEXEC\", ENOEXEC, 8 },\n+#endif\n+#ifdef ENOLCK\n+  { \"ENOLCK\", ENOLCK, 46 },\n+#endif\n+#ifdef ENOLINK\n+  { \"ENOLINK\", ENOLINK, 67 },\n+#endif\n+#ifdef ENOMEM\n+  { \"ENOMEM\", ENOMEM, 12 },\n+#endif\n+#ifdef ENOMSG\n+  { \"ENOMSG\", ENOMSG, 35 },\n+#endif\n+#ifdef ENOPROTOOPT\n+  { \"ENOPROTOOPT\", ENOPROTOOPT, 109 },\n+#endif\n+#ifdef ENOSPC\n+  { \"ENOSPC\", ENOSPC, 28 },\n+#endif\n+#ifdef ENOSR\n+  { \"ENOSR\", ENOSR, 63 },\n+#endif\n+#ifdef ENOSTR\n+  { \"ENOSTR\", ENOSTR, 60 },\n+#endif\n+#ifdef ENOSYS\n+  { \"ENOSYS\", ENOSYS, 88 },\n+#endif\n+#ifdef ENOTCONN\n+  { \"ENOTCONN\", ENOTCONN, 128 },\n+#endif\n+#ifdef ENOTDIR\n+  { \"ENOTDIR\", ENOTDIR, 20 },\n+#endif\n+#ifdef ENOTEMPTY\n+  { \"ENOTEMPTY\", ENOTEMPTY, 90 },\n+#endif\n+#ifdef ENOTRECOVERABLE\n+  { \"ENOTRECOVERABLE\", ENOTRECOVERABLE, 141 },\n+#endif\n+#ifdef ENOTSOCK\n+  { \"ENOTSOCK\", ENOTSOCK, 108 },\n+#endif\n+#ifdef ENOTSUP\n+  { \"ENOTSUP\", ENOTSUP, 134 },\n+#endif\n+#ifdef ENOTTY\n+  { \"ENOTTY\", ENOTTY, 25 },\n+#endif\n+#ifdef ENXIO\n+  { \"ENXIO\", ENXIO, 6 },\n+#endif\n+#ifdef EOPNOTSUPP\n+  { \"EOPNOTSUPP\", EOPNOTSUPP, 95 },\n+#endif\n+#ifdef EOVERFLOW\n+  { \"EOVERFLOW\", EOVERFLOW, 139 },\n+#endif\n+#ifdef EOWNERDEAD\n+  { \"EOWNERDEAD\", EOWNERDEAD, 142 },\n+#endif\n+#ifdef EPERM\n+  { \"EPERM\", EPERM, 1 },\n+#endif\n+#ifdef EPFNOSUPPORT\n+  { \"EPFNOSUPPORT\", EPFNOSUPPORT, 96 },\n+#endif\n+#ifdef EPIPE\n+  { \"EPIPE\", EPIPE, 32 },\n+#endif\n+#ifdef EPROTO\n+  { \"EPROTO\", EPROTO, 71 },\n+#endif\n+#ifdef EPROTONOSUPPORT\n+  { \"EPROTONOSUPPORT\", EPROTONOSUPPORT, 123 },\n+#endif\n+#ifdef EPROTOTYPE\n+  { \"EPROTOTYPE\", EPROTOTYPE, 107 },\n+#endif\n+#ifdef ERANGE\n+  { \"ERANGE\", ERANGE, 34 },\n+#endif\n+#ifdef EROFS\n+  { \"EROFS\", EROFS, 30 },\n+#endif\n+#ifdef ESPIPE\n+  { \"ESPIPE\", ESPIPE, 29 },\n+#endif\n+#ifdef ESRCH\n+  { \"ESRCH\", ESRCH, 3 },\n+#endif\n+#ifdef ESTALE\n+  { \"ESTALE\", ESTALE, 133 },\n+#endif\n+#ifdef ETIME\n+  { \"ETIME\", ETIME, 62 },\n+#endif\n+#ifdef ETIMEDOUT\n+  { \"ETIMEDOUT\", ETIMEDOUT, 116 },\n+#endif\n+#ifdef ETOOMANYREFS\n+  { \"ETOOMANYREFS\", ETOOMANYREFS, 129 },\n+#endif\n+#ifdef ETXTBSY\n+  { \"ETXTBSY\", ETXTBSY, 26 },\n+#endif\n+#ifdef EWOULDBLOCK\n+  { \"EWOULDBLOCK\", EWOULDBLOCK, 11 },\n+#endif\n+#ifdef EXDEV\n+  { \"EXDEV\", EXDEV, 18 },\n+#endif\n+  /* gennltvals: END */\n+  { NULL, -1, -1 },\n+};"
    }
  ]
}