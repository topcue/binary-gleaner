{
  "sha": "60b6ede84503a340cbb3d4f76e874e702d69812f",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NjBiNmVkZTg0NTAzYTM0MGNiYjNkNGY3NmU4NzRlNzAyZDY5ODEyZg==",
  "commit": {
    "author": {
      "name": "Tom de Vries",
      "email": "tdevries@suse.de",
      "date": "2019-10-30T16:41:03Z"
    },
    "committer": {
      "name": "Tom de Vries",
      "email": "tdevries@suse.de",
      "date": "2019-10-30T16:41:03Z"
    },
    "message": "[gdb/testsuite] Add -early pattern flag for gdb_test_multiple\n\nProc gdb_test_multiple builds up and executes a gdb_expect expression with\npattern/action clauses.  The clauses are either implicit (added by\ngdb_test_multiple) or explicit (passed via the gdb_test_multiple parameter\nuser_code).\n\nHowever, there are a few implicit clauses which are inserted before the\nexplicit ones, making sure those take precedence.\n\nAdd an -early pattern flag for a gdb_test_multiple user_code clause to specify\nthat the clause needs to be inserted before any implicit clause.\n\nUsing this pattern flag, we can f.i. setup a kfail for an assertion failure\n<assert> during gdb_continue_to_breakpoint by the rewrite:\n...\ngdb_continue_to_breakpoint <msg> <pattern>\n...\ninto:\n...\nset breakpoint_pattern \"(?:Breakpoint|Temporary breakpoint) .* (at|in)\"\ngdb_test_multiple \"continue\" \"continue to breakpoint: <msg>\"  {\n   -early -re \"internal-error: <assert>\" {\n       setup_kfail gdb/nnnnn \"*-*-*\"\n       exp_continue\n   }\n   -re \"$breakpoint_pattern <pattern>\\r\\n$gdb_prompt $\" {\n       pass $gdb_test_name\n   }\n}\n\nTested on x86_64-linux.\n\ngdb/testsuite/ChangeLog:\n\n2019-10-30  Tom de Vries  <tdevries@suse.de>\n\n\t* lib/gdb.exp (gdb_test_multiple): Handle -early pattern flag.\n\nChange-Id: I376c636b0812be52e7137634b1a4f50bf2b999b6",
    "tree": {
      "sha": "16673d15bb009def7034a36e1739e989ee3ab7a2",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/16673d15bb009def7034a36e1739e989ee3ab7a2"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/60b6ede84503a340cbb3d4f76e874e702d69812f",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/60b6ede84503a340cbb3d4f76e874e702d69812f",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/60b6ede84503a340cbb3d4f76e874e702d69812f",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/60b6ede84503a340cbb3d4f76e874e702d69812f/comments",
  "author": {
    "login": "vries",
    "id": 4057235,
    "node_id": "MDQ6VXNlcjQwNTcyMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vries",
    "html_url": "https://github.com/vries",
    "followers_url": "https://api.github.com/users/vries/followers",
    "following_url": "https://api.github.com/users/vries/following{/other_user}",
    "gists_url": "https://api.github.com/users/vries/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vries/subscriptions",
    "organizations_url": "https://api.github.com/users/vries/orgs",
    "repos_url": "https://api.github.com/users/vries/repos",
    "events_url": "https://api.github.com/users/vries/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vries/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "vries",
    "id": 4057235,
    "node_id": "MDQ6VXNlcjQwNTcyMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vries",
    "html_url": "https://github.com/vries",
    "followers_url": "https://api.github.com/users/vries/followers",
    "following_url": "https://api.github.com/users/vries/following{/other_user}",
    "gists_url": "https://api.github.com/users/vries/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vries/subscriptions",
    "organizations_url": "https://api.github.com/users/vries/orgs",
    "repos_url": "https://api.github.com/users/vries/repos",
    "events_url": "https://api.github.com/users/vries/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vries/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "808590ec5af20db08005885559fe29ebe7128b48",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/808590ec5af20db08005885559fe29ebe7128b48",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/808590ec5af20db08005885559fe29ebe7128b48"
    }
  ],
  "stats": {
    "total": 50,
    "additions": 41,
    "deletions": 9
  },
  "files": [
    {
      "sha": "baa055314b9560d0af10eccdd4f0269420e6578d",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/60b6ede84503a340cbb3d4f76e874e702d69812f/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/60b6ede84503a340cbb3d4f76e874e702d69812f/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=60b6ede84503a340cbb3d4f76e874e702d69812f",
      "patch": "@@ -1,3 +1,7 @@\n+2019-10-30  Tom de Vries  <tdevries@suse.de>\n+\n+\t* lib/gdb.exp (gdb_test_multiple): Handle -early pattern flag.\n+\n 2019-10-26  Tom de Vries  <tdevries@suse.de>\n \n \t* gdb.base/bigcore.c: Fix typos in comments."
    },
    {
      "sha": "599bf0f0c3cb13817abb29ea5618a1e250186872",
      "filename": "gdb/testsuite/lib/gdb.exp",
      "status": "modified",
      "additions": 37,
      "deletions": 9,
      "changes": 46,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/60b6ede84503a340cbb3d4f76e874e702d69812f/gdb/testsuite/lib/gdb.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/60b6ede84503a340cbb3d4f76e874e702d69812f/gdb/testsuite/lib/gdb.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/lib/gdb.exp?ref=60b6ede84503a340cbb3d4f76e874e702d69812f",
      "patch": "@@ -775,6 +775,23 @@ proc gdb_internal_error_resync {} {\n #       }\n #   }\n #\n+# In EXPECT_ARGUMENTS, a pattern flag -early can be used.  It makes sure the\n+# pattern is inserted before any implicit pattern added by gdb_test_multiple.\n+# Using this pattern flag, we can f.i. setup a kfail for an assertion failure\n+# <assert> during gdb_continue_to_breakpoint by the rewrite:\n+#   gdb_continue_to_breakpoint <msg> <pattern>\n+# into:\n+#   set breakpoint_pattern \"(?:Breakpoint|Temporary breakpoint) .* (at|in)\"\n+#   gdb_test_multiple \"continue\" \"continue to breakpoint: <msg>\"  {\n+#\t-early -re \"internal-error: <assert>\" {\n+#\t    setup_kfail gdb/nnnnn \"*-*-*\"\n+#\t    exp_continue\n+#\t}\n+#\t-re \"$breakpoint_pattern <pattern>\\r\\n$gdb_prompt $\" {\n+#\t    pass $gdb_test_name\n+#\t}\n+#    }\n+#\n proc gdb_test_multiple { command message user_code { prompt_regexp \"\" } } {\n     global verbose use_gdb_stub\n     global gdb_prompt pagination_prompt\n@@ -833,22 +850,30 @@ proc gdb_test_multiple { command message user_code { prompt_regexp \"\" } } {\n     set subst_code [uplevel list $subst_code]\n \n     set processed_code \"\"\n+    set early_processed_code \"\"\n+    # The variable current_list holds the name of the currently processed\n+    # list, either processed_code or early_processed_code.\n+    set current_list \"processed_code\"\n     set patterns \"\"\n     set expecting_action 0\n     set expecting_arg 0\n     set wrap_pattern 0\n     foreach item $user_code subst_item $subst_code {\n \tif { $item == \"-n\" || $item == \"-notransfer\" || $item == \"-nocase\" } {\n-\t    lappend processed_code $item\n+\t    lappend $current_list $item\n \t    continue\n \t}\n \tif { $item == \"-indices\" || $item == \"-re\" || $item == \"-ex\" } {\n-\t    lappend processed_code $item\n+\t    lappend $current_list $item\n+\t    continue\n+\t}\n+\tif { $item == \"-early\" } {\n+\t    set current_list \"early_processed_code\"\n \t    continue\n \t}\n \tif { $item == \"-timeout\" || $item == \"-i\" } {\n \t    set expecting_arg 1\n-\t    lappend processed_code $item\n+\t    lappend $current_list $item\n \t    continue\n \t}\n \tif { $item == \"-wrap\" } {\n@@ -857,24 +882,26 @@ proc gdb_test_multiple { command message user_code { prompt_regexp \"\" } } {\n \t}\n \tif { $expecting_arg } {\n \t    set expecting_arg 0\n-\t    lappend processed_code $subst_item\n+\t    lappend $current_list $subst_item\n \t    continue\n \t}\n \tif { $expecting_action } {\n-\t    lappend processed_code \"uplevel [list $item]\"\n+\t    lappend $current_list \"uplevel [list $item]\"\n \t    set expecting_action 0\n \t    # Cosmetic, no effect on the list.\n-\t    append processed_code \"\\n\"\n+\t    append $current_list \"\\n\"\n+\t    # End the effect of -early, it only applies to one action.\n+\t    set current_list \"processed_code\"\n \t    continue\n \t}\n \tset expecting_action 1\n \tif { $wrap_pattern } {\n \t    # Wrap subst_item as is done for the gdb_test PATTERN argument.\n-\t    lappend processed_code \\\n+\t    lappend $current_list \\\n \t\t\"\\[\\r\\n\\]*(?:$subst_item)\\[\\r\\n\\]+$gdb_prompt $\"\n \t    set wrap_pattern 0\n \t} else {\n-\t    lappend processed_code $subst_item\n+\t    lappend $current_list $subst_item\n \t}\n \tif {$patterns != \"\"} {\n \t    append patterns \"; \"\n@@ -938,7 +965,8 @@ proc gdb_test_multiple { command message user_code { prompt_regexp \"\" } } {\n \t}\n     }\n \n-    set code {\n+    set code $early_processed_code\n+    append code {\n \t-re \".*A problem internal to GDB has been detected\" {\n \t    fail \"$message (GDB internal error)\"\n \t    gdb_internal_error_resync"
    }
  ]
}