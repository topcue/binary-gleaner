{
  "sha": "fde1a9a3ee8c95bb7bae6c764755bcbffdbb0308",
  "node_id": "C_kwDOANOeidoAKGZkZTFhOWEzZWU4Yzk1YmI3YmFlNmM3NjQ3NTViY2JmZmRiYjAzMDg",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2018-04-26T15:21:34Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2021-09-27T10:31:35Z"
    },
    "message": "gdb: add setting to disable reading source code files\n\nIn some situations it is possible that a user might not want GDB to\ntry and access source code files, for example, the source code might\nbe stored on a slow to access network file system.\n\nIt is almost certainly possible that using some combination of 'set\ndirectories' and/or 'set substitute-path' a user can trick GDB into\nbeing unable to find the source files, but this feels like a rather\ncrude way to solve the problem.\n\nIn this commit a new option is add that stops GDB from opening and\nreading the source files.  A user can run with source code reading\ndisabled if this is required, then re-enable later if they decide\nthat they now want to view the source code.",
    "tree": {
      "sha": "7a4913567f8c8ede1e6f43d11fa1f2183fe386b1",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/7a4913567f8c8ede1e6f43d11fa1f2183fe386b1"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/fde1a9a3ee8c95bb7bae6c764755bcbffdbb0308",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/fde1a9a3ee8c95bb7bae6c764755bcbffdbb0308",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/fde1a9a3ee8c95bb7bae6c764755bcbffdbb0308",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/fde1a9a3ee8c95bb7bae6c764755bcbffdbb0308/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "5cf3b309489d1606ee0fb7e452f467d82fd1b765",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5cf3b309489d1606ee0fb7e452f467d82fd1b765",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/5cf3b309489d1606ee0fb7e452f467d82fd1b765"
    }
  ],
  "stats": {
    "total": 182,
    "additions": 179,
    "deletions": 3
  },
  "files": [
    {
      "sha": "d7c29c82edba605f7047bdbfa343450aa741cb51",
      "filename": "gdb/NEWS",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fde1a9a3ee8c95bb7bae6c764755bcbffdbb0308/gdb/NEWS",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fde1a9a3ee8c95bb7bae6c764755bcbffdbb0308/gdb/NEWS",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/NEWS?ref=fde1a9a3ee8c95bb7bae6c764755bcbffdbb0308",
      "patch": "@@ -3,13 +3,22 @@\n \n *** Changes since GDB 11\n \n+* New commands\n+\n maint set backtrace-on-fatal-signal on|off\n maint show backtrace-on-fatal-signal\n   This setting is 'on' by default.  When 'on' GDB will print a limited\n   backtrace to stderr in the situation where GDB terminates with a\n   fatal signal.  This only supported on some platforms where the\n   backtrace and backtrace_symbols_fd functions are available.\n \n+set source open on|off\n+show source open\n+  This setting, which is on by default, controls whether GDB will try\n+  to open source code files.  Switching this off will stop GDB trying\n+  to open and read source code files, which can be useful if the files\n+  are located over a slow network connection.\n+\n * Python API\n \n   ** New function gdb.add_history(), which takes a gdb.Value object"
    },
    {
      "sha": "e5c7152ba7a5e670ab557be848cddc998546f52e",
      "filename": "gdb/cli/cli-cmds.c",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fde1a9a3ee8c95bb7bae6c764755bcbffdbb0308/gdb/cli/cli-cmds.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fde1a9a3ee8c95bb7bae6c764755bcbffdbb0308/gdb/cli/cli-cmds.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/cli/cli-cmds.c?ref=fde1a9a3ee8c95bb7bae6c764755bcbffdbb0308",
      "patch": "@@ -168,6 +168,10 @@ struct cmd_list_element *setchecklist;\n \n struct cmd_list_element *showchecklist;\n \n+struct cmd_list_element *setsourcelist;\n+\n+struct cmd_list_element *showsourcelist;\n+\n /* Command tracing state.  */\n \n int source_verbose = 0;"
    },
    {
      "sha": "a4b4168896edfb2d1977c44948d960b2d80dbf07",
      "filename": "gdb/cli/cli-cmds.h",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fde1a9a3ee8c95bb7bae6c764755bcbffdbb0308/gdb/cli/cli-cmds.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fde1a9a3ee8c95bb7bae6c764755bcbffdbb0308/gdb/cli/cli-cmds.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/cli/cli-cmds.h?ref=fde1a9a3ee8c95bb7bae6c764755bcbffdbb0308",
      "patch": "@@ -137,6 +137,14 @@ extern struct cmd_list_element *showchecklist;\n \n extern struct cmd_list_element *save_cmdlist;\n \n+/* Chain containing all defined \"set source\" subcommands.  */\n+\n+extern struct cmd_list_element *setsourcelist;\n+\n+/* Chain containing all defined \"show source\" subcommands.  */\n+\n+extern struct cmd_list_element *showsourcelist;\n+\n /* Limit the call depth of user-defined commands */\n \n extern unsigned int max_user_call_depth;"
    },
    {
      "sha": "fcfdc26ac1ad52976624f4c1a0d0651699035424",
      "filename": "gdb/doc/gdb.texinfo",
      "status": "modified",
      "additions": 26,
      "deletions": 0,
      "changes": 26,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fde1a9a3ee8c95bb7bae6c764755bcbffdbb0308/gdb/doc/gdb.texinfo",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fde1a9a3ee8c95bb7bae6c764755bcbffdbb0308/gdb/doc/gdb.texinfo",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/doc/gdb.texinfo?ref=fde1a9a3ee8c95bb7bae6c764755bcbffdbb0308",
      "patch": "@@ -8919,6 +8919,7 @@ prefer to use Emacs facilities to view source; see @ref{Emacs, ,Using\n * Search::                      Searching source files\n * Source Path::                 Specifying source directories\n * Machine Code::                Source and machine code\n+* Disable Reading Source::\tDisable Reading Source Code\n @end menu\n \n @node List\n@@ -9926,6 +9927,31 @@ OFF, which means never display the disassembly of the next line or\n instruction.\n @end table\n \n+@node Disable Reading Source\n+@section Disable Reading Source Code\n+@cindex source code, disable access\n+\n+In some cases it can be desirable to prevent @value{GDBN} from\n+accessing source code files.  One case where this might be desirable\n+is if the source code files are located over a slow network\n+connection.\n+\n+The following command can be used to control whether @value{GDBN}\n+should access source code files or not:\n+\n+@table @code\n+@kindex set source open\n+@kindex show source open\n+@item set source open @r{[}on@r{|}off@r{]}\n+@itemx show source open\n+When this option is @code{on}, which is the default, @value{GDBN} will\n+access source code files when needed, for example to print source\n+lines when @value{GDBN} stops, or in response to the @code{list}\n+command.\n+\n+When this option is @code{off}, @value{GDBN} will not access source\n+code files.\n+@end table\n \n @node Data\n @chapter Examining Data"
    },
    {
      "sha": "eec6e77eaa302caade8b5d1cb4e93a4997f226d2",
      "filename": "gdb/source.c",
      "status": "modified",
      "additions": 63,
      "deletions": 3,
      "changes": 66,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fde1a9a3ee8c95bb7bae6c764755bcbffdbb0308/gdb/source.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fde1a9a3ee8c95bb7bae6c764755bcbffdbb0308/gdb/source.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/source.c?ref=fde1a9a3ee8c95bb7bae6c764755bcbffdbb0308",
      "patch": "@@ -148,7 +148,21 @@ show_filename_display_string (struct ui_file *file, int from_tty,\n {\n   fprintf_filtered (file, _(\"Filenames are displayed as \\\"%s\\\".\\n\"), value);\n }\n- \n+\n+/* When true GDB will stat and open source files as required, but when\n+   false, GDB will avoid accessing source files as much as possible.  */\n+\n+static bool source_open = true;\n+\n+/* Implement 'show source open'.  */\n+\n+static void\n+show_source_open (struct ui_file *file, int from_tty,\n+\t\t  struct cmd_list_element *c, const char *value)\n+{\n+  fprintf_filtered (file, _(\"Source opening is \\\"%s\\\".\\n\"), value);\n+}\n+\n /* Line number of last line printed.  Default for various commands.\n    current_source_line is usually, but not always, the same as this.  */\n \n@@ -1048,8 +1062,13 @@ find_and_open_source (const char *filename,\n   const char *p;\n   int result;\n \n-  /* Quick way out if we already know its full name.  */\n+  /* If reading of source files is disabled then return a result indicating\n+     the attempt to read this source file failed.  GDB will then display\n+     the filename and line number instead.  */\n+  if (!source_open)\n+    return scoped_fd (-1);\n \n+  /* Quick way out if we already know its full name.  */\n   if (*fullname)\n     {\n       /* The user may have requested that source paths be rewritten\n@@ -1062,6 +1081,7 @@ find_and_open_source (const char *filename,\n \t*fullname = std::move (rewritten_fullname);\n \n       result = gdb_open_cloexec (fullname->get (), OPEN_MODE, 0);\n+\n       if (result >= 0)\n \t{\n \t  *fullname = gdb_realpath (fullname->get ());\n@@ -1300,7 +1320,7 @@ print_source_lines_base (struct symtab *s, int line, int stopline,\n \n   /* If printing of source lines is disabled, just print file and line\n      number.  */\n-  if (uiout->test_flags (ui_source_list))\n+  if (uiout->test_flags (ui_source_list) && source_open)\n     {\n       /* Only prints \"No such file or directory\" once.  */\n       if (s == last_source_visited)\n@@ -1603,6 +1623,9 @@ search_command_helper (const char *regex, int from_tty, bool forward)\n   if (loc->symtab () == nullptr)\n     select_source_symtab (0);\n \n+  if (!source_open)\n+    error (_(\"source code access disabled\"));\n+\n   scoped_fd desc (open_source_file (loc->symtab ()));\n   if (desc.get () < 0)\n     perror_with_name (symtab_to_filename_for_display (loc->symtab ()));\n@@ -1927,6 +1950,22 @@ source_lines_range::source_lines_range (int startline,\n     }\n }\n \n+/* Handle the \"set source\" base command.  */\n+\n+static void\n+set_source (const char *arg, int from_tty)\n+{\n+  help_list (setsourcelist, \"set source \", all_commands, gdb_stdout);\n+}\n+\n+/* Handle the \"show source\" base command.  */\n+\n+static void\n+show_source (const char *args, int from_tty)\n+{\n+  help_list (showsourcelist, \"show source \", all_commands, gdb_stdout);\n+}\n+\n \f\n void _initialize_source ();\n void\n@@ -2050,4 +2089,25 @@ By default, relative filenames are displayed.\"),\n \t\t\tshow_filename_display_string,\n \t\t\t&setlist, &showlist);\n \n+  add_prefix_cmd (\"source\", no_class, set_source,\n+                  _(\"Generic command for setting how sources are handled.\"),\n+                  &setsourcelist, 0, &setlist);\n+\n+  add_prefix_cmd (\"source\", no_class, show_source,\n+                  _(\"Generic command for showing source settings.\"),\n+                  &showsourcelist, 0, &showlist);\n+\n+  add_setshow_boolean_cmd (\"open\", class_files, &source_open, _(\"\\\n+Set whether GDB should open source files.\"), _(\"\\\n+Show whether GDB should open source files.\"), _(\"\\\n+When this option is on GDB will open source files and display the\\n\\\n+contents when appropriate, for example, when GDB stops, or the list\\n\\\n+command is used.\\n\\\n+When this option is off GDB will not try to open source files, instead\\n\\\n+GDB will print the file and line number that would have been displayed.\\n\\\n+This can be useful if access to source code files is slow, for example\\n\\\n+due to the source being located over a slow network connection.\"),\n+                           NULL,\n+                           show_source_open,\n+                           &setsourcelist, &showsourcelist);\n }"
    },
    {
      "sha": "1fb5edb9e75f543210f848fb16336885e1e88b2b",
      "filename": "gdb/testsuite/gdb.base/source-open.c",
      "status": "added",
      "additions": 25,
      "deletions": 0,
      "changes": 25,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fde1a9a3ee8c95bb7bae6c764755bcbffdbb0308/gdb/testsuite/gdb.base/source-open.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fde1a9a3ee8c95bb7bae6c764755bcbffdbb0308/gdb/testsuite/gdb.base/source-open.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/source-open.c?ref=fde1a9a3ee8c95bb7bae6c764755bcbffdbb0308",
      "patch": "@@ -0,0 +1,25 @@\n+/* This testcase is part of GDB, the GNU debugger.\n+\n+   Copyright 2021 Free Software Foundation, Inc.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+#include <stdio.h>\n+\n+int\n+main (int argc, char* argv[])\n+{\n+  printf (\"source code line.\");\n+  return 0;\n+}"
    },
    {
      "sha": "eb801427bf365ba005fa02de753ff86b446b80dc",
      "filename": "gdb/testsuite/gdb.base/source-open.exp",
      "status": "added",
      "additions": 44,
      "deletions": 0,
      "changes": 44,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/fde1a9a3ee8c95bb7bae6c764755bcbffdbb0308/gdb/testsuite/gdb.base/source-open.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/fde1a9a3ee8c95bb7bae6c764755bcbffdbb0308/gdb/testsuite/gdb.base/source-open.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/source-open.exp?ref=fde1a9a3ee8c95bb7bae6c764755bcbffdbb0308",
      "patch": "@@ -0,0 +1,44 @@\n+# Copyright 2021 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+# Test the 'set source open on|off' command.\n+\n+standard_testfile\n+\n+if {[prepare_for_testing \"failed to prepare\" $testfile $srcfile debug]} {\n+    return -1\n+}\n+\n+gdb_test \"show source open\" \"Source opening is \\\"on\\\"\\\\.\" \\\n+    \"source opening is initially on\"\n+gdb_test_no_output \"set listsize 1\"\n+gdb_test_no_output \"set source open on\"\n+gdb_test \"list 18\" \"18\\t#include <stdio.h>\" \"source reading on\"\n+\n+# File opening is turned off therefore source lines are not printed.\n+gdb_test_no_output \"set source open off\"\n+gdb_test \"show source open\" \"Source opening is \\\"off\\\"\\\\.\" \\\n+    \"source opening is now off\"\n+gdb_test \"list 18\" \"18\\tin .*/${srcfile}\" \"source reading off\"\n+\n+gdb_test \"forward-search main\" \"source code access disabled\"\n+gdb_test \"reverse-search main\" \"source code access disabled\"\n+\n+# And finally, turn source code reading back on.\n+gdb_test_no_output \"set source open on\" \\\n+    \"turn source reading back on\"\n+gdb_test \"show source open\" \"Source opening is \\\"on\\\"\\\\.\" \\\n+    \"source opening is on again\"\n+gdb_test \"list 18\" \"18\\t#include <stdio.h>\" \"source reading on again\""
    }
  ]
}