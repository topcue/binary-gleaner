{
  "sha": "ac4280dad035bb98fba999c174314435aefdf1a0",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YWM0MjgwZGFkMDM1YmI5OGZiYTk5OWMxNzQzMTQ0MzVhZWZkZjFhMA==",
  "commit": {
    "author": {
      "name": "Jozef Lawrynowicz",
      "email": "jozef.l@mittosystems.com",
      "date": "2020-02-10T20:37:57Z"
    },
    "committer": {
      "name": "Jozef Lawrynowicz",
      "email": "jozef.l@mittosystems.com",
      "date": "2020-02-10T20:42:36Z"
    },
    "message": "MSP430: Enable relaxation of jump instructions to hard-coded pcrel offsets\n\nThis patch fixes execution failures which occur when the BR in a\nsequence such as:\n  J<cond> 1f\n  BR\n  1:\nis relaxed to a JMP, and the pc-relative offset for the destination of\nthe J<cond> instruction is hard-coded to be 2 words ahead of the\ninstruction.\nThe hard-coded offset will cause execution to jump 1 word ahead of where\nit should actually go.\n\nInstead we now detect the hard-coded offset is one we inserted earlier,\nand invert the condition, allowing us to remove the BR entirely.\n\nbfd/ChangeLog:\n\n2020-02-10  Jozef Lawrynowicz  <jozef.l@mittosystems.com>\n\n\t* elf32-msp430.c (msp430_elf_relax_section): Before relaxing a branch,\n\tcheck if previous instruction matches a conditional jump inserted\n\tearlier. Invert conditional jump and delete branch in this case.",
    "tree": {
      "sha": "d98902ac63fdef6da63bde52b4cebdff1b2ff70b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/d98902ac63fdef6da63bde52b4cebdff1b2ff70b"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/ac4280dad035bb98fba999c174314435aefdf1a0",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ac4280dad035bb98fba999c174314435aefdf1a0",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/ac4280dad035bb98fba999c174314435aefdf1a0",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ac4280dad035bb98fba999c174314435aefdf1a0/comments",
  "author": {
    "login": "jozefl-mitto",
    "id": 36524004,
    "node_id": "MDQ6VXNlcjM2NTI0MDA0",
    "avatar_url": "https://avatars.githubusercontent.com/u/36524004?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jozefl-mitto",
    "html_url": "https://github.com/jozefl-mitto",
    "followers_url": "https://api.github.com/users/jozefl-mitto/followers",
    "following_url": "https://api.github.com/users/jozefl-mitto/following{/other_user}",
    "gists_url": "https://api.github.com/users/jozefl-mitto/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jozefl-mitto/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jozefl-mitto/subscriptions",
    "organizations_url": "https://api.github.com/users/jozefl-mitto/orgs",
    "repos_url": "https://api.github.com/users/jozefl-mitto/repos",
    "events_url": "https://api.github.com/users/jozefl-mitto/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jozefl-mitto/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "jozefl-mitto",
    "id": 36524004,
    "node_id": "MDQ6VXNlcjM2NTI0MDA0",
    "avatar_url": "https://avatars.githubusercontent.com/u/36524004?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jozefl-mitto",
    "html_url": "https://github.com/jozefl-mitto",
    "followers_url": "https://api.github.com/users/jozefl-mitto/followers",
    "following_url": "https://api.github.com/users/jozefl-mitto/following{/other_user}",
    "gists_url": "https://api.github.com/users/jozefl-mitto/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jozefl-mitto/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jozefl-mitto/subscriptions",
    "organizations_url": "https://api.github.com/users/jozefl-mitto/orgs",
    "repos_url": "https://api.github.com/users/jozefl-mitto/repos",
    "events_url": "https://api.github.com/users/jozefl-mitto/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jozefl-mitto/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "8d6cb116f47b5edb2a7c2fa540fcb9dbcd3effc2",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8d6cb116f47b5edb2a7c2fa540fcb9dbcd3effc2",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/8d6cb116f47b5edb2a7c2fa540fcb9dbcd3effc2"
    }
  ],
  "stats": {
    "total": 76,
    "additions": 65,
    "deletions": 11
  },
  "files": [
    {
      "sha": "083b21fbd97847844e98d9c849786548a0f330f0",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ac4280dad035bb98fba999c174314435aefdf1a0/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ac4280dad035bb98fba999c174314435aefdf1a0/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=ac4280dad035bb98fba999c174314435aefdf1a0",
      "patch": "@@ -1,3 +1,9 @@\n+2020-02-10  Jozef Lawrynowicz  <jozef.l@mittosystems.com>\n+\n+\t* elf32-msp430.c (msp430_elf_relax_section): Before relaxing a branch,\n+\tcheck if previous instruction matches a conditional jump inserted\n+\tearlier. Invert conditional jump and delete branch in this case.\n+\n 2020-02-10  Jozef Lawrynowicz  <jozef.l@mittosystems.com>\n \n \t* elf32-msp430.c (msp430_elf_relax_add_two_words): Rename to"
    },
    {
      "sha": "4d68d40f6791f8381dd46460ed1d08b286da153b",
      "filename": "bfd/elf32-msp430.c",
      "status": "modified",
      "additions": 59,
      "deletions": 11,
      "changes": 70,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ac4280dad035bb98fba999c174314435aefdf1a0/bfd/elf32-msp430.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ac4280dad035bb98fba999c174314435aefdf1a0/bfd/elf32-msp430.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-msp430.c?ref=ac4280dad035bb98fba999c174314435aefdf1a0",
      "patch": "@@ -2362,11 +2362,11 @@ msp430_elf_relax_section (bfd * abfd, asection * sec,\n \t       able to relax.  */\n \t    if ((long) value < 1016 && (long) value > -1016)\n \t      {\n-\t\tint code2;\n+\t\tint code1, code2, opcode;\n \n \t\t/* Get the opcode.  */\n \t\tcode2 = bfd_get_16 (abfd, contents + irel->r_offset - 2);\n-\t\tif (code2 != 0x4030)\n+\t\tif (code2 != 0x4030) /* BR -> JMP */\n \t\t  continue;\n \t\t/* FIXME: check r4 and r3 ? */\n \t\t/* FIXME: Handle 0x4010 as well ?  */\n@@ -2391,17 +2391,65 @@ msp430_elf_relax_section (bfd * abfd, asection * sec,\n \t\t    if (debug_relocs)\n \t\t      printf (\"      R_MSP430_16 -> R_MSP430_10_PCREL \");\n \t\t  }\n+\t\t/* If we're trying to shrink a BR[A] after previously having\n+\t\t   grown a JMP for this reloc, then we have a sequence like\n+\t\t   this:\n+\t\t     J<cond> 1f\n+\t\t     BR[A]\n+\t\t     1:\n+\t\t   The opcode for J<cond> has the target hard-coded as 2 words\n+\t\t   ahead of the insn, instead of using a reloc.\n+\t\t   This means we cannot rely on any of the helper functions to\n+\t\t   update this hard-coded jump destination if we remove the\n+\t\t   BR[A] insn, so we must explicitly update it here.\n+\t\t   This does mean that we can remove the entire branch\n+\t\t   instruction, and invert the conditional jump, saving us 4\n+\t\t   bytes rather than only 2 if we detected this in the normal\n+\t\t   way.  */\n+\t\tcode1 = bfd_get_16 (abfd, contents + irel->r_offset - 4);\n+\t\tswitch (code1)\n+\t\t  {\n+\t\t    case 0x3802: opcode = 0x3401; break; /* Jl  +2 -> Jge +1 */\n+\t\t    case 0x3402: opcode = 0x3801; break; /* Jge +2 -> Jl  +1 */\n+\t\t    case 0x2c02: opcode = 0x2801; break; /* Jhs +2 -> Jlo +1 */\n+\t\t    case 0x2802: opcode = 0x2c01; break; /* Jlo +2 -> Jhs +1 */\n+\t\t    case 0x2402: opcode = 0x2001; break; /* Jeq +2 -> Jne +1 */\n+\t\t    case 0x2002: opcode = 0x2401; break; /* jne +2 -> Jeq +1 */\n+\t\t    case 0x3002: /* jn +2   */\n+\t\t      /* FIXME: There is no direct inverse of the Jn insn.  */\n+\t\t      continue;\n+\t\t    default:\n+\t\t      /* The previous opcode does not have a hard-coded jump\n+\t\t\t that we added when previously relaxing, so relax the\n+\t\t\t current branch as normal.  */\n+\t\t      opcode = 0x3c00;\n+\t\t      break;\n+\t\t    }\n \t\tif (debug_relocs)\n-\t\t  printf (\"(shrinking with new opcode 0x3c00)\\n\");\n-\n-\t\t/* Fix the opcode right way.  */\n-\t\tbfd_put_16 (abfd, 0x3c00, contents + irel->r_offset - 2);\n-\t\tirel->r_offset -= 2;\n+\t\t  printf (\"(shrinking with new opcode 0x%x)\\n\", opcode);\n \n-\t\t/* Delete bytes.  */\n-\t\tif (!msp430_elf_relax_delete_bytes (abfd, sec,\n-\t\t\t\t\t\t    irel->r_offset + 2, 2))\n-\t\t  goto error_return;\n+\t\tif (opcode != 0x3c00)\n+\t\t  {\n+\t\t    /* Invert the opcode of the conditional jump.  */\n+\t\t    bfd_put_16 (abfd, opcode, contents + irel->r_offset - 4);\n+\t\t    irel->r_offset -= 4;\n+\n+\t\t    /* Delete 4 bytes - the full BR insn.  */\n+\t\t    if (!msp430_elf_relax_delete_bytes (abfd, sec,\n+\t\t\t\t\t\t\tirel->r_offset + 2, 4))\n+\t\t      goto error_return;\n+\t\t  }\n+\t\telse\n+\t\t  {\n+\t\t    /* Fix the opcode right way.  */\n+\t\t    bfd_put_16 (abfd, opcode, contents + irel->r_offset - 2);\n+\t\t    irel->r_offset -= 2;\n+\n+\t\t    /* Delete bytes.  */\n+\t\t    if (!msp430_elf_relax_delete_bytes (abfd, sec,\n+\t\t\t\t\t\t\tirel->r_offset + 2, 2))\n+\t\t      goto error_return;\n+\t\t  }\n \n \t\t/* That will change things, so, we should relax again.\n \t\t   Note that this is not required, and it may be slow.  */"
    }
  ]
}