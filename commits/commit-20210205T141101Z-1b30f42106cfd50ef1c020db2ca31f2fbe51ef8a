{
  "sha": "1b30f42106cfd50ef1c020db2ca31f2fbe51ef8a",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MWIzMGY0MjEwNmNmZDUwZWYxYzAyMGRiMmNhMzFmMmZiZTUxZWY4YQ==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-02-05T14:11:01Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-02-05T14:11:01Z"
    },
    "message": "Extract symbol-writing function from parsers\n\nI noticed that several parsers shared the same code to write a symbol\nreference to an expression.  This patch factors this code out into a\nnew function.\n\nRegression tested on x86-64 Fedora 32.\n\ngdb/ChangeLog\n2021-02-05  Tom Tromey  <tom@tromey.com>\n\n\t* parser-defs.h (write_exp_symbol_reference): Declare.\n\t* parse.c (write_exp_symbol_reference): New function.\n\t* p-exp.y (variable): Use write_exp_symbol_reference.\n\t* m2-exp.y (variable): Use write_exp_symbol_reference.\n\t* f-exp.y (variable): Use write_exp_symbol_reference.\n\t* d-exp.y (PrimaryExpression): Use write_exp_symbol_reference.\n\t* c-exp.y (variable): Use write_exp_symbol_reference.",
    "tree": {
      "sha": "f22193895e3e5c0683504ccc7a525459fccee6da",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/f22193895e3e5c0683504ccc7a525459fccee6da"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/1b30f42106cfd50ef1c020db2ca31f2fbe51ef8a",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1b30f42106cfd50ef1c020db2ca31f2fbe51ef8a",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/1b30f42106cfd50ef1c020db2ca31f2fbe51ef8a",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1b30f42106cfd50ef1c020db2ca31f2fbe51ef8a/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "e37d88e5e5666304d94b705af4301867df9bdab0",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e37d88e5e5666304d94b705af4301867df9bdab0",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/e37d88e5e5666304d94b705af4301867df9bdab0"
    }
  ],
  "stats": {
    "total": 207,
    "additions": 78,
    "deletions": 129
  },
  "files": [
    {
      "sha": "553b5f03056a879dd485c303189918a824f4bb6d",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1b30f42106cfd50ef1c020db2ca31f2fbe51ef8a/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1b30f42106cfd50ef1c020db2ca31f2fbe51ef8a/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=1b30f42106cfd50ef1c020db2ca31f2fbe51ef8a",
      "patch": "@@ -1,3 +1,13 @@\n+2021-02-05  Tom Tromey  <tom@tromey.com>\n+\n+\t* parser-defs.h (write_exp_symbol_reference): Declare.\n+\t* parse.c (write_exp_symbol_reference): New function.\n+\t* p-exp.y (variable): Use write_exp_symbol_reference.\n+\t* m2-exp.y (variable): Use write_exp_symbol_reference.\n+\t* f-exp.y (variable): Use write_exp_symbol_reference.\n+\t* d-exp.y (PrimaryExpression): Use write_exp_symbol_reference.\n+\t* c-exp.y (variable): Use write_exp_symbol_reference.\n+\n 2021-02-05  Tom de Vries  <tdevries@suse.de>\n \n \tPR exp/27265"
    },
    {
      "sha": "13b06f39bbf02f3f1fa341f17f68d98540d151e2",
      "filename": "gdb/c-exp.y",
      "status": "modified",
      "additions": 4,
      "deletions": 22,
      "changes": 26,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1b30f42106cfd50ef1c020db2ca31f2fbe51ef8a/gdb/c-exp.y",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1b30f42106cfd50ef1c020db2ca31f2fbe51ef8a/gdb/c-exp.y",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/c-exp.y?ref=1b30f42106cfd50ef1c020db2ca31f2fbe51ef8a",
      "patch": "@@ -1104,30 +1104,12 @@ variable:\tqualified_name\n \t|\tCOLONCOLON name_not_typename\n \t\t\t{\n \t\t\t  std::string name = copy_name ($2.stoken);\n-\t\t\t  struct symbol *sym;\n-\t\t\t  struct bound_minimal_symbol msymbol;\n-\n-\t\t\t  sym\n+\t\t\t  struct block_symbol sym\n \t\t\t    = lookup_symbol (name.c_str (),\n \t\t\t\t\t     (const struct block *) NULL,\n-\t\t\t\t\t     VAR_DOMAIN, NULL).symbol;\n-\t\t\t  if (sym)\n-\t\t\t    {\n-\t\t\t      write_exp_elt_opcode (pstate, OP_VAR_VALUE);\n-\t\t\t      write_exp_elt_block (pstate, NULL);\n-\t\t\t      write_exp_elt_sym (pstate, sym);\n-\t\t\t      write_exp_elt_opcode (pstate, OP_VAR_VALUE);\n-\t\t\t      break;\n-\t\t\t    }\n-\n-\t\t\t  msymbol = lookup_bound_minimal_symbol (name.c_str ());\n-\t\t\t  if (msymbol.minsym != NULL)\n-\t\t\t    write_exp_msymbol (pstate, msymbol);\n-\t\t\t  else if (!have_full_symbols () && !have_partial_symbols ())\n-\t\t\t    error (_(\"No symbol table is loaded.  Use the \\\"file\\\" command.\"));\n-\t\t\t  else\n-\t\t\t    error (_(\"No symbol \\\"%s\\\" in current context.\"),\n-\t\t\t\t   name.c_str ());\n+\t\t\t\t\t     VAR_DOMAIN, NULL);\n+\t\t\t  write_exp_symbol_reference (pstate, name.c_str (),\n+\t\t\t\t\t\t      sym);\n \t\t\t}\n \t;\n "
    },
    {
      "sha": "c432f22bd9d0d21bb01cfc25d16a6867c58580eb",
      "filename": "gdb/d-exp.y",
      "status": "modified",
      "additions": 16,
      "deletions": 29,
      "changes": 45,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1b30f42106cfd50ef1c020db2ca31f2fbe51ef8a/gdb/d-exp.y",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1b30f42106cfd50ef1c020db2ca31f2fbe51ef8a/gdb/d-exp.y",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/d-exp.y?ref=1b30f42106cfd50ef1c020db2ca31f2fbe51ef8a",
      "patch": "@@ -464,7 +464,6 @@ PrimaryExpression:\n \t\t\t     been resolved, it's not likely to be found.  */\n \t\t\t  if (type->code () == TYPE_CODE_MODULE)\n \t\t\t    {\n-\t\t\t      struct bound_minimal_symbol msymbol;\n \t\t\t      struct block_symbol sym;\n \t\t\t      const char *type_name = TYPE_SAFE_NAME (type);\n \t\t\t      int type_name_len = strlen (type_name);\n@@ -477,35 +476,23 @@ PrimaryExpression:\n \t\t\t\tlookup_symbol (name.c_str (),\n \t\t\t\t\t       (const struct block *) NULL,\n \t\t\t\t\t       VAR_DOMAIN, NULL);\n-\t\t\t      if (sym.symbol)\n-\t\t\t\t{\n-\t\t\t\t  write_exp_elt_opcode (pstate, OP_VAR_VALUE);\n-\t\t\t\t  write_exp_elt_block (pstate, sym.block);\n-\t\t\t\t  write_exp_elt_sym (pstate, sym.symbol);\n-\t\t\t\t  write_exp_elt_opcode (pstate, OP_VAR_VALUE);\n-\t\t\t\t  break;\n-\t\t\t\t}\n-\n-\t\t\t      msymbol = lookup_bound_minimal_symbol (name.c_str ());\n-\t\t\t      if (msymbol.minsym != NULL)\n-\t\t\t\twrite_exp_msymbol (pstate, msymbol);\n-\t\t\t      else if (!have_full_symbols () && !have_partial_symbols ())\n-\t\t\t\terror (_(\"No symbol table is loaded.  Use the \\\"file\\\" command.\"));\n-\t\t\t      else\n-\t\t\t\terror (_(\"No symbol \\\"%s\\\" in current context.\"),\n-\t\t\t\t       name.c_str ());\n+\t\t\t      write_exp_symbol_reference (pstate,\n+\t\t\t\t\t\t\t  name.c_str (),\n+\t\t\t\t\t\t\t  sym);\n+\t\t\t    }\n+\t\t\t  else\n+\t\t\t    {\n+\t\t\t      /* Check if the qualified name resolves as a member\n+\t\t\t\t of an aggregate or an enum type.  */\n+\t\t\t      if (!type_aggregate_p (type))\n+\t\t\t\terror (_(\"`%s' is not defined as an aggregate type.\"),\n+\t\t\t\t       TYPE_SAFE_NAME (type));\n+\n+\t\t\t      write_exp_elt_opcode (pstate, OP_SCOPE);\n+\t\t\t      write_exp_elt_type (pstate, type);\n+\t\t\t      write_exp_string (pstate, $3);\n+\t\t\t      write_exp_elt_opcode (pstate, OP_SCOPE);\n \t\t\t    }\n-\n-\t\t\t  /* Check if the qualified name resolves as a member\n-\t\t\t     of an aggregate or an enum type.  */\n-\t\t\t  if (!type_aggregate_p (type))\n-\t\t\t    error (_(\"`%s' is not defined as an aggregate type.\"),\n-\t\t\t\t   TYPE_SAFE_NAME (type));\n-\n-\t\t\t  write_exp_elt_opcode (pstate, OP_SCOPE);\n-\t\t\t  write_exp_elt_type (pstate, type);\n-\t\t\t  write_exp_string (pstate, $3);\n-\t\t\t  write_exp_elt_opcode (pstate, OP_SCOPE);\n \t\t\t}\n |\tDOLLAR_VARIABLE\n \t\t{ write_dollar_variable (pstate, $1); }"
    },
    {
      "sha": "92a70b4552da0cbe11a7a7214e2ebb500e34d75f",
      "filename": "gdb/f-exp.y",
      "status": "modified",
      "additions": 3,
      "deletions": 26,
      "changes": 29,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1b30f42106cfd50ef1c020db2ca31f2fbe51ef8a/gdb/f-exp.y",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1b30f42106cfd50ef1c020db2ca31f2fbe51ef8a/gdb/f-exp.y",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/f-exp.y?ref=1b30f42106cfd50ef1c020db2ca31f2fbe51ef8a",
      "patch": "@@ -540,32 +540,9 @@ exp\t:\tSTRING_LITERAL\n \n variable:\tname_not_typename\n \t\t\t{ struct block_symbol sym = $1.sym;\n-\n-\t\t\t  if (sym.symbol)\n-\t\t\t    {\n-\t\t\t      if (symbol_read_needs_frame (sym.symbol))\n-\t\t\t\tpstate->block_tracker->update (sym);\n-\t\t\t      write_exp_elt_opcode (pstate, OP_VAR_VALUE);\n-\t\t\t      write_exp_elt_block (pstate, sym.block);\n-\t\t\t      write_exp_elt_sym (pstate, sym.symbol);\n-\t\t\t      write_exp_elt_opcode (pstate, OP_VAR_VALUE);\n-\t\t\t      break;\n-\t\t\t    }\n-\t\t\t  else\n-\t\t\t    {\n-\t\t\t      struct bound_minimal_symbol msymbol;\n-\t\t\t      std::string arg = copy_name ($1.stoken);\n-\n-\t\t\t      msymbol =\n-\t\t\t\tlookup_bound_minimal_symbol (arg.c_str ());\n-\t\t\t      if (msymbol.minsym != NULL)\n-\t\t\t\twrite_exp_msymbol (pstate, msymbol);\n-\t\t\t      else if (!have_full_symbols () && !have_partial_symbols ())\n-\t\t\t\terror (_(\"No symbol table is loaded.  Use the \\\"file\\\" command.\"));\n-\t\t\t      else\n-\t\t\t\terror (_(\"No symbol \\\"%s\\\" in current context.\"),\n-\t\t\t\t       arg.c_str ());\n-\t\t\t    }\n+\t\t\t  std::string name = copy_name ($1.stoken);\n+\t\t\t  write_exp_symbol_reference (pstate, name.c_str (),\n+\t\t\t\t\t\t      sym);\n \t\t\t}\n \t;\n "
    },
    {
      "sha": "68bae48feb6b446180ded985b7258e0608aa9ebc",
      "filename": "gdb/m2-exp.y",
      "status": "modified",
      "additions": 4,
      "deletions": 26,
      "changes": 30,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1b30f42106cfd50ef1c020db2ca31f2fbe51ef8a/gdb/m2-exp.y",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1b30f42106cfd50ef1c020db2ca31f2fbe51ef8a/gdb/m2-exp.y",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/m2-exp.y?ref=1b30f42106cfd50ef1c020db2ca31f2fbe51ef8a",
      "patch": "@@ -561,37 +561,15 @@ variable:\tNAME\n \t\t\t{ struct block_symbol sym;\n \t\t\t  struct field_of_this_result is_a_field_of_this;\n \n+\t\t\t  std::string name = copy_name ($1);\n \t\t\t  sym\n-\t\t\t    = lookup_symbol (copy_name ($1).c_str (),\n+\t\t\t    = lookup_symbol (name.c_str (),\n \t\t\t\t\t     pstate->expression_context_block,\n \t\t\t\t\t     VAR_DOMAIN,\n \t\t\t\t\t     &is_a_field_of_this);\n \n-\t\t\t  if (sym.symbol)\n-\t\t\t    {\n-\t\t\t      if (symbol_read_needs_frame (sym.symbol))\n-\t\t\t\tpstate->block_tracker->update (sym);\n-\n-\t\t\t      write_exp_elt_opcode (pstate, OP_VAR_VALUE);\n-\t\t\t      write_exp_elt_block (pstate, sym.block);\n-\t\t\t      write_exp_elt_sym (pstate, sym.symbol);\n-\t\t\t      write_exp_elt_opcode (pstate, OP_VAR_VALUE);\n-\t\t\t    }\n-\t\t\t  else\n-\t\t\t    {\n-\t\t\t      struct bound_minimal_symbol msymbol;\n-\t\t\t      std::string arg = copy_name ($1);\n-\n-\t\t\t      msymbol =\n-\t\t\t\tlookup_bound_minimal_symbol (arg.c_str ());\n-\t\t\t      if (msymbol.minsym != NULL)\n-\t\t\t\twrite_exp_msymbol (pstate, msymbol);\n-\t\t\t      else if (!have_full_symbols () && !have_partial_symbols ())\n-\t\t\t\terror (_(\"No symbol table is loaded.  Use the \\\"symbol-file\\\" command.\"));\n-\t\t\t      else\n-\t\t\t\terror (_(\"No symbol \\\"%s\\\" in current context.\"),\n-\t\t\t\t       arg.c_str ());\n-\t\t\t    }\n+\t\t\t  write_exp_symbol_reference (pstate, name.c_str (),\n+\t\t\t\t\t\t      sym);\n \t\t\t}\n \t;\n "
    },
    {
      "sha": "b025ac36070d9a88950305c5998c633a936fa223",
      "filename": "gdb/p-exp.y",
      "status": "modified",
      "additions": 5,
      "deletions": 26,
      "changes": 31,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1b30f42106cfd50ef1c020db2ca31f2fbe51ef8a/gdb/p-exp.y",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1b30f42106cfd50ef1c020db2ca31f2fbe51ef8a/gdb/p-exp.y",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/p-exp.y?ref=1b30f42106cfd50ef1c020db2ca31f2fbe51ef8a",
      "patch": "@@ -691,33 +691,12 @@ variable:\tqualified_name\n \t|\tCOLONCOLON name\n \t\t\t{\n \t\t\t  std::string name = copy_name ($2);\n-\t\t\t  struct symbol *sym;\n-\t\t\t  struct bound_minimal_symbol msymbol;\n-\n-\t\t\t  sym =\n-\t\t\t    lookup_symbol (name.c_str (),\n-\t\t\t\t\t   (const struct block *) NULL,\n-\t\t\t\t\t   VAR_DOMAIN, NULL).symbol;\n-\t\t\t  if (sym)\n-\t\t\t    {\n-\t\t\t      write_exp_elt_opcode (pstate, OP_VAR_VALUE);\n-\t\t\t      write_exp_elt_block (pstate, NULL);\n-\t\t\t      write_exp_elt_sym (pstate, sym);\n-\t\t\t      write_exp_elt_opcode (pstate, OP_VAR_VALUE);\n-\t\t\t      break;\n-\t\t\t    }\n \n-\t\t\t  msymbol\n-\t\t\t    = lookup_bound_minimal_symbol (name.c_str ());\n-\t\t\t  if (msymbol.minsym != NULL)\n-\t\t\t    write_exp_msymbol (pstate, msymbol);\n-\t\t\t  else if (!have_full_symbols ()\n-\t\t\t\t   && !have_partial_symbols ())\n-\t\t\t    error (_(\"No symbol table is loaded.  \"\n-\t\t\t\t   \"Use the \\\"file\\\" command.\"));\n-\t\t\t  else\n-\t\t\t    error (_(\"No symbol \\\"%s\\\" in current context.\"),\n-\t\t\t\t   name.c_str ());\n+\t\t\t  struct block_symbol sym\n+\t\t\t    = lookup_symbol (name.c_str (), nullptr,\n+\t\t\t\t\t     VAR_DOMAIN, nullptr);\n+\t\t\t  write_exp_symbol_reference (pstate, name.c_str (),\n+\t\t\t\t\t\t      sym);\n \t\t\t}\n \t;\n "
    },
    {
      "sha": "08fde89d8f3d9b6da51eca01d326ffe1aa818f0b",
      "filename": "gdb/parse.c",
      "status": "modified",
      "additions": 26,
      "deletions": 0,
      "changes": 26,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1b30f42106cfd50ef1c020db2ca31f2fbe51ef8a/gdb/parse.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1b30f42106cfd50ef1c020db2ca31f2fbe51ef8a/gdb/parse.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/parse.c?ref=1b30f42106cfd50ef1c020db2ca31f2fbe51ef8a",
      "patch": "@@ -650,6 +650,32 @@ write_dollar_variable (struct parser_state *ps, struct stoken str)\n   return;\n }\n \n+/* See parser-defs.h.  */\n+\n+void\n+write_exp_symbol_reference (struct parser_state *pstate, const char *name,\n+\t\t\t    struct block_symbol sym)\n+{\n+  if (sym.symbol != nullptr)\n+    {\n+      if (symbol_read_needs_frame (sym.symbol))\n+\tpstate->block_tracker->update (sym);\n+      write_exp_elt_opcode (pstate, OP_VAR_VALUE);\n+      write_exp_elt_block (pstate, NULL);\n+      write_exp_elt_sym (pstate, sym.symbol);\n+      write_exp_elt_opcode (pstate, OP_VAR_VALUE);\n+    }\n+  else\n+    {\n+      struct bound_minimal_symbol msymbol = lookup_bound_minimal_symbol (name);\n+      if (msymbol.minsym != NULL)\n+\twrite_exp_msymbol (pstate, msymbol);\n+      else if (!have_full_symbols () && !have_partial_symbols ())\n+\terror (_(\"No symbol table is loaded.  Use the \\\"file\\\" command.\"));\n+      else\n+\terror (_(\"No symbol \\\"%s\\\" in current context.\"), name);\n+    }\n+}\n \n const char *\n find_template_name_end (const char *p)"
    },
    {
      "sha": "466230e4ad09408a55689a672f4ff334c9644857",
      "filename": "gdb/parser-defs.h",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1b30f42106cfd50ef1c020db2ca31f2fbe51ef8a/gdb/parser-defs.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1b30f42106cfd50ef1c020db2ca31f2fbe51ef8a/gdb/parser-defs.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/parser-defs.h?ref=1b30f42106cfd50ef1c020db2ca31f2fbe51ef8a",
      "patch": "@@ -334,6 +334,16 @@ extern void write_exp_msymbol (struct expr_builder *,\n \n extern void write_dollar_variable (struct parser_state *, struct stoken str);\n \n+/* Write a reference to a symbol to the expression being built in PS.\n+   NAME is the name of the symbol to write; SYM is the symbol.  If SYM\n+   is nullptr (meaning the 'symbol' member), a minimal symbol will be\n+   searched for and used if available.  Throws an exception if SYM is\n+   nullptr and no minimal symbol can be found.  */\n+\n+extern void write_exp_symbol_reference (struct parser_state *ps,\n+\t\t\t\t\tconst char *name,\n+\t\t\t\t\tstruct block_symbol sym);\n+\n extern const char *find_template_name_end (const char *);\n \n extern std::string copy_name (struct stoken);"
    }
  ]
}