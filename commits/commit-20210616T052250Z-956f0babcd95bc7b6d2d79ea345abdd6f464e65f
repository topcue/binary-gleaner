{
  "sha": "956f0babcd95bc7b6d2d79ea345abdd6f464e65f",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OTU2ZjBiYWJjZDk1YmM3YjZkMmQ3OWVhMzQ1YWJkZDZmNDY0ZTY1Zg==",
  "commit": {
    "author": {
      "name": "Mike Frysinger",
      "email": "vapier@gentoo.org",
      "date": "2021-06-16T00:58:31Z"
    },
    "committer": {
      "name": "Mike Frysinger",
      "email": "vapier@gentoo.org",
      "date": "2021-06-16T05:22:50Z"
    },
    "message": "sim: ppc: convert to bfd_endian\n\nRather than re-invent endian defines, as well as maintain our own list\nof OS & arch-specific includes, punt all that logic in favor of the bfd\nones already set up and maintained elsewhere.  We already rely on the\nbfd library, so leveraging the endian aspect should be fine.\n\nThis was done for all the other ports years ago, so catch ppc up.",
    "tree": {
      "sha": "539e8c9e69c946b736856febfc74d4cae38f4e2d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/539e8c9e69c946b736856febfc74d4cae38f4e2d"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/956f0babcd95bc7b6d2d79ea345abdd6f464e65f",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/956f0babcd95bc7b6d2d79ea345abdd6f464e65f",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/956f0babcd95bc7b6d2d79ea345abdd6f464e65f",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/956f0babcd95bc7b6d2d79ea345abdd6f464e65f/comments",
  "author": {
    "login": "vapier",
    "id": 176950,
    "node_id": "MDQ6VXNlcjE3Njk1MA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/176950?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vapier",
    "html_url": "https://github.com/vapier",
    "followers_url": "https://api.github.com/users/vapier/followers",
    "following_url": "https://api.github.com/users/vapier/following{/other_user}",
    "gists_url": "https://api.github.com/users/vapier/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vapier/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vapier/subscriptions",
    "organizations_url": "https://api.github.com/users/vapier/orgs",
    "repos_url": "https://api.github.com/users/vapier/repos",
    "events_url": "https://api.github.com/users/vapier/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vapier/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "vapier",
    "id": 176950,
    "node_id": "MDQ6VXNlcjE3Njk1MA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/176950?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vapier",
    "html_url": "https://github.com/vapier",
    "followers_url": "https://api.github.com/users/vapier/followers",
    "following_url": "https://api.github.com/users/vapier/following{/other_user}",
    "gists_url": "https://api.github.com/users/vapier/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vapier/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vapier/subscriptions",
    "organizations_url": "https://api.github.com/users/vapier/orgs",
    "repos_url": "https://api.github.com/users/vapier/repos",
    "events_url": "https://api.github.com/users/vapier/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vapier/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "1b828ebe530ef113c9e55fad8f7e472cd36dd078",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1b828ebe530ef113c9e55fad8f7e472cd36dd078",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/1b828ebe530ef113c9e55fad8f7e472cd36dd078"
    }
  ],
  "stats": {
    "total": 134,
    "additions": 75,
    "deletions": 59
  },
  "files": [
    {
      "sha": "3ef5b228e46866b204d35a110b8e41095e937c92",
      "filename": "sim/ppc/ChangeLog",
      "status": "modified",
      "additions": 22,
      "deletions": 0,
      "changes": 22,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/956f0babcd95bc7b6d2d79ea345abdd6f464e65f/sim/ppc/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/956f0babcd95bc7b6d2d79ea345abdd6f464e65f/sim/ppc/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/ppc/ChangeLog?ref=956f0babcd95bc7b6d2d79ea345abdd6f464e65f",
      "patch": "@@ -1,3 +1,25 @@\n+2021-06-16  Mike Frysinger  <vapier@gentoo.org>\n+\n+\t* altivec.igen: Change BIG_ENDIAN to BFD_ENDIAN_BIG.\n+\t* configure.ac: Change LITTLE_ENDIAN, BIG_ENDIAN, & 0 to\n+\tBFD_ENDIAN_LITTLE, BFD_ENDIAN_BIG, & BFD_ENDIAN_UNKNOWN respectively.\n+\t* emul_generic.c: Likewise.\n+\t* options.c (options_byte_order): Likewise.  Change int to bfd_endian.\n+\t* psim.c (current_target_byte_order): Change type to bfd_endian.\n+\t(psim_create): Change LITTLE_ENDIAN & BIG_ENDIAN to BFD_ENDIAN_LITTLE\n+\t& BFD_ENDIAN_BIG respectively.\n+\t* sim-endian-n.h: Likewise.\n+\t* sim-endian.c: Likewise.\n+\t* std-config.h: Include bfd.h.\n+\t(LITTLE_ENDIAN, BIG_ENDIAN): Delete.\n+\t(HOST_BYTE_ORDER): Change to BFD_ENDIAN_BIG & BFD_ENDIAN_LITTLE.\n+\t(WITH_TARGET_BYTE_ORDER): Change to BFD_ENDIAN_UNKNOWN.\n+\t(current_target_byte_order): Change type to bfd_endian.\n+\t(CURRENT_TARGET_BYTE_ORDER): Compare to BFD_ENDIAN_UNKNOWN.\n+\t* vm.c (vm_synchronize_context): Change LITTLE_ENDIAN & BIG_ENDIAN to\n+\tBFD_ENDIAN_LITTLE & BFD_ENDIAN_BIG respectively.\n+\t* configure: Regenerate.\n+\n 2021-06-16  Mike Frysinger  <vapier@gentoo.org>\n \n \t* basics.h (__attribute__): Delete."
    },
    {
      "sha": "8d7c79481ac886f278ba9731b358fa3c8bb93bc2",
      "filename": "sim/ppc/altivec.igen",
      "status": "modified",
      "additions": 13,
      "deletions": 13,
      "changes": 26,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/956f0babcd95bc7b6d2d79ea345abdd6f464e65f/sim/ppc/altivec.igen",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/956f0babcd95bc7b6d2d79ea345abdd6f464e65f/sim/ppc/altivec.igen",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/ppc/altivec.igen?ref=956f0babcd95bc7b6d2d79ea345abdd6f464e65f",
      "patch": "@@ -409,7 +409,7 @@ unsigned32::model-function::altivec_unsigned_saturate_32:signed64 val, int *sat\n \taddr = b + *rB;\n \tj = addr & 0xf;\n \tfor (i = 0; i < 16; i++)\n-\t  if (CURRENT_TARGET_BYTE_ORDER == BIG_ENDIAN)\n+\t  if (CURRENT_TARGET_BYTE_ORDER == BFD_ENDIAN_BIG)\n \t    (*vS).b[AV_BINDEX(i)] = j++;\n \t  else\n \t    (*vS).b[AV_BINDEX(15 - i)] = j++;\n@@ -424,7 +424,7 @@ unsigned32::model-function::altivec_unsigned_saturate_32:signed64 val, int *sat\n \taddr = b + *rB;\n \tj = 0x10 - (addr & 0xf);\n \tfor (i = 0; i < 16; i++)\n-\t  if (CURRENT_TARGET_BYTE_ORDER == BIG_ENDIAN)\n+\t  if (CURRENT_TARGET_BYTE_ORDER == BFD_ENDIAN_BIG)\n \t    (*vS).b[AV_BINDEX(i)] = j++;\n \t  else\n \t    (*vS).b[AV_BINDEX(15 - i)] = j++;\n@@ -437,7 +437,7 @@ unsigned32::model-function::altivec_unsigned_saturate_32:signed64 val, int *sat\n \tif (RA_is_0) b = 0;\n \telse         b = *rA;\n \tEA = (b + *rB) & ~0xf;\n-\tif (CURRENT_TARGET_BYTE_ORDER == BIG_ENDIAN) {\n+\tif (CURRENT_TARGET_BYTE_ORDER == BFD_ENDIAN_BIG) {\n \t  (*vS).w[0] = MEM(unsigned, EA + 0, 4);\n \t  (*vS).w[1] = MEM(unsigned, EA + 4, 4);\n \t  (*vS).w[2] = MEM(unsigned, EA + 8, 4);\n@@ -456,7 +456,7 @@ unsigned32::model-function::altivec_unsigned_saturate_32:signed64 val, int *sat\n \tif (RA_is_0) b = 0;\n \telse         b = *rA;\n \tEA = (b + *rB) & ~0xf;\n-\tif (CURRENT_TARGET_BYTE_ORDER == BIG_ENDIAN) {\n+\tif (CURRENT_TARGET_BYTE_ORDER == BFD_ENDIAN_BIG) {\n \t  (*vS).w[0] = MEM(unsigned, EA + 0, 4);\n \t  (*vS).w[1] = MEM(unsigned, EA + 4, 4);\n \t  (*vS).w[2] = MEM(unsigned, EA + 8, 4);\n@@ -496,7 +496,7 @@ unsigned32::model-function::altivec_unsigned_saturate_32:signed64 val, int *sat\n \telse         b = *rA;\n \tEA = b + *rB;\n \teb = EA & 0xf;\n-\tif (CURRENT_TARGET_BYTE_ORDER == BIG_ENDIAN)\n+\tif (CURRENT_TARGET_BYTE_ORDER == BFD_ENDIAN_BIG)\n \t  STORE(EA, 1, (*vS).b[eb]);\n \telse\n \t  STORE(EA, 1, (*vS).b[15-eb]);\n@@ -510,7 +510,7 @@ unsigned32::model-function::altivec_unsigned_saturate_32:signed64 val, int *sat\n \telse         b = *rA;\n \tEA = (b + *rB) & ~1;\n \teb = EA & 0xf;\n-\tif (CURRENT_TARGET_BYTE_ORDER == BIG_ENDIAN)\n+\tif (CURRENT_TARGET_BYTE_ORDER == BFD_ENDIAN_BIG)\n \t  STORE(EA, 2, (*vS).h[eb/2]);\n \telse\n \t  STORE(EA, 2, (*vS).h[7-eb]);\n@@ -524,7 +524,7 @@ unsigned32::model-function::altivec_unsigned_saturate_32:signed64 val, int *sat\n \telse         b = *rA;\n \tEA = (b + *rB) & ~3;\n \teb = EA & 0xf;\n-\tif (CURRENT_TARGET_BYTE_ORDER == BIG_ENDIAN)\n+\tif (CURRENT_TARGET_BYTE_ORDER == BFD_ENDIAN_BIG)\n \t  STORE(EA, 4, (*vS).w[eb/4]);\n \telse\n \t  STORE(EA, 4, (*vS).w[3-(eb/4)]);\n@@ -536,7 +536,7 @@ unsigned32::model-function::altivec_unsigned_saturate_32:signed64 val, int *sat\n \tif (RA_is_0) b = 0;\n \telse         b = *rA;\n \tEA = (b + *rB) & ~0xf;\n-\tif (CURRENT_TARGET_BYTE_ORDER == BIG_ENDIAN) {\n+\tif (CURRENT_TARGET_BYTE_ORDER == BFD_ENDIAN_BIG) {\n \t  STORE(EA + 0, 4, (*vS).w[0]);\n \t  STORE(EA + 4, 4, (*vS).w[1]);\n \t  STORE(EA + 8, 4, (*vS).w[2]);\n@@ -555,7 +555,7 @@ unsigned32::model-function::altivec_unsigned_saturate_32:signed64 val, int *sat\n \tif (RA_is_0) b = 0;\n \telse         b = *rA;\n \tEA = (b + *rB) & ~0xf;\n-\tif (CURRENT_TARGET_BYTE_ORDER == BIG_ENDIAN) {\n+\tif (CURRENT_TARGET_BYTE_ORDER == BFD_ENDIAN_BIG) {\n \t  STORE(EA + 0, 4, (*vS).w[0]);\n \t  STORE(EA + 4, 4, (*vS).w[1]);\n \t  STORE(EA + 8, 4, (*vS).w[2]);\n@@ -1915,7 +1915,7 @@ unsigned32::model-function::altivec_unsigned_saturate_32:signed64 val, int *sat\n \tsh = (*vB).b[0] & 7;\t/* don't bother checking everything */\n \tcarry = 0;\n \tfor (j = 3; j >= 0; j--) {\n-\t  if (CURRENT_TARGET_BYTE_ORDER == BIG_ENDIAN)\n+\t  if (CURRENT_TARGET_BYTE_ORDER == BFD_ENDIAN_BIG)\n \t    i = j;\n \t  else\n \t    i = (j + 2) % 4;\n@@ -1951,7 +1951,7 @@ unsigned32::model-function::altivec_unsigned_saturate_32:signed64 val, int *sat\n \n 0.4,6.VS,11.VA,16.VB,21.1036:VX:av:vslo %VD, %VA, %VB:Vector Shift Left by Octet\n \tint i, sh;\n-\tif (CURRENT_TARGET_BYTE_ORDER == BIG_ENDIAN)\n+\tif (CURRENT_TARGET_BYTE_ORDER == BFD_ENDIAN_BIG)\n \t  sh = ((*vB).b[AV_BINDEX(15)] >> 3) & 0xf;\n \telse\n \t  sh = ((*vB).b[AV_BINDEX(0)] >> 3) & 0xf;\n@@ -2040,7 +2040,7 @@ unsigned32::model-function::altivec_unsigned_saturate_32:signed64 val, int *sat\n \tsh = (*vB).b[0] & 7;\t/* don't bother checking everything */\n \tcarry = 0;\n \tfor (j = 0; j < 4; j++) {\n-\t  if (CURRENT_TARGET_BYTE_ORDER == BIG_ENDIAN)\n+\t  if (CURRENT_TARGET_BYTE_ORDER == BFD_ENDIAN_BIG)\n \t    i = j;\n \t  else\n \t    i = (j + 2) % 4;\n@@ -2098,7 +2098,7 @@ unsigned32::model-function::altivec_unsigned_saturate_32:signed64 val, int *sat\n \n 0.4,6.VS,11.VA,16.VB,21.1100:VX:av:vsro %VD, %VA, %VB:Vector Shift Right Octet\n \tint i, sh;\n-\tif (CURRENT_TARGET_BYTE_ORDER == BIG_ENDIAN)\n+\tif (CURRENT_TARGET_BYTE_ORDER == BFD_ENDIAN_BIG)\n \t  sh = ((*vB).b[AV_BINDEX(15)] >> 3) & 0xf;\n \telse\n \t  sh = ((*vB).b[AV_BINDEX(0)] >> 3) & 0xf;"
    },
    {
      "sha": "10903a0f13ce88d259f4157f5aa20fe6e6c2307d",
      "filename": "sim/ppc/configure",
      "status": "modified",
      "additions": 6,
      "deletions": 6,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/956f0babcd95bc7b6d2d79ea345abdd6f464e65f/sim/ppc/configure",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/956f0babcd95bc7b6d2d79ea345abdd6f464e65f/sim/ppc/configure",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/ppc/configure?ref=956f0babcd95bc7b6d2d79ea345abdd6f464e65f",
      "patch": "@@ -3227,13 +3227,13 @@ fi\n if test \"${enable_sim_endian+set}\" = set; then :\n   enableval=$enable_sim_endian; case \"${enableval}\" in\n   yes)\tcase \"$target\" in\n-\t  *powerpc-*) sim_endian=\"-DWITH_TARGET_BYTE_ORDER=BIG_ENDIAN\";;\n-\t  *powerpcle-*) sim_endian=\"-DWITH_TARGET_BYTE_ORDER=LITTLE_ENDIAN\";;\n-\t  *) echo \"Unknown target $target\" 1>&6; sim_endian=\"-DWITH_TARGET_BYTE_ORDER=0\";;\n+\t  *powerpc-*) sim_endian=\"-DWITH_TARGET_BYTE_ORDER=BFD_ENDIAN_BIG\";;\n+\t  *powerpcle-*) sim_endian=\"-DWITH_TARGET_BYTE_ORDER=BFD_ENDIAN_LITTLE\";;\n+\t  *) echo \"Unknown target $target\" 1>&6; sim_endian=\"-DWITH_TARGET_BYTE_ORDER=BFD_ENDIAN_UNKNOWN\";;\n \tesac;;\n-  no)\t sim_endian=\"-DWITH_TARGET_BYTE_ORDER=0\";;\n-  b*|B*) sim_endian=\"-DWITH_TARGET_BYTE_ORDER=BIG_ENDIAN\";;\n-  l*|L*) sim_endian=\"-DWITH_TARGET_BYTE_ORDER=LITTLE_ENDIAN\";;\n+  no)\t sim_endian=\"-DWITH_TARGET_BYTE_ORDER=BFD_ENDIAN_UNKNOWN\";;\n+  b*|B*) sim_endian=\"-DWITH_TARGET_BYTE_ORDER=BFD_ENDIAN_BIG\";;\n+  l*|L*) sim_endian=\"-DWITH_TARGET_BYTE_ORDER=BFD_ENDIAN_LITTLE\";;\n   *)\t as_fn_error $? \"\\\"Unknown value $enableval for --enable-sim-endian\\\"\" \"$LINENO\" 5; sim_endian=\"\";;\n esac\n if test x\"$silent\" != x\"yes\" && test x\"$sim_endian\" != x\"\"; then"
    },
    {
      "sha": "376c3ce07fa4ba9853209edc6e70a8f26927dd68",
      "filename": "sim/ppc/configure.ac",
      "status": "modified",
      "additions": 6,
      "deletions": 6,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/956f0babcd95bc7b6d2d79ea345abdd6f464e65f/sim/ppc/configure.ac",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/956f0babcd95bc7b6d2d79ea345abdd6f464e65f/sim/ppc/configure.ac",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/ppc/configure.ac?ref=956f0babcd95bc7b6d2d79ea345abdd6f464e65f",
      "patch": "@@ -110,13 +110,13 @@ AC_ARG_ENABLE(sim-endian,\n [  --enable-sim-endian=endian\t\tSpecify target byte endian orientation.],\n [case \"${enableval}\" in\n   yes)\tcase \"$target\" in\n-\t  *powerpc-*) sim_endian=\"-DWITH_TARGET_BYTE_ORDER=BIG_ENDIAN\";;\n-\t  *powerpcle-*) sim_endian=\"-DWITH_TARGET_BYTE_ORDER=LITTLE_ENDIAN\";;\n-\t  *) echo \"Unknown target $target\" 1>&6; sim_endian=\"-DWITH_TARGET_BYTE_ORDER=0\";;\n+\t  *powerpc-*) sim_endian=\"-DWITH_TARGET_BYTE_ORDER=BFD_ENDIAN_BIG\";;\n+\t  *powerpcle-*) sim_endian=\"-DWITH_TARGET_BYTE_ORDER=BFD_ENDIAN_LITTLE\";;\n+\t  *) echo \"Unknown target $target\" 1>&6; sim_endian=\"-DWITH_TARGET_BYTE_ORDER=BFD_ENDIAN_UNKNOWN\";;\n \tesac;;\n-  no)\t sim_endian=\"-DWITH_TARGET_BYTE_ORDER=0\";;\n-  b*|B*) sim_endian=\"-DWITH_TARGET_BYTE_ORDER=BIG_ENDIAN\";;\n-  l*|L*) sim_endian=\"-DWITH_TARGET_BYTE_ORDER=LITTLE_ENDIAN\";;\n+  no)\t sim_endian=\"-DWITH_TARGET_BYTE_ORDER=BFD_ENDIAN_UNKNOWN\";;\n+  b*|B*) sim_endian=\"-DWITH_TARGET_BYTE_ORDER=BFD_ENDIAN_BIG\";;\n+  l*|L*) sim_endian=\"-DWITH_TARGET_BYTE_ORDER=BFD_ENDIAN_LITTLE\";;\n   *)\t AC_MSG_ERROR(\"Unknown value $enableval for --enable-sim-endian\"); sim_endian=\"\";;\n esac\n if test x\"$silent\" != x\"yes\" && test x\"$sim_endian\" != x\"\"; then"
    },
    {
      "sha": "9d57bc6c01aec2b6c6ab6cb9e84ecd12e5930c24",
      "filename": "sim/ppc/emul_generic.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/956f0babcd95bc7b6d2d79ea345abdd6f464e65f/sim/ppc/emul_generic.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/956f0babcd95bc7b6d2d79ea345abdd6f464e65f/sim/ppc/emul_generic.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/ppc/emul_generic.c?ref=956f0babcd95bc7b6d2d79ea345abdd6f464e65f",
      "patch": "@@ -64,7 +64,7 @@ emul_read_gpr64(cpu *processor,\n {\n   unsigned32 hi;\n   unsigned32 lo;\n-  if (CURRENT_TARGET_BYTE_ORDER == BIG_ENDIAN) {\n+  if (CURRENT_TARGET_BYTE_ORDER == BFD_ENDIAN_BIG) {\n     hi = cpu_registers(processor)->gpr[g];\n     lo = cpu_registers(processor)->gpr[g+1];\n   }\n@@ -83,7 +83,7 @@ emul_write_gpr64(cpu *processor,\n {\n   unsigned32 hi = EXTRACTED64(val, 0, 31);\n   unsigned32 lo = EXTRACTED64(val, 32, 63);\n-  if (CURRENT_TARGET_BYTE_ORDER == BIG_ENDIAN) {\n+  if (CURRENT_TARGET_BYTE_ORDER == BFD_ENDIAN_BIG) {\n     cpu_registers(processor)->gpr[g] = hi;\n     cpu_registers(processor)->gpr[g+1] = lo;\n   }"
    },
    {
      "sha": "d20fb04e6caa6783c4ec636fbb20cd619c34be7b",
      "filename": "sim/ppc/options.c",
      "status": "modified",
      "additions": 3,
      "deletions": 4,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/956f0babcd95bc7b6d2d79ea345abdd6f464e65f/sim/ppc/options.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/956f0babcd95bc7b6d2d79ea345abdd6f464e65f/sim/ppc/options.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/ppc/options.c?ref=956f0babcd95bc7b6d2d79ea345abdd6f464e65f",
      "patch": "@@ -25,12 +25,11 @@\n \n STATIC_INLINE_OPTIONS\\\n (const char *)\n-options_byte_order (int order)\n+options_byte_order (enum bfd_endian order)\n {\n   switch (order) {\n-  case 0:\t\treturn \"0\";\n-  case BIG_ENDIAN:\treturn \"BIG_ENDIAN\";\n-  case LITTLE_ENDIAN:\treturn \"LITTLE_ENDIAN\";\n+  case BFD_ENDIAN_BIG:\t\treturn \"BIG_ENDIAN\";\n+  case BFD_ENDIAN_LITTLE:\treturn \"LITTLE_ENDIAN\";\n   }\n \n   return \"UNKNOWN\";"
    },
    {
      "sha": "e8c29fff46040e0d05f5081ca9894d124647935e",
      "filename": "sim/ppc/psim.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/956f0babcd95bc7b6d2d79ea345abdd6f464e65f/sim/ppc/psim.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/956f0babcd95bc7b6d2d79ea345abdd6f464e65f/sim/ppc/psim.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/ppc/psim.c?ref=956f0babcd95bc7b6d2d79ea345abdd6f464e65f",
      "patch": "@@ -63,7 +63,7 @@ struct _psim {\n };\n \n \n-int current_target_byte_order;\n+enum bfd_endian current_target_byte_order;\n int current_environment;\n int current_alignment;\n int current_floating_point;\n@@ -450,8 +450,8 @@ psim_create(const char *file_name,\n   /* fill in the missing TARGET BYTE ORDER information */\n   current_target_byte_order\n     = (tree_find_boolean_property(root, \"/options/little-endian?\")\n-       ? LITTLE_ENDIAN\n-       : BIG_ENDIAN);\n+       ? BFD_ENDIAN_LITTLE\n+       : BFD_ENDIAN_BIG);\n   if (CURRENT_TARGET_BYTE_ORDER != current_target_byte_order)\n     error(\"target and configured byte order conflict\\n\");\n "
    },
    {
      "sha": "a9b2e20782343eb277b9ca690c7730cb6a6ea514",
      "filename": "sim/ppc/sim-endian-n.h",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/956f0babcd95bc7b6d2d79ea345abdd6f464e65f/sim/ppc/sim-endian-n.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/956f0babcd95bc7b6d2d79ea345abdd6f464e65f/sim/ppc/sim-endian-n.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/ppc/sim-endian-n.h?ref=956f0babcd95bc7b6d2d79ea345abdd6f464e65f",
      "patch": "@@ -73,7 +73,7 @@ INLINE_PSIM_ENDIAN\\\n (unsigned_N)\n endian_h2be_N(unsigned_N raw_in)\n {\n-  if (HOST_BYTE_ORDER == BIG_ENDIAN) {\n+  if (HOST_BYTE_ORDER == BFD_ENDIAN_BIG) {\n     return raw_in;\n   }\n   else {\n@@ -86,7 +86,7 @@ INLINE_PSIM_ENDIAN\\\n (unsigned_N)\n endian_be2h_N(unsigned_N raw_in)\n {\n-  if (HOST_BYTE_ORDER == BIG_ENDIAN) {\n+  if (HOST_BYTE_ORDER == BFD_ENDIAN_BIG) {\n     return raw_in;\n   }\n   else {\n@@ -99,7 +99,7 @@ INLINE_PSIM_ENDIAN\\\n (unsigned_N)\n endian_h2le_N(unsigned_N raw_in)\n {\n-  if (HOST_BYTE_ORDER == LITTLE_ENDIAN) {\n+  if (HOST_BYTE_ORDER == BFD_ENDIAN_LITTLE) {\n     return raw_in;\n   }\n   else {\n@@ -112,7 +112,7 @@ INLINE_PSIM_ENDIAN\\\n (unsigned_N)\n endian_le2h_N(unsigned_N raw_in)\n {\n-  if (HOST_BYTE_ORDER == LITTLE_ENDIAN) {\n+  if (HOST_BYTE_ORDER == BFD_ENDIAN_LITTLE) {\n     return raw_in;\n   }\n   else {"
    },
    {
      "sha": "ee1e0839939b8e520cdb524377e8dbc7b9a8ca68",
      "filename": "sim/ppc/sim-endian.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/956f0babcd95bc7b6d2d79ea345abdd6f464e65f/sim/ppc/sim-endian.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/956f0babcd95bc7b6d2d79ea345abdd6f464e65f/sim/ppc/sim-endian.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/ppc/sim-endian.c?ref=956f0babcd95bc7b6d2d79ea345abdd6f464e65f",
      "patch": "@@ -32,15 +32,15 @@\n #define _SWAP_1(SET,RAW) SET (RAW)\n #endif\n \n-#if !defined(_SWAP_2) && (HOST_BYTE_ORDER == LITTLE_ENDIAN) && defined(htons)\n+#if !defined(_SWAP_2) && (HOST_BYTE_ORDER == BFD_ENDIAN_LITTLE) && defined(htons)\n #define _SWAP_2(SET,RAW) SET htons (RAW)\n #endif\n \n #ifndef\t_SWAP_2\n #define _SWAP_2(SET,RAW) SET (((RAW) >> 8) | ((RAW) << 8))\n #endif\n \n-#if !defined(_SWAP_4) && (HOST_BYTE_ORDER == LITTLE_ENDIAN) && defined(htonl)\n+#if !defined(_SWAP_4) && (HOST_BYTE_ORDER == BFD_ENDIAN_LITTLE) && defined(htonl)\n #define _SWAP_4(SET,RAW) SET htonl (RAW)\n #endif\n "
    },
    {
      "sha": "7b8f91138597ea0145ce51555d0e61efb2b6417d",
      "filename": "sim/ppc/std-config.h",
      "status": "modified",
      "additions": 10,
      "deletions": 15,
      "changes": 25,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/956f0babcd95bc7b6d2d79ea345abdd6f464e65f/sim/ppc/std-config.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/956f0babcd95bc7b6d2d79ea345abdd6f464e65f/sim/ppc/std-config.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/ppc/std-config.h?ref=956f0babcd95bc7b6d2d79ea345abdd6f464e65f",
      "patch": "@@ -21,36 +21,31 @@\n #ifndef _PSIM_CONFIG_H_\n #define _PSIM_CONFIG_H_\n \n+#include \"bfd.h\"\n \n /* endianness of the host/target:\n \n    If the build process is aware (at compile time) of the endianness\n    of the host/target it is able to eliminate slower generic endian\n    handling code.\n \n-   Possible values are 0 (unknown), LITTLE_ENDIAN, BIG_ENDIAN */\n-\n-#ifndef LITTLE_ENDIAN\n-#define LITTLE_ENDIAN 1234\n-#endif\n-#ifndef BIG_ENDIAN\n-#define BIG_ENDIAN 4321\n-#endif\n+   Possible values are BFD_ENDIAN_UNKNOWN, BFD_ENDIAN_LITTLE,\n+   BFD_ENDIAN_BIG.  */\n \n #ifdef WORDS_BIGENDIAN\n-# define HOST_BYTE_ORDER BIG_ENDIAN\n+# define HOST_BYTE_ORDER BFD_ENDIAN_BIG\n #else\n-# define HOST_BYTE_ORDER LITTLE_ENDIAN\n+# define HOST_BYTE_ORDER BFD_ENDIAN_LITTLE\n #endif\n \n #ifndef WITH_TARGET_BYTE_ORDER\n-#define WITH_TARGET_BYTE_ORDER\t\t0 /*unknown*/\n+#define WITH_TARGET_BYTE_ORDER\t\tBFD_ENDIAN_UNKNOWN\n #endif\n \n-extern int current_target_byte_order;\n-#define CURRENT_TARGET_BYTE_ORDER (WITH_TARGET_BYTE_ORDER \\\n-\t\t\t\t   ? WITH_TARGET_BYTE_ORDER \\\n-\t\t\t\t   : current_target_byte_order)\n+extern enum bfd_endian current_target_byte_order;\n+#define CURRENT_TARGET_BYTE_ORDER \\\n+  (WITH_TARGET_BYTE_ORDER != BFD_ENDIAN_UNKNOWN \\\n+   ? WITH_TARGET_BYTE_ORDER : current_target_byte_order)\n \n \n /* PowerPC XOR endian."
    },
    {
      "sha": "00f5f55e537f3c9e8ffbec769609815b1493fa0f",
      "filename": "sim/ppc/vm.c",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/956f0babcd95bc7b6d2d79ea345abdd6f464e65f/sim/ppc/vm.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/956f0babcd95bc7b6d2d79ea345abdd6f464e65f/sim/ppc/vm.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/ppc/vm.c?ref=956f0babcd95bc7b6d2d79ea345abdd6f464e65f",
      "patch": "@@ -974,8 +974,8 @@ vm_synchronize_context(vm *virtual,\n   if (WITH_XOR_ENDIAN) {\n     int i = 1;\n     unsigned mask;\n-    if ((little_endian && CURRENT_TARGET_BYTE_ORDER == LITTLE_ENDIAN)\n-\t|| (!little_endian && CURRENT_TARGET_BYTE_ORDER == BIG_ENDIAN))\n+    if ((little_endian && CURRENT_TARGET_BYTE_ORDER == BFD_ENDIAN_LITTLE)\n+\t|| (!little_endian && CURRENT_TARGET_BYTE_ORDER == BFD_ENDIAN_BIG))\n       mask = 0;\n     else\n       mask = WITH_XOR_ENDIAN - 1;\n@@ -988,8 +988,8 @@ vm_synchronize_context(vm *virtual,\n   }\n   else {\n     /* don't allow the processor to change endian modes */\n-    if ((little_endian && CURRENT_TARGET_BYTE_ORDER != LITTLE_ENDIAN)\n-\t|| (!little_endian && CURRENT_TARGET_BYTE_ORDER != BIG_ENDIAN))\n+    if ((little_endian && CURRENT_TARGET_BYTE_ORDER != BFD_ENDIAN_LITTLE)\n+\t|| (!little_endian && CURRENT_TARGET_BYTE_ORDER != BFD_ENDIAN_BIG))\n       cpu_error(processor, cia, \"attempt to change hardwired byte order\");\n   }\n }"
    }
  ]
}