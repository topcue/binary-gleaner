{
  "sha": "e214f8db56f65531b0a5ec296c42339dcaa5af31",
  "node_id": "C_kwDOANOeidoAKGUyMTRmOGRiNTZmNjU1MzFiMGE1ZWMyOTZjNDIzMzlkY2FhNWFmMzE",
  "commit": {
    "author": {
      "name": "liuzhensong",
      "email": "liuzhensong@loongson.cn",
      "date": "2021-10-22T08:42:03Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2021-10-24T11:06:31Z"
    },
    "message": "LoongArch bfd support\n\n2021-10-22  Chenghua Xu  <xuchenghua@loongson.cn>\n\t    Zhensong Liu  <liuzhensong@loongson.cn>\n\t    Weinan Liu  <liuweinan@loongson.cn>\nbfd/\n\t* Makefile.am: Add LoongArch.\n\t* archures.c: Likewise.\n\t* config.bfd: Likewise.\n\t* configure.ac: Likewise.\n\t* cpu-loongarch.c: New.\n\t* elf-bfd.h: Add LoongArch.\n\t* elf.c: Add LoongArch elfcore_grok_xxx.\n\t* elfnn-loongarch.c: New.\n\t* elfxx-loongarch.c: New.\n\t* elfxx-loongarch.h: New.\n\t* reloc.c: Add LoongArch BFD RELOC ENUM.\n\t* targets.c: Add LoongArch target.\n\t* Makefile.in: Regenerate.\n\t* bfd-in2.h: Regenerate.\n\t* configure: Regenerate.\n\t* libbfd.h: Regenerate.\n\t* po/BLD-POTFILES.in: Regenerate.\n\t* po/SRC-POTFILES.in: Regenerate.\n\ninclude/\n\t* elf/common.h: Add NT_LARCH_{CPUCFG,CSR,LSX,LASX}.\n\t* elf/loongarch.h: New.",
    "tree": {
      "sha": "98bd755197a63aaf79bda89bb3ea792e5a49aaab",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/98bd755197a63aaf79bda89bb3ea792e5a49aaab"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/e214f8db56f65531b0a5ec296c42339dcaa5af31",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e214f8db56f65531b0a5ec296c42339dcaa5af31",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/e214f8db56f65531b0a5ec296c42339dcaa5af31",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e214f8db56f65531b0a5ec296c42339dcaa5af31/comments",
  "author": null,
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "e515d93264b8c74993d8c9f3ac76bd6deaa666f8",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e515d93264b8c74993d8c9f3ac76bd6deaa666f8",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/e515d93264b8c74993d8c9f3ac76bd6deaa666f8"
    }
  ],
  "stats": {
    "total": 4522,
    "additions": 4519,
    "deletions": 3
  },
  "files": [
    {
      "sha": "097177bae5c36c734a50884ca6550cd38877b4fa",
      "filename": "bfd/Makefile.am",
      "status": "modified",
      "additions": 16,
      "deletions": 1,
      "changes": 17,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e214f8db56f65531b0a5ec296c42339dcaa5af31/bfd/Makefile.am",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e214f8db56f65531b0a5ec296c42339dcaa5af31/bfd/Makefile.am",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/Makefile.am?ref=e214f8db56f65531b0a5ec296c42339dcaa5af31",
      "patch": "@@ -118,6 +118,7 @@ ALL_MACHINES = \\\n \tcpu-ip2k.lo \\\n \tcpu-iq2000.lo \\\n \tcpu-lm32.lo \\\n+\tcpu-loongarch.lo \\\n \tcpu-m10200.lo \\\n \tcpu-m10300.lo \\\n \tcpu-m32c.lo \\\n@@ -202,6 +203,7 @@ ALL_MACHINES_CFILES = \\\n \tcpu-ip2k.c \\\n \tcpu-iq2000.c \\\n \tcpu-lm32.c \\\n+\tcpu-loongarch.c \\\n \tcpu-m10200.c \\\n \tcpu-m10300.c \\\n \tcpu-m32c.c \\\n@@ -548,6 +550,9 @@ BFD64_BACKENDS = \\\n \telf64-ia64.lo \\\n \telf64-ia64-vms.lo \\\n \telfxx-ia64.lo \\\n+\telf32-loongarch.lo \\\n+\telf64-loongarch.lo \\\n+\telfxx-loongarch.lo \\\n \telfn32-mips.lo \\\n \telf64-mips.lo \\\n \telfxx-mips.lo \\\n@@ -601,6 +606,7 @@ BFD64_BACKENDS_CFILES = \\\n \telfn32-mips.c \\\n \telfxx-aarch64.c \\\n \telfxx-ia64.c \\\n+\telfxx-loongarch.c \\\n \telfxx-mips.c \\\n \telfxx-riscv.c \\\n \tmach-o-aarch64.c \\\n@@ -665,6 +671,7 @@ SOURCE_CFILES = \\\n BUILD_CFILES = \\\n \telf32-aarch64.c elf64-aarch64.c \\\n \telf32-ia64.c elf64-ia64.c \\\n+\telf32-loongarch.c elf64-loongarch.c \\\n \telf32-riscv.c elf64-riscv.c \\\n \tpeigen.c pepigen.c pex64igen.c\n \n@@ -686,7 +693,7 @@ SOURCE_HFILES = \\\n \telf-bfd.h elfcode.h elfcore.h elf-hppa.h elf-linker-x86.h \\\n \telf-linux-core.h elf-nacl.h elf-s390.h elf-vxworks.h \\\n \telfxx-aarch64.h elfxx-ia64.h elfxx-mips.h elfxx-riscv.h \\\n-\telfxx-sparc.h elfxx-tilegx.h elfxx-x86.h \\\n+\telfxx-sparc.h elfxx-tilegx.h elfxx-x86.h elfxx-loongarch.h \\\n \tgenlink.h go32stub.h \\\n \tlibaout.h libbfd.h libcoff.h libecoff.h libhppa.h \\\n \tlibpei.h libxcoff.h \\\n@@ -842,6 +849,14 @@ elf64-ia64.c : elfnn-ia64.c\n \techo \"#line 1 \\\"elfnn-ia64.c\\\"\" > $@\n \t$(SED) -e s/NN/64/g < $< >> $@\n \n+elf32-loongarch.c : elfnn-loongarch.c\n+\techo \"#line 1 \\\"elfnn-loongarch.c\\\"\" > $@\n+\t$(SED) -e s/NN/32/g < $< >> $@\n+\n+elf64-loongarch.c : elfnn-loongarch.c\n+\techo \"#line 1 \\\"elfnn-loongarch.c\\\"\" > $@\n+\t$(SED) -e s/NN/64/g < $< >> $@\n+\n elf32-riscv.c : elfnn-riscv.c\n \techo \"#line 1 \\\"elfnn-riscv.c\\\"\" > $@\n \t$(SED) -e s/NN/32/g < $< >> $@"
    },
    {
      "sha": "a76b653247fd5b7d1fc8991ac5f8ad7fbb5eaba3",
      "filename": "bfd/Makefile.in",
      "status": "modified",
      "additions": 20,
      "deletions": 1,
      "changes": 21,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e214f8db56f65531b0a5ec296c42339dcaa5af31/bfd/Makefile.in",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e214f8db56f65531b0a5ec296c42339dcaa5af31/bfd/Makefile.in",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/Makefile.in?ref=e214f8db56f65531b0a5ec296c42339dcaa5af31",
      "patch": "@@ -543,6 +543,7 @@ ALL_MACHINES = \\\n \tcpu-ip2k.lo \\\n \tcpu-iq2000.lo \\\n \tcpu-lm32.lo \\\n+\tcpu-loongarch.lo \\\n \tcpu-m10200.lo \\\n \tcpu-m10300.lo \\\n \tcpu-m32c.lo \\\n@@ -627,6 +628,7 @@ ALL_MACHINES_CFILES = \\\n \tcpu-ip2k.c \\\n \tcpu-iq2000.c \\\n \tcpu-lm32.c \\\n+\tcpu-loongarch.c \\\n \tcpu-m10200.c \\\n \tcpu-m10300.c \\\n \tcpu-m32c.c \\\n@@ -975,6 +977,9 @@ BFD64_BACKENDS = \\\n \telf64-ia64.lo \\\n \telf64-ia64-vms.lo \\\n \telfxx-ia64.lo \\\n+\telf32-loongarch.lo \\\n+\telf64-loongarch.lo \\\n+\telfxx-loongarch.lo \\\n \telfn32-mips.lo \\\n \telf64-mips.lo \\\n \telfxx-mips.lo \\\n@@ -1028,6 +1033,7 @@ BFD64_BACKENDS_CFILES = \\\n \telfn32-mips.c \\\n \telfxx-aarch64.c \\\n \telfxx-ia64.c \\\n+\telfxx-loongarch.c \\\n \telfxx-mips.c \\\n \telfxx-riscv.c \\\n \tmach-o-aarch64.c \\\n@@ -1091,6 +1097,7 @@ SOURCE_CFILES = \\\n BUILD_CFILES = \\\n \telf32-aarch64.c elf64-aarch64.c \\\n \telf32-ia64.c elf64-ia64.c \\\n+\telf32-loongarch.c elf64-loongarch.c \\\n \telf32-riscv.c elf64-riscv.c \\\n \tpeigen.c pepigen.c pex64igen.c\n \n@@ -1109,7 +1116,7 @@ SOURCE_HFILES = \\\n \telf-bfd.h elfcode.h elfcore.h elf-hppa.h elf-linker-x86.h \\\n \telf-linux-core.h elf-nacl.h elf-s390.h elf-vxworks.h \\\n \telfxx-aarch64.h elfxx-ia64.h elfxx-mips.h elfxx-riscv.h \\\n-\telfxx-sparc.h elfxx-tilegx.h elfxx-x86.h \\\n+\telfxx-sparc.h elfxx-tilegx.h elfxx-x86.h elfxx-loongarch.h \\\n \tgenlink.h go32stub.h \\\n \tlibaout.h libbfd.h libcoff.h libecoff.h libhppa.h \\\n \tlibpei.h libxcoff.h \\\n@@ -1349,6 +1356,7 @@ distclean-compile:\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/cpu-k1om.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/cpu-l1om.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/cpu-lm32.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/cpu-loongarch.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/cpu-m10200.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/cpu-m10300.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/cpu-m32c.Plo@am__quote@\n@@ -1442,6 +1450,7 @@ distclean-compile:\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/elf32-ip2k.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/elf32-iq2000.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/elf32-lm32.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/elf32-loongarch.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/elf32-m32c.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/elf32-m32r.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/elf32-m68hc11.Plo@am__quote@\n@@ -1492,6 +1501,7 @@ distclean-compile:\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/elf64-hppa.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/elf64-ia64-vms.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/elf64-ia64.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/elf64-loongarch.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/elf64-mips.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/elf64-mmix.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/elf64-nfp.Plo@am__quote@\n@@ -1506,6 +1516,7 @@ distclean-compile:\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/elfn32-mips.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/elfxx-aarch64.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/elfxx-ia64.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/elfxx-loongarch.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/elfxx-mips.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/elfxx-riscv.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/elfxx-sparc.Plo@am__quote@\n@@ -1972,6 +1983,14 @@ elf64-ia64.c : elfnn-ia64.c\n \techo \"#line 1 \\\"elfnn-ia64.c\\\"\" > $@\n \t$(SED) -e s/NN/64/g < $< >> $@\n \n+elf32-loongarch.c : elfnn-loongarch.c\n+\techo \"#line 1 \\\"elfnn-loongarch.c\\\"\" > $@\n+\t$(SED) -e s/NN/32/g < $< >> $@\n+\n+elf64-loongarch.c : elfnn-loongarch.c\n+\techo \"#line 1 \\\"elfnn-loongarch.c\\\"\" > $@\n+\t$(SED) -e s/NN/64/g < $< >> $@\n+\n elf32-riscv.c : elfnn-riscv.c\n \techo \"#line 1 \\\"elfnn-riscv.c\\\"\" > $@\n \t$(SED) -e s/NN/32/g < $< >> $@"
    },
    {
      "sha": "6c9be913b5f4c121aeb39507b2ae81e6dc2a487a",
      "filename": "bfd/archures.c",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e214f8db56f65531b0a5ec296c42339dcaa5af31/bfd/archures.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e214f8db56f65531b0a5ec296c42339dcaa5af31/bfd/archures.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/archures.c?ref=e214f8db56f65531b0a5ec296c42339dcaa5af31",
      "patch": "@@ -555,6 +555,9 @@ DESCRIPTION\n .#define bfd_mach_ck807\t\t6\n .#define bfd_mach_ck810\t\t7\n .#define bfd_mach_ck860\t\t8\n+.  bfd_arch_loongarch,       {* LoongArch *}\n+.#define bfd_mach_loongarch32\t1\n+.#define bfd_mach_loongarch64\t2\n .  bfd_arch_last\n .  };\n */\n@@ -635,6 +638,7 @@ extern const bfd_arch_info_type bfd_iq2000_arch;\n extern const bfd_arch_info_type bfd_k1om_arch;\n extern const bfd_arch_info_type bfd_l1om_arch;\n extern const bfd_arch_info_type bfd_lm32_arch;\n+extern const bfd_arch_info_type bfd_loongarch_arch;\n extern const bfd_arch_info_type bfd_m32c_arch;\n extern const bfd_arch_info_type bfd_m32r_arch;\n extern const bfd_arch_info_type bfd_m68hc11_arch;\n@@ -724,6 +728,7 @@ static const bfd_arch_info_type * const bfd_archures_list[] =\n     &bfd_k1om_arch,\n     &bfd_l1om_arch,\n     &bfd_lm32_arch,\n+    &bfd_loongarch_arch,\n     &bfd_m32c_arch,\n     &bfd_m32r_arch,\n     &bfd_m68hc11_arch,"
    },
    {
      "sha": "91888ef1852a8df07a8cb0aad2f6a24649f215da",
      "filename": "bfd/bfd-in2.h",
      "status": "modified",
      "additions": 48,
      "deletions": 0,
      "changes": 48,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e214f8db56f65531b0a5ec296c42339dcaa5af31/bfd/bfd-in2.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e214f8db56f65531b0a5ec296c42339dcaa5af31/bfd/bfd-in2.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/bfd-in2.h?ref=e214f8db56f65531b0a5ec296c42339dcaa5af31",
      "patch": "@@ -1937,6 +1937,9 @@ enum bfd_architecture\n #define bfd_mach_ck807         6\n #define bfd_mach_ck810         7\n #define bfd_mach_ck860         8\n+  bfd_arch_loongarch,       /* LoongArch */\n+#define bfd_mach_loongarch32   1\n+#define bfd_mach_loongarch64   2\n   bfd_arch_last\n   };\n \n@@ -6268,6 +6271,51 @@ assembler and not (currently) written to any object files.  */\n \n /* S12Z relocations.  */\n   BFD_RELOC_S12Z_OPR,\n+\n+/* LARCH relocations.  */\n+  BFD_RELOC_LARCH_TLS_DTPMOD32,\n+  BFD_RELOC_LARCH_TLS_DTPREL32,\n+  BFD_RELOC_LARCH_TLS_DTPMOD64,\n+  BFD_RELOC_LARCH_TLS_DTPREL64,\n+  BFD_RELOC_LARCH_TLS_TPREL32,\n+  BFD_RELOC_LARCH_TLS_TPREL64,\n+  BFD_RELOC_LARCH_MARK_LA,\n+  BFD_RELOC_LARCH_MARK_PCREL,\n+  BFD_RELOC_LARCH_SOP_PUSH_PCREL,\n+  BFD_RELOC_LARCH_SOP_PUSH_ABSOLUTE,\n+  BFD_RELOC_LARCH_SOP_PUSH_DUP,\n+  BFD_RELOC_LARCH_SOP_PUSH_GPREL,\n+  BFD_RELOC_LARCH_SOP_PUSH_TLS_TPREL,\n+  BFD_RELOC_LARCH_SOP_PUSH_TLS_GOT,\n+  BFD_RELOC_LARCH_SOP_PUSH_TLS_GD,\n+  BFD_RELOC_LARCH_SOP_PUSH_PLT_PCREL,\n+  BFD_RELOC_LARCH_SOP_ASSERT,\n+  BFD_RELOC_LARCH_SOP_NOT,\n+  BFD_RELOC_LARCH_SOP_SUB,\n+  BFD_RELOC_LARCH_SOP_SL,\n+  BFD_RELOC_LARCH_SOP_SR,\n+  BFD_RELOC_LARCH_SOP_ADD,\n+  BFD_RELOC_LARCH_SOP_AND,\n+  BFD_RELOC_LARCH_SOP_IF_ELSE,\n+  BFD_RELOC_LARCH_SOP_POP_32_S_10_5,\n+  BFD_RELOC_LARCH_SOP_POP_32_U_10_12,\n+  BFD_RELOC_LARCH_SOP_POP_32_S_10_12,\n+  BFD_RELOC_LARCH_SOP_POP_32_S_10_16,\n+  BFD_RELOC_LARCH_SOP_POP_32_S_10_16_S2,\n+  BFD_RELOC_LARCH_SOP_POP_32_S_5_20,\n+  BFD_RELOC_LARCH_SOP_POP_32_S_0_5_10_16_S2,\n+  BFD_RELOC_LARCH_SOP_POP_32_S_0_10_10_16_S2,\n+  BFD_RELOC_LARCH_SOP_POP_32_U,\n+  BFD_RELOC_LARCH_ADD8,\n+  BFD_RELOC_LARCH_ADD16,\n+  BFD_RELOC_LARCH_ADD24,\n+  BFD_RELOC_LARCH_ADD32,\n+  BFD_RELOC_LARCH_ADD64,\n+  BFD_RELOC_LARCH_SUB8,\n+  BFD_RELOC_LARCH_SUB16,\n+  BFD_RELOC_LARCH_SUB24,\n+  BFD_RELOC_LARCH_SUB32,\n+  BFD_RELOC_LARCH_SUB64,\n   BFD_RELOC_UNUSED };\n \n typedef enum bfd_reloc_code_real bfd_reloc_code_real_type;"
    },
    {
      "sha": "3cf322713334cfdeaebc671f48fd321558a4f279",
      "filename": "bfd/config.bfd",
      "status": "modified",
      "additions": 15,
      "deletions": 0,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e214f8db56f65531b0a5ec296c42339dcaa5af31/bfd/config.bfd",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e214f8db56f65531b0a5ec296c42339dcaa5af31/bfd/config.bfd",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/config.bfd?ref=e214f8db56f65531b0a5ec296c42339dcaa5af31",
      "patch": "@@ -197,6 +197,7 @@ hppa*)\t\t targ_archs=bfd_hppa_arch ;;\n i[3-7]86)\t targ_archs=bfd_i386_arch ;;\n ia16)\t\t targ_archs=bfd_i386_arch ;;\n lm32)\t         targ_archs=bfd_lm32_arch ;;\n+loongarch*)\t targ_archs=bfd_loongarch_arch ;;\n m6811*|m68hc11*) targ_archs=\"bfd_m68hc11_arch bfd_m68hc12_arch bfd_m9s12x_arch bfd_m9s12xg_arch\" ;;\n m6812*|m68hc12*) targ_archs=\"bfd_m68hc12_arch bfd_m68hc11_arch bfd_m9s12x_arch bfd_m9s12xg_arch\" ;;\n m68*)\t\t targ_archs=bfd_m68k_arch ;;\n@@ -1458,6 +1459,20 @@ case \"${targ}\" in\n     targ_underscore=yes\n     ;;\n \n+#ifdef BFD64\n+  loongarch32-*)\n+    targ_defvec=loongarch_elf32_vec\n+    targ_selvecs=\"loongarch_elf32_vec\"\n+    want64=false\n+    ;;\n+\n+  loongarch64-*)\n+    targ_defvec=loongarch_elf64_vec\n+    targ_selvecs=\"loongarch_elf32_vec loongarch_elf64_vec\"\n+    want64=true\n+    ;;\n+#endif\n+\n # END OF targmatch.h\n   bpf-*-*)\n     echo \"*** Configuration $targ is not fully supported.\" >&2"
    },
    {
      "sha": "58449ee8a608e3f3ac1d4ad376992d41f87f404e",
      "filename": "bfd/configure",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e214f8db56f65531b0a5ec296c42339dcaa5af31/bfd/configure",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e214f8db56f65531b0a5ec296c42339dcaa5af31/bfd/configure",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/configure?ref=e214f8db56f65531b0a5ec296c42339dcaa5af31",
      "patch": "@@ -13348,6 +13348,8 @@ do\n     l1om_elf64_fbsd_vec)\t tb=\"$tb elf64-x86-64.lo elfxx-x86.lo elf-ifunc.lo elf64.lo $elf\"; target_size=64 ;;\n     lm32_elf32_vec)\t\t tb=\"$tb elf32-lm32.lo elf32.lo $elf\" ;;\n     lm32_elf32_fdpic_vec)\t tb=\"$tb elf32-lm32.lo elf32.lo $elf\" ;;\n+    loongarch_elf32_vec)\t tb=\"$tb elf32-loongarch.lo elfxx-loongarch.lo elf32.lo elf-ifunc.lo $elf\" ;;\n+    loongarch_elf64_vec)\t tb=\"$tb elf64-loongarch.lo elf64.lo elfxx-loongarch.lo elf32.lo elf-ifunc.lo $elf\"; target_size=64 ;;\n     m32c_elf32_vec)\t\t tb=\"$tb elf32-m32c.lo elf32.lo $elf\" ;;\n     m32r_elf32_vec)\t\t tb=\"$tb elf32-m32r.lo elf32.lo $elf\" ;;\n     m32r_elf32_le_vec)\t\t tb=\"$tb elf32-m32r.lo elf32.lo $elf\" ;;"
    },
    {
      "sha": "50ba391fff3988717a7760489508ec0d388459b5",
      "filename": "bfd/configure.ac",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e214f8db56f65531b0a5ec296c42339dcaa5af31/bfd/configure.ac",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e214f8db56f65531b0a5ec296c42339dcaa5af31/bfd/configure.ac",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/configure.ac?ref=e214f8db56f65531b0a5ec296c42339dcaa5af31",
      "patch": "@@ -527,6 +527,8 @@ do\n     l1om_elf64_fbsd_vec)\t tb=\"$tb elf64-x86-64.lo elfxx-x86.lo elf-ifunc.lo elf64.lo $elf\"; target_size=64 ;;\n     lm32_elf32_vec)\t\t tb=\"$tb elf32-lm32.lo elf32.lo $elf\" ;;\n     lm32_elf32_fdpic_vec)\t tb=\"$tb elf32-lm32.lo elf32.lo $elf\" ;;\n+    loongarch_elf32_vec)\t tb=\"$tb elf32-loongarch.lo elfxx-loongarch.lo elf32.lo elf-ifunc.lo $elf\" ;;\n+    loongarch_elf64_vec)\t tb=\"$tb elf64-loongarch.lo elf64.lo elfxx-loongarch.lo elf32.lo elf-ifunc.lo $elf\"; target_size=64 ;;\n     m32c_elf32_vec)\t\t tb=\"$tb elf32-m32c.lo elf32.lo $elf\" ;;\n     m32r_elf32_vec)\t\t tb=\"$tb elf32-m32r.lo elf32.lo $elf\" ;;\n     m32r_elf32_le_vec)\t\t tb=\"$tb elf32-m32r.lo elf32.lo $elf\" ;;"
    },
    {
      "sha": "bf6702a8328acf877524865735b37b03b68bcf57",
      "filename": "bfd/cpu-loongarch.c",
      "status": "added",
      "additions": 61,
      "deletions": 0,
      "changes": 61,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e214f8db56f65531b0a5ec296c42339dcaa5af31/bfd/cpu-loongarch.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e214f8db56f65531b0a5ec296c42339dcaa5af31/bfd/cpu-loongarch.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/cpu-loongarch.c?ref=e214f8db56f65531b0a5ec296c42339dcaa5af31",
      "patch": "@@ -0,0 +1,61 @@\n+/* BFD support for LoongArch.\n+   Copyright (C) 2021 Free Software Foundation, Inc.\n+   Contributed by Loongson Ltd.\n+\n+   This file is part of BFD, the Binary File Descriptor library.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program; see the file COPYING3.  If not,\n+   see <http://www.gnu.org/licenses/>.  */\n+\n+#include \"sysdep.h\"\n+#include \"bfd.h\"\n+#include \"libbfd.h\"\n+\n+static const bfd_arch_info_type bfd_loongarch32_arch =\n+{\n+  32,\t\t\t\t/* 32 bits in a word.  */\n+  32,\t\t\t\t/* 64 bits in an address.  */\n+  8,\t\t\t\t/* 8 bits in a byte.  */\n+  bfd_arch_loongarch,\t\t/* Architecture.  */\n+  bfd_mach_loongarch32, \t/* Machine number - 0 for now.  */\n+  \"loongarch32\",\t\t/* Architecture name.  */\n+  \"Loongarch32\",\t\t/* Printable name.  */\n+  3,\t\t\t\t/* Section align power.  */\n+  false,\t\t\t/* This is the default architecture.  */\n+  bfd_default_compatible,\t/* Architecture comparison function.  */\n+  bfd_default_scan,\t\t/* String to architecture conversion.  */\n+  bfd_arch_default_fill,\t/* Default fill.  */\n+  NULL, \t\t\t/* Next in list.  */\n+  0,\n+};\n+\n+const bfd_arch_info_type bfd_loongarch_arch =\n+{\n+  32,\t\t\t\t/* 32 bits in a word.  */\n+  64,\t\t\t\t/* 64 bits in an address.  */\n+  8,\t\t\t\t/* 8 bits in a byte.  */\n+  bfd_arch_loongarch,\t\t/* Architecture.  */\n+  /* Machine number of LoongArch64 is larger\n+   * so that LoongArch64 is compatible to LoongArch32.  */\n+  bfd_mach_loongarch64,\n+  \"loongarch64\",\t\t/* Architecture name.  */\n+  \"Loongarch64\",\t\t/* Printable name.  */\n+  3,\t\t\t\t/* Section align power.  */\n+  true, \t\t\t/* This is the default architecture.  */\n+  bfd_default_compatible,\t/* Architecture comparison function.  */\n+  bfd_default_scan,\t\t/* String to architecture conversion.  */\n+  bfd_arch_default_fill,\t/* Default fill.  */\n+  &bfd_loongarch32_arch,\t/* Next in list.  */\n+  0,\n+};"
    },
    {
      "sha": "91bb1b2b8bdd48e05cca93f20f1f309cadef2808",
      "filename": "bfd/elf-bfd.h",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e214f8db56f65531b0a5ec296c42339dcaa5af31/bfd/elf-bfd.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e214f8db56f65531b0a5ec296c42339dcaa5af31/bfd/elf-bfd.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf-bfd.h?ref=e214f8db56f65531b0a5ec296c42339dcaa5af31",
      "patch": "@@ -508,6 +508,7 @@ enum elf_target_id\n   I386_ELF_DATA,\n   IA64_ELF_DATA,\n   LM32_ELF_DATA,\n+  LARCH_ELF_DATA,\n   M32R_ELF_DATA,\n   M68HC11_ELF_DATA,\n   M68K_ELF_DATA,\n@@ -2849,6 +2850,14 @@ extern char *elfcore_write_register_note\n   (bfd *, char *, int *, const char *, const void *, int);\n extern char *elfcore_write_file_note\n   (bfd *, char *, int *, const void*, int);\n+extern char *elfcore_write_loongarch_cpucfg\n+  (bfd *, char *, int *, const void*, int);\n+extern char *elfcore_write_loongarch_lbt\n+  (bfd *, char *, int *, const void*, int);\n+extern char *elfcore_write_loongarch_lsx\n+  (bfd *, char *, int *, const void*, int);\n+extern char *elfcore_write_loongarch_lasx\n+  (bfd *, char *, int *, const void*, int);\n \n /* Internal structure which holds information to be included in the\n    PRPSINFO section of Linux core files."
    },
    {
      "sha": "cd8280e5551f3ed4cd2306db3a5e30238a21b59d",
      "filename": "bfd/elf.c",
      "status": "modified",
      "additions": 109,
      "deletions": 0,
      "changes": 109,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e214f8db56f65531b0a5ec296c42339dcaa5af31/bfd/elf.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e214f8db56f65531b0a5ec296c42339dcaa5af31/bfd/elf.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf.c?ref=e214f8db56f65531b0a5ec296c42339dcaa5af31",
      "patch": "@@ -9951,6 +9951,30 @@ elfcore_grok_gdb_tdesc (bfd *abfd, Elf_Internal_Note *note)\n   return elfcore_make_note_pseudosection (abfd, \".gdb-tdesc\", note);\n }\n \n+static bool\n+elfcore_grok_loongarch_cpucfg (bfd *abfd, Elf_Internal_Note *note)\n+{\n+  return elfcore_make_note_pseudosection (abfd, \".reg-loongarch-cpucfg\", note);\n+}\n+\n+static bool\n+elfcore_grok_loongarch_lbt (bfd *abfd, Elf_Internal_Note *note)\n+{\n+  return elfcore_make_note_pseudosection (abfd, \".reg-loongarch-lbt\", note);\n+}\n+\n+static bool\n+elfcore_grok_loongarch_lsx (bfd *abfd, Elf_Internal_Note *note)\n+{\n+  return elfcore_make_note_pseudosection (abfd, \".reg-loongarch-lsx\", note);\n+}\n+\n+static bool\n+elfcore_grok_loongarch_lasx (bfd *abfd, Elf_Internal_Note *note)\n+{\n+  return elfcore_make_note_pseudosection (abfd, \".reg-loongarch-lasx\", note);\n+}\n+\n #if defined (HAVE_PRPSINFO_T)\n typedef prpsinfo_t   elfcore_psinfo_t;\n #if defined (HAVE_PRPSINFO32_T)\t\t/* Sparc64 cross Sparc32 */\n@@ -10630,6 +10654,34 @@ elfcore_grok_note (bfd *abfd, Elf_Internal_Note *note)\n       else\n \treturn true;\n \n+    case NT_LARCH_CPUCFG:\n+      if (note->namesz == 6\n+\t  && strcmp (note->namedata, \"LINUX\") == 0)\n+\treturn elfcore_grok_loongarch_cpucfg (abfd, note);\n+      else\n+\treturn true;\n+\n+    case NT_LARCH_LBT:\n+      if (note->namesz == 6\n+\t  && strcmp (note->namedata, \"LINUX\") == 0)\n+\treturn elfcore_grok_loongarch_lbt (abfd, note);\n+      else\n+\treturn true;\n+\n+    case NT_LARCH_LSX:\n+      if (note->namesz == 6\n+\t  && strcmp (note->namedata, \"LINUX\") == 0)\n+\treturn elfcore_grok_loongarch_lsx (abfd, note);\n+      else\n+\treturn true;\n+\n+    case NT_LARCH_LASX:\n+      if (note->namesz == 6\n+\t  && strcmp (note->namedata, \"LINUX\") == 0)\n+\treturn elfcore_grok_loongarch_lasx (abfd, note);\n+      else\n+\treturn true;\n+\n     case NT_PRPSINFO:\n     case NT_PSINFO:\n       if (bed->elf_backend_grok_psinfo)\n@@ -12210,6 +12262,55 @@ elfcore_write_arc_v2 (bfd *abfd,\n \t\t\t     note_name, NT_ARC_V2, arc_v2, size);\n }\n \n+char *\n+elfcore_write_loongarch_cpucfg (bfd *abfd,\n+\t\t\t\tchar *buf,\n+\t\t\t\tint *bufsiz,\n+\t\t\t\tconst void *loongarch_cpucfg,\n+\t\t\t\tint size)\n+{\n+  char *note_name = \"LINUX\";\n+  return elfcore_write_note (abfd, buf, bufsiz,\n+\t\t\t     note_name, NT_LARCH_CPUCFG,\n+\t\t\t     loongarch_cpucfg, size);\n+}\n+\n+char *\n+elfcore_write_loongarch_lbt (bfd *abfd,\n+\t\t\t     char *buf,\n+\t\t\t     int *bufsiz,\n+\t\t\t     const void *loongarch_lbt,\n+\t\t\t     int size)\n+{\n+  char *note_name = \"LINUX\";\n+  return elfcore_write_note (abfd, buf, bufsiz,\n+\t\t\t     note_name, NT_LARCH_LBT, loongarch_lbt, size);\n+}\n+\n+char *\n+elfcore_write_loongarch_lsx (bfd *abfd,\n+\t\t\t     char *buf,\n+\t\t\t     int *bufsiz,\n+\t\t\t     const void *loongarch_lsx,\n+\t\t\t     int size)\n+{\n+  char *note_name = \"LINUX\";\n+  return elfcore_write_note (abfd, buf, bufsiz,\n+\t\t\t     note_name, NT_LARCH_LSX, loongarch_lsx, size);\n+}\n+\n+char *\n+elfcore_write_loongarch_lasx (bfd *abfd,\n+\t\t\t      char *buf,\n+\t\t\t      int *bufsiz,\n+\t\t\t      const void *loongarch_lasx,\n+\t\t\t      int size)\n+{\n+  char *note_name = \"LINUX\";\n+  return elfcore_write_note (abfd, buf, bufsiz,\n+\t\t\t     note_name, NT_LARCH_LASX, loongarch_lasx, size);\n+}\n+\n /* Write the buffer of csr values in CSRS (length SIZE) into the note\n    buffer BUF and update *BUFSIZ.  ABFD is the bfd the note is being\n    written into.  Return a pointer to the new start of the note buffer, to\n@@ -12334,6 +12435,14 @@ elfcore_write_register_note (bfd *abfd,\n     return elfcore_write_gdb_tdesc (abfd, buf, bufsiz, data, size);\n   if (strcmp (section, \".reg-riscv-csr\") == 0)\n     return elfcore_write_riscv_csr (abfd, buf, bufsiz, data, size);\n+  if (strcmp (section, \".reg-loongarch-cpucfg\") == 0)\n+    return elfcore_write_loongarch_cpucfg (abfd, buf, bufsiz, data, size);\n+  if (strcmp (section, \".reg-loongarch-lbt\") == 0)\n+    return elfcore_write_loongarch_lbt (abfd, buf, bufsiz, data, size);\n+  if (strcmp (section, \".reg-loongarch-lsx\") == 0)\n+    return elfcore_write_loongarch_lsx (abfd, buf, bufsiz, data, size);\n+  if (strcmp (section, \".reg-loongarch-lasx\") == 0)\n+    return elfcore_write_loongarch_lasx (abfd, buf, bufsiz, data, size);\n   return NULL;\n }\n "
    },
    {
      "sha": "406bbcf32e0a8ab427eb4f0c44d44fefae98c789",
      "filename": "bfd/elfnn-loongarch.c",
      "status": "added",
      "additions": 3265,
      "deletions": 0,
      "changes": 3265,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e214f8db56f65531b0a5ec296c42339dcaa5af31/bfd/elfnn-loongarch.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e214f8db56f65531b0a5ec296c42339dcaa5af31/bfd/elfnn-loongarch.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elfnn-loongarch.c?ref=e214f8db56f65531b0a5ec296c42339dcaa5af31"
    },
    {
      "sha": "a0de51f62354a2fb0e279581b4d483f5a0feddb7",
      "filename": "bfd/elfxx-loongarch.c",
      "status": "added",
      "additions": 661,
      "deletions": 0,
      "changes": 661,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e214f8db56f65531b0a5ec296c42339dcaa5af31/bfd/elfxx-loongarch.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e214f8db56f65531b0a5ec296c42339dcaa5af31/bfd/elfxx-loongarch.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elfxx-loongarch.c?ref=e214f8db56f65531b0a5ec296c42339dcaa5af31",
      "patch": "@@ -0,0 +1,661 @@\n+/* LoongArch-specific support for ELF.\n+   Copyright (C) 2021 Free Software Foundation, Inc.\n+   Contributed by Loongson Ltd.\n+\n+   Based on RISC-V target.\n+\n+   This file is part of BFD, the Binary File Descriptor library.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program; see the file COPYING3.  If not,\n+   see <http://www.gnu.org/licenses/>.  */\n+\n+#include \"sysdep.h\"\n+#include \"bfd.h\"\n+#include \"libbfd.h\"\n+#include \"elf-bfd.h\"\n+#include \"elf/loongarch.h\"\n+#include \"elfxx-loongarch.h\"\n+\n+#define ALL_ONES (~ (bfd_vma) 0)\n+\n+/* This does not include any relocation information, but should be\n+   good enough for GDB or objdump to read the file.  */\n+\n+static reloc_howto_type howto_table[] =\n+{\n+#define LOONGARCH_HOWTO(r_name)\t\t\t\t\t\t \\\n+  HOWTO (R_LARCH_##r_name, 0, 2, 32, false, 0, complain_overflow_signed, \\\n+\t bfd_elf_generic_reloc, \"R_LARCH_\" #r_name, false, 0, 0xffffffff, false)\n+\n+  /* No relocation.  */\n+  HOWTO (R_LARCH_NONE,\t\t\t/* type (0).  */\n+\t 0,\t\t\t\t/* rightshift */\n+\t 3,\t\t\t\t/* size */\n+\t 0,\t\t\t\t/* bitsize */\n+\t false,\t\t\t\t/* pc_relative */\n+\t 0,\t\t\t\t/* bitpos */\n+\t complain_overflow_dont,\t/* complain_on_overflow */\n+\t bfd_elf_generic_reloc,\t\t/* special_function */\n+\t \"R_LARCH_NONE\",\t\t/* name */\n+\t false,\t\t\t\t/* partial_inplace */\n+\t 0,\t\t\t\t/* src_mask */\n+\t 0,\t\t\t\t/* dst_mask */\n+\t false),\t\t\t/* pcrel_offset */\n+\n+  /* 32 bit relocation.  */\n+  HOWTO (R_LARCH_32,\t\t\t/* type (1).  */\n+\t 0,\t\t\t\t/* rightshift */\n+\t 2,\t\t\t\t/* size */\n+\t 32,\t\t\t\t/* bitsize */\n+\t false,\t\t\t\t/* pc_relative */\n+\t 0,\t\t\t\t/* bitpos */\n+\t complain_overflow_dont,\t/* complain_on_overflow */\n+\t bfd_elf_generic_reloc,\t\t/* special_function */\n+\t \"R_LARCH_32\",\t\t\t/* name */\n+\t false,\t\t\t\t/* partial_inplace */\n+\t 0,\t\t\t\t/* src_mask */\n+\t 0xffffffff,\t\t\t/* dst_mask */\n+\t false),\t\t\t/* pcrel_offset */\n+\n+  /* 64 bit relocation.  */\n+  HOWTO (R_LARCH_64,\t\t\t/* type (2).  */\n+\t 0,\t\t\t\t/* rightshift */\n+\t 4,\t\t\t\t/* size */\n+\t 64,\t\t\t\t/* bitsize */\n+\t false,\t\t\t\t/* pc_relative */\n+\t 0,\t\t\t\t/* bitpos */\n+\t complain_overflow_dont,\t/* complain_on_overflow */\n+\t bfd_elf_generic_reloc,\t\t/* special_function */\n+\t \"R_LARCH_64\",\t\t\t/* name */\n+\t false,\t\t\t\t/* partial_inplace */\n+\t 0,\t\t\t\t/* src_mask */\n+\t ALL_ONES,\t\t\t/* dst_mask */\n+\t false),\t\t\t/* pcrel_offset */\n+\n+  HOWTO (R_LARCH_RELATIVE,\t\t/* type (3).  */\n+\t 0,\t\t\t\t/* rightshift */\n+\t 2,\t\t\t\t/* size */\n+\t 32,\t\t\t\t/* bitsize */\n+\t false,\t\t\t\t/* pc_relative */\n+\t 0,\t\t\t\t/* bitpos */\n+\t complain_overflow_dont,\t/* complain_on_overflow */\n+\t bfd_elf_generic_reloc,\t\t/* special_function */\n+\t \"R_LARCH_RELATIVE\",\t\t/* name */\n+\t false,\t\t\t\t/* partial_inplace */\n+\t 0,\t\t\t\t/* src_mask */\n+\t 0xffffffff,\t\t\t/* dst_mask */\n+\t false),\t\t\t/* pcrel_offset */\n+\n+  HOWTO (R_LARCH_COPY,\t\t\t/* type (4).  */\n+\t 0,\t\t\t\t/* rightshift */\n+\t 0,\t\t\t\t/* this one is variable size */\n+\t 0,\t\t\t\t/* bitsize */\n+\t false,\t\t\t\t/* pc_relative */\n+\t 0,\t\t\t\t/* bitpos */\n+\t complain_overflow_bitfield,\t/* complain_on_overflow */\n+\t bfd_elf_generic_reloc,\t\t/* special_function */\n+\t \"R_LARCH_COPY\",\t\t/* name */\n+\t false,\t\t\t\t/* partial_inplace */\n+\t 0,\t\t\t\t/* src_mask */\n+\t 0,\t\t\t\t/* dst_mask */\n+\t false),\t\t\t/* pcrel_offset */\n+\n+  HOWTO (R_LARCH_JUMP_SLOT,\t\t/* type (5).  */\n+\t 0,\t\t\t\t/* rightshift */\n+\t 4,\t\t\t\t/* size */\n+\t 64,\t\t\t\t/* bitsize */\n+\t false,\t\t\t\t/* pc_relative */\n+\t 0,\t\t\t\t/* bitpos */\n+\t complain_overflow_bitfield,\t/* complain_on_overflow */\n+\t bfd_elf_generic_reloc,\t\t/* special_function */\n+\t \"R_LARCH_JUMP_SLOT\",\t\t/* name */\n+\t false,\t\t\t\t/* partial_inplace */\n+\t 0,\t\t\t\t/* src_mask */\n+\t 0,\t\t\t\t/* dst_mask */\n+\t false),\t\t\t/* pcrel_offset */\n+\n+  /* Dynamic TLS relocations.  */\n+  HOWTO (R_LARCH_TLS_DTPMOD32,\t\t/* type (6).  */\n+\t 0,\t\t\t\t/* rightshift */\n+\t 2,\t\t\t\t/* size */\n+\t 32,\t\t\t\t/* bitsize */\n+\t false,\t\t\t\t/* pc_relative */\n+\t 0,\t\t\t\t/* bitpos */\n+\t complain_overflow_dont,\t/* complain_on_overflow */\n+\t bfd_elf_generic_reloc,\t\t/* special_function */\n+\t \"R_LARCH_TLS_DTPMOD32\",\t/* name */\n+\t false,\t\t\t\t/* partial_inplace */\n+\t 0,\t\t\t\t/* src_mask */\n+\t 0xffffffff,\t\t\t/* dst_mask */\n+\t false),\t\t\t/* pcrel_offset */\n+\n+  HOWTO (R_LARCH_TLS_DTPMOD64,\t\t/* type (7).  */\n+\t 0,\t\t\t\t/* rightshift */\n+\t 4,\t\t\t\t/* size */\n+\t 64,\t\t\t\t/* bitsize */\n+\t false,\t\t\t\t/* pc_relative */\n+\t 0,\t\t\t\t/* bitpos */\n+\t complain_overflow_dont,\t/* complain_on_overflow */\n+\t bfd_elf_generic_reloc,\t\t/* special_function */\n+\t \"R_LARCH_TLS_DTPMOD64\",\t/* name */\n+\t false,\t\t\t\t/* partial_inplace */\n+\t 0,\t\t\t\t/* src_mask */\n+\t ALL_ONES,\t\t\t/* dst_mask */\n+\t false),\t\t\t/* pcrel_offset */\n+\n+  HOWTO (R_LARCH_TLS_DTPREL32,\t\t/* type (8). */\n+\t 0,\t\t\t\t/* rightshift */\n+\t 2,\t\t\t\t/* size */\n+\t 32,\t\t\t\t/* bitsize */\n+\t false,\t\t\t\t/* pc_relative */\n+\t 0,\t\t\t\t/* bitpos */\n+\t complain_overflow_dont,\t/* complain_on_overflow */\n+\t bfd_elf_generic_reloc,\t\t/* special_function */\n+\t \"R_LARCH_TLS_DTPREL32\",\t/* name */\n+\t true,\t\t\t\t/* partial_inplace */\n+\t 0,\t\t\t\t/* src_mask */\n+\t 0xffffffff,\t\t\t/* dst_mask */\n+\t false),\t\t\t/* pcrel_offset */\n+\n+  HOWTO (R_LARCH_TLS_DTPREL64,\t\t/* type (9).  */\n+\t 0,\t\t\t\t/* rightshift */\n+\t 4,\t\t\t\t/* size */\n+\t 64,\t\t\t\t/* bitsize */\n+\t false,\t\t\t\t/* pc_relative */\n+\t 0,\t\t\t\t/* bitpos */\n+\t complain_overflow_dont,\t/* complain_on_overflow */\n+\t bfd_elf_generic_reloc,\t\t/* special_function */\n+\t \"R_LARCH_TLS_DTPREL64\",\t/* name */\n+\t true,\t\t\t\t/* partial_inplace */\n+\t 0,\t\t\t\t/* src_mask */\n+\t ALL_ONES,\t\t\t/* dst_mask */\n+\t false),\t\t\t/* pcrel_offset */\n+\n+  HOWTO (R_LARCH_TLS_TPREL32,\t\t/* type (10).  */\n+\t 0,\t\t\t\t/* rightshift */\n+\t 2,\t\t\t\t/* size */\n+\t 32,\t\t\t\t/* bitsize */\n+\t false,\t\t\t\t/* pc_relative */\n+\t 0,\t\t\t\t/* bitpos */\n+\t complain_overflow_dont,\t/* complain_on_overflow */\n+\t bfd_elf_generic_reloc,\t\t/* special_function */\n+\t \"R_LARCH_TLS_TPREL32\",\t\t/* name */\n+\t false,\t\t\t\t/* partial_inplace */\n+\t 0,\t\t\t\t/* src_mask */\n+\t 0xffffffff,\t\t\t/* dst_mask */\n+\t false),\t\t\t/* pcrel_offset */\n+\n+  HOWTO (R_LARCH_TLS_TPREL64,\t\t/* type (11).  */\n+\t 0,\t\t\t\t/* rightshift */\n+\t 4,\t\t\t\t/* size */\n+\t 64,\t\t\t\t/* bitsize */\n+\t false,\t\t\t\t/* pc_relative */\n+\t 0,\t\t\t\t/* bitpos */\n+\t complain_overflow_dont,\t/* complain_on_overflow */\n+\t bfd_elf_generic_reloc,\t\t/* special_function */\n+\t \"R_LARCH_TLS_TPREL64\",\t\t/* name */\n+\t false,\t\t\t\t/* partial_inplace */\n+\t 0,\t\t\t\t/* src_mask */\n+\t ALL_ONES,\t\t\t/* dst_mask */\n+\t false),\t\t\t/* pcrel_offset */\n+\n+  HOWTO (R_LARCH_IRELATIVE,\t\t/* type (12).  */\n+\t 0,\t\t\t\t/* rightshift */\n+\t 2,\t\t\t\t/* size */\n+\t 32,\t\t\t\t/* bitsize */\n+\t false,\t\t\t\t/* pc_relative */\n+\t 0,\t\t\t\t/* bitpos */\n+\t complain_overflow_dont,\t/* complain_on_overflow */\n+\t bfd_elf_generic_reloc,\t\t/* special_function */\n+\t \"R_LARCH_IRELATIVE\",\t\t/* name */\n+\t false,\t\t\t\t/* partial_inplace */\n+\t 0,\t\t\t\t/* src_mask */\n+\t 0xffffffff,\t\t\t/* dst_mask */\n+\t false),\t\t\t/* pcrel_offset */\n+\n+  EMPTY_HOWTO(13),\n+  EMPTY_HOWTO(14),\n+  EMPTY_HOWTO(15),\n+  EMPTY_HOWTO(16),\n+  EMPTY_HOWTO(17),\n+  EMPTY_HOWTO(18),\n+  EMPTY_HOWTO(19),\n+\n+  HOWTO (R_LARCH_MARK_LA,\t\t\t/* type (20).  */\n+\t 0,\t\t\t\t   \t/* rightshift.  */\n+\t 3,\t\t\t\t   \t/* size.  */\n+\t 0,\t\t\t\t  \t/* bitsize.  */\n+\t false,\t\t\t\t\t/* pc_relative.  */\n+\t 0,\t\t\t\t   \t/* bitpos.  */\n+\t complain_overflow_signed,\t    \t/* complain_on_overflow.  */\n+\t bfd_elf_generic_reloc,\t       \t\t/* special_function.  */\n+\t \"R_LARCH_MARK_LA\",\t\t\t/* name.  */\n+\t false,\t\t\t       \t\t/* partial_inplace.  */\n+\t 0,\t\t\t\t\t/* src_mask.  */\n+\t 0,\t\t\t\t\t/* dst_mask.  */\n+\t false),\t\t\t      \t/* pcrel_offset.  */\n+\n+  HOWTO (R_LARCH_MARK_PCREL,\t\t\t/* type (21).  */\n+\t 0,\t\t\t\t   \t/* rightshift.  */\n+\t 3,\t\t\t\t   \t/* size.  */\n+\t 0,\t\t\t\t  \t/* bitsize.  */\n+\t false,\t\t\t\t\t/* pc_relative.  */\n+\t 0,\t\t\t\t   \t/* bitpos.  */\n+\t complain_overflow_signed,\t    \t/* complain_on_overflow.  */\n+\t bfd_elf_generic_reloc,\t       \t\t/* special_function.  */\n+\t \"R_LARCH_MARK_PCREL\",\t\t\t/* name.  */\n+\t false,\t\t\t       \t\t/* partial_inplace.  */\n+\t 0,\t\t\t\t\t/* src_mask.  */\n+\t 0,\t\t\t\t\t/* dst_mask.  */\n+\t false),\t\t\t      \t/* pcrel_offset.  */\n+\n+  HOWTO (R_LARCH_SOP_PUSH_PCREL,\t      \t/* type (22).  */\n+\t 2,\t\t\t\t   \t/* rightshift.  */\n+\t 2,\t\t\t\t   \t/* size.  */\n+\t 32,\t\t\t\t  \t/* bitsize.  */\n+\t true /* FIXME: somewhat use this.  */,\t/* pc_relative.  */\n+\t 0,\t\t\t\t   \t/* bitpos.  */\n+\t complain_overflow_signed,\t    \t/* complain_on_overflow.  */\n+\t bfd_elf_generic_reloc,\t       \t\t/* special_function.  */\n+\t \"R_LARCH_SOP_PUSH_PCREL\",\t    \t/* name.  */\n+\t false,\t\t\t       \t\t/* partial_inplace.  */\n+\t 0x03ffffff,\t\t\t  \t/* src_mask.  */\n+\t 0x03ffffff,\t\t\t  \t/* dst_mask.  */\n+\t false),\t\t\t      \t/* pcrel_offset.  */\n+\n+  /* type 23-37.  */\n+  LOONGARCH_HOWTO (SOP_PUSH_ABSOLUTE),\n+  LOONGARCH_HOWTO (SOP_PUSH_DUP),\n+  LOONGARCH_HOWTO (SOP_PUSH_GPREL),\n+  LOONGARCH_HOWTO (SOP_PUSH_TLS_TPREL),\n+  LOONGARCH_HOWTO (SOP_PUSH_TLS_GOT),\n+  LOONGARCH_HOWTO (SOP_PUSH_TLS_GD),\n+  LOONGARCH_HOWTO (SOP_PUSH_PLT_PCREL),\n+  LOONGARCH_HOWTO (SOP_ASSERT),\n+  LOONGARCH_HOWTO (SOP_NOT),\n+  LOONGARCH_HOWTO (SOP_SUB),\n+  LOONGARCH_HOWTO (SOP_SL),\n+  LOONGARCH_HOWTO (SOP_SR),\n+  LOONGARCH_HOWTO (SOP_ADD),\n+  LOONGARCH_HOWTO (SOP_AND),\n+  LOONGARCH_HOWTO (SOP_IF_ELSE),\n+\n+  HOWTO (R_LARCH_SOP_POP_32_S_10_5,\t      \t/* type (38).  */\n+\t 0,\t\t\t\t   \t/* rightshift.  */\n+\t 2,\t\t\t\t   \t/* size.  */\n+\t 5,\t\t\t\t  \t/* bitsize.  */\n+\t false,\t\t\t\t\t/* pc_relative.  */\n+\t 10,\t\t\t\t   \t/* bitpos.  */\n+\t complain_overflow_signed,\t    \t/* complain_on_overflow.  */\n+\t bfd_elf_generic_reloc,\t       \t\t/* special_function.  */\n+\t \"R_LARCH_SOP_POP_32_S_10_5\",\t    \t/* name.  */\n+\t false,\t\t\t       \t\t/* partial_inplace.  */\n+\t 0,\t\t\t\t\t/* src_mask */\n+\t 0x7c00,\t\t\t\t/* dst_mask */\n+\t false),\t\t\t      \t/* pcrel_offset.  */\n+\n+  HOWTO (R_LARCH_SOP_POP_32_U_10_12,\t      \t/* type (39).  */\n+\t 0,\t\t\t\t   \t/* rightshift.  */\n+\t 2,\t\t\t\t   \t/* size.  */\n+\t 12,\t\t\t\t  \t/* bitsize.  */\n+\t false,\t\t\t\t\t/* pc_relative.  */\n+\t 10,\t\t\t\t   \t/* bitpos.  */\n+\t complain_overflow_signed,\t    \t/* complain_on_overflow.  */\n+\t bfd_elf_generic_reloc,\t       \t\t/* special_function.  */\n+\t \"R_LARCH_SOP_POP_32_U_10_12\",\t    \t/* name.  */\n+\t false,\t\t\t       \t\t/* partial_inplace.  */\n+\t 0,\t\t\t\t\t/* src_mask */\n+\t 0x3ffc00,\t\t\t\t/* dst_mask */\n+\t false),\t\t\t      \t/* pcrel_offset.  */\n+\n+  HOWTO (R_LARCH_SOP_POP_32_S_10_12,\t      \t/* type (40).  */\n+\t 0,\t\t\t\t   \t/* rightshift.  */\n+\t 2,\t\t\t\t   \t/* size.  */\n+\t 12,\t\t\t\t  \t/* bitsize.  */\n+\t false,\t\t\t\t\t/* pc_relative.  */\n+\t 10,\t\t\t\t   \t/* bitpos.  */\n+\t complain_overflow_signed,\t    \t/* complain_on_overflow.  */\n+\t bfd_elf_generic_reloc,\t       \t\t/* special_function.  */\n+\t \"R_LARCH_SOP_POP_32_S_10_12\",\t    \t/* name.  */\n+\t false,\t\t\t       \t\t/* partial_inplace.  */\n+\t 0,\t\t\t\t\t/* src_mask */\n+\t 0x3ffc00,\t\t\t\t/* dst_mask */\n+\t false),\t\t\t      \t/* pcrel_offset.  */\n+\n+  HOWTO (R_LARCH_SOP_POP_32_S_10_16,\t      \t/* type (41).  */\n+\t 0,\t\t\t\t   \t/* rightshift.  */\n+\t 2,\t\t\t\t   \t/* size.  */\n+\t 16,\t\t\t\t  \t/* bitsize.  */\n+\t false,\t\t\t\t\t/* pc_relative.  */\n+\t 10,\t\t\t\t   \t/* bitpos.  */\n+\t complain_overflow_signed,\t    \t/* complain_on_overflow.  */\n+\t bfd_elf_generic_reloc,\t       \t\t/* special_function.  */\n+\t \"R_LARCH_SOP_POP_32_S_10_16\",\t    \t/* name.  */\n+\t false,\t\t\t       \t\t/* partial_inplace.  */\n+\t 0,\t\t\t\t\t/* src_mask */\n+\t 0x3fffc00,\t\t\t\t/* dst_mask */\n+\t false),\t\t\t      \t/* pcrel_offset.  */\n+\n+  HOWTO (R_LARCH_SOP_POP_32_S_10_16_S2,\t      \t/* type (42).  */\n+\t 2,\t\t\t\t   \t/* rightshift.  */\n+\t 2,\t\t\t\t   \t/* size.  */\n+\t 16,\t\t\t\t  \t/* bitsize.  */\n+\t false,\t\t\t\t\t/* pc_relative.  */\n+\t 10,\t\t\t\t   \t/* bitpos.  */\n+\t complain_overflow_signed,\t    \t/* complain_on_overflow.  */\n+\t bfd_elf_generic_reloc,\t       \t\t/* special_function.  */\n+\t \"R_LARCH_SOP_POP_32_S_10_16_S2\",    \t/* name.  */\n+\t false,\t\t\t       \t\t/* partial_inplace.  */\n+\t 0,\t\t\t\t\t/* src_mask */\n+\t 0x3fffc00,\t\t\t\t/* dst_mask */\n+\t false),\t\t\t      \t/* pcrel_offset.  */\n+\n+  HOWTO (R_LARCH_SOP_POP_32_S_5_20,\t      \t/* type (43).  */\n+\t 0,\t\t\t\t   \t/* rightshift.  */\n+\t 2,\t\t\t\t   \t/* size.  */\n+\t 20,\t\t\t\t  \t/* bitsize.  */\n+\t false,\t\t\t\t\t/* pc_relative.  */\n+\t 5,\t\t\t\t   \t/* bitpos.  */\n+\t complain_overflow_signed,\t    \t/* complain_on_overflow.  */\n+\t bfd_elf_generic_reloc,\t       \t\t/* special_function.  */\n+\t \"R_LARCH_SOP_POP_32_S_5_20\",    \t/* name.  */\n+\t false,\t\t\t       \t\t/* partial_inplace.  */\n+\t 0,\t\t\t\t\t/* src_mask */\n+\t 0x1fffe0,\t\t\t\t/* dst_mask */\n+\t false),\t\t\t      \t/* pcrel_offset.  */\n+\n+  HOWTO (R_LARCH_SOP_POP_32_S_0_5_10_16_S2,    \t/* type (44).  */\n+\t 2,\t\t\t\t   \t/* rightshift.  */\n+\t 2,\t\t\t\t   \t/* size.  */\n+\t 21,\t\t\t\t  \t/* bitsize.  */\n+\t false,\t\t\t\t\t/* pc_relative.  */\n+\t 0,\t\t\t\t   \t/* bitpos.  */\n+\t complain_overflow_signed,\t    \t/* complain_on_overflow.  */\n+\t bfd_elf_generic_reloc,\t       \t\t/* special_function.  */\n+\t \"R_LARCH_SOP_POP_32_S_0_5_10_16_S2\",  \t/* name.  */\n+\t false,\t\t\t       \t\t/* partial_inplace.  */\n+\t 0xfc0003e0,\t\t\t\t/* src_mask */\n+\t 0xfc0003e0,\t\t\t\t/* dst_mask */\n+\t false),\t\t\t      \t/* pcrel_offset.  */\n+\n+  HOWTO (R_LARCH_SOP_POP_32_S_0_10_10_16_S2,   \t/* type (45).  */\n+\t 2,\t\t\t\t   \t/* rightshift.  */\n+\t 2,\t\t\t\t   \t/* size.  */\n+\t 26,\t\t\t\t  \t/* bitsize.  */\n+\t false,\t\t\t\t\t/* pc_relative.  */\n+\t 0,\t\t\t\t   \t/* bitpos.  */\n+\t complain_overflow_signed,\t    \t/* complain_on_overflow.  */\n+\t bfd_elf_generic_reloc,\t       \t\t/* special_function.  */\n+\t \"R_LARCH_SOP_POP_32_S_0_10_10_16_S2\", \t/* name.  */\n+\t false,\t\t\t       \t\t/* partial_inplace.  */\n+\t 0xfc000000,\t\t\t\t/* src_mask */\n+\t 0xfc000000,\t\t\t\t/* dst_mask */\n+\t false),\t\t\t      \t/* pcrel_offset.  */\n+\n+  HOWTO (R_LARCH_SOP_POP_32_U,\t      \t\t/* type (46).  */\n+\t 0,\t\t\t\t   \t/* rightshift.  */\n+\t 2,\t\t\t\t   \t/* size.  */\n+\t 32,\t\t\t\t  \t/* bitsize.  */\n+\t false,\t\t\t\t\t/* pc_relative.  */\n+\t 0,\t\t\t\t   \t/* bitpos.  */\n+\t complain_overflow_signed,\t    \t/* complain_on_overflow.  */\n+\t bfd_elf_generic_reloc,\t       \t\t/* special_function.  */\n+\t \"R_LARCH_SOP_POP_32_S_U\",    \t\t/* name.  */\n+\t false,\t\t\t       \t\t/* partial_inplace.  */\n+\t 0,\t\t\t\t\t/* src_mask */\n+\t 0,\t\t\t\t\t/* dst_mask */\n+\t false),\t\t\t      \t/* pcrel_offset.  */\n+\n+  HOWTO (R_LARCH_ADD8,\t      \t\t\t/* type (47).  */\n+\t 0,\t\t\t\t   \t/* rightshift.  */\n+\t 2,\t\t\t\t   \t/* size.  */\n+\t 8,\t\t\t\t  \t/* bitsize.  */\n+\t false,\t\t\t\t\t/* pc_relative.  */\n+\t 0,\t\t\t\t   \t/* bitpos.  */\n+\t complain_overflow_signed,\t    \t/* complain_on_overflow.  */\n+\t bfd_elf_generic_reloc,\t       \t\t/* special_function.  */\n+\t \"R_LARCH_ADD8\",    \t\t\t/* name.  */\n+\t false,\t\t\t       \t\t/* partial_inplace.  */\n+\t 0,\t\t\t\t\t/* src_mask */\n+\t 0xffffffff,\t\t\t\t/* dst_mask */\n+\t false),\t\t\t      \t/* pcrel_offset.  */\n+\n+  HOWTO (R_LARCH_ADD16,\t      \t\t\t/* type (48).  */\n+\t 0,\t\t\t\t   \t/* rightshift.  */\n+\t 2,\t\t\t\t   \t/* size.  */\n+\t 16,\t\t\t\t  \t/* bitsize.  */\n+\t false,\t\t\t\t\t/* pc_relative.  */\n+\t 0,\t\t\t\t   \t/* bitpos.  */\n+\t complain_overflow_signed,\t    \t/* complain_on_overflow.  */\n+\t bfd_elf_generic_reloc,\t       \t\t/* special_function.  */\n+\t \"R_LARCH_ADD16\",    \t\t\t/* name.  */\n+\t false,\t\t\t       \t\t/* partial_inplace.  */\n+\t 0,\t\t\t\t\t/* src_mask */\n+\t 0xffffffff,\t\t\t\t/* dst_mask */\n+\t false),\t\t\t      \t/* pcrel_offset.  */\n+\n+  HOWTO (R_LARCH_ADD24,\t      \t\t\t/* type (49).  */\n+\t 0,\t\t\t\t   \t/* rightshift.  */\n+\t 2,\t\t\t\t   \t/* size.  */\n+\t 24,\t\t\t\t  \t/* bitsize.  */\n+\t false,\t\t\t\t\t/* pc_relative.  */\n+\t 0,\t\t\t\t   \t/* bitpos.  */\n+\t complain_overflow_signed,\t    \t/* complain_on_overflow.  */\n+\t bfd_elf_generic_reloc,\t       \t\t/* special_function.  */\n+\t \"R_LARCH_ADD24\",    \t\t\t/* name.  */\n+\t false,\t\t\t       \t\t/* partial_inplace.  */\n+\t 0,\t\t\t\t\t/* src_mask */\n+\t 0xffffffff,\t\t\t\t/* dst_mask */\n+\t false),\t\t\t      \t/* pcrel_offset.  */\n+\n+  HOWTO (R_LARCH_ADD32,\t      \t\t\t/* type (50).  */\n+\t 0,\t\t\t\t   \t/* rightshift.  */\n+\t 2,\t\t\t\t   \t/* size.  */\n+\t 32,\t\t\t\t  \t/* bitsize.  */\n+\t false,\t\t\t\t\t/* pc_relative.  */\n+\t 0,\t\t\t\t   \t/* bitpos.  */\n+\t complain_overflow_signed,\t    \t/* complain_on_overflow.  */\n+\t bfd_elf_generic_reloc,\t       \t\t/* special_function.  */\n+\t \"R_LARCH_ADD32\",    \t\t\t/* name.  */\n+\t false,\t\t\t       \t\t/* partial_inplace.  */\n+\t 0,\t\t\t\t\t/* src_mask */\n+\t 0xffffffff,\t\t\t\t/* dst_mask */\n+\t false),\t\t\t      \t/* pcrel_offset.  */\n+\n+  HOWTO (R_LARCH_ADD64,\t      \t\t\t/* type (51).  */\n+\t 0,\t\t\t\t   \t/* rightshift.  */\n+\t 4,\t\t\t\t   \t/* size.  */\n+\t 64,\t\t\t\t  \t/* bitsize.  */\n+\t false,\t\t\t\t\t/* pc_relative.  */\n+\t 0,\t\t\t\t   \t/* bitpos.  */\n+\t complain_overflow_signed,\t    \t/* complain_on_overflow.  */\n+\t bfd_elf_generic_reloc,\t       \t\t/* special_function.  */\n+\t \"R_LARCH_ADD64\",    \t\t\t/* name.  */\n+\t false,\t\t\t       \t\t/* partial_inplace.  */\n+\t 0,\t\t\t\t\t/* src_mask */\n+\t ALL_ONES,\t\t\t\t/* dst_mask */\n+\t false),\t\t\t      \t/* pcrel_offset.  */\n+\n+  HOWTO (R_LARCH_SUB8,\t      \t\t\t/* type (52).  */\n+\t 0,\t\t\t\t   \t/* rightshift.  */\n+\t 2,\t\t\t\t   \t/* size.  */\n+\t 8,\t\t\t\t  \t/* bitsize.  */\n+\t false,\t\t\t\t\t/* pc_relative.  */\n+\t 0,\t\t\t\t   \t/* bitpos.  */\n+\t complain_overflow_signed,\t    \t/* complain_on_overflow.  */\n+\t bfd_elf_generic_reloc,\t       \t\t/* special_function.  */\n+\t \"R_LARCH_SUB8\",    \t\t\t/* name.  */\n+\t false,\t\t\t       \t\t/* partial_inplace.  */\n+\t 0,\t\t\t\t\t/* src_mask */\n+\t 0xffffffff,\t\t\t\t/* dst_mask */\n+\t false),\t\t\t      \t/* pcrel_offset.  */\n+\n+  HOWTO (R_LARCH_SUB16,\t      \t\t\t/* type (53).  */\n+\t 0,\t\t\t\t   \t/* rightshift.  */\n+\t 2,\t\t\t\t   \t/* size.  */\n+\t 16,\t\t\t\t  \t/* bitsize.  */\n+\t false,\t\t\t\t\t/* pc_relative.  */\n+\t 0,\t\t\t\t   \t/* bitpos.  */\n+\t complain_overflow_signed,\t    \t/* complain_on_overflow.  */\n+\t bfd_elf_generic_reloc,\t       \t\t/* special_function.  */\n+\t \"R_LARCH_SUB16\",    \t\t\t/* name.  */\n+\t false,\t\t\t       \t\t/* partial_inplace.  */\n+\t 0,\t\t\t\t\t/* src_mask */\n+\t 0xffffffff,\t\t\t\t/* dst_mask */\n+\t false),\t\t\t      \t/* pcrel_offset.  */\n+\n+  HOWTO (R_LARCH_SUB24,\t      \t\t\t/* type (54).  */\n+\t 0,\t\t\t\t   \t/* rightshift.  */\n+\t 2,\t\t\t\t   \t/* size.  */\n+\t 24,\t\t\t\t  \t/* bitsize.  */\n+\t false,\t\t\t\t\t/* pc_relative.  */\n+\t 0,\t\t\t\t   \t/* bitpos.  */\n+\t complain_overflow_signed,\t    \t/* complain_on_overflow.  */\n+\t bfd_elf_generic_reloc,\t       \t\t/* special_function.  */\n+\t \"R_LARCH_SUB24\",    \t\t\t/* name.  */\n+\t false,\t\t\t       \t\t/* partial_inplace.  */\n+\t 0,\t\t\t\t\t/* src_mask */\n+\t 0xffffffff,\t\t\t\t/* dst_mask */\n+\t false),\t\t\t      \t/* pcrel_offset.  */\n+\n+  HOWTO (R_LARCH_SUB32,\t      \t\t\t/* type (55).  */\n+\t 0,\t\t\t\t   \t/* rightshift.  */\n+\t 2,\t\t\t\t   \t/* size.  */\n+\t 32,\t\t\t\t  \t/* bitsize.  */\n+\t false,\t\t\t\t\t/* pc_relative.  */\n+\t 0,\t\t\t\t   \t/* bitpos.  */\n+\t complain_overflow_signed,\t    \t/* complain_on_overflow.  */\n+\t bfd_elf_generic_reloc,\t       \t\t/* special_function.  */\n+\t \"R_LARCH_SUB32\",    \t\t\t/* name.  */\n+\t false,\t\t\t       \t\t/* partial_inplace.  */\n+\t 0,\t\t\t\t\t/* src_mask */\n+\t 0xffffffff,\t\t\t\t/* dst_mask */\n+\t false),\t\t\t      \t/* pcrel_offset.  */\n+\n+  HOWTO (R_LARCH_SUB64,\t      \t\t\t/* type (56).  */\n+\t 0,\t\t\t\t   \t/* rightshift.  */\n+\t 4,\t\t\t\t   \t/* size.  */\n+\t 64,\t\t\t\t  \t/* bitsize.  */\n+\t false,\t\t\t\t\t/* pc_relative.  */\n+\t 0,\t\t\t\t   \t/* bitpos.  */\n+\t complain_overflow_signed,\t    \t/* complain_on_overflow.  */\n+\t bfd_elf_generic_reloc,\t       \t\t/* special_function.  */\n+\t \"R_LARCH_SUB64\",    \t\t\t/* name.  */\n+\t false,\t\t\t       \t\t/* partial_inplace.  */\n+\t 0,\t\t\t\t\t/* src_mask */\n+\t ALL_ONES,\t\t\t\t/* dst_mask */\n+\t false),\t\t\t      \t/* pcrel_offset.  */\n+\n+};\n+\n+struct elf_reloc_map\n+{\n+  bfd_reloc_code_real_type bfd_val;\n+  enum elf_loongarch_reloc_type elf_val;\n+};\n+\n+static const struct elf_reloc_map larch_reloc_map[] =\n+{\n+  { BFD_RELOC_NONE, R_LARCH_NONE },\n+  { BFD_RELOC_32, R_LARCH_32 },\n+  { BFD_RELOC_64, R_LARCH_64 },\n+\n+#define LOONGARCH_reloc_map(r_name)\t\t   \t\\\n+  {\t\t\t\t\t\t  \t\\\n+    BFD_RELOC_LARCH_##r_name, R_LARCH_##r_name\t\t\\\n+  }\n+  LOONGARCH_reloc_map (TLS_DTPMOD32),\n+  LOONGARCH_reloc_map (TLS_DTPMOD64),\n+  LOONGARCH_reloc_map (TLS_DTPREL32),\n+  LOONGARCH_reloc_map (TLS_DTPREL64),\n+  LOONGARCH_reloc_map (TLS_TPREL32),\n+  LOONGARCH_reloc_map (TLS_TPREL64),\n+\n+  LOONGARCH_reloc_map (MARK_LA),\n+  LOONGARCH_reloc_map (MARK_PCREL),\n+  LOONGARCH_reloc_map (SOP_PUSH_PCREL),\n+  LOONGARCH_reloc_map (SOP_PUSH_ABSOLUTE),\n+  LOONGARCH_reloc_map (SOP_PUSH_DUP),\n+  LOONGARCH_reloc_map (SOP_PUSH_GPREL),\n+  LOONGARCH_reloc_map (SOP_PUSH_TLS_TPREL),\n+  LOONGARCH_reloc_map (SOP_PUSH_TLS_GOT),\n+  LOONGARCH_reloc_map (SOP_PUSH_TLS_GD),\n+  LOONGARCH_reloc_map (SOP_PUSH_PLT_PCREL),\n+  LOONGARCH_reloc_map (SOP_ASSERT),\n+  LOONGARCH_reloc_map (SOP_NOT),\n+  LOONGARCH_reloc_map (SOP_SUB),\n+  LOONGARCH_reloc_map (SOP_SL),\n+  LOONGARCH_reloc_map (SOP_SR),\n+  LOONGARCH_reloc_map (SOP_ADD),\n+  LOONGARCH_reloc_map (SOP_AND),\n+  LOONGARCH_reloc_map (SOP_IF_ELSE),\n+  LOONGARCH_reloc_map (SOP_POP_32_S_10_5),\n+  LOONGARCH_reloc_map (SOP_POP_32_U_10_12),\n+  LOONGARCH_reloc_map (SOP_POP_32_S_10_12),\n+  LOONGARCH_reloc_map (SOP_POP_32_S_10_16),\n+  LOONGARCH_reloc_map (SOP_POP_32_S_10_16_S2),\n+  LOONGARCH_reloc_map (SOP_POP_32_S_5_20),\n+  LOONGARCH_reloc_map (SOP_POP_32_S_0_5_10_16_S2),\n+  LOONGARCH_reloc_map (SOP_POP_32_S_0_10_10_16_S2),\n+  LOONGARCH_reloc_map (SOP_POP_32_U),\n+  LOONGARCH_reloc_map (ADD8),\n+  LOONGARCH_reloc_map (ADD16),\n+  LOONGARCH_reloc_map (ADD24),\n+  LOONGARCH_reloc_map (ADD32),\n+  LOONGARCH_reloc_map (ADD64),\n+  LOONGARCH_reloc_map (SUB8),\n+  LOONGARCH_reloc_map (SUB16),\n+  LOONGARCH_reloc_map (SUB24),\n+  LOONGARCH_reloc_map (SUB32),\n+  LOONGARCH_reloc_map (SUB64),\n+};\n+\n+reloc_howto_type *\n+loongarch_elf_rtype_to_howto (bfd *abfd, unsigned int r_type)\n+{\n+  size_t i;\n+  for (i = 0; i < ARRAY_SIZE (howto_table); i++)\n+    if (howto_table[i].type == r_type)\n+      return &howto_table[i];\n+\n+  (*_bfd_error_handler) (_(\"%pB: unsupported relocation type %#x\"),\n+\t\t\t abfd, r_type);\n+  bfd_set_error (bfd_error_bad_value);\n+  return NULL;\n+}\n+\n+reloc_howto_type *\n+loongarch_reloc_type_lookup (bfd *abfd ATTRIBUTE_UNUSED,\n+\t\t\t     bfd_reloc_code_real_type code)\n+{\n+  unsigned int i;\n+  for (i = 0; i < ARRAY_SIZE (larch_reloc_map); i++)\n+    if (larch_reloc_map[i].bfd_val == code)\n+      return loongarch_elf_rtype_to_howto (abfd,\n+\t\t\t\t\t   (int) larch_reloc_map[i].elf_val);\n+\n+  return NULL;\n+}\n+\n+reloc_howto_type *\n+loongarch_reloc_name_lookup (bfd *abfd ATTRIBUTE_UNUSED, const char *r_name)\n+{\n+  unsigned int i;\n+\n+  for (i = 0; i < ARRAY_SIZE (howto_table); i++)\n+    if (howto_table[i].name && strcasecmp (howto_table[i].name, r_name) == 0)\n+      return &howto_table[i];\n+\n+  return NULL;\n+}"
    },
    {
      "sha": "7c3984ebab6350211ff41e3887c9ae2c0d0fabc4",
      "filename": "bfd/elfxx-loongarch.h",
      "status": "added",
      "additions": 31,
      "deletions": 0,
      "changes": 31,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e214f8db56f65531b0a5ec296c42339dcaa5af31/bfd/elfxx-loongarch.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e214f8db56f65531b0a5ec296c42339dcaa5af31/bfd/elfxx-loongarch.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elfxx-loongarch.h?ref=e214f8db56f65531b0a5ec296c42339dcaa5af31",
      "patch": "@@ -0,0 +1,31 @@\n+/* LoongArch-specific backend routines.\n+   Copyright (C) 2021 Free Software Foundation, Inc.\n+   Contributed by Loongson Ltd.\n+\n+   This file is part of BFD, the Binary File Descriptor library.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program; see the file COPYING3.  If not,\n+   see <http://www.gnu.org/licenses/>.  */\n+\n+#include \"elf/common.h\"\n+#include \"elf/internal.h\"\n+\n+extern reloc_howto_type *\n+loongarch_elf_rtype_to_howto (bfd *abfd, unsigned int r_type);\n+\n+extern reloc_howto_type *\n+loongarch_reloc_type_lookup (bfd *abfd, bfd_reloc_code_real_type code);\n+\n+extern reloc_howto_type *\n+loongarch_reloc_name_lookup (bfd *abfd ATTRIBUTE_UNUSED, const char *r_name);"
    },
    {
      "sha": "41ecd3bc644f2afff4cae728e6cfd315c87ce0fa",
      "filename": "bfd/libbfd.h",
      "status": "modified",
      "additions": 43,
      "deletions": 0,
      "changes": 43,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e214f8db56f65531b0a5ec296c42339dcaa5af31/bfd/libbfd.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e214f8db56f65531b0a5ec296c42339dcaa5af31/bfd/libbfd.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/libbfd.h?ref=e214f8db56f65531b0a5ec296c42339dcaa5af31",
      "patch": "@@ -3416,6 +3416,49 @@ static const char *const bfd_reloc_code_real_names[] = { \"@@uninitialized@@\",\n   \"BFD_RELOC_CKCORE_PCREL_BLOOP_IMM4BY4\",\n   \"BFD_RELOC_CKCORE_PCREL_BLOOP_IMM12BY4\",\n   \"BFD_RELOC_S12Z_OPR\",\n+  \"BFD_RELOC_LARCH_TLS_DTPMOD32\",\n+  \"BFD_RELOC_LARCH_TLS_DTPREL32\",\n+  \"BFD_RELOC_LARCH_TLS_DTPMOD64\",\n+  \"BFD_RELOC_LARCH_TLS_DTPREL64\",\n+  \"BFD_RELOC_LARCH_TLS_TPREL32\",\n+  \"BFD_RELOC_LARCH_TLS_TPREL64\",\n+  \"BFD_RELOC_LARCH_MARK_LA\",\n+  \"BFD_RELOC_LARCH_MARK_PCREL\",\n+  \"BFD_RELOC_LARCH_SOP_PUSH_PCREL\",\n+  \"BFD_RELOC_LARCH_SOP_PUSH_ABSOLUTE\",\n+  \"BFD_RELOC_LARCH_SOP_PUSH_DUP\",\n+  \"BFD_RELOC_LARCH_SOP_PUSH_GPREL\",\n+  \"BFD_RELOC_LARCH_SOP_PUSH_TLS_TPREL\",\n+  \"BFD_RELOC_LARCH_SOP_PUSH_TLS_GOT\",\n+  \"BFD_RELOC_LARCH_SOP_PUSH_TLS_GD\",\n+  \"BFD_RELOC_LARCH_SOP_PUSH_PLT_PCREL\",\n+  \"BFD_RELOC_LARCH_SOP_ASSERT\",\n+  \"BFD_RELOC_LARCH_SOP_NOT\",\n+  \"BFD_RELOC_LARCH_SOP_SUB\",\n+  \"BFD_RELOC_LARCH_SOP_SL\",\n+  \"BFD_RELOC_LARCH_SOP_SR\",\n+  \"BFD_RELOC_LARCH_SOP_ADD\",\n+  \"BFD_RELOC_LARCH_SOP_AND\",\n+  \"BFD_RELOC_LARCH_SOP_IF_ELSE\",\n+  \"BFD_RELOC_LARCH_SOP_POP_32_S_10_5\",\n+  \"BFD_RELOC_LARCH_SOP_POP_32_U_10_12\",\n+  \"BFD_RELOC_LARCH_SOP_POP_32_S_10_12\",\n+  \"BFD_RELOC_LARCH_SOP_POP_32_S_10_16\",\n+  \"BFD_RELOC_LARCH_SOP_POP_32_S_10_16_S2\",\n+  \"BFD_RELOC_LARCH_SOP_POP_32_S_5_20\",\n+  \"BFD_RELOC_LARCH_SOP_POP_32_S_0_5_10_16_S2\",\n+  \"BFD_RELOC_LARCH_SOP_POP_32_S_0_10_10_16_S2\",\n+  \"BFD_RELOC_LARCH_SOP_POP_32_U\",\n+  \"BFD_RELOC_LARCH_ADD8\",\n+  \"BFD_RELOC_LARCH_ADD16\",\n+  \"BFD_RELOC_LARCH_ADD24\",\n+  \"BFD_RELOC_LARCH_ADD32\",\n+  \"BFD_RELOC_LARCH_ADD64\",\n+  \"BFD_RELOC_LARCH_SUB8\",\n+  \"BFD_RELOC_LARCH_SUB16\",\n+  \"BFD_RELOC_LARCH_SUB24\",\n+  \"BFD_RELOC_LARCH_SUB32\",\n+  \"BFD_RELOC_LARCH_SUB64\",\n  \"@@overflow: BFD_RELOC_UNUSED@@\",\n };\n #endif"
    },
    {
      "sha": "0ecbbcff584acd953a7b04941d459a6c812fa1d4",
      "filename": "bfd/po/BLD-POTFILES.in",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e214f8db56f65531b0a5ec296c42339dcaa5af31/bfd/po/BLD-POTFILES.in",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e214f8db56f65531b0a5ec296c42339dcaa5af31/bfd/po/BLD-POTFILES.in",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/po/BLD-POTFILES.in?ref=e214f8db56f65531b0a5ec296c42339dcaa5af31",
      "patch": "@@ -1,10 +1,12 @@\n bfdver.h\n elf32-aarch64.c\n elf32-ia64.c\n+elf32-loongarch.c\n elf32-riscv.c\n elf32-target.h\n elf64-aarch64.c\n elf64-ia64.c\n+elf64-loongarch.c\n elf64-riscv.c\n elf64-target.h\n peigen.c"
    },
    {
      "sha": "cd412952d634b50d5697cd3d228094323fe087d1",
      "filename": "bfd/po/SRC-POTFILES.in",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e214f8db56f65531b0a5ec296c42339dcaa5af31/bfd/po/SRC-POTFILES.in",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e214f8db56f65531b0a5ec296c42339dcaa5af31/bfd/po/SRC-POTFILES.in",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/po/SRC-POTFILES.in?ref=e214f8db56f65531b0a5ec296c42339dcaa5af31",
      "patch": "@@ -72,6 +72,7 @@ cpu-iq2000.c\n cpu-k1om.c\n cpu-l1om.c\n cpu-lm32.c\n+cpu-loongarch.c\n cpu-m10200.c\n cpu-m10300.c\n cpu-m32c.c\n@@ -262,6 +263,8 @@ elfxx-aarch64.c\n elfxx-aarch64.h\n elfxx-ia64.c\n elfxx-ia64.h\n+elfxx-loongarch.c\n+elfxx-loongarch.h\n elfxx-mips.c\n elfxx-mips.h\n elfxx-riscv.c"
    },
    {
      "sha": "5498f43b1786b9d8797c8b27b11b77ba5b3c75f7",
      "filename": "bfd/reloc.c",
      "status": "modified",
      "additions": 89,
      "deletions": 0,
      "changes": 89,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e214f8db56f65531b0a5ec296c42339dcaa5af31/bfd/reloc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e214f8db56f65531b0a5ec296c42339dcaa5af31/bfd/reloc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/reloc.c?ref=e214f8db56f65531b0a5ec296c42339dcaa5af31",
      "patch": "@@ -8171,6 +8171,95 @@ ENUM\n ENUMDOC\n   S12Z relocations.\n \n+ENUM\n+  BFD_RELOC_LARCH_TLS_DTPMOD32\n+ENUMX\n+  BFD_RELOC_LARCH_TLS_DTPREL32\n+ENUMX\n+  BFD_RELOC_LARCH_TLS_DTPMOD64\n+ENUMX\n+  BFD_RELOC_LARCH_TLS_DTPREL64\n+ENUMX\n+  BFD_RELOC_LARCH_TLS_TPREL32\n+ENUMX\n+  BFD_RELOC_LARCH_TLS_TPREL64\n+ENUMX\n+  BFD_RELOC_LARCH_MARK_LA\n+ENUMX\n+  BFD_RELOC_LARCH_MARK_PCREL\n+ENUMX\n+  BFD_RELOC_LARCH_SOP_PUSH_PCREL\n+ENUMX\n+  BFD_RELOC_LARCH_SOP_PUSH_ABSOLUTE\n+ENUMX\n+  BFD_RELOC_LARCH_SOP_PUSH_DUP\n+ENUMX\n+  BFD_RELOC_LARCH_SOP_PUSH_GPREL\n+ENUMX\n+  BFD_RELOC_LARCH_SOP_PUSH_TLS_TPREL\n+ENUMX\n+  BFD_RELOC_LARCH_SOP_PUSH_TLS_GOT\n+ENUMX\n+  BFD_RELOC_LARCH_SOP_PUSH_TLS_GD\n+ENUMX\n+  BFD_RELOC_LARCH_SOP_PUSH_PLT_PCREL\n+ENUMX\n+  BFD_RELOC_LARCH_SOP_ASSERT\n+ENUMX\n+  BFD_RELOC_LARCH_SOP_NOT\n+ENUMX\n+  BFD_RELOC_LARCH_SOP_SUB\n+ENUMX\n+  BFD_RELOC_LARCH_SOP_SL\n+ENUMX\n+  BFD_RELOC_LARCH_SOP_SR\n+ENUMX\n+  BFD_RELOC_LARCH_SOP_ADD\n+ENUMX\n+  BFD_RELOC_LARCH_SOP_AND\n+ENUMX\n+  BFD_RELOC_LARCH_SOP_IF_ELSE\n+ENUMX\n+  BFD_RELOC_LARCH_SOP_POP_32_S_10_5\n+ENUMX\n+  BFD_RELOC_LARCH_SOP_POP_32_U_10_12\n+ENUMX\n+  BFD_RELOC_LARCH_SOP_POP_32_S_10_12\n+ENUMX\n+  BFD_RELOC_LARCH_SOP_POP_32_S_10_16\n+ENUMX\n+  BFD_RELOC_LARCH_SOP_POP_32_S_10_16_S2\n+ENUMX\n+  BFD_RELOC_LARCH_SOP_POP_32_S_5_20\n+ENUMX\n+  BFD_RELOC_LARCH_SOP_POP_32_S_0_5_10_16_S2\n+ENUMX\n+  BFD_RELOC_LARCH_SOP_POP_32_S_0_10_10_16_S2\n+ENUMX\n+  BFD_RELOC_LARCH_SOP_POP_32_U\n+ENUMX\n+  BFD_RELOC_LARCH_ADD8\n+ENUMX\n+  BFD_RELOC_LARCH_ADD16\n+ENUMX\n+  BFD_RELOC_LARCH_ADD24\n+ENUMX\n+  BFD_RELOC_LARCH_ADD32\n+ENUMX\n+  BFD_RELOC_LARCH_ADD64\n+ENUMX\n+  BFD_RELOC_LARCH_SUB8\n+ENUMX\n+  BFD_RELOC_LARCH_SUB16\n+ENUMX\n+  BFD_RELOC_LARCH_SUB24\n+ENUMX\n+  BFD_RELOC_LARCH_SUB32\n+ENUMX\n+  BFD_RELOC_LARCH_SUB64\n+ENUMDOC\n+  LARCH relocations.\n+\n ENDSENUM\n   BFD_RELOC_UNUSED\n CODE_FRAGMENT"
    },
    {
      "sha": "8f5abb174e2dfecad62008b68f381d89b423576d",
      "filename": "bfd/targets.c",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e214f8db56f65531b0a5ec296c42339dcaa5af31/bfd/targets.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e214f8db56f65531b0a5ec296c42339dcaa5af31/bfd/targets.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/targets.c?ref=e214f8db56f65531b0a5ec296c42339dcaa5af31",
      "patch": "@@ -768,6 +768,8 @@ extern const bfd_target l1om_elf64_vec;\n extern const bfd_target l1om_elf64_fbsd_vec;\n extern const bfd_target lm32_elf32_vec;\n extern const bfd_target lm32_elf32_fdpic_vec;\n+extern const bfd_target loongarch_elf64_vec;\n+extern const bfd_target loongarch_elf32_vec;\n extern const bfd_target m32c_elf32_vec;\n extern const bfd_target m32r_elf32_vec;\n extern const bfd_target m32r_elf32_le_vec;\n@@ -1359,6 +1361,12 @@ static const bfd_target * const _bfd_target_vector[] =\n \t&z80_elf32_vec,\n \n \t&z8k_coff_vec,\n+\n+#ifdef BFD64\n+\t&loongarch_elf32_vec,\n+\t&loongarch_elf64_vec,\n+#endif\n+\n #endif /* not SELECT_VECS */\n \n /* Always support S-records, for convenience.  */"
    },
    {
      "sha": "42dadbb25a23d28743a56f60a0db14006b3e59f5",
      "filename": "include/elf/common.h",
      "status": "modified",
      "additions": 11,
      "deletions": 1,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e214f8db56f65531b0a5ec296c42339dcaa5af31/include/elf/common.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e214f8db56f65531b0a5ec296c42339dcaa5af31/include/elf/common.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/elf/common.h?ref=e214f8db56f65531b0a5ec296c42339dcaa5af31",
      "patch": "@@ -686,8 +686,18 @@\n \t\t\t\t\t/*   note name must be \"LINUX\".  */\n #define NT_ARC_V2\t0x600\t\t/* ARC HS accumulator/extra registers.  */\n \t\t\t\t\t/*   note name must be \"LINUX\".  */\n-#define NT_RISCV_CSR    0x900\t\t/* RISC-V Control and Status Registers */\n+#define NT_LARCH_CPUCFG 0xa00\t\t/* LoongArch CPU config registers */\n+\t\t\t\t\t/*   note name must be \"LINUX\".  */\n+#define NT_LARCH_CSR    0xa01\t\t/* LoongArch Control State Registers */\n+\t\t\t\t\t/*   note name must be \"LINUX\".  */\n+#define NT_LARCH_LSX    0xa02\t\t/* LoongArch SIMD eXtension registers */\n+\t\t\t\t\t/*   note name must be \"LINUX\".  */\n+#define NT_LARCH_LASX   0xa03\t\t/* LoongArch Advanced SIMD eXtension registers */\n+\t\t\t\t\t/*   note name must be \"LINUX\".  */\n+#define NT_LARCH_LBT    0xa04\t\t/* LoongArch Binary Translation registers */\n \t\t\t\t\t/*   note name must be \"CORE\".  */\n+#define NT_RISCV_CSR    0x900\t\t/* RISC-V Control and Status Registers */\n+\t\t\t\t\t/*   note name must be \"LINUX\".  */\n #define NT_SIGINFO\t0x53494749\t/* Fields of siginfo_t.  */\n #define NT_FILE\t\t0x46494c45\t/* Description of mapped files.  */\n "
    },
    {
      "sha": "b4d801ae9bd5a6c4562ca6b1cbae6e6d45d6c704",
      "filename": "include/elf/loongarch.h",
      "status": "added",
      "additions": 119,
      "deletions": 0,
      "changes": 119,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e214f8db56f65531b0a5ec296c42339dcaa5af31/include/elf/loongarch.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e214f8db56f65531b0a5ec296c42339dcaa5af31/include/elf/loongarch.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/elf/loongarch.h?ref=e214f8db56f65531b0a5ec296c42339dcaa5af31",
      "patch": "@@ -0,0 +1,119 @@\n+/* Copyright (C) 2021 Free Software Foundation, Inc.\n+   Contributed by Loongson Ltd.\n+\n+   This file is part of GNU Binutils.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the license, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program; see the file COPYING3.  If not,\n+   see <http://www.gnu.org/licenses/>.  */\n+\n+#ifndef _ELF_LOONGARCH_H\n+#define _ELF_LOONGARCH_H\n+\n+#include \"elf/reloc-macros.h\"\n+#include \"libiberty.h\"\n+\n+START_RELOC_NUMBERS (elf_loongarch_reloc_type)\n+/* Used by the dynamic linker.  */\n+RELOC_NUMBER (R_LARCH_NONE, 0)\n+RELOC_NUMBER (R_LARCH_32, 1)\n+RELOC_NUMBER (R_LARCH_64, 2)\n+RELOC_NUMBER (R_LARCH_RELATIVE, 3)\n+RELOC_NUMBER (R_LARCH_COPY, 4)\n+RELOC_NUMBER (R_LARCH_JUMP_SLOT, 5)\n+RELOC_NUMBER (R_LARCH_TLS_DTPMOD32, 6)\n+RELOC_NUMBER (R_LARCH_TLS_DTPMOD64, 7)\n+RELOC_NUMBER (R_LARCH_TLS_DTPREL32, 8)\n+RELOC_NUMBER (R_LARCH_TLS_DTPREL64, 9)\n+RELOC_NUMBER (R_LARCH_TLS_TPREL32, 10)\n+RELOC_NUMBER (R_LARCH_TLS_TPREL64, 11)\n+RELOC_NUMBER (R_LARCH_IRELATIVE, 12)\n+\n+/* Reserved for future relocs that the dynamic linker must understand.  */\n+\n+/* Used by the static linker for relocating .text.  */\n+RELOC_NUMBER (R_LARCH_MARK_LA, 20)\n+RELOC_NUMBER (R_LARCH_MARK_PCREL, 21)\n+\n+RELOC_NUMBER (R_LARCH_SOP_PUSH_PCREL, 22)\n+\n+RELOC_NUMBER (R_LARCH_SOP_PUSH_ABSOLUTE, 23)\n+\n+RELOC_NUMBER (R_LARCH_SOP_PUSH_DUP, 24)\n+RELOC_NUMBER (R_LARCH_SOP_PUSH_GPREL, 25)\n+RELOC_NUMBER (R_LARCH_SOP_PUSH_TLS_TPREL, 26)\n+RELOC_NUMBER (R_LARCH_SOP_PUSH_TLS_GOT, 27)\n+RELOC_NUMBER (R_LARCH_SOP_PUSH_TLS_GD, 28)\n+RELOC_NUMBER (R_LARCH_SOP_PUSH_PLT_PCREL, 29)\n+\n+RELOC_NUMBER (R_LARCH_SOP_ASSERT, 30)\n+RELOC_NUMBER (R_LARCH_SOP_NOT, 31)\n+RELOC_NUMBER (R_LARCH_SOP_SUB, 32)\n+RELOC_NUMBER (R_LARCH_SOP_SL, 33)\n+RELOC_NUMBER (R_LARCH_SOP_SR, 34)\n+RELOC_NUMBER (R_LARCH_SOP_ADD, 35)\n+RELOC_NUMBER (R_LARCH_SOP_AND, 36)\n+RELOC_NUMBER (R_LARCH_SOP_IF_ELSE, 37)\n+RELOC_NUMBER (R_LARCH_SOP_POP_32_S_10_5, 38)\n+RELOC_NUMBER (R_LARCH_SOP_POP_32_U_10_12, 39)\n+RELOC_NUMBER (R_LARCH_SOP_POP_32_S_10_12, 40)\n+RELOC_NUMBER (R_LARCH_SOP_POP_32_S_10_16, 41)\n+RELOC_NUMBER (R_LARCH_SOP_POP_32_S_10_16_S2, 42)\n+RELOC_NUMBER (R_LARCH_SOP_POP_32_S_5_20, 43)\n+RELOC_NUMBER (R_LARCH_SOP_POP_32_S_0_5_10_16_S2, 44)\n+RELOC_NUMBER (R_LARCH_SOP_POP_32_S_0_10_10_16_S2, 45)\n+RELOC_NUMBER (R_LARCH_SOP_POP_32_U, 46)\n+\n+/* Used by the static linker for relocating non .text.  */\n+RELOC_NUMBER (R_LARCH_ADD8, 47)\n+RELOC_NUMBER (R_LARCH_ADD16, 48)\n+RELOC_NUMBER (R_LARCH_ADD24, 49)\n+RELOC_NUMBER (R_LARCH_ADD32, 50)\n+RELOC_NUMBER (R_LARCH_ADD64, 51)\n+RELOC_NUMBER (R_LARCH_SUB8, 52)\n+RELOC_NUMBER (R_LARCH_SUB16, 53)\n+RELOC_NUMBER (R_LARCH_SUB24, 54)\n+RELOC_NUMBER (R_LARCH_SUB32, 55)\n+RELOC_NUMBER (R_LARCH_SUB64, 56)\n+\n+/* I don't know what it is.  Existing in almost all other arch.  */\n+RELOC_NUMBER (R_LARCH_GNU_VTINHERIT, 57)\n+RELOC_NUMBER (R_LARCH_GNU_VTENTRY, 58)\n+\n+END_RELOC_NUMBERS (R_LARCH_count)\n+\n+/* Processor specific flags for the ELF header e_flags field.  */\n+#define EF_LOONGARCH_ABI_ILP32\t    0b01\n+#define EF_LOONGARCH_ABI_LP64\t    0b11\n+#define EF_LOONGARCH_ABI_MASK\t    0b11\n+\n+#define EF_LOONGARCH_FLOAT_ABI_SOFT    0b001100\n+#define EF_LOONGARCH_FLOAT_ABI_SINGLE  0b001000\n+#define EF_LOONGARCH_FLOAT_ABI_DOUBLE  0b000000\n+#define EF_LOONGARCH_FLOAT_ABI_MASK    0b111100\n+\n+#define EF_LOONGARCH_IS_LP64(abi) \\\n+  ((abi & EF_LOONGARCH_ABI_MASK) == EF_LOONGARCH_ABI_LP64)\n+#define EF_LOONGARCH_IS_ILP32(abi) \\\n+  ((abi & EF_LOONGARCH_ABI_MASK) == EF_LOONGARCH_ABI_ILP32)\n+\n+#define EF_LOONGARCH_IS_SOFT_FLOAT(abi) \\\n+  ((abi & EF_LOONGARCH_FLOAT_ABI_MASK) == EF_LOONGARCH_FLOAT_ABI_SOFT)\n+#define EF_LOONGARCH_IS_SINGLE_FLOAT(abi) \\\n+  ((abi & EF_LOONGARCH_FLOAT_ABI_MASK) == EF_LOONGARCH_FLOAT_ABI_SINGLE)\n+#define EF_LOONGARCH_IS_DOUBLE_FLOAT(abi) \\\n+  ((abi & EF_LOONGARCH_FLOAT_ABI_MASK) == EF_LOONGARCH_FLOAT_ABI_DOUBLE)\n+\n+#define EF_LOONGARCH_ABI (EF_LOONGARCH_ABI_MASK | EF_LOONGARCH_FLOAT_ABI_MASK)\n+\n+#endif /* _ELF_LOONGARCH_H */"
    }
  ]
}