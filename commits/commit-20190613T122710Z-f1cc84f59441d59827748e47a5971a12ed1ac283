{
  "sha": "f1cc84f59441d59827748e47a5971a12ed1ac283",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZjFjYzg0ZjU5NDQxZDU5ODI3NzQ4ZTQ3YTU5NzFhMTJlZDFhYzI4Mw==",
  "commit": {
    "author": {
      "name": "Stafford Horne",
      "email": "shorne@gmail.com",
      "date": "2019-06-13T12:27:10Z"
    },
    "committer": {
      "name": "Stafford Horne",
      "email": "shorne@gmail.com",
      "date": "2019-06-13T12:27:10Z"
    },
    "message": "sim/common: wire up new unordered comparisons\n\nDefine and wire up unordered floating point comparison operations for cgen\ntargets.  This patch depends on my posted cgen patches[0].\n\n[0] https://www.sourceware.org/ml/cgen/2019-q2/msg00013.html\n\nsim/common/ChangeLog:\n\nyyyy-mm-dd  Stafford Horne  <shorne@gmail.com>\n\n\t* cgen-accfp.c (unorderedsf, unordereddf): New functions.\n\t(cgen_init_accurate_fpu): Wire up unorderedsf and unordereddf.\n\t* cgen-fpu.h (cgen_fp_ops): Define fields unorderedsf and unordereddf.",
    "tree": {
      "sha": "73518447b7142a480d01b43ceecd89504d84ff3b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/73518447b7142a480d01b43ceecd89504d84ff3b"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/f1cc84f59441d59827748e47a5971a12ed1ac283",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f1cc84f59441d59827748e47a5971a12ed1ac283",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/f1cc84f59441d59827748e47a5971a12ed1ac283",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f1cc84f59441d59827748e47a5971a12ed1ac283/comments",
  "author": {
    "login": "stffrdhrn",
    "id": 2404255,
    "node_id": "MDQ6VXNlcjI0MDQyNTU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/2404255?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/stffrdhrn",
    "html_url": "https://github.com/stffrdhrn",
    "followers_url": "https://api.github.com/users/stffrdhrn/followers",
    "following_url": "https://api.github.com/users/stffrdhrn/following{/other_user}",
    "gists_url": "https://api.github.com/users/stffrdhrn/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/stffrdhrn/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/stffrdhrn/subscriptions",
    "organizations_url": "https://api.github.com/users/stffrdhrn/orgs",
    "repos_url": "https://api.github.com/users/stffrdhrn/repos",
    "events_url": "https://api.github.com/users/stffrdhrn/events{/privacy}",
    "received_events_url": "https://api.github.com/users/stffrdhrn/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "stffrdhrn",
    "id": 2404255,
    "node_id": "MDQ6VXNlcjI0MDQyNTU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/2404255?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/stffrdhrn",
    "html_url": "https://github.com/stffrdhrn",
    "followers_url": "https://api.github.com/users/stffrdhrn/followers",
    "following_url": "https://api.github.com/users/stffrdhrn/following{/other_user}",
    "gists_url": "https://api.github.com/users/stffrdhrn/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/stffrdhrn/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/stffrdhrn/subscriptions",
    "organizations_url": "https://api.github.com/users/stffrdhrn/orgs",
    "repos_url": "https://api.github.com/users/stffrdhrn/repos",
    "events_url": "https://api.github.com/users/stffrdhrn/events{/privacy}",
    "received_events_url": "https://api.github.com/users/stffrdhrn/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "688cea90bc0af3a0188695a25f5c4e8db4ef763b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/688cea90bc0af3a0188695a25f5c4e8db4ef763b",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/688cea90bc0af3a0188695a25f5c4e8db4ef763b"
    }
  ],
  "stats": {
    "total": 33,
    "additions": 33,
    "deletions": 0
  },
  "files": [
    {
      "sha": "b84980bc950424ac8a7f8830d5d739aaa5a06a20",
      "filename": "sim/common/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f1cc84f59441d59827748e47a5971a12ed1ac283/sim/common/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f1cc84f59441d59827748e47a5971a12ed1ac283/sim/common/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/common/ChangeLog?ref=f1cc84f59441d59827748e47a5971a12ed1ac283",
      "patch": "@@ -1,3 +1,9 @@\n+2019-06-13  Stafford Horne  <shorne@gmail.com>\n+\n+\t* cgen-accfp.c (unorderedsf, unordereddf): New functions.\n+\t(cgen_init_accurate_fpu): Wire up unorderedsf and unordereddf.\n+\t* cgen-fpu.h (cgen_fp_ops): Define fields unorderedsf and unordereddf.\n+\n 2019-06-13  Stafford Horne  <shorne@gmail.com>\n \n \t* cgen-accfp.c (floatdidf, fixdfdi): New functions."
    },
    {
      "sha": "b898de3935e61617ea93d61a93a34088f7d3c081",
      "filename": "sim/common/cgen-accfp.c",
      "status": "modified",
      "additions": 25,
      "deletions": 0,
      "changes": 25,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f1cc84f59441d59827748e47a5971a12ed1ac283/sim/common/cgen-accfp.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f1cc84f59441d59827748e47a5971a12ed1ac283/sim/common/cgen-accfp.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/common/cgen-accfp.c?ref=f1cc84f59441d59827748e47a5971a12ed1ac283",
      "patch": "@@ -303,6 +303,18 @@ gesf (CGEN_FPU* fpu, SF x, SF y)\n   return sim_fpu_is_ge (&op1, &op2);\n }\n \n+static int\n+unorderedsf (CGEN_FPU* fpu, SF x, SF y)\n+{\n+  sim_fpu op1;\n+  sim_fpu op2;\n+\n+  sim_fpu_32to (&op1, x);\n+  sim_fpu_32to (&op2, y);\n+  return sim_fpu_is_nan (&op1) || sim_fpu_is_nan (&op2);\n+}\n+\n+\n static DF\n fextsfdf (CGEN_FPU* fpu, int how UNUSED, SF x)\n {\n@@ -703,6 +715,17 @@ gedf (CGEN_FPU* fpu, DF x, DF y)\n   sim_fpu_64to (&op2, y);\n   return sim_fpu_is_ge (&op1, &op2);\n }\n+\n+static int\n+unordereddf (CGEN_FPU* fpu, DF x, DF y)\n+{\n+  sim_fpu op1;\n+  sim_fpu op2;\n+\n+  sim_fpu_64to (&op1, x);\n+  sim_fpu_64to (&op2, y);\n+  return sim_fpu_is_nan (&op1) || sim_fpu_is_nan (&op2);\n+}\n \f\n /* Initialize FP_OPS to use accurate library.  */\n \n@@ -738,6 +761,7 @@ cgen_init_accurate_fpu (SIM_CPU* cpu, CGEN_FPU* fpu, CGEN_FPU_ERROR_FN* error)\n   o->lesf = lesf;\n   o->gtsf = gtsf;\n   o->gesf = gesf;\n+  o->unorderedsf = unorderedsf;\n \n   o->adddf = adddf;\n   o->subdf = subdf;\n@@ -757,6 +781,7 @@ cgen_init_accurate_fpu (SIM_CPU* cpu, CGEN_FPU* fpu, CGEN_FPU_ERROR_FN* error)\n   o->ledf = ledf;\n   o->gtdf = gtdf;\n   o->gedf = gedf;\n+  o->unordereddf = unordereddf;\n   o->fextsfdf = fextsfdf;\n   o->ftruncdfsf = ftruncdfsf;\n   o->floatsisf = floatsisf;"
    },
    {
      "sha": "cc5d3569e180f736c19bd9f882e2c704cb48ee06",
      "filename": "sim/common/cgen-fpu.h",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f1cc84f59441d59827748e47a5971a12ed1ac283/sim/common/cgen-fpu.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f1cc84f59441d59827748e47a5971a12ed1ac283/sim/common/cgen-fpu.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/common/cgen-fpu.h?ref=f1cc84f59441d59827748e47a5971a12ed1ac283",
      "patch": "@@ -87,6 +87,7 @@ struct cgen_fp_ops {\n   int (*lesf) (CGEN_FPU*, SF, SF);\n   int (*gtsf) (CGEN_FPU*, SF, SF);\n   int (*gesf) (CGEN_FPU*, SF, SF);\n+  int (*unorderedsf) (CGEN_FPU*, SF, SF);\n \n   /* basic DF ops */\n \n@@ -112,6 +113,7 @@ struct cgen_fp_ops {\n   int (*ledf) (CGEN_FPU*, DF, DF);\n   int (*gtdf) (CGEN_FPU*, DF, DF);\n   int (*gedf) (CGEN_FPU*, DF, DF);\n+  int (*unordereddf) (CGEN_FPU*, DF, DF);\n \n   /* SF/DF conversion ops */\n "
    }
  ]
}