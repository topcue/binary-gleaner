{
  "sha": "28d1356774c2c61adc7d6e6723de2351cd9f4ddc",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MjhkMTM1Njc3NGMyYzYxYWRjN2Q2ZTY3MjNkZTIzNTFjZDlmNGRkYw==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2020-03-16T00:01:45Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2020-03-16T02:35:17Z"
    },
    "message": "asan: readelf leak in hppa_process_unwind\n\nThis extracts code reading symbol tables into a common function that\ntidies up after errors.  I've also changed an error reporting multiple\nstring tables to an error on multiple symbol tables.\n\n\t* readelf.c (get_symbols): New function.\n\t(process_relocs, ia64_process_unwind, hppa_process_unwind),\n\t(arm_process_unwind, get_symbol_for_build_attribute): Use it.",
    "tree": {
      "sha": "ce6c561ef56ded6fc7725d153e7552e90e8f9b89",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/ce6c561ef56ded6fc7725d153e7552e90e8f9b89"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/28d1356774c2c61adc7d6e6723de2351cd9f4ddc",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/28d1356774c2c61adc7d6e6723de2351cd9f4ddc",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/28d1356774c2c61adc7d6e6723de2351cd9f4ddc",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/28d1356774c2c61adc7d6e6723de2351cd9f4ddc/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "60e63c3e9750b036d50e58bc173591fa450601b6",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/60e63c3e9750b036d50e58bc173591fa450601b6",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/60e63c3e9750b036d50e58bc173591fa450601b6"
    }
  ],
  "stats": {
    "total": 160,
    "additions": 81,
    "deletions": 79
  },
  "files": [
    {
      "sha": "dad2ed6c2de5b3666324a0f9a9b7f30242d4042d",
      "filename": "binutils/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/28d1356774c2c61adc7d6e6723de2351cd9f4ddc/binutils/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/28d1356774c2c61adc7d6e6723de2351cd9f4ddc/binutils/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/ChangeLog?ref=28d1356774c2c61adc7d6e6723de2351cd9f4ddc",
      "patch": "@@ -1,3 +1,9 @@\n+2020-03-16  Alan Modra  <amodra@gmail.com>\n+\n+\t* readelf.c (get_symbols): New function.\n+\t(process_relocs, ia64_process_unwind, hppa_process_unwind),\n+\t(arm_process_unwind, get_symbol_for_build_attribute): Use it.\n+\n 2020-03-16  Alan Modra  <amodra@gmail.com>\n \n \t* unwind-ia64.c (unw_decode_uleb128): Prevent overlarge shifts."
    },
    {
      "sha": "a11297845e88a46e3bed0888b4db0fbd629caccf",
      "filename": "binutils/readelf.c",
      "status": "modified",
      "additions": 75,
      "deletions": 79,
      "changes": 154,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/28d1356774c2c61adc7d6e6723de2351cd9f4ddc/binutils/readelf.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/28d1356774c2c61adc7d6e6723de2351cd9f4ddc/binutils/readelf.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/readelf.c?ref=28d1356774c2c61adc7d6e6723de2351cd9f4ddc",
      "patch": "@@ -6765,6 +6765,47 @@ process_section_headers (Filedata * filedata)\n   return TRUE;\n }\n \n+static bfd_boolean\n+get_symtab (Filedata *filedata, Elf_Internal_Shdr *symsec,\n+\t    Elf_Internal_Sym **symtab, unsigned long *nsyms,\n+\t    char **strtab, unsigned long *strtablen)\n+{\n+  *strtab = NULL;\n+  *strtablen = 0;\n+  *symtab = GET_ELF_SYMBOLS (filedata, symsec, nsyms);\n+\n+  if (*symtab == NULL)\n+    return FALSE;\n+\n+  if (symsec->sh_link != 0)\n+    {\n+      Elf_Internal_Shdr *strsec;\n+\n+      if (symsec->sh_link >= filedata->file_header.e_shnum)\n+\t{\n+\t  error (_(\"Bad sh_link in symbol table section\\n\"));\n+\t  free (*symtab);\n+\t  *symtab = NULL;\n+\t  *nsyms = 0;\n+\t  return FALSE;\n+\t}\n+\n+      strsec = filedata->section_headers + symsec->sh_link;\n+\n+      *strtab = (char *) get_data (NULL, filedata, strsec->sh_offset,\n+\t\t\t\t   1, strsec->sh_size, _(\"string table\"));\n+      if (*strtab == NULL)\n+\t{\n+\t  free (*symtab);\n+\t  *symtab = NULL;\n+\t  *nsyms = 0;\n+\t  return FALSE;\n+\t}\n+      *strtablen = strsec->sh_size;\n+    }\n+  return TRUE;\n+}\n+\n static const char *\n get_group_flags (unsigned int flags)\n {\n@@ -7355,7 +7396,6 @@ process_relocs (Filedata * filedata)\n \n \t  if (rel_size)\n \t    {\n-\t      Elf_Internal_Shdr * strsec;\n \t      int is_rela;\n \t      unsigned long num_rela;\n \n@@ -7388,22 +7428,10 @@ process_relocs (Filedata * filedata)\n \t\t      && symsec->sh_type != SHT_DYNSYM)\n                     continue;\n \n-\t\t  symtab = GET_ELF_SYMBOLS (filedata, symsec, & nsyms);\n-\n-\t\t  if (symtab == NULL)\n+\t\t  if (!get_symtab (filedata, symsec,\n+\t\t\t\t   &symtab, &nsyms, &strtab, &strtablen))\n \t\t    continue;\n \n-\t\t  if (symsec->sh_link != 0\n-\t\t      && symsec->sh_link < filedata->file_header.e_shnum)\n-\t\t    {\n-\t\t      strsec = filedata->section_headers + symsec->sh_link;\n-\n-\t\t      strtab = (char *) get_data (NULL, filedata, strsec->sh_offset,\n-\t\t\t\t\t\t  1, strsec->sh_size,\n-\t\t\t\t\t\t  _(\"string table\"));\n-\t\t      strtablen = strtab == NULL ? 0 : strsec->sh_size;\n-\t\t    }\n-\n \t\t  dump_relocations (filedata, rel_offset, rel_size,\n \t\t\t\t    symtab, nsyms, strtab, strtablen,\n \t\t\t\t    is_rela,\n@@ -7804,7 +7832,6 @@ ia64_process_unwind (Filedata * filedata)\n {\n   Elf_Internal_Shdr * sec;\n   Elf_Internal_Shdr * unwsec = NULL;\n-  Elf_Internal_Shdr * strsec;\n   unsigned long i, unwcount = 0, unwstart = 0;\n   struct ia64_unw_aux_info aux;\n   bfd_boolean res = TRUE;\n@@ -7813,22 +7840,19 @@ ia64_process_unwind (Filedata * filedata)\n \n   for (i = 0, sec = filedata->section_headers; i < filedata->file_header.e_shnum; ++i, ++sec)\n     {\n-      if (sec->sh_type == SHT_SYMTAB\n-\t  && sec->sh_link < filedata->file_header.e_shnum)\n+      if (sec->sh_type == SHT_SYMTAB)\n \t{\n-\t  aux.symtab = GET_ELF_SYMBOLS (filedata, sec, & aux.nsyms);\n-\n-\t  strsec = filedata->section_headers + sec->sh_link;\n-\t  if (aux.strtab != NULL)\n+\t  if (aux.symtab)\n \t    {\n-\t      error (_(\"Multiple auxillary string tables encountered\\n\"));\n+\t      error (_(\"Multiple symbol tables encountered\\n\"));\n+\t      free (aux.symtab);\n+\t      aux.symtab = NULL;\n \t      free (aux.strtab);\n-\t      res = FALSE;\n+\t      aux.strtab = NULL;\n \t    }\n-\t  aux.strtab = (char *) get_data (NULL, filedata, strsec->sh_offset,\n-                                          1, strsec->sh_size,\n-                                          _(\"string table\"));\n-\t  aux.strtab_size = aux.strtab != NULL ? strsec->sh_size : 0;\n+\t  if (!get_symtab (filedata, sec, &aux.symtab, &aux.nsyms,\n+\t\t\t   &aux.strtab, &aux.strtab_size))\n+\t    return FALSE;\n \t}\n       else if (sec->sh_type == SHT_IA_64_UNWIND)\n \tunwcount++;\n@@ -8265,7 +8289,6 @@ hppa_process_unwind (Filedata * filedata)\n {\n   struct hppa_unw_aux_info aux;\n   Elf_Internal_Shdr * unwsec = NULL;\n-  Elf_Internal_Shdr * strsec;\n   Elf_Internal_Shdr * sec;\n   unsigned long i;\n   bfd_boolean res = TRUE;\n@@ -8277,22 +8300,19 @@ hppa_process_unwind (Filedata * filedata)\n \n   for (i = 0, sec = filedata->section_headers; i < filedata->file_header.e_shnum; ++i, ++sec)\n     {\n-      if (sec->sh_type == SHT_SYMTAB\n-\t  && sec->sh_link < filedata->file_header.e_shnum)\n+      if (sec->sh_type == SHT_SYMTAB)\n \t{\n-\t  aux.symtab = GET_ELF_SYMBOLS (filedata, sec, & aux.nsyms);\n-\n-\t  strsec = filedata->section_headers + sec->sh_link;\n-\t  if (aux.strtab != NULL)\n+\t  if (aux.symtab)\n \t    {\n-\t      error (_(\"Multiple auxillary string tables encountered\\n\"));\n+\t      error (_(\"Multiple symbol tables encountered\\n\"));\n+\t      free (aux.symtab);\n+\t      aux.symtab = NULL;\n \t      free (aux.strtab);\n-\t      res = FALSE;\n+\t      aux.strtab = NULL;\n \t    }\n-\t  aux.strtab = (char *) get_data (NULL, filedata, strsec->sh_offset,\n-                                          1, strsec->sh_size,\n-                                          _(\"string table\"));\n-\t  aux.strtab_size = aux.strtab != NULL ? strsec->sh_size : 0;\n+\t  if (!get_symtab (filedata, sec, &aux.symtab, &aux.nsyms,\n+\t\t\t   &aux.strtab, &aux.strtab_size))\n+\t    return FALSE;\n \t}\n       else if (streq (SECTION_NAME (sec), \".PARISC.unwind\"))\n \tunwsec = sec;\n@@ -9363,7 +9383,6 @@ arm_process_unwind (Filedata * filedata)\n {\n   struct arm_unw_aux_info aux;\n   Elf_Internal_Shdr *unwsec = NULL;\n-  Elf_Internal_Shdr *strsec;\n   Elf_Internal_Shdr *sec;\n   unsigned long i;\n   unsigned int sec_type;\n@@ -9393,22 +9412,19 @@ arm_process_unwind (Filedata * filedata)\n \n   for (i = 0, sec = filedata->section_headers; i < filedata->file_header.e_shnum; ++i, ++sec)\n     {\n-      if (sec->sh_type == SHT_SYMTAB && sec->sh_link < filedata->file_header.e_shnum)\n+      if (sec->sh_type == SHT_SYMTAB)\n \t{\n-\t  aux.symtab = GET_ELF_SYMBOLS (filedata, sec, & aux.nsyms);\n-\n-\t  strsec = filedata->section_headers + sec->sh_link;\n-\n-\t  /* PR binutils/17531 file: 011-12666-0.004.  */\n-\t  if (aux.strtab != NULL)\n+\t  if (aux.symtab)\n \t    {\n-\t      error (_(\"Multiple string tables found in file.\\n\"));\n+\t      error (_(\"Multiple symbol tables encountered\\n\"));\n+\t      free (aux.symtab);\n+\t      aux.symtab = NULL;\n \t      free (aux.strtab);\n-\t      res = FALSE;\n+\t      aux.strtab = NULL;\n \t    }\n-\t  aux.strtab = get_data (NULL, filedata, strsec->sh_offset,\n-\t\t\t\t 1, strsec->sh_size, _(\"string table\"));\n-\t  aux.strtab_size = aux.strtab != NULL ? strsec->sh_size : 0;\n+\t  if (!get_symtab (filedata, sec, &aux.symtab, &aux.nsyms,\n+\t\t\t   &aux.strtab, &aux.strtab_size))\n+\t    return FALSE;\n \t}\n       else if (sec->sh_type == sec_type)\n \tunwsec = sec;\n@@ -18836,31 +18852,11 @@ get_symbol_for_build_attribute (Filedata *       filedata,\n \t   symsec < filedata->section_headers + filedata->file_header.e_shnum;\n \t   symsec ++)\n \t{\n-\t  if (symsec->sh_type == SHT_SYMTAB)\n-\t    {\n-\t      ba_cache.symtab = GET_ELF_SYMBOLS (filedata, symsec,\n-\t\t\t\t\t\t &ba_cache.nsyms);\n-\n-\t      if (ba_cache.symtab != NULL\n-\t\t  && symsec->sh_link < filedata->file_header.e_shnum)\n-\t\t{\n-\t\t  Elf_Internal_Shdr *strtab_sec\n-\t\t    = filedata->section_headers + symsec->sh_link;\n-\n-\t\t  ba_cache.strtab\n-\t\t    = (char *) get_data (NULL, filedata, strtab_sec->sh_offset,\n-\t\t\t\t\t 1, strtab_sec->sh_size,\n-\t\t\t\t\t _(\"string table\"));\n-\t\t  ba_cache.strtablen = strtab_sec->sh_size;\n-\t\t}\n-\t      if (ba_cache.strtab == NULL)\n-\t\t{\n-\t\t  free (ba_cache.symtab);\n-\t\t  ba_cache.symtab = NULL;\n-\t\t}\n-\t      if (ba_cache.symtab != NULL)\n-\t\tbreak;\n-\t    }\n+\t  if (symsec->sh_type == SHT_SYMTAB\n+\t      && get_symtab (filedata, symsec,\n+\t\t\t     &ba_cache.symtab, &ba_cache.nsyms,\n+\t\t\t     &ba_cache.strtab, &ba_cache.strtablen))\n+\t    break;\n \t}\n       ba_cache.filedata = filedata;\n     }"
    }
  ]
}