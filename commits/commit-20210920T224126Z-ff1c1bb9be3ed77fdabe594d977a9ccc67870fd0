{
  "sha": "ff1c1bb9be3ed77fdabe594d977a9ccc67870fd0",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZmYxYzFiYjliZTNlZDc3ZmRhYmU1OTRkOTc3YTljY2M2Nzg3MGZkMA==",
  "commit": {
    "author": {
      "name": "Tom de Vries",
      "email": "tdevries@suse.de",
      "date": "2021-09-20T22:41:26Z"
    },
    "committer": {
      "name": "Tom de Vries",
      "email": "tdevries@suse.de",
      "date": "2021-09-20T22:41:26Z"
    },
    "message": "[gdb/testsuite] Register test for each arch separately in register_test_foreach_arch\n\nIn gdb/disasm-selftests.c we have:\n...\n  selftests::register_test_foreach_arch (\"print_one_insn\",\n                                         selftests::print_one_insn_test);\n...\nand we get:\n...\n$ gdb -q -batch -ex \"maint selftest print_one_insn\" 2>&1 \\\n  | grep ^Running\nRunning selftest print_one_insn.\n$\n...\n\nChange the semantics register_test_foreach_arch such that a version of\nprint_one_insn is registered for each architecture, such that we have:\n...\n$ gdb -q -batch -ex \"maint selftest print_one_insn\" 2>&1 \\\n  | grep ^Running\nRunning selftest print_one_insn::A6.\nRunning selftest print_one_insn::A7.\nRunning selftest print_one_insn::ARC600.\n  ...\n$\n...\n\nThis makes it f.i. possible to do:\n...\n$ gdb -q -batch a.out -ex \"maint selftest print_one_insn::armv8.1-m.main\"\nRunning selftest print_one_insn::armv8.1-m.main.\nSelf test failed: self-test failed at src/gdb/disasm-selftests.c:165\nRan 1 unit tests, 1 failed\n...\n\nTested on x86_64-linux with an --enable-targets=all build.",
    "tree": {
      "sha": "b993c2cd39176c63aab5b78c2a0f742125860533",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/b993c2cd39176c63aab5b78c2a0f742125860533"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/ff1c1bb9be3ed77fdabe594d977a9ccc67870fd0",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ff1c1bb9be3ed77fdabe594d977a9ccc67870fd0",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/ff1c1bb9be3ed77fdabe594d977a9ccc67870fd0",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ff1c1bb9be3ed77fdabe594d977a9ccc67870fd0/comments",
  "author": {
    "login": "vries",
    "id": 4057235,
    "node_id": "MDQ6VXNlcjQwNTcyMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vries",
    "html_url": "https://github.com/vries",
    "followers_url": "https://api.github.com/users/vries/followers",
    "following_url": "https://api.github.com/users/vries/following{/other_user}",
    "gists_url": "https://api.github.com/users/vries/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vries/subscriptions",
    "organizations_url": "https://api.github.com/users/vries/orgs",
    "repos_url": "https://api.github.com/users/vries/repos",
    "events_url": "https://api.github.com/users/vries/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vries/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "vries",
    "id": 4057235,
    "node_id": "MDQ6VXNlcjQwNTcyMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vries",
    "html_url": "https://github.com/vries",
    "followers_url": "https://api.github.com/users/vries/followers",
    "following_url": "https://api.github.com/users/vries/following{/other_user}",
    "gists_url": "https://api.github.com/users/vries/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vries/subscriptions",
    "organizations_url": "https://api.github.com/users/vries/orgs",
    "repos_url": "https://api.github.com/users/vries/repos",
    "events_url": "https://api.github.com/users/vries/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vries/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "c45a683f8f9195bf7cc53bc645a20092c7155629",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c45a683f8f9195bf7cc53bc645a20092c7155629",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/c45a683f8f9195bf7cc53bc645a20092c7155629"
    }
  ],
  "stats": {
    "total": 105,
    "additions": 45,
    "deletions": 60
  },
  "files": [
    {
      "sha": "935459def276a52570aaaa1d84dfae3f3a43129a",
      "filename": "gdb/selftest-arch.c",
      "status": "modified",
      "additions": 45,
      "deletions": 60,
      "changes": 105,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ff1c1bb9be3ed77fdabe594d977a9ccc67870fd0/gdb/selftest-arch.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ff1c1bb9be3ed77fdabe594d977a9ccc67870fd0/gdb/selftest-arch.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/selftest-arch.c?ref=ff1c1bb9be3ed77fdabe594d977a9ccc67870fd0",
      "patch": "@@ -17,6 +17,7 @@\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n \n #include \"defs.h\"\n+#include <functional>\n \n #if GDB_SELF_TEST\n #include \"gdbsupport/selftest.h\"\n@@ -25,73 +26,57 @@\n \n namespace selftests {\n \n-/* A kind of selftest that calls the test function once for each gdbarch known\n-   to GDB.  */\n-\n-struct gdbarch_selftest : public selftest\n+static bool skip_arch (const char *arch)\n {\n-  gdbarch_selftest (self_test_foreach_arch_function *function_)\n-  : function (function_)\n-  {}\n-\n-  void operator() () const override\n-  {\n-    std::vector<const char *> arches = gdbarch_printable_names ();\n-    bool pass = true;\n-\n-    for (const char *arch : arches)\n-      {\n-\tif (strcmp (\"fr300\", arch) == 0)\n-\t  {\n-\t    /* PR 20946 */\n-\t    continue;\n-\t  }\n-\telse if (strcmp (\"powerpc:EC603e\", arch) == 0\n-\t\t || strcmp (\"powerpc:e500mc\", arch) == 0\n-\t\t || strcmp (\"powerpc:e500mc64\", arch) == 0\n-\t\t || strcmp (\"powerpc:titan\", arch) == 0\n-\t\t || strcmp (\"powerpc:vle\", arch) == 0\n-\t\t || strcmp (\"powerpc:e5500\", arch) == 0\n-\t\t || strcmp (\"powerpc:e6500\", arch) == 0)\n-\t  {\n-\t    /* PR 19797 */\n-\t    continue;\n-\t  }\n-\n-\tQUIT;\n-\n-\ttry\n-\t  {\n-\t    struct gdbarch_info info;\n-\n-\t    info.bfd_arch_info = bfd_scan_arch (arch);\n-\n-\t    struct gdbarch *gdbarch = gdbarch_find_by_info (info);\n-\t    SELF_CHECK (gdbarch != NULL);\n-\n-\t    function (gdbarch);\n-\t  }\n-\tcatch (const gdb_exception_error &ex)\n-\t  {\n-\t    pass = false;\n-\t    exception_fprintf (gdb_stderr, ex,\n-\t\t\t       _(\"Self test failed: arch %s: \"), arch);\n-\t  }\n-\n-\treset ();\n-      }\n-\n-    SELF_CHECK (pass);\n-  }\n+  if (strcmp (\"fr300\", arch) == 0)\n+    {\n+      /* PR 20946 */\n+      return true;\n+    }\n+\n+  if (strcmp (\"powerpc:EC603e\", arch) == 0\n+      || strcmp (\"powerpc:e500mc\", arch) == 0\n+      || strcmp (\"powerpc:e500mc64\", arch) == 0\n+      || strcmp (\"powerpc:titan\", arch) == 0\n+      || strcmp (\"powerpc:vle\", arch) == 0\n+      || strcmp (\"powerpc:e5500\", arch) == 0\n+      || strcmp (\"powerpc:e6500\", arch) == 0)\n+    {\n+      /* PR 19797 */\n+      return true;\n+    }\n+\n+  return false;\n+}\n \n-  self_test_foreach_arch_function *function;\n-};\n+/* Register a kind of selftest that calls the test function once for each\n+   gdbarch known to GDB.  */\n \n void\n register_test_foreach_arch (const std::string &name,\n \t\t\t    self_test_foreach_arch_function *function)\n {\n-  register_test (name, new gdbarch_selftest (function));\n+  std::vector<const char *> arches = gdbarch_printable_names ();\n+  for (const char *arch : arches)\n+    {\n+      if (skip_arch (arch))\n+\tcontinue;\n+\n+      auto test_fn\n+\t= ([=] ()\n+\t   {\n+\t     struct gdbarch_info info;\n+\t     info.bfd_arch_info = bfd_scan_arch (arch);\n+\t     struct gdbarch *gdbarch = gdbarch_find_by_info (info);\n+\t     SELF_CHECK (gdbarch != NULL);\n+\t     function (gdbarch);\n+\t     reset ();\n+\t   });\n+\n+      std::string test_name\n+\t= name + std::string (\"::\") + std::string (arch);\n+      register_test (test_name, test_fn);\n+    }\n }\n \n void"
    }
  ]
}