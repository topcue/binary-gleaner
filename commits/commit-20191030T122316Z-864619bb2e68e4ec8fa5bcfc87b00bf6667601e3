{
  "sha": "864619bb2e68e4ec8fa5bcfc87b00bf6667601e3",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ODY0NjE5YmIyZTY4ZTRlYzhmYTViY2ZjODdiMDBiZjY2Njc2MDFlMw==",
  "commit": {
    "author": {
      "name": "Keith Seitz",
      "email": "keiths@redhat.com",
      "date": "2019-10-30T12:23:16Z"
    },
    "committer": {
      "name": "Nick Clifton",
      "email": "nickc@redhat.com",
      "date": "2019-10-30T12:23:16Z"
    },
    "message": "Add the ability to the BFD library to read build-ids from core flies.\n\n\t* elf-bfd.h (elf_backend_data) <elf_backend_core_find_build_id>:\n\tNew field.\n\t(_bfd_elf32_core_find_build_id, _bfd_elf64_core_find_build_id):\n\tNew functions.\n\t(elf_read_notes): Add declaration.\n\t* elf.c (elf_read_notes): Move elf-bfd.h.\n\t(_bfd_elf_core_find_build_id): New function.\n\t(bfd_section_from_phdr): Scan core file PT_LOAD segments for\n\tbuild-id if none is known.\n\t(elf_parse_notes): For core files, scan for notes.\n\t* elfcore.h (elf_core_file_matches_executable_p): If both\n\tBFDs have identical build-ids, then they match.\n\t(_bfd_elf_core_find_build_id): New function.\n\t* elfxx-target.h (elf_backend_core_find_build_id): Define.\n\t(elfNN_bed): Add elf_backend_core_find_build_id.",
    "tree": {
      "sha": "59ff794f1e9d066ea4c64af4b336fdc8b7fd5d5f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/59ff794f1e9d066ea4c64af4b336fdc8b7fd5d5f"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/864619bb2e68e4ec8fa5bcfc87b00bf6667601e3",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/864619bb2e68e4ec8fa5bcfc87b00bf6667601e3",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/864619bb2e68e4ec8fa5bcfc87b00bf6667601e3",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/864619bb2e68e4ec8fa5bcfc87b00bf6667601e3/comments",
  "author": null,
  "committer": {
    "login": "nickclifton",
    "id": 31441682,
    "node_id": "MDQ6VXNlcjMxNDQxNjgy",
    "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickclifton",
    "html_url": "https://github.com/nickclifton",
    "followers_url": "https://api.github.com/users/nickclifton/followers",
    "following_url": "https://api.github.com/users/nickclifton/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions",
    "organizations_url": "https://api.github.com/users/nickclifton/orgs",
    "repos_url": "https://api.github.com/users/nickclifton/repos",
    "events_url": "https://api.github.com/users/nickclifton/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickclifton/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "a712c56a9a2afe0ea5335bf9bf50a638d39b5484",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a712c56a9a2afe0ea5335bf9bf50a638d39b5484",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/a712c56a9a2afe0ea5335bf9bf50a638d39b5484"
    }
  ],
  "stats": {
    "total": 158,
    "additions": 153,
    "deletions": 5
  },
  "files": [
    {
      "sha": "78cbd51f92a7b69dbb682df3c47382cbcbd22491",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 18,
      "deletions": 0,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/864619bb2e68e4ec8fa5bcfc87b00bf6667601e3/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/864619bb2e68e4ec8fa5bcfc87b00bf6667601e3/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=864619bb2e68e4ec8fa5bcfc87b00bf6667601e3",
      "patch": "@@ -1,3 +1,21 @@\n+2019-10-30  Keith Seitz  <keiths@redhat.com>\n+\n+\t* elf-bfd.h (elf_backend_data) <elf_backend_core_find_build_id>:\n+\tNew field.\n+\t(_bfd_elf32_core_find_build_id, _bfd_elf64_core_find_build_id):\n+\tNew functions.\n+\t(elf_read_notes): Add declaration.\n+\t* elf.c (elf_read_notes): Move elf-bfd.h.\n+\t(_bfd_elf_core_find_build_id): New function.\n+\t(bfd_section_from_phdr): Scan core file PT_LOAD segments for\n+\tbuild-id if none is known.\n+\t(elf_parse_notes): For core files, scan for notes.\n+\t* elfcore.h (elf_core_file_matches_executable_p): If both\n+\tBFDs have identical build-ids, then they match.\n+\t(_bfd_elf_core_find_build_id): New function.\n+\t* elfxx-target.h (elf_backend_core_find_build_id): Define.\n+\t(elfNN_bed): Add elf_backend_core_find_build_id.\n+\n 2019-10-29  Andrew Eikum  <aeikum@codeweavers.com>\n \n \t* libcoff-in.h (struct pe_tdata): Add dos_message field."
    },
    {
      "sha": "7309499119f02c878e8ea6c5fb3c669a9704fe4f",
      "filename": "bfd/elf-bfd.h",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/864619bb2e68e4ec8fa5bcfc87b00bf6667601e3/bfd/elf-bfd.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/864619bb2e68e4ec8fa5bcfc87b00bf6667601e3/bfd/elf-bfd.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf-bfd.h?ref=864619bb2e68e4ec8fa5bcfc87b00bf6667601e3",
      "patch": "@@ -1377,6 +1377,8 @@ struct elf_backend_data\n      int (*target_read_memory) (bfd_vma vma, bfd_byte *myaddr,\n \t\t\t\tbfd_size_type len));\n \n+  bfd_boolean (*elf_backend_core_find_build_id) (bfd *, bfd_vma);\n+\n   /* This function is used by `_bfd_elf_get_synthetic_symtab';\n      see elf.c.  */\n   bfd_vma (*plt_sym_val) (bfd_vma, const asection *, const arelent *);\n@@ -2403,6 +2405,8 @@ extern bfd_boolean bfd_elf32_core_file_matches_executable_p\n   (bfd *, bfd *);\n extern int bfd_elf32_core_file_pid\n   (bfd *);\n+extern bfd_boolean _bfd_elf32_core_find_build_id\n+  (bfd *, bfd_vma);\n \n extern bfd_boolean bfd_elf32_swap_symbol_in\n   (bfd *, const void *, const void *, Elf_Internal_Sym *);\n@@ -2449,6 +2453,8 @@ extern bfd_boolean bfd_elf64_core_file_matches_executable_p\n   (bfd *, bfd *);\n extern int bfd_elf64_core_file_pid\n   (bfd *);\n+extern bfd_boolean _bfd_elf64_core_find_build_id\n+  (bfd *, bfd_vma);\n \n extern bfd_boolean bfd_elf64_swap_symbol_in\n   (bfd *, const void *, const void *, Elf_Internal_Sym *);\n@@ -2773,6 +2779,7 @@ extern bfd_boolean _bfd_elf_merge_object_attributes\n extern bfd_boolean _bfd_elf_merge_unknown_attribute_low (bfd *, bfd *, int);\n extern bfd_boolean _bfd_elf_merge_unknown_attribute_list (bfd *, bfd *);\n extern Elf_Internal_Shdr *_bfd_elf_single_rel_hdr (asection *sec);\n+extern bfd_boolean elf_read_notes (bfd *, file_ptr, bfd_size_type, size_t);\n \n extern bfd_boolean _bfd_elf_parse_gnu_properties\n   (bfd *, Elf_Internal_Note *);"
    },
    {
      "sha": "be060d579ccec113b6222787faba5fccc907bbd5",
      "filename": "bfd/elf.c",
      "status": "modified",
      "additions": 18,
      "deletions": 5,
      "changes": 23,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/864619bb2e68e4ec8fa5bcfc87b00bf6667601e3/bfd/elf.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/864619bb2e68e4ec8fa5bcfc87b00bf6667601e3/bfd/elf.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf.c?ref=864619bb2e68e4ec8fa5bcfc87b00bf6667601e3",
      "patch": "@@ -53,8 +53,6 @@ static int elf_sort_sections (const void *, const void *);\n static bfd_boolean assign_file_positions_except_relocs (bfd *, struct bfd_link_info *);\n static bfd_boolean prep_headers (bfd *);\n static bfd_boolean swap_out_syms (bfd *, struct elf_strtab_hash **, int) ;\n-static bfd_boolean elf_read_notes (bfd *, file_ptr, bfd_size_type,\n-\t\t\t\t   size_t align) ;\n static bfd_boolean elf_parse_notes (bfd *abfd, char *buf, size_t size,\n \t\t\t\t    file_ptr offset, size_t align);\n \n@@ -3061,6 +3059,16 @@ _bfd_elf_make_section_from_phdr (bfd *abfd,\n   return TRUE;\n }\n \n+static bfd_boolean\n+_bfd_elf_core_find_build_id (bfd *templ, bfd_vma offset)\n+{\n+  /* The return value is ignored.  Build-ids are considered optional.  */\n+  if (templ->xvec->flavour == bfd_target_elf_flavour)\n+    return (*get_elf_backend_data (templ)->elf_backend_core_find_build_id)\n+      (templ, offset);\n+  return FALSE;\n+}\n+\n bfd_boolean\n bfd_section_from_phdr (bfd *abfd, Elf_Internal_Phdr *hdr, int hdr_index)\n {\n@@ -3072,7 +3080,11 @@ bfd_section_from_phdr (bfd *abfd, Elf_Internal_Phdr *hdr, int hdr_index)\n       return _bfd_elf_make_section_from_phdr (abfd, hdr, hdr_index, \"null\");\n \n     case PT_LOAD:\n-      return _bfd_elf_make_section_from_phdr (abfd, hdr, hdr_index, \"load\");\n+      if (! _bfd_elf_make_section_from_phdr (abfd, hdr, hdr_index, \"load\"))\n+\treturn FALSE;\n+      if (bfd_get_format (abfd) == bfd_core && abfd->build_id == NULL)\n+\t_bfd_elf_core_find_build_id (abfd, hdr->p_offset);\n+      return TRUE;\n \n     case PT_DYNAMIC:\n       return _bfd_elf_make_section_from_phdr (abfd, hdr, hdr_index, \"dynamic\");\n@@ -11838,7 +11850,8 @@ elf_parse_notes (bfd *abfd, char *buf, size_t size, file_ptr offset,\n \t      GROKER_ELEMENT (\"NetBSD-CORE\", elfcore_grok_netbsd_note),\n \t      GROKER_ELEMENT ( \"OpenBSD\", elfcore_grok_openbsd_note),\n \t      GROKER_ELEMENT (\"QNX\", elfcore_grok_nto_note),\n-\t      GROKER_ELEMENT (\"SPU/\", elfcore_grok_spu_note)\n+\t      GROKER_ELEMENT (\"SPU/\", elfcore_grok_spu_note),\n+\t      GROKER_ELEMENT (\"GNU\", elfobj_grok_gnu_note)\n \t    };\n #undef GROKER_ELEMENT\n \t    int i;\n@@ -11878,7 +11891,7 @@ elf_parse_notes (bfd *abfd, char *buf, size_t size, file_ptr offset,\n   return TRUE;\n }\n \n-static bfd_boolean\n+bfd_boolean\n elf_read_notes (bfd *abfd, file_ptr offset, bfd_size_type size,\n \t\tsize_t align)\n {"
    },
    {
      "sha": "1279327bf0d333fdba6f1b7ff0deafa6a073c17d",
      "filename": "bfd/elfcore.h",
      "status": "modified",
      "additions": 106,
      "deletions": 0,
      "changes": 106,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/864619bb2e68e4ec8fa5bcfc87b00bf6667601e3/bfd/elfcore.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/864619bb2e68e4ec8fa5bcfc87b00bf6667601e3/bfd/elfcore.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elfcore.h?ref=864619bb2e68e4ec8fa5bcfc87b00bf6667601e3",
      "patch": "@@ -49,6 +49,14 @@ elf_core_file_matches_executable_p (bfd *core_bfd, bfd *exec_bfd)\n       return FALSE;\n     }\n \n+  /* If both BFDs have identical build-ids, then they match.  */\n+  if (core_bfd->build_id != NULL\n+      && exec_bfd->build_id != NULL\n+      && core_bfd->build_id->size == exec_bfd->build_id->size\n+      && memcmp (core_bfd->build_id->data, exec_bfd->build_id->data,\n+\t\t core_bfd->build_id->size) == 0)\n+    return TRUE;\n+\n   /* See if the name in the corefile matches the executable name.  */\n   corename = elf_tdata (core_bfd)->core->program;\n   if (corename != NULL)\n@@ -313,3 +321,101 @@ elf_core_file_p (bfd *abfd)\n fail:\n   return NULL;\n }\n+\n+/* Attempt to find a build-id in a core file from the core file BFD.\n+   OFFSET is the file offset to a PT_LOAD segment that may contain\n+   the build-id note.  Returns TRUE upon success, FALSE otherwise.  */\n+\n+bfd_boolean\n+NAME(_bfd_elf, core_find_build_id)\n+  (bfd *abfd,\n+   bfd_vma offset)\n+{\n+  Elf_External_Ehdr x_ehdr;\t/* Elf file header, external form.   */\n+  Elf_Internal_Ehdr i_ehdr;\t/* Elf file header, internal form.   */\n+  Elf_Internal_Phdr *i_phdr;\n+  unsigned int i;\n+\n+  /* Seek to the position of the segment at OFFSET.  */\n+  if (bfd_seek (abfd, offset, SEEK_SET) != 0)\n+    goto fail;\n+\n+  /* Read in the ELF header in external format.  */\n+  if (bfd_bread (&x_ehdr, sizeof (x_ehdr), abfd) != sizeof (x_ehdr))\n+    {\n+      if (bfd_get_error () != bfd_error_system_call)\n+\tgoto wrong;\n+      else\n+\tgoto fail;\n+    }\n+\n+  /* Now check to see if we have a valid ELF file, and one that BFD can\n+     make use of.  The magic number must match, the address size ('class')\n+     and byte-swapping must match our XVEC entry, and it must have a\n+     section header table (FIXME: See comments re sections at top of this\n+     file).  */\n+  if (! elf_file_p (&x_ehdr)\n+      || x_ehdr.e_ident[EI_VERSION] != EV_CURRENT\n+      || x_ehdr.e_ident[EI_CLASS] != ELFCLASS)\n+    goto wrong;\n+\n+  /* Check that file's byte order matches xvec's.  */\n+  switch (x_ehdr.e_ident[EI_DATA])\n+    {\n+    case ELFDATA2MSB:\t\t/* Big-endian.  */\n+      if (! bfd_header_big_endian (abfd))\n+\tgoto wrong;\n+      break;\n+    case ELFDATA2LSB:\t\t/* Little-endian.  */\n+      if (! bfd_header_little_endian (abfd))\n+\tgoto wrong;\n+      break;\n+    case ELFDATANONE:\t\t/* No data encoding specified.  */\n+    default:\t\t\t/* Unknown data encoding specified . */\n+      goto wrong;\n+    }\n+\n+  elf_swap_ehdr_in (abfd, &x_ehdr, &i_ehdr);\n+#if DEBUG\n+  elf_debug_file (&i_ehdr);\n+#endif\n+\n+  if (i_ehdr.e_phentsize != sizeof (Elf_External_Phdr) || i_ehdr.e_phnum == 0)\n+    goto fail;\n+\n+  /* Read in program headers.  */\n+  i_phdr = (Elf_Internal_Phdr *) bfd_alloc2 (abfd, i_ehdr.e_phnum,\n+\t\t\t\t\t     sizeof (*i_phdr));\n+  if (i_phdr == NULL)\n+    goto fail;\n+\n+  if (bfd_seek (abfd, (file_ptr) (offset + i_ehdr.e_phoff), SEEK_SET) != 0)\n+    goto fail;\n+\n+  /* Read in program headers and parse notes.  */\n+  for (i = 0; i < i_ehdr.e_phnum; ++i, ++i_phdr)\n+    {\n+      Elf_External_Phdr x_phdr;\n+\n+      if (bfd_bread (&x_phdr, sizeof (x_phdr), abfd) != sizeof (x_phdr))\n+\tgoto fail;\n+      elf_swap_phdr_in (abfd, &x_phdr, i_phdr);\n+\n+      if (i_phdr->p_type == PT_NOTE && i_phdr->p_filesz > 0)\n+\t{\n+\t  elf_read_notes (abfd, offset + i_phdr->p_offset,\n+\t\t\t  i_phdr->p_filesz, i_phdr->p_align);\n+\t  if (abfd->build_id != NULL)\n+\t    return TRUE;\n+\t}\n+    }\n+\n+  /* Having gotten this far, we have a valid ELF section, but no\n+     build-id was found.  */\n+  goto fail;\n+\n+wrong:\n+  bfd_set_error (bfd_error_wrong_format);\n+fail:\n+  return FALSE;\n+}"
    },
    {
      "sha": "29ad2e84818a62d614f3a8b3eac893d0a26a550d",
      "filename": "bfd/elfxx-target.h",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/864619bb2e68e4ec8fa5bcfc87b00bf6667601e3/bfd/elfxx-target.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/864619bb2e68e4ec8fa5bcfc87b00bf6667601e3/bfd/elfxx-target.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elfxx-target.h?ref=864619bb2e68e4ec8fa5bcfc87b00bf6667601e3",
      "patch": "@@ -521,6 +521,9 @@\n #ifndef elf_backend_bfd_from_remote_memory\n #define elf_backend_bfd_from_remote_memory _bfd_elfNN_bfd_from_remote_memory\n #endif\n+#ifndef elf_backend_core_find_build_id\n+#define elf_backend_core_find_build_id _bfd_elfNN_core_find_build_id\n+#endif\n #ifndef elf_backend_got_header_size\n #define elf_backend_got_header_size\t0\n #endif\n@@ -860,6 +863,7 @@ static struct elf_backend_data elfNN_bed =\n   elf_backend_mips_rtype_to_howto,\n   elf_backend_ecoff_debug_swap,\n   elf_backend_bfd_from_remote_memory,\n+  elf_backend_core_find_build_id,\n   elf_backend_plt_sym_val,\n   elf_backend_common_definition,\n   elf_backend_common_section_index,"
    }
  ]
}