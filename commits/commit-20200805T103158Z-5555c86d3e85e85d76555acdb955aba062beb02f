{
  "sha": "5555c86d3e85e85d76555acdb955aba062beb02f",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NTU1NWM4NmQzZTg1ZTg1ZDc2NTU1YWNkYjk1NWFiYTA2MmJlYjAyZg==",
  "commit": {
    "author": {
      "name": "Tom de Vries",
      "email": "tdevries@suse.de",
      "date": "2020-08-05T10:31:58Z"
    },
    "committer": {
      "name": "Tom de Vries",
      "email": "tdevries@suse.de",
      "date": "2020-08-05T10:31:58Z"
    },
    "message": "[gdb] Fix prop->const_val uses in gdbtypes.c\n\nAfter commit 66d6346b25 \"gdb: remove TYPE_DYN_PROP_ADDR\", I run into:\n...\nFAIL: gdb.fortran/class-allocatable-array.exp: print this%_data%b\n...\n(and 185 more FAILs, all for fortran test-cases).\n\nThe commit replaces \"!x\" by \"x != 0\".\n\nFix this by using \"x == 0\" instead.\n\nBuild and tested on x86_64-linux.\n\ngdb/ChangeLog:\n\n2020-08-05  Tom de Vries  <tdevries@suse.de>\n\n\t* gdbtypes.c (type_not_allocated, type_not_associated): Use\n\t\"prop->const_val () == 0\" instead of \"prop->const_val () != 0\".",
    "tree": {
      "sha": "f143fead64487d5b67f196ba939c9934a77651a4",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/f143fead64487d5b67f196ba939c9934a77651a4"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/5555c86d3e85e85d76555acdb955aba062beb02f",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5555c86d3e85e85d76555acdb955aba062beb02f",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/5555c86d3e85e85d76555acdb955aba062beb02f",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5555c86d3e85e85d76555acdb955aba062beb02f/comments",
  "author": {
    "login": "vries",
    "id": 4057235,
    "node_id": "MDQ6VXNlcjQwNTcyMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vries",
    "html_url": "https://github.com/vries",
    "followers_url": "https://api.github.com/users/vries/followers",
    "following_url": "https://api.github.com/users/vries/following{/other_user}",
    "gists_url": "https://api.github.com/users/vries/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vries/subscriptions",
    "organizations_url": "https://api.github.com/users/vries/orgs",
    "repos_url": "https://api.github.com/users/vries/repos",
    "events_url": "https://api.github.com/users/vries/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vries/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "vries",
    "id": 4057235,
    "node_id": "MDQ6VXNlcjQwNTcyMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vries",
    "html_url": "https://github.com/vries",
    "followers_url": "https://api.github.com/users/vries/followers",
    "following_url": "https://api.github.com/users/vries/following{/other_user}",
    "gists_url": "https://api.github.com/users/vries/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vries/subscriptions",
    "organizations_url": "https://api.github.com/users/vries/orgs",
    "repos_url": "https://api.github.com/users/vries/repos",
    "events_url": "https://api.github.com/users/vries/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vries/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "787bbc56d895b452ebfe90bc2b1345ca825fa412",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/787bbc56d895b452ebfe90bc2b1345ca825fa412",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/787bbc56d895b452ebfe90bc2b1345ca825fa412"
    }
  ],
  "stats": {
    "total": 9,
    "additions": 7,
    "deletions": 2
  },
  "files": [
    {
      "sha": "066512703ac82bc6ad61cc8e415af6dca5f9509c",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5555c86d3e85e85d76555acdb955aba062beb02f/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5555c86d3e85e85d76555acdb955aba062beb02f/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=5555c86d3e85e85d76555acdb955aba062beb02f",
      "patch": "@@ -1,3 +1,8 @@\n+2020-08-05  Tom de Vries  <tdevries@suse.de>\n+\n+\t* gdbtypes.c (type_not_allocated, type_not_associated): Use\n+\t\"prop->const_val () == 0\" instead of \"prop->const_val () != 0\".\n+\n 2020-08-04  Simon Marchi  <simon.marchi@efficios.com>\n \n \t* frame.h (frame_id_p): Return bool."
    },
    {
      "sha": "da1c58c65c151c77a401a23d85f4e984d8a87a61",
      "filename": "gdb/gdbtypes.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5555c86d3e85e85d76555acdb955aba062beb02f/gdb/gdbtypes.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5555c86d3e85e85d76555acdb955aba062beb02f/gdb/gdbtypes.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbtypes.c?ref=5555c86d3e85e85d76555acdb955aba062beb02f",
      "patch": "@@ -4134,7 +4134,7 @@ type_not_allocated (const struct type *type)\n   struct dynamic_prop *prop = TYPE_ALLOCATED_PROP (type);\n \n   return (prop != nullptr && prop->kind () == PROP_CONST\n-\t  && prop->const_val () != 0);\n+\t  && prop->const_val () == 0);\n }\n \n /* Associated status of type TYPE.  Return zero if type TYPE is associated.\n@@ -4146,7 +4146,7 @@ type_not_associated (const struct type *type)\n   struct dynamic_prop *prop = TYPE_ASSOCIATED_PROP (type);\n \n   return (prop != nullptr && prop->kind () == PROP_CONST\n-\t  && prop->const_val () != 0);\n+\t  && prop->const_val () == 0);\n }\n \n /* rank_one_type helper for when PARM's type code is TYPE_CODE_PTR.  */"
    }
  ]
}