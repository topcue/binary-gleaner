{
  "sha": "28a4e64dd1b17b0d9f267c3466d7da3e8a41afd8",
  "node_id": "C_kwDOANOeidoAKDI4YTRlNjRkZDFiMTdiMGQ5ZjI2N2MzNDY2ZDdkYTNlOGE0MWFmZDg",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2021-08-03T18:42:43Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2022-01-05T17:44:53Z"
    },
    "message": "Change how versioned symbols are recorded\n\nA change to BFD caused a gdb regression when using the Ada \"catch\nexception\" feature.  The bug is visible when a shared library throws\nan exception that is caught in the main executable.\n\nThis was discussed here:\n\nhttps://sourceware.org/pipermail/binutils/2021-July/117538.html\n\nThis patch implements Alan's proposed fix, namely to use VERSYM_HIDDEN\nrather than the name when deciding to install a version-less symbol.\n\nThe internal test case is identical to the catch_ex_std.exp that is\nin-tree, so I haven't added a new test.  I could not make that one\nfail on x86-64 Linux, though.  It's possible that maybe I'd have to\nupdate the system linker first, but I didn't want to try that.\n\nRegression tested on x86-64 Fedora 32.",
    "tree": {
      "sha": "21c1eeea078734080beb0abcef03b8d9efbd40ef",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/21c1eeea078734080beb0abcef03b8d9efbd40ef"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/28a4e64dd1b17b0d9f267c3466d7da3e8a41afd8",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/28a4e64dd1b17b0d9f267c3466d7da3e8a41afd8",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/28a4e64dd1b17b0d9f267c3466d7da3e8a41afd8",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/28a4e64dd1b17b0d9f267c3466d7da3e8a41afd8/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "72df4c816f8a2c6dfb76988ccceee28e28bbaa3d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/72df4c816f8a2c6dfb76988ccceee28e28bbaa3d",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/72df4c816f8a2c6dfb76988ccceee28e28bbaa3d"
    }
  ],
  "stats": {
    "total": 69,
    "additions": 34,
    "deletions": 35
  },
  "files": [
    {
      "sha": "3f2d8b4e2337c0f948d75b411e130c671b1a2e4a",
      "filename": "gdb/elfread.c",
      "status": "modified",
      "additions": 34,
      "deletions": 35,
      "changes": 69,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/28a4e64dd1b17b0d9f267c3466d7da3e8a41afd8/gdb/elfread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/28a4e64dd1b17b0d9f267c3466d7da3e8a41afd8/gdb/elfread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/elfread.c?ref=28a4e64dd1b17b0d9f267c3466d7da3e8a41afd8",
      "patch": "@@ -266,6 +266,8 @@ elf_symtab_read (minimal_symbol_reader &reader,\n \t  continue;\n \t}\n \n+      elf_symbol_type *elf_sym = (elf_symbol_type *) sym;\n+\n       /* Skip \"special\" symbols, e.g. ARM mapping symbols.  These are\n \t symbols which do not correspond to objects in the symbol table,\n \t but have some other target-specific meaning.  */\n@@ -373,7 +375,7 @@ elf_symtab_read (minimal_symbol_reader &reader,\n \t\t NOTE: uweigand-20071112: Synthetic symbols do not\n \t\t have an ELF-private part, so do not touch those.  */\n \t      unsigned int shndx = type == ST_SYNTHETIC ? 0 :\n-\t\t((elf_symbol_type *) sym)->internal_elf_sym.st_shndx;\n+\t\telf_sym->internal_elf_sym.st_shndx;\n \n \t      switch (shndx)\n \t\t{\n@@ -481,7 +483,6 @@ elf_symtab_read (minimal_symbol_reader &reader,\n \t      if (type != ST_SYNTHETIC)\n \t\t{\n \t\t  /* Pass symbol size field in via BFD.  FIXME!!!  */\n-\t\t  elf_symbol_type *elf_sym = (elf_symbol_type *) sym;\n \t\t  SET_MSYMBOL_SIZE (msym, elf_sym->internal_elf_sym.st_size);\n \t\t}\n \n@@ -495,41 +496,39 @@ elf_symtab_read (minimal_symbol_reader &reader,\n \t  if (msym != NULL)\n \t    {\n \t      const char *atsign = strchr (sym->name, '@');\n-\n-\t      if (atsign != NULL && atsign[1] == '@' && atsign > sym->name)\n-\t\t{\n-\t\t  int len = atsign - sym->name;\n-\n-\t\t  record_minimal_symbol (reader,\n-\t\t\t\t\t gdb::string_view (sym->name, len),\n-\t\t\t\t\t true, symaddr, ms_type, sym->section,\n-\t\t\t\t\t objfile);\n-\t\t}\n-\t    }\n-\n-\t  /* For @plt symbols, also record a trampoline to the\n-\t     destination symbol.  The @plt symbol will be used in\n-\t     disassembly, and the trampoline will be used when we are\n-\t     trying to find the target.  */\n-\t  if (msym && ms_type == mst_text && type == ST_SYNTHETIC)\n-\t    {\n-\t      int len = strlen (sym->name);\n-\n-\t      if (len > 4 && strcmp (sym->name + len - 4, \"@plt\") == 0)\n+\t      bool is_at_symbol = atsign != nullptr && atsign > sym->name;\n+\t      bool is_plt = is_at_symbol && strcmp (atsign, \"@plt\") == 0;\n+\t      int len = is_at_symbol ? atsign - sym->name : 0;\n+\n+\t      if (is_at_symbol\n+\t\t  && !is_plt\n+\t\t  && (elf_sym->version & VERSYM_HIDDEN) == 0)\n+\t\trecord_minimal_symbol (reader,\n+\t\t\t\t       gdb::string_view (sym->name, len),\n+\t\t\t\t       true, symaddr, ms_type, sym->section,\n+\t\t\t\t       objfile);\n+\t      else if (is_plt)\n \t\t{\n-\t\t  struct minimal_symbol *mtramp;\n-\n-\t\t  mtramp = record_minimal_symbol\n-\t\t    (reader, gdb::string_view (sym->name, len - 4), true,\n-\t\t     symaddr, mst_solib_trampoline, sym->section, objfile);\n-\t\t  if (mtramp)\n+\t\t  /* For @plt symbols, also record a trampoline to the\n+\t\t     destination symbol.  The @plt symbol will be used\n+\t\t     in disassembly, and the trampoline will be used\n+\t\t     when we are trying to find the target.  */\n+\t\t  if (ms_type == mst_text && type == ST_SYNTHETIC)\n \t\t    {\n-\t\t      SET_MSYMBOL_SIZE (mtramp, MSYMBOL_SIZE (msym));\n-\t\t      mtramp->created_by_gdb = 1;\n-\t\t      mtramp->filename = filesymname;\n-\t\t      if (elf_make_msymbol_special_p)\n-\t\t\tgdbarch_elf_make_msymbol_special (gdbarch,\n-\t\t\t\t\t\t\t  sym, mtramp);\n+\t\t      struct minimal_symbol *mtramp;\n+\n+\t\t      mtramp = record_minimal_symbol\n+\t\t\t(reader, gdb::string_view (sym->name, len), true,\n+\t\t\t symaddr, mst_solib_trampoline, sym->section, objfile);\n+\t\t      if (mtramp)\n+\t\t\t{\n+\t\t\t  SET_MSYMBOL_SIZE (mtramp, MSYMBOL_SIZE (msym));\n+\t\t\t  mtramp->created_by_gdb = 1;\n+\t\t\t  mtramp->filename = filesymname;\n+\t\t\t  if (elf_make_msymbol_special_p)\n+\t\t\t    gdbarch_elf_make_msymbol_special (gdbarch,\n+\t\t\t\t\t\t\t      sym, mtramp);\n+\t\t\t}\n \t\t    }\n \t\t}\n \t    }"
    }
  ]
}