{
  "sha": "63538d8e16bca32e8d03c3d1309c5ed8894a59b4",
  "node_id": "C_kwDOANOeidoAKDYzNTM4ZDhlMTZiY2EzMmU4ZDAzYzNkMTMwOWM1ZWQ4ODk0YTU5YjQ",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-11-29T18:34:17Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-12-04T18:16:22Z"
    },
    "message": "Cache the result of find_file_and_directory\n\nThis changes the DWARF reader to cache the result of\nfind_file_and_directory.  This is not especially important now, but it\nwill help the new DWARF indexer.",
    "tree": {
      "sha": "4606fa4a9c376cc5351c241dd522e19306986ed2",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/4606fa4a9c376cc5351c241dd522e19306986ed2"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/63538d8e16bca32e8d03c3d1309c5ed8894a59b4",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/63538d8e16bca32e8d03c3d1309c5ed8894a59b4",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/63538d8e16bca32e8d03c3d1309c5ed8894a59b4",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/63538d8e16bca32e8d03c3d1309c5ed8894a59b4/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "bb3f8ae2902a9878a25fad21efd23fe0f888c232",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/bb3f8ae2902a9878a25fad21efd23fe0f888c232",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/bb3f8ae2902a9878a25fad21efd23fe0f888c232"
    }
  ],
  "stats": {
    "total": 26,
    "additions": 18,
    "deletions": 8
  },
  "files": [
    {
      "sha": "ff5758eb0a4350b3e4a87a697a5f0969e2e3d899",
      "filename": "gdb/dwarf2/read.c",
      "status": "modified",
      "additions": 11,
      "deletions": 8,
      "changes": 19,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/63538d8e16bca32e8d03c3d1309c5ed8894a59b4/gdb/dwarf2/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/63538d8e16bca32e8d03c3d1309c5ed8894a59b4/gdb/dwarf2/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.c?ref=63538d8e16bca32e8d03c3d1309c5ed8894a59b4",
      "patch": "@@ -34,7 +34,6 @@\n #include \"dwarf2/attribute.h\"\n #include \"dwarf2/comp-unit-head.h\"\n #include \"dwarf2/cu.h\"\n-#include \"dwarf2/file-and-dir.h\"\n #include \"dwarf2/index-cache.h\"\n #include \"dwarf2/index-common.h\"\n #include \"dwarf2/leb.h\"\n@@ -1538,8 +1537,8 @@ dwarf2_per_cu_data_deleter::operator() (dwarf2_per_cu_data *data)\n     delete data;\n }\n \n-static file_and_directory find_file_and_directory (struct die_info *die,\n-\t\t\t\t\t\t   struct dwarf2_cu *cu);\n+static file_and_directory &find_file_and_directory\n+     (struct die_info *die, struct dwarf2_cu *cu);\n \n static const char *compute_include_file_name\n      (const struct line_header *lh,\n@@ -3006,7 +3005,7 @@ dw2_get_file_names_reader (const struct die_reader_specs *reader,\n       lh = dwarf_decode_line_header (line_offset, cu);\n     }\n \n-  file_and_directory fnd = find_file_and_directory (comp_unit_die, cu);\n+  file_and_directory &fnd = find_file_and_directory (comp_unit_die, cu);\n \n   int offset = 0;\n   if (fnd.is_unknown ())\n@@ -6989,7 +6988,7 @@ process_psymtab_comp_unit_reader (const struct die_reader_specs *reader,\n   /* Allocate a new partial symbol table structure.  */\n   gdb::unique_xmalloc_ptr<char> debug_filename;\n   static const char artificial[] = \"<artificial>\";\n-  file_and_directory fnd = find_file_and_directory (comp_unit_die, cu);\n+  file_and_directory &fnd = find_file_and_directory (comp_unit_die, cu);\n   if (strcmp (fnd.get_name (), artificial) == 0)\n     {\n       debug_filename.reset (concat (artificial, \"@\",\n@@ -10475,9 +10474,12 @@ producer_is_gcc_lt_4_3 (struct dwarf2_cu *cu)\n   return cu->producer_is_gcc_lt_4_3;\n }\n \n-static file_and_directory\n+static file_and_directory &\n find_file_and_directory (struct die_info *die, struct dwarf2_cu *cu)\n {\n+  if (cu->per_cu->fnd != nullptr)\n+    return *cu->per_cu->fnd;\n+\n   /* Find the filename.  Do not use dwarf2_name here, since the filename\n      is not a source language identifier.  */\n   file_and_directory res (dwarf2_string_attr (die, DW_AT_name, cu),\n@@ -10489,7 +10491,8 @@ find_file_and_directory (struct die_info *die, struct dwarf2_cu *cu)\n       && IS_ABSOLUTE_PATH (res.get_name ()))\n     res.set_comp_dir (ldirname (res.get_name ()));\n \n-  return res;\n+  cu->per_cu->fnd.reset (new file_and_directory (std::move (res)));\n+  return *cu->per_cu->fnd;\n }\n \n /* Handle DW_AT_stmt_list for a compilation unit.\n@@ -10617,7 +10620,7 @@ read_file_scope (struct die_info *die, struct dwarf2_cu *cu)\n     lowpc = highpc;\n   lowpc = gdbarch_adjust_dwarf2_addr (gdbarch, lowpc + baseaddr);\n \n-  file_and_directory fnd = find_file_and_directory (die, cu);\n+  file_and_directory &fnd = find_file_and_directory (die, cu);\n \n   cu->start_symtab (fnd.get_name (), fnd.intern_comp_dir (objfile), lowpc);\n "
    },
    {
      "sha": "2f849d5f9a1df90b2c93eb53a74f8a8d4db687e1",
      "filename": "gdb/dwarf2/read.h",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/63538d8e16bca32e8d03c3d1309c5ed8894a59b4/gdb/dwarf2/read.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/63538d8e16bca32e8d03c3d1309c5ed8894a59b4/gdb/dwarf2/read.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.h?ref=63538d8e16bca32e8d03c3d1309c5ed8894a59b4",
      "patch": "@@ -23,6 +23,7 @@\n #include <queue>\n #include <unordered_map>\n #include \"dwarf2/comp-unit-head.h\"\n+#include \"dwarf2/file-and-dir.h\"\n #include \"dwarf2/index-cache.h\"\n #include \"dwarf2/section.h\"\n #include \"filename-seen-cache.h\"\n@@ -179,6 +180,12 @@ struct dwarf2_per_cu_data\n      should be private, but we can't make it private at the moment.  */\n   mutable comp_unit_head m_header {};\n \n+  /* The file and directory for this CU.  This is cached so that we\n+     don't need to re-examine the DWO in some situations.  This may be\n+     nullptr, depending on the CU; for example a partial unit won't\n+     have one.  */\n+  std::unique_ptr<file_and_directory> fnd;\n+\n   /* When dwarf2_per_bfd::using_index is true, the 'quick' field\n      is active.  Otherwise, the 'psymtab' field is active.  */\n   union"
    }
  ]
}