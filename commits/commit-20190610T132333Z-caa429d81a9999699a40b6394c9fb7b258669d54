{
  "sha": "caa429d81a9999699a40b6394c9fb7b258669d54",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6Y2FhNDI5ZDgxYTk5OTk2OTlhNDBiNjM5NGM5ZmI3YjI1ODY2OWQ1NA==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2019-06-07T21:01:50Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2019-06-10T13:23:33Z"
    },
    "message": "Delay allocation of dbx_symfile_info\n\nI noticed that elfread.c always allocates a dbx_symfile_info, even\nthough this is only ever needed in the unusual case of reading stabs\nin ELF.\n\nThis patch moves the allocation into dbxread.c, and applies the same\ntreatment to similar code in coffread.c.\n\nRegression tested on x86-64 Fedora 29.\n\ngdb/ChangeLog\n2019-06-10  Tom Tromey  <tromey@adacore.com>\n\n\t* elfread.c (elf_read_minimal_symbols): Don't set the dbx objfile\n\tdata.\n\t(elf_new_init): Don't call stabsread_new_init.\n\t* dbxread.c (coffstab_build_psymtabs): Set dbx objfile data.\n\t(elfstab_build_psymtabs): Likewise.  Call stabsread_new_init.\n\t* coffread.c (coff_symfile_init): Don't set the dbx objfile data.",
    "tree": {
      "sha": "d187635e25600efbb6e97f688ac500daed5f7907",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/d187635e25600efbb6e97f688ac500daed5f7907"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/caa429d81a9999699a40b6394c9fb7b258669d54",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/caa429d81a9999699a40b6394c9fb7b258669d54",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/caa429d81a9999699a40b6394c9fb7b258669d54",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/caa429d81a9999699a40b6394c9fb7b258669d54/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "2e02f29632218fc24d71fbbefc368d551d0528a7",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2e02f29632218fc24d71fbbefc368d551d0528a7",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/2e02f29632218fc24d71fbbefc368d551d0528a7"
    }
  ],
  "stats": {
    "total": 38,
    "additions": 20,
    "deletions": 18
  },
  "files": [
    {
      "sha": "795ba4570f260f4f2ff369c9838d1a22d2f7828a",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/caa429d81a9999699a40b6394c9fb7b258669d54/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/caa429d81a9999699a40b6394c9fb7b258669d54/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=caa429d81a9999699a40b6394c9fb7b258669d54",
      "patch": "@@ -1,3 +1,12 @@\n+2019-06-10  Tom Tromey  <tromey@adacore.com>\n+\n+\t* elfread.c (elf_read_minimal_symbols): Don't set the dbx objfile\n+\tdata.\n+\t(elf_new_init): Don't call stabsread_new_init.\n+\t* dbxread.c (coffstab_build_psymtabs): Set dbx objfile data.\n+\t(elfstab_build_psymtabs): Likewise.  Call stabsread_new_init.\n+\t* coffread.c (coff_symfile_init): Don't set the dbx objfile data.\n+\n 2019-06-10  Tom de Vries  <tdevries@suse.de>\n \n \tPR symtab/16264"
    },
    {
      "sha": "6e379dd1e5241bbe26c15d32ddab11df803db002",
      "filename": "gdb/coffread.c",
      "status": "modified",
      "additions": 0,
      "deletions": 7,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/caa429d81a9999699a40b6394c9fb7b258669d54/gdb/coffread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/caa429d81a9999699a40b6394c9fb7b258669d54/gdb/coffread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/coffread.c?ref=caa429d81a9999699a40b6394c9fb7b258669d54",
      "patch": "@@ -31,7 +31,6 @@\n #include \"libcoff.h\"\t\t/* FIXME secret internal data from BFD */\n #include \"objfiles.h\"\n #include \"buildsym-legacy.h\"\n-#include \"gdb-stabs.h\"\n #include \"stabsread.h\"\n #include \"complaints.h\"\n #include \"target.h\"\n@@ -484,12 +483,6 @@ record_minimal_symbol (minimal_symbol_reader &reader,\n static void\n coff_symfile_init (struct objfile *objfile)\n {\n-  struct dbx_symfile_info *dbx;\n-\n-  /* Allocate struct to keep track of stab reading.  */\n-  dbx = XCNEW (struct dbx_symfile_info);\n-  set_objfile_data (objfile, dbx_objfile_data_key, dbx);\n-\n   /* Allocate struct to keep track of the symfile.  */\n   coff_objfile_data_key.emplace (objfile);\n "
    },
    {
      "sha": "307debd2824fa763320e6f18af1e47c45b032095",
      "filename": "gdb/dbxread.c",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/caa429d81a9999699a40b6394c9fb7b258669d54/gdb/dbxread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/caa429d81a9999699a40b6394c9fb7b258669d54/gdb/dbxread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dbxread.c?ref=caa429d81a9999699a40b6394c9fb7b258669d54",
      "patch": "@@ -2951,6 +2951,10 @@ coffstab_build_psymtabs (struct objfile *objfile,\n   char *name = bfd_get_filename (sym_bfd);\n   unsigned int stabsize;\n \n+  /* Allocate struct to keep track of stab reading.  */\n+  struct dbx_symfile_info *dbx = XCNEW (struct dbx_symfile_info);\n+  set_objfile_data (objfile, dbx_objfile_data_key, dbx);\n+\n   DBX_TEXT_ADDR (objfile) = textaddr;\n   DBX_TEXT_SIZE (objfile) = textsize;\n \n@@ -3034,6 +3038,12 @@ elfstab_build_psymtabs (struct objfile *objfile, asection *stabsect,\n   bfd *sym_bfd = objfile->obfd;\n   char *name = bfd_get_filename (sym_bfd);\n \n+  stabsread_new_init ();\n+\n+  /* Allocate struct to keep track of stab reading.  */\n+  struct dbx_symfile_info *dbx = XCNEW (struct dbx_symfile_info);\n+  set_objfile_data (objfile, dbx_objfile_data_key, dbx);\n+\n   /* Find the first and last text address.  dbx_symfile_read seems to\n      want this.  */\n   find_text_range (sym_bfd, objfile);"
    },
    {
      "sha": "630550b80dc326416a07aa2febaccfd17b71c5d0",
      "filename": "gdb/elfread.c",
      "status": "modified",
      "additions": 1,
      "deletions": 11,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/caa429d81a9999699a40b6394c9fb7b258669d54/gdb/elfread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/caa429d81a9999699a40b6394c9fb7b258669d54/gdb/elfread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/elfread.c?ref=caa429d81a9999699a40b6394c9fb7b258669d54",
      "patch": "@@ -29,7 +29,6 @@\n #include \"symfile.h\"\n #include \"objfiles.h\"\n #include \"stabsread.h\"\n-#include \"gdb-stabs.h\"\n #include \"complaints.h\"\n #include \"demangle.h\"\n #include \"psympriv.h\"\n@@ -1039,7 +1038,6 @@ elf_read_minimal_symbols (struct objfile *objfile, int symfile_flags,\n   long symcount = 0, dynsymcount = 0, synthcount, storage_needed;\n   asymbol **symbol_table = NULL, **dyn_symbol_table = NULL;\n   asymbol *synthsyms;\n-  struct dbx_symfile_info *dbx;\n \n   if (symtab_create_debug)\n     {\n@@ -1065,10 +1063,6 @@ elf_read_minimal_symbols (struct objfile *objfile, int symfile_flags,\n \n   minimal_symbol_reader reader (objfile);\n \n-  /* Allocate struct to keep track of the symfile.  */\n-  dbx = XCNEW (struct dbx_symfile_info);\n-  set_objfile_data (objfile, dbx_objfile_data_key, dbx);\n-\n   /* Process the normal ELF symbol table first.  */\n \n   storage_needed = bfd_get_symtab_upper_bound (objfile->obfd);\n@@ -1316,15 +1310,11 @@ read_psyms (struct objfile *objfile)\n \n /* Initialize anything that needs initializing when a completely new symbol\n    file is specified (not just adding some symbols from another file, e.g. a\n-   shared library).\n-\n-   We reinitialize buildsym, since we may be reading stabs from an ELF\n-   file.  */\n+   shared library).  */\n \n static void\n elf_new_init (struct objfile *ignore)\n {\n-  stabsread_new_init ();\n }\n \n /* Perform any local cleanups required when we are done with a particular"
    }
  ]
}