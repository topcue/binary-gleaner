{
  "sha": "5b660084e26050d2e7f1fda06daec1e83311c188",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NWI2NjAwODRlMjYwNTBkMmU3ZjFmZGEwNmRhZWMxZTgzMzExYzE4OA==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-12-17T03:53:55Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-12-17T06:06:54Z"
    },
    "message": "Remove tic80 support\n\nThis is one way of fixing ubsan bug reports, just delete the code.\n\nThe assembler support was removed back in 2005 along with other\nnon-BFD assemblers, but somehow the remainder of the port stayed in.\n\nbfd/\n\t* coff-tic80.c: Delete file.\n\t* cpu-tic80.c: Delete file.\n\t* archures.c: Remove tic80 support.\n\t* coffcode.h: Likewise.\n\t* coffswap.h: Likewise.\n\t* targets.c: Likewise.\n\t* config.bfd: Likewise.\n\t* configure.ac: Likewise.\n\t* Makefile.am: Likewise.\n\t* Makefile.in: Regenerate.\n\t* bfd-in2.h: Regenerate.\n\t* configure: Regenerate.\n\t* po/SRC-POTFILES.in: Regenerate.\nbinutils/\n\t* testsuite/binutils-all/objcopy.exp: Remove tic80 support.\n\t* testsuite/binutils-all/objdump.exp: Likewise.\ngas/\n\t* doc/as.texi: Remove mention of tic80.\ninclude/\n\t* coff/tic80.h: Delete file.\n\t* opcode/tic80.h: Delete file.\nld/\n\t* emulparams/tic80coff.sh: Delete file.\n\t* scripttempl/tic80coff.sc: Delete file.\n\t* configure.tgt: Remove tic80 support.\n\t* Makefile.am: Likewise.\n\t* Makefile.in: Regenerate.\n\t* po/BLD-POTFILES.in: Regenerate.\nopcodes/\n\t* tic80-dis.c: Delete file.\n\t* tic80-opc.c: Delete file.\n\t* disassemble.c: Remove tic80 support.\n\t* disassemble.h: Likewise.\n\t* Makefile.am: Likewise.\n\t* configure.ac: Likewise.\n\t* Makefile.in: Regenerate.\n\t* configure: Regenerate.\n\t* po/POTFILES.in: Regenerate.",
    "tree": {
      "sha": "3cc8a64338afe4cb610c60c75a71e0e85e8d784c",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/3cc8a64338afe4cb610c60c75a71e0e85e8d784c"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/5b660084e26050d2e7f1fda06daec1e83311c188",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5b660084e26050d2e7f1fda06daec1e83311c188",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/5b660084e26050d2e7f1fda06daec1e83311c188",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5b660084e26050d2e7f1fda06daec1e83311c188/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "62e6599087efba193e0156d89ee65fb74fc99cb2",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/62e6599087efba193e0156d89ee65fb74fc99cb2",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/62e6599087efba193e0156d89ee65fb74fc99cb2"
    }
  ],
  "stats": {
    "total": 2957,
    "additions": 55,
    "deletions": 2902
  },
  "files": [
    {
      "sha": "61ef89fa1c7ec76d6d113a148064b39912a65c99",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 16,
      "deletions": 0,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5b660084e26050d2e7f1fda06daec1e83311c188/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5b660084e26050d2e7f1fda06daec1e83311c188/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=5b660084e26050d2e7f1fda06daec1e83311c188",
      "patch": "@@ -1,3 +1,19 @@\n+2019-12-17  Alan Modra  <amodra@gmail.com>\n+\n+\t* coff-tic80.c: Delete file.\n+\t* cpu-tic80.c: Delete file.\n+\t* archures.c: Remove tic80 support.\n+\t* coffcode.h: Likewise.\n+\t* coffswap.h: Likewise.\n+\t* targets.c: Likewise.\n+\t* config.bfd: Likewise.\n+\t* configure.ac: Likewise.\n+\t* Makefile.am: Likewise.\n+\t* Makefile.in: Regenerate.\n+\t* bfd-in2.h: Regenerate.\n+\t* configure: Regenerate.\n+\t* po/SRC-POTFILES.in: Regenerate.\n+\n 2019-12-13  Alan Modra  <amodra@gmail.com>\n \n \tPR 25237"
    },
    {
      "sha": "92c3b367b1bc8b5e1e7b00366ec71156fe8d13c4",
      "filename": "bfd/Makefile.am",
      "status": "modified",
      "additions": 0,
      "deletions": 4,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5b660084e26050d2e7f1fda06daec1e83311c188/bfd/Makefile.am",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5b660084e26050d2e7f1fda06daec1e83311c188/bfd/Makefile.am",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/Makefile.am?ref=5b660084e26050d2e7f1fda06daec1e83311c188",
      "patch": "@@ -160,7 +160,6 @@ ALL_MACHINES = \\\n \tcpu-tic4x.lo \\\n \tcpu-tic54x.lo \\\n \tcpu-tic6x.lo \\\n-\tcpu-tic80.lo \\\n \tcpu-tilegx.lo \\\n \tcpu-tilepro.lo \\\n \tcpu-v850.lo \\\n@@ -246,7 +245,6 @@ ALL_MACHINES_CFILES = \\\n \tcpu-tic4x.c \\\n \tcpu-tic54x.c \\\n \tcpu-tic6x.c \\\n-\tcpu-tic80.c \\\n \tcpu-tilegx.c \\\n \tcpu-tilepro.c \\\n \tcpu-v850.c \\\n@@ -278,7 +276,6 @@ BFD32_BACKENDS = \\\n \tcoff-tic30.lo \\\n \tcoff-tic4x.lo \\\n \tcoff-tic54x.lo \\\n-\tcoff-tic80.lo \\\n \tcoff-z80.lo \\\n \tcoff-z8k.lo \\\n \tcoffgen.lo \\\n@@ -414,7 +411,6 @@ BFD32_BACKENDS_CFILES = \\\n \tcoff-tic30.c \\\n \tcoff-tic4x.c \\\n \tcoff-tic54x.c \\\n-\tcoff-tic80.c \\\n \tcoff-z80.c \\\n \tcoff-z8k.c \\\n \tcoffgen.c \\"
    },
    {
      "sha": "1e172608ac5ef709c18d26dff16ec9c9229869aa",
      "filename": "bfd/Makefile.in",
      "status": "modified",
      "additions": 0,
      "deletions": 6,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5b660084e26050d2e7f1fda06daec1e83311c188/bfd/Makefile.in",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5b660084e26050d2e7f1fda06daec1e83311c188/bfd/Makefile.in",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/Makefile.in?ref=5b660084e26050d2e7f1fda06daec1e83311c188",
      "patch": "@@ -584,7 +584,6 @@ ALL_MACHINES = \\\n \tcpu-tic4x.lo \\\n \tcpu-tic54x.lo \\\n \tcpu-tic6x.lo \\\n-\tcpu-tic80.lo \\\n \tcpu-tilegx.lo \\\n \tcpu-tilepro.lo \\\n \tcpu-v850.lo \\\n@@ -670,7 +669,6 @@ ALL_MACHINES_CFILES = \\\n \tcpu-tic4x.c \\\n \tcpu-tic54x.c \\\n \tcpu-tic6x.c \\\n-\tcpu-tic80.c \\\n \tcpu-tilegx.c \\\n \tcpu-tilepro.c \\\n \tcpu-v850.c \\\n@@ -703,7 +701,6 @@ BFD32_BACKENDS = \\\n \tcoff-tic30.lo \\\n \tcoff-tic4x.lo \\\n \tcoff-tic54x.lo \\\n-\tcoff-tic80.lo \\\n \tcoff-z80.lo \\\n \tcoff-z8k.lo \\\n \tcoffgen.lo \\\n@@ -839,7 +836,6 @@ BFD32_BACKENDS_CFILES = \\\n \tcoff-tic30.c \\\n \tcoff-tic4x.c \\\n \tcoff-tic54x.c \\\n-\tcoff-tic80.c \\\n \tcoff-z80.c \\\n \tcoff-z8k.c \\\n \tcoffgen.c \\\n@@ -1323,7 +1319,6 @@ distclean-compile:\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/coff-tic30.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/coff-tic4x.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/coff-tic54x.Plo@am__quote@\n-@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/coff-tic80.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/coff-x86_64.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/coff-z80.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/coff-z8k.Plo@am__quote@\n@@ -1402,7 +1397,6 @@ distclean-compile:\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/cpu-tic4x.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/cpu-tic54x.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/cpu-tic6x.Plo@am__quote@\n-@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/cpu-tic80.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/cpu-tilegx.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/cpu-tilepro.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/cpu-v850.Plo@am__quote@"
    },
    {
      "sha": "e8873d49687a786b3f6b31302ef77f05c2a248b1",
      "filename": "bfd/archures.c",
      "status": "modified",
      "additions": 0,
      "deletions": 3,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5b660084e26050d2e7f1fda06daec1e83311c188/bfd/archures.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5b660084e26050d2e7f1fda06daec1e83311c188/bfd/archures.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/archures.c?ref=5b660084e26050d2e7f1fda06daec1e83311c188",
      "patch": "@@ -355,7 +355,6 @@ DESCRIPTION\n .#define bfd_mach_tic4x\t\t40\n .  bfd_arch_tic54x,    {* Texas Instruments TMS320C54X.  *}\n .  bfd_arch_tic6x,     {* Texas Instruments TMS320C6X.  *}\n-.  bfd_arch_tic80,     {* TI TMS320c80 (MVP).  *}\n .  bfd_arch_v850,      {* NEC V850.  *}\n .  bfd_arch_v850_rh850,{* NEC V850 (using RH850 ABI).  *}\n .#define bfd_mach_v850\t\t1\n@@ -668,7 +667,6 @@ extern const bfd_arch_info_type bfd_tic30_arch;\n extern const bfd_arch_info_type bfd_tic4x_arch;\n extern const bfd_arch_info_type bfd_tic54x_arch;\n extern const bfd_arch_info_type bfd_tic6x_arch;\n-extern const bfd_arch_info_type bfd_tic80_arch;\n extern const bfd_arch_info_type bfd_tilegx_arch;\n extern const bfd_arch_info_type bfd_tilepro_arch;\n extern const bfd_arch_info_type bfd_v850_arch;\n@@ -756,7 +754,6 @@ static const bfd_arch_info_type * const bfd_archures_list[] =\n     &bfd_tic4x_arch,\n     &bfd_tic54x_arch,\n     &bfd_tic6x_arch,\n-    &bfd_tic80_arch,\n     &bfd_tilegx_arch,\n     &bfd_tilepro_arch,\n     &bfd_v850_arch,"
    },
    {
      "sha": "c6a58018dc141f390d0162d09a33bd7c8dfb7e1c",
      "filename": "bfd/bfd-in2.h",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5b660084e26050d2e7f1fda06daec1e83311c188/bfd/bfd-in2.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5b660084e26050d2e7f1fda06daec1e83311c188/bfd/bfd-in2.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/bfd-in2.h?ref=5b660084e26050d2e7f1fda06daec1e83311c188",
      "patch": "@@ -1738,7 +1738,6 @@ enum bfd_architecture\n #define bfd_mach_tic4x         40\n   bfd_arch_tic54x,    /* Texas Instruments TMS320C54X.  */\n   bfd_arch_tic6x,     /* Texas Instruments TMS320C6X.  */\n-  bfd_arch_tic80,     /* TI TMS320c80 (MVP).  */\n   bfd_arch_v850,      /* NEC V850.  */\n   bfd_arch_v850_rh850,/* NEC V850 (using RH850 ABI).  */\n #define bfd_mach_v850          1"
    },
    {
      "sha": "9e49a166a68529b63f0025f6ea9ac3ea95eab6e0",
      "filename": "bfd/coff-tic80.c",
      "status": "removed",
      "additions": 0,
      "deletions": 711,
      "changes": 711,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/62e6599087efba193e0156d89ee65fb74fc99cb2/bfd/coff-tic80.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/62e6599087efba193e0156d89ee65fb74fc99cb2/bfd/coff-tic80.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/coff-tic80.c?ref=62e6599087efba193e0156d89ee65fb74fc99cb2",
      "patch": "@@ -1,711 +0,0 @@\n-/* BFD back-end for Texas Instruments TMS320C80 Multimedia Video Processor (MVP).\n-   Copyright (C) 1996-2019 Free Software Foundation, Inc.\n-\n-   Written by Fred Fish (fnf@cygnus.com)\n-\n-   There is nothing new under the sun. This file draws a lot on other\n-   coff files.\n-\n-   This file is part of BFD, the Binary File Descriptor library.\n-\n-   This program is free software; you can redistribute it and/or modify\n-   it under the terms of the GNU General Public License as published by\n-   the Free Software Foundation; either version 3 of the License, or\n-   (at your option) any later version.\n-\n-   This program is distributed in the hope that it will be useful,\n-   but WITHOUT ANY WARRANTY; without even the implied warranty of\n-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-   GNU General Public License for more details.\n-\n-   You should have received a copy of the GNU General Public License\n-   along with this program; if not, write to the Free Software\n-   Foundation, 51 Franklin Street - Fifth Floor,\n-   Boston, MA 02110-1301, USA.  */\n-\n-#include \"sysdep.h\"\n-#include \"bfd.h\"\n-#include \"bfdlink.h\"\n-#include \"libbfd.h\"\n-#ifdef _CONST\n-/* Newlib-based hosts define _CONST as a STDC-safe alias for const,\n-  but to the tic80 toolchain it means something altogether different.\n-  Since sysdep.h will have pulled in stdio.h and hence _ansi.h which\n-  contains this definition, we must undef it before including the\n-  tic80-specific definition. */\n-#undef _CONST\n-#endif /* _CONST */\n-#include \"coff/tic80.h\"\n-#include \"coff/internal.h\"\n-#include \"libcoff.h\"\n-\n-#define COFF_DEFAULT_SECTION_ALIGNMENT_POWER (2)\n-#define COFF_ALIGN_IN_SECTION_HEADER 1\n-#define COFF_ALIGN_IN_SFLAGS 1\n-#define COFF_ENCODE_ALIGNMENT(S,X) ((S).s_flags |= (((unsigned)(X) & 0xf) << 8))\n-#define COFF_DECODE_ALIGNMENT(X) (((X) >> 8) & 0xf)\n-\n-#define GET_SCNHDR_FLAGS H_GET_16\n-#define PUT_SCNHDR_FLAGS H_PUT_16\n-\n-static bfd_reloc_status_type ppbase_reloc\n-  (bfd *, arelent *, asymbol *, void *, asection *, bfd *, char **);\n-static bfd_reloc_status_type glob15_reloc\n-  (bfd *, arelent *, asymbol *, void *, asection *, bfd *, char **);\n-static bfd_reloc_status_type glob16_reloc\n-  (bfd *, arelent *, asymbol *, void *, asection *, bfd *, char **);\n-static bfd_reloc_status_type local16_reloc\n-  (bfd *, arelent *, asymbol *, void *, asection *, bfd *, char **);\n-\n-\n-static reloc_howto_type tic80_howto_table[] =\n-{\n-\n-  HOWTO (R_RELLONG,\t\t\t/* type */\n-\t 0,\t\t\t\t/* rightshift */\n-\t 2,\t\t\t\t/* size (0 = byte, 1 = short, 2 = long) */\n-\t 32,\t\t\t\t/* bitsize */\n-\t FALSE,\t\t\t\t/* pc_relative */\n-\t 0,\t\t\t\t/* bitpos */\n-\t complain_overflow_bitfield,\t/* complain_on_overflow */\n-\t NULL,\t\t\t\t/* special_function */\n-\t \"RELLONG\",\t\t\t/* name */\n-\t TRUE,\t\t\t\t/* partial_inplace */\n-\t 0xffffffff,\t\t\t/* src_mask */\n-\t 0xffffffff,\t\t\t/* dst_mask */\n-\t FALSE),\t\t\t/* pcrel_offset */\n-\n-  HOWTO (R_MPPCR,\t\t\t/* type */\n-\t 2,\t\t\t\t/* rightshift */\n-\t 2,\t\t\t\t/* size (0 = byte, 1 = short, 2 = long) */\n-\t 32,\t\t\t\t/* bitsize */\n-\t TRUE,\t\t\t\t/* pc_relative */\n-\t 0,\t\t\t\t/* bitpos */\n-\t complain_overflow_signed,\t/* complain_on_overflow */\n-\t NULL,\t\t\t\t/* special_function */\n-\t \"MPPCR\",\t\t\t/* name */\n-\t TRUE,\t\t\t\t/* partial_inplace */\n-\t 0xffffffff,\t\t\t/* src_mask */\n-\t 0xffffffff,\t\t\t/* dst_mask */\n-\t TRUE),\t\t\t\t/* pcrel_offset */\n-\n-  HOWTO (R_ABS,\t\t\t\t/* type */\n-\t 0,\t\t\t\t/* rightshift */\n-\t 2,\t\t\t\t/* size (0 = byte, 1 = short, 2 = long) */\n-\t 32,\t\t\t\t/* bitsize */\n-\t FALSE,\t\t\t\t/* pc_relative */\n-\t 0,\t\t\t\t/* bitpos */\n-\t complain_overflow_bitfield,\t/* complain_on_overflow */\n-\t NULL,\t\t\t\t/* special_function */\n-\t \"ABS\",\t\t\t\t/* name */\n-\t TRUE,\t\t\t\t/* partial_inplace */\n-\t 0xffffffff,\t\t\t/* src_mask */\n-\t 0xffffffff,\t\t\t/* dst_mask */\n-\t FALSE),\t\t\t\t/* pcrel_offset */\n-\n-  HOWTO (R_PPBASE,\t\t\t/* type */\n-\t 0,\t\t\t\t/* rightshift */\n-\t 2,\t\t\t\t/* size (0 = byte, 1 = short, 2 = long) */\n-\t 32,\t\t\t\t/* bitsize */\n-\t FALSE,\t\t\t\t/* pc_relative */\n-\t 0,\t\t\t\t/* bitpos */\n-\t complain_overflow_dont,\t/* complain_on_overflow */\n-\t ppbase_reloc,\t\t\t/* special_function */\n-\t \"PPBASE\",\t\t\t/* name */\n-\t TRUE,\t\t\t\t/* partial_inplace */\n-\t 0xffffffff,\t\t\t/* src_mask */\n-\t 0xffffffff,\t\t\t/* dst_mask */\n-\t FALSE),\t\t\t/* pcrel_offset */\n-\n-  HOWTO (R_PPLBASE,\t\t\t/* type */\n-\t 0,\t\t\t\t/* rightshift */\n-\t 2,\t\t\t\t/* size (0 = byte, 1 = short, 2 = long) */\n-\t 32,\t\t\t\t/* bitsize */\n-\t FALSE,\t\t\t\t/* pc_relative */\n-\t 0,\t\t\t\t/* bitpos */\n-\t complain_overflow_dont,\t/* complain_on_overflow */\n-\t ppbase_reloc,\t\t\t/* special_function */\n-\t \"PPLBASE\",\t\t\t/* name */\n-\t TRUE,\t\t\t\t/* partial_inplace */\n-\t 0xffffffff,\t\t\t/* src_mask */\n-\t 0xffffffff,\t\t\t/* dst_mask */\n-\t FALSE),\t\t\t/* pcrel_offset */\n-\n-  HOWTO (R_PP15,\t\t\t/* type */\n-\t 0,\t\t\t\t/* rightshift */\n-\t 2,\t\t\t\t/* size (0 = byte, 1 = short, 2 = long) */\n-\t 15,\t\t\t\t/* bitsize */\n-\t FALSE,\t\t\t\t/* pc_relative */\n-\t 6,\t\t\t\t/* bitpos */\n-\t complain_overflow_dont,\t/* complain_on_overflow */\n-\t glob15_reloc,\t\t\t/* special_function */\n-\t \"PP15\",\t\t\t/* name */\n-\t TRUE,\t\t\t\t/* partial_inplace */\n-\t 0x1ffc0,\t\t\t/* src_mask */\n-\t 0x1ffc0,\t\t\t/* dst_mask */\n-\t FALSE),\t\t\t/* pcrel_offset */\n-\n-  HOWTO (R_PP15W,\t\t\t/* type */\n-\t 2,\t\t\t\t/* rightshift */\n-\t 2,\t\t\t\t/* size (0 = byte, 1 = short, 2 = long) */\n-\t 15,\t\t\t\t/* bitsize */\n-\t FALSE,\t\t\t\t/* pc_relative */\n-\t 6,\t\t\t\t/* bitpos */\n-\t complain_overflow_dont,\t/* complain_on_overflow */\n-\t glob15_reloc,\t\t\t/* special_function */\n-\t \"PP15W\",\t\t\t/* name */\n-\t TRUE,\t\t\t\t/* partial_inplace */\n-\t 0x1ffc0,\t\t\t/* src_mask */\n-\t 0x1ffc0,\t\t\t/* dst_mask */\n-\t FALSE),\t\t\t/* pcrel_offset */\n-\n-  HOWTO (R_PP15H,\t\t\t/* type */\n-\t 1,\t\t\t\t/* rightshift */\n-\t 2,\t\t\t\t/* size (0 = byte, 1 = short, 2 = long) */\n-\t 15,\t\t\t\t/* bitsize */\n-\t FALSE,\t\t\t\t/* pc_relative */\n-\t 6,\t\t\t\t/* bitpos */\n-\t complain_overflow_dont,\t/* complain_on_overflow */\n-\t glob15_reloc,\t\t\t/* special_function */\n-\t \"PP15H\",\t\t\t/* name */\n-\t TRUE,\t\t\t\t/* partial_inplace */\n-\t 0x1ffc0,\t\t\t/* src_mask */\n-\t 0x1ffc0,\t\t\t/* dst_mask */\n-\t FALSE),\t\t\t/* pcrel_offset */\n-\n-  HOWTO (R_PP16B,\t\t\t/* type */\n-\t 0,\t\t\t\t/* rightshift */\n-\t 2,\t\t\t\t/* size (0 = byte, 1 = short, 2 = long) */\n-\t 16,\t\t\t\t/* bitsize */\n-\t FALSE,\t\t\t\t/* pc_relative */\n-\t 6,\t\t\t\t/* bitpos */\n-\t complain_overflow_dont,\t/* complain_on_overflow */\n-\t glob16_reloc,\t\t\t/* special_function */\n-\t \"PP16B\",\t\t\t/* name */\n-\t TRUE,\t\t\t\t/* partial_inplace */\n-\t 0x3ffc0,\t\t\t/* src_mask */\n-\t 0x3ffc0,\t\t\t/* dst_mask */\n-\t FALSE),\t\t\t/* pcrel_offset */\n-\n-  HOWTO (R_PPL15,\t\t\t/* type */\n-\t 0,\t\t\t\t/* rightshift */\n-\t 2,\t\t\t\t/* size (0 = byte, 1 = short, 2 = long) */\n-\t 15,\t\t\t\t/* bitsize */\n-\t FALSE,\t\t\t\t/* pc_relative */\n-\t 0,\t\t\t\t/* bitpos */\n-\t complain_overflow_dont,\t/* complain_on_overflow */\n-\t NULL,\t\t\t\t/* special_function */\n-\t \"PPL15\",\t\t\t/* name */\n-\t TRUE,\t\t\t\t/* partial_inplace */\n-\t 0x7fff,\t\t\t/* src_mask */\n-\t 0x7fff,\t\t\t/* dst_mask */\n-\t FALSE),\t\t\t/* pcrel_offset */\n-\n-  HOWTO (R_PPL15W,\t\t\t/* type */\n-\t 2,\t\t\t\t/* rightshift */\n-\t 2,\t\t\t\t/* size (0 = byte, 1 = short, 2 = long) */\n-\t 15,\t\t\t\t/* bitsize */\n-\t FALSE,\t\t\t\t/* pc_relative */\n-\t 0,\t\t\t\t/* bitpos */\n-\t complain_overflow_dont,\t/* complain_on_overflow */\n-\t NULL,\t\t\t\t/* special_function */\n-\t \"PPL15W\",\t\t\t/* name */\n-\t TRUE,\t\t\t\t/* partial_inplace */\n-\t 0x7fff,\t\t\t/* src_mask */\n-\t 0x7fff,\t\t\t/* dst_mask */\n-\t FALSE),\t\t\t/* pcrel_offset */\n-\n-  HOWTO (R_PPL15H,\t\t\t/* type */\n-\t 1,\t\t\t\t/* rightshift */\n-\t 2,\t\t\t\t/* size (0 = byte, 1 = short, 2 = long) */\n-\t 15,\t\t\t\t/* bitsize */\n-\t FALSE,\t\t\t\t/* pc_relative */\n-\t 0,\t\t\t\t/* bitpos */\n-\t complain_overflow_dont,\t/* complain_on_overflow */\n-\t NULL,\t\t\t\t/* special_function */\n-\t \"PPL15H\",\t\t\t/* name */\n-\t TRUE,\t\t\t\t/* partial_inplace */\n-\t 0x7fff,\t\t\t/* src_mask */\n-\t 0x7fff,\t\t\t/* dst_mask */\n-\t FALSE),\t\t\t/* pcrel_offset */\n-\n-  HOWTO (R_PPL16B,\t\t\t/* type */\n-\t 0,\t\t\t\t/* rightshift */\n-\t 2,\t\t\t\t/* size (0 = byte, 1 = short, 2 = long) */\n-\t 16,\t\t\t\t/* bitsize */\n-\t FALSE,\t\t\t\t/* pc_relative */\n-\t 0,\t\t\t\t/* bitpos */\n-\t complain_overflow_dont,\t/* complain_on_overflow */\n-\t local16_reloc,\t\t\t/* special_function */\n-\t \"PPL16B\",\t\t\t/* name */\n-\t TRUE,\t\t\t\t/* partial_inplace */\n-\t 0xffff,\t\t\t/* src_mask */\n-\t 0xffff,\t\t\t/* dst_mask */\n-\t FALSE),\t\t\t/* pcrel_offset */\n-\n-  HOWTO (R_PPN15,\t\t\t/* type */\n-\t 0,\t\t\t\t/* rightshift */\n-\t -2,\t\t\t\t/* size (0 = byte, 1 = short, 2 = long) */\n-\t 15,\t\t\t\t/* bitsize */\n-\t FALSE,\t\t\t\t/* pc_relative */\n-\t 6,\t\t\t\t/* bitpos */\n-\t complain_overflow_dont,\t/* complain_on_overflow */\n-\t glob15_reloc,\t\t\t/* special_function */\n-\t \"PPN15\",\t\t\t/* name */\n-\t TRUE,\t\t\t\t/* partial_inplace */\n-\t 0x1ffc0,\t\t\t/* src_mask */\n-\t 0x1ffc0,\t\t\t/* dst_mask */\n-\t FALSE),\t\t\t/* pcrel_offset */\n-\n-  HOWTO (R_PPN15W,\t\t\t/* type */\n-\t 2,\t\t\t\t/* rightshift */\n-\t -2,\t\t\t\t/* size (0 = byte, 1 = short, 2 = long) */\n-\t 15,\t\t\t\t/* bitsize */\n-\t FALSE,\t\t\t\t/* pc_relative */\n-\t 6,\t\t\t\t/* bitpos */\n-\t complain_overflow_dont,\t/* complain_on_overflow */\n-\t glob15_reloc,\t\t\t/* special_function */\n-\t \"PPN15W\",\t\t\t/* name */\n-\t TRUE,\t\t\t\t/* partial_inplace */\n-\t 0x1ffc0,\t\t\t/* src_mask */\n-\t 0x1ffc0,\t\t\t/* dst_mask */\n-\t FALSE),\t\t\t/* pcrel_offset */\n-\n-  HOWTO (R_PPN15H,\t\t\t/* type */\n-\t 1,\t\t\t\t/* rightshift */\n-\t -2,\t\t\t\t/* size (0 = byte, 1 = short, 2 = long) */\n-\t 15,\t\t\t\t/* bitsize */\n-\t FALSE,\t\t\t\t/* pc_relative */\n-\t 6,\t\t\t\t/* bitpos */\n-\t complain_overflow_dont,\t/* complain_on_overflow */\n-\t glob15_reloc,\t\t\t/* special_function */\n-\t \"PPN15H\",\t\t\t/* name */\n-\t TRUE,\t\t\t\t/* partial_inplace */\n-\t 0x1ffc0,\t\t\t/* src_mask */\n-\t 0x1ffc0,\t\t\t/* dst_mask */\n-\t FALSE),\t\t\t/* pcrel_offset */\n-\n-  HOWTO (R_PPN16B,\t\t\t/* type */\n-\t 0,\t\t\t\t/* rightshift */\n-\t -2,\t\t\t\t/* size (0 = byte, 1 = short, 2 = long) */\n-\t 16,\t\t\t\t/* bitsize */\n-\t FALSE,\t\t\t\t/* pc_relative */\n-\t 6,\t\t\t\t/* bitpos */\n-\t complain_overflow_dont,\t/* complain_on_overflow */\n-\t glob16_reloc,\t\t\t/* special_function */\n-\t \"PPN16B\",\t\t\t/* name */\n-\t TRUE,\t\t\t\t/* partial_inplace */\n-\t 0x3ffc0,\t\t\t/* src_mask */\n-\t 0x3ffc0,\t\t\t/* dst_mask */\n-\t FALSE),\t\t\t/* pcrel_offset */\n-\n-  HOWTO (R_PPLN15,\t\t\t/* type */\n-\t 0,\t\t\t\t/* rightshift */\n-\t -2,\t\t\t\t/* size (0 = byte, 1 = short, 2 = long) */\n-\t 15,\t\t\t\t/* bitsize */\n-\t FALSE,\t\t\t\t/* pc_relative */\n-\t 0,\t\t\t\t/* bitpos */\n-\t complain_overflow_dont,\t/* complain_on_overflow */\n-\t NULL,\t\t\t\t/* special_function */\n-\t \"PPLN15\",\t\t\t/* name */\n-\t TRUE,\t\t\t\t/* partial_inplace */\n-\t 0x7fff,\t\t\t/* src_mask */\n-\t 0x7fff,\t\t\t/* dst_mask */\n-\t FALSE),\t\t\t/* pcrel_offset */\n-\n-  HOWTO (R_PPLN15W,\t\t\t/* type */\n-\t 2,\t\t\t\t/* rightshift */\n-\t -2,\t\t\t\t/* size (0 = byte, 1 = short, 2 = long) */\n-\t 15,\t\t\t\t/* bitsize */\n-\t FALSE,\t\t\t\t/* pc_relative */\n-\t 0,\t\t\t\t/* bitpos */\n-\t complain_overflow_dont,\t/* complain_on_overflow */\n-\t NULL,\t\t\t\t/* special_function */\n-\t \"PPLN15W\",\t\t\t/* name */\n-\t TRUE,\t\t\t\t/* partial_inplace */\n-\t 0x7fff,\t\t\t/* src_mask */\n-\t 0x7fff,\t\t\t/* dst_mask */\n-\t FALSE),\t\t\t/* pcrel_offset */\n-\n-  HOWTO (R_PPLN15H,\t\t\t/* type */\n-\t 1,\t\t\t\t/* rightshift */\n-\t -2,\t\t\t\t/* size (0 = byte, 1 = short, 2 = long) */\n-\t 15,\t\t\t\t/* bitsize */\n-\t FALSE,\t\t\t\t/* pc_relative */\n-\t 0,\t\t\t\t/* bitpos */\n-\t complain_overflow_dont,\t/* complain_on_overflow */\n-\t NULL,\t\t\t\t/* special_function */\n-\t \"PPLN15H\",\t\t\t/* name */\n-\t TRUE,\t\t\t\t/* partial_inplace */\n-\t 0x7fff,\t\t\t/* src_mask */\n-\t 0x7fff,\t\t\t/* dst_mask */\n-\t FALSE),\t\t\t/* pcrel_offset */\n-\n-  HOWTO (R_PPLN16B,\t\t\t/* type */\n-\t 0,\t\t\t\t/* rightshift */\n-\t -2,\t\t\t\t/* size (0 = byte, 1 = short, 2 = long) */\n-\t 15,\t\t\t\t/* bitsize */\n-\t FALSE,\t\t\t\t/* pc_relative */\n-\t 0,\t\t\t\t/* bitpos */\n-\t complain_overflow_dont,\t/* complain_on_overflow */\n-\t local16_reloc,\t\t\t/* special_function */\n-\t \"PPLN16B\",\t\t\t/* name */\n-\t TRUE,\t\t\t\t/* partial_inplace */\n-\t 0xffff,\t\t\t/* src_mask */\n-\t 0xffff,\t\t\t/* dst_mask */\n-\t FALSE)\t\t\t\t/* pcrel_offset */\n-};\n-\f\n-/* Special relocation functions, used when the output file is not\n-   itself a COFF TIc80 file.  */\n-\n-/* This special function is used for the base address type\n-   relocations.  */\n-\n-static bfd_reloc_status_type\n-ppbase_reloc (bfd *abfd ATTRIBUTE_UNUSED,\n-\t      arelent *reloc_entry ATTRIBUTE_UNUSED,\n-\t      asymbol *symbol_in ATTRIBUTE_UNUSED,\n-\t      void * data ATTRIBUTE_UNUSED,\n-\t      asection *input_section ATTRIBUTE_UNUSED,\n-\t      bfd *output_bfd ATTRIBUTE_UNUSED,\n-\t      char **error_message ATTRIBUTE_UNUSED)\n-{\n-  /* FIXME.  */\n-  abort ();\n-}\n-\n-/* This special function is used for the global 15 bit relocations.  */\n-\n-static bfd_reloc_status_type\n-glob15_reloc (bfd *abfd ATTRIBUTE_UNUSED,\n-\t      arelent *reloc_entry ATTRIBUTE_UNUSED,\n-\t      asymbol *symbol_in ATTRIBUTE_UNUSED,\n-\t      void * data ATTRIBUTE_UNUSED,\n-\t      asection *input_section ATTRIBUTE_UNUSED,\n-\t      bfd *output_bfd ATTRIBUTE_UNUSED,\n-\t      char **error_message ATTRIBUTE_UNUSED)\n-{\n-  /* FIXME.  */\n-  abort ();\n-}\n-\n-/* This special function is used for the global 16 bit relocations.  */\n-\n-static bfd_reloc_status_type\n-glob16_reloc (bfd *abfd ATTRIBUTE_UNUSED,\n-\t      arelent *reloc_entry ATTRIBUTE_UNUSED,\n-\t      asymbol *symbol_in ATTRIBUTE_UNUSED,\n-\t      void * data ATTRIBUTE_UNUSED,\n-\t      asection *input_section ATTRIBUTE_UNUSED,\n-\t      bfd *output_bfd ATTRIBUTE_UNUSED,\n-\t      char **error_message ATTRIBUTE_UNUSED)\n-{\n-  /* FIXME.  */\n-  abort ();\n-}\n-\n-/* This special function is used for the local 16 bit relocations.  */\n-\n-static bfd_reloc_status_type\n-local16_reloc (bfd *abfd ATTRIBUTE_UNUSED,\n-\t       arelent *reloc_entry ATTRIBUTE_UNUSED,\n-\t       asymbol *symbol_in ATTRIBUTE_UNUSED,\n-\t       void * data ATTRIBUTE_UNUSED,\n-\t       asection *input_section ATTRIBUTE_UNUSED,\n-\t       bfd *output_bfd ATTRIBUTE_UNUSED,\n-\t       char **error_message ATTRIBUTE_UNUSED)\n-{\n-  /* FIXME.  */\n-  abort ();\n-}\n-\f\n-/* Code to turn an external r_type into a pointer to an entry in the howto_table.\n-   If passed an r_type we don't recognize the abort rather than silently failing\n-   to generate an output file.  */\n-\n-static void\n-rtype2howto (arelent *cache_ptr, struct internal_reloc *dst)\n-{\n-  unsigned int i;\n-\n-  for (i = 0; i < sizeof tic80_howto_table / sizeof tic80_howto_table[0]; i++)\n-    {\n-      if (tic80_howto_table[i].type == dst->r_type)\n-\t{\n-\t  cache_ptr->howto = tic80_howto_table + i;\n-\t  return;\n-\t}\n-    }\n-\n-  _bfd_error_handler (_(\"unsupported relocation type %#x\"),\n-\t\t      (unsigned int) dst->r_type);\n-  cache_ptr->howto = tic80_howto_table + 0;\n-}\n-\n-#define RTYPE2HOWTO(cache_ptr, dst) rtype2howto (cache_ptr, dst)\n-#define coff_rtype_to_howto coff_tic80_rtype_to_howto\n-\n-static reloc_howto_type *\n-coff_tic80_rtype_to_howto (bfd *abfd ATTRIBUTE_UNUSED,\n-\t\t\t   asection *sec,\n-\t\t\t   struct internal_reloc *rel,\n-\t\t\t   struct coff_link_hash_entry *h ATTRIBUTE_UNUSED,\n-\t\t\t   struct internal_syment *sym ATTRIBUTE_UNUSED,\n-\t\t\t   bfd_vma *addendp)\n-{\n-  arelent genrel;\n-\n-  if (rel -> r_symndx == -1 && addendp != NULL)\n-    {\n-      /* This is a TI \"internal relocation\", which means that the relocation\n-\t amount is the amount by which the current section is being relocated\n-\t in the output section.  */\n-      *addendp = (sec -> output_section -> vma + sec -> output_offset) - sec -> vma;\n-    }\n-  RTYPE2HOWTO (&genrel, rel);\n-  return genrel.howto;\n-}\n-\n-#ifndef BADMAG\n-#define BADMAG(x) TIC80BADMAG(x)\n-#endif\n-\f\n-#define coff_relocate_section coff_tic80_relocate_section\n-\n-/* We need a special relocation routine to handle the PP relocs.  Most\n-   of this is a copy of _bfd_coff_generic_relocate_section.  */\n-\n-static bfd_boolean\n-coff_tic80_relocate_section (bfd *output_bfd,\n-\t\t\t     struct bfd_link_info *info,\n-\t\t\t     bfd *input_bfd,\n-\t\t\t     asection *input_section,\n-\t\t\t     bfd_byte *contents,\n-\t\t\t     struct internal_reloc *relocs,\n-\t\t\t     struct internal_syment *syms,\n-\t\t\t     asection **sections)\n-{\n-  struct internal_reloc *rel;\n-  struct internal_reloc *relend;\n-\n-  rel = relocs;\n-  relend = rel + input_section->reloc_count;\n-  for (; rel < relend; rel++)\n-    {\n-      long symndx;\n-      struct coff_link_hash_entry *h;\n-      struct internal_syment *sym;\n-      bfd_vma addend;\n-      bfd_vma val;\n-      reloc_howto_type *howto;\n-      bfd_reloc_status_type rstat;\n-      bfd_vma addr;\n-\n-      symndx = rel->r_symndx;\n-\n-      if (symndx == -1)\n-\t{\n-\t  h = NULL;\n-\t  sym = NULL;\n-\t}\n-      else\n-\t{\n-\t  h = obj_coff_sym_hashes (input_bfd)[symndx];\n-\t  sym = syms + symndx;\n-\t}\n-\n-      /* COFF treats common symbols in one of two ways.  Either the\n-\t size of the symbol is included in the section contents, or it\n-\t is not.  We assume that the size is not included, and force\n-\t the rtype_to_howto function to adjust the addend as needed.  */\n-\n-      if (sym != NULL && sym->n_scnum != 0)\n-\taddend = - sym->n_value;\n-      else\n-\taddend = 0;\n-\n-      howto = bfd_coff_rtype_to_howto (input_bfd, input_section, rel, h,\n-\t\t\t\t       sym, &addend);\n-      if (howto == NULL)\n-\treturn FALSE;\n-\n-      val = 0;\n-\n-      if (h == NULL)\n-\t{\n-\t  asection *sec;\n-\n-\t  if (symndx == -1)\n-\t    {\n-\t      sec = bfd_abs_section_ptr;\n-\t      val = 0;\n-\t    }\n-\t  else\n-\t    {\n-\t      sec = sections[symndx];\n-\t      val = (sec->output_section->vma\n-\t\t     + sec->output_offset\n-\t\t     + sym->n_value);\n-\t      if (! obj_pe (output_bfd))\n-\t\tval -= sec->vma;\n-\t    }\n-\t}\n-      else\n-\t{\n-\t  if (h->root.type == bfd_link_hash_defined\n-\t      || h->root.type == bfd_link_hash_defweak)\n-\t    {\n-\t      asection *sec;\n-\n-\t      sec = h->root.u.def.section;\n-\t      val = (h->root.u.def.value\n-\t\t     + sec->output_section->vma\n-\t\t     + sec->output_offset);\n-\t      }\n-\n-\t  else if (! bfd_link_relocatable (info))\n-\t    (*info->callbacks->undefined_symbol)\n-\t      (info, h->root.root.string, input_bfd, input_section,\n-\t       rel->r_vaddr - input_section->vma, TRUE);\n-\t}\n-\n-      addr = rel->r_vaddr - input_section->vma;\n-\n-      /* FIXME: This code assumes little endian, but the PP can\n-\t apparently be bi-endian.  I don't know if the bi-endianness\n-\t applies to the instruction set or just to the data.  */\n-      switch (howto->type)\n-\t{\n-\tdefault:\n-\tcase R_ABS:\n-\tcase R_RELLONGX:\n-\tcase R_PPL15:\n-\tcase R_PPL15W:\n-\tcase R_PPL15H:\n-\tcase R_PPLN15:\n-\tcase R_PPLN15W:\n-\tcase R_PPLN15H:\n-\t  rstat = _bfd_final_link_relocate (howto, input_bfd, input_section,\n-\t\t\t\t\t    contents, addr, val, addend);\n-\t  break;\n-\n-\tcase R_PP15:\n-\tcase R_PP15W:\n-\tcase R_PP15H:\n-\tcase R_PPN15:\n-\tcase R_PPN15W:\n-\tcase R_PPN15H:\n-\t  /* Offset the address so that we can use 4 byte relocations.  */\n-\t  rstat = _bfd_final_link_relocate (howto, input_bfd, input_section,\n-\t\t\t\t\t    contents + 2, addr, val, addend);\n-\t  break;\n-\n-\tcase R_PP16B:\n-\tcase R_PPN16B:\n-\t  {\n-\t    /* The most significant bit is stored in bit 6.  */\n-\t    bfd_byte hold;\n-\n-\t    hold = contents[addr + 4];\n-\t    contents[addr + 4] &=~ 0x20;\n-\t    contents[addr + 4] |= (contents[addr] >> 1) & 0x20;\n-\t    rstat = _bfd_final_link_relocate (howto, input_bfd, input_section,\n-\t\t\t\t\t      contents + 2, addr,\n-\t\t\t\t\t      val, addend);\n-\t    contents[addr] &=~ 0x40;\n-\t    contents[addr] |= (contents[addr + 4] << 1) & 0x40;\n-\t    contents[addr + 4] &=~ 0x20;\n-\t    contents[addr + 4] |= hold & 0x20;\n-\t    break;\n-\t  }\n-\n-\tcase R_PPL16B:\n-\tcase R_PPLN16B:\n-\t  {\n-\t    /* The most significant bit is stored in bit 28.  */\n-\t    bfd_byte hold;\n-\n-\t    hold = contents[addr + 1];\n-\t    contents[addr + 1] &=~ 0x80;\n-\t    contents[addr + 1] |= (contents[addr + 3] << 3) & 0x80;\n-\t    rstat = _bfd_final_link_relocate (howto, input_bfd, input_section,\n-\t\t\t\t\t      contents, addr,\n-\t\t\t\t\t      val, addend);\n-\t    contents[addr + 3] &= ~0x10;\n-\t    contents[addr + 3] |= (contents[addr + 1] >> 3) & 0x10;\n-\t    contents[addr + 1] &=~ 0x80;\n-\t    contents[addr + 1] |= hold & 0x80;\n-\t    break;\n-\t  }\n-\n-\tcase R_PPBASE:\n-\t  /* Parameter RAM is from 0x1000000 to 0x1000800.  */\n-\t  contents[addr] &=~ 0x3;\n-\t  if (val >= 0x1000000 && val < 0x1000800)\n-\t    contents[addr] |= 0x3;\n-\t  else\n-\t    contents[addr] |= 0x2;\n-\t  rstat = bfd_reloc_ok;\n-\t  break;\n-\n-\tcase R_PPLBASE:\n-\t  /* Parameter RAM is from 0x1000000 to 0x1000800.  */\n-\t  contents[addr + 2] &= ~0xc0;\n-\t  if (val >= 0x1000000 && val < 0x1000800)\n-\t    contents[addr + 2] |= 0xc0;\n-\t  else\n-\t    contents[addr + 2] |= 0x80;\n-\t  rstat = bfd_reloc_ok;\n-\t  break;\n-\t}\n-\n-      switch (rstat)\n-\t{\n-\tdefault:\n-\t  abort ();\n-\tcase bfd_reloc_ok:\n-\t  break;\n-\tcase bfd_reloc_outofrange:\n-\t  _bfd_error_handler\n-\t    /* xgettext: c-format */\n-\t    (_(\"%pB: bad reloc address %#\" PRIx64 \" in section `%pA'\"),\n-\t     input_bfd, (uint64_t) rel->r_vaddr, input_section);\n-\t  return FALSE;\n-\tcase bfd_reloc_overflow:\n-\t  {\n-\t    const char *name;\n-\t    char buf[SYMNMLEN + 1];\n-\n-\t    if (symndx == -1)\n-\t      name = \"*ABS*\";\n-\t    else if (h != NULL)\n-\t      name = NULL;\n-\t    else\n-\t      {\n-\t\tname = _bfd_coff_internal_syment_name (input_bfd, sym, buf);\n-\t\tif (name == NULL)\n-\t\t  return FALSE;\n-\t      }\n-\n-\t    (*info->callbacks->reloc_overflow)\n-\t      (info, (h ? &h->root : NULL), name, howto->name,\n-\t       (bfd_vma) 0, input_bfd, input_section,\n-\t       rel->r_vaddr - input_section->vma);\n-\t  }\n-\t}\n-    }\n-  return TRUE;\n-}\n-\f\n-#define TIC80COFF 1\t\t/* Customize coffcode.h */\n-#undef C_AUTOARG\t\t/* Clashes with TIc80's C_UEXT */\n-#undef C_LASTENT\t\t/* Clashes with TIc80's C_STATLAB */\n-\n-#ifndef bfd_pe_print_pdata\n-#define bfd_pe_print_pdata\tNULL\n-#endif\n-\n-#include \"coffcode.h\"\n-\n-CREATE_LITTLE_COFF_TARGET_VEC (tic80_coff_vec, \"coff-tic80\", D_PAGED, 0, '_', NULL, COFF_SWAP_TABLE)"
    },
    {
      "sha": "ac5312fdb03cf760629a4380786fe26e72f71bfa",
      "filename": "bfd/coffcode.h",
      "status": "modified",
      "additions": 2,
      "deletions": 21,
      "changes": 23,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5b660084e26050d2e7f1fda06daec1e83311c188/bfd/coffcode.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5b660084e26050d2e7f1fda06daec1e83311c188/bfd/coffcode.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/coffcode.h?ref=5b660084e26050d2e7f1fda06daec1e83311c188",
      "patch": "@@ -2330,12 +2330,6 @@ coff_set_arch_mach_hook (bfd *abfd, void * filehdr)\n       break;\n #endif\n \n-#ifdef TIC80_ARCH_MAGIC\n-    case TIC80_ARCH_MAGIC:\n-      arch = bfd_arch_tic80;\n-      break;\n-#endif\n-\n #ifdef MCOREMAGIC\n     case MCOREMAGIC:\n       arch = bfd_arch_mcore;\n@@ -2715,12 +2709,6 @@ coff_set_flags (bfd * abfd,\n       return TRUE;\n #endif\n \n-#ifdef TIC80_ARCH_MAGIC\n-    case bfd_arch_tic80:\n-      *magicp = TIC80_ARCH_MAGIC;\n-      return TRUE;\n-#endif\n-\n #ifdef ARMMAGIC\n     case bfd_arch_arm:\n #ifdef ARM_WINCE\n@@ -2883,7 +2871,7 @@ sort_by_secaddr (const void * arg1, const void * arg2)\n /* Calculate the file position for each section.  */\n \n #define ALIGN_SECTIONS_IN_FILE\n-#if defined(TIC80COFF) || defined(TICOFF)\n+#ifdef TICOFF\n #undef ALIGN_SECTIONS_IN_FILE\n #endif\n \n@@ -3811,9 +3799,6 @@ coff_write_object_contents (bfd * abfd)\n      but it doesn't hurt to set it internally.  */\n   internal_f.f_target_id = TI_TARGET_ID;\n #endif\n-#ifdef TIC80_TARGET_ID\n-  internal_f.f_target_id = TIC80_TARGET_ID;\n-#endif\n \n   /* FIXME, should do something about the other byte orders and\n      architectures.  */\n@@ -3841,10 +3826,6 @@ coff_write_object_contents (bfd * abfd)\n     internal_a.magic = TICOFF_AOUT_MAGIC;\n #define __A_MAGIC_SET__\n #endif\n-#ifdef TIC80COFF\n-    internal_a.magic = TIC80_ARCH_MAGIC;\n-#define __A_MAGIC_SET__\n-#endif /* TIC80 */\n \n #if defined(ARM)\n #define __A_MAGIC_SET__\n@@ -4775,7 +4756,7 @@ coff_slurp_symbol_table (bfd * abfd)\n \t    case C_ALIAS:\t/* Duplicate tag.  */\n #endif\n \t      /* New storage classes for TI COFF.  */\n-#if defined(TIC80COFF) || defined(TICOFF)\n+#ifdef TICOFF\n \t    case C_UEXT:\t/* Tentative external definition.  */\n #endif\n \t    case C_EXTLAB:\t/* External load time label.  */"
    },
    {
      "sha": "a94f817d5fa3cf1e0317b066f87385c487716d79",
      "filename": "bfd/coffswap.h",
      "status": "modified",
      "additions": 0,
      "deletions": 6,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5b660084e26050d2e7f1fda06daec1e83311c188/bfd/coffswap.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5b660084e26050d2e7f1fda06daec1e83311c188/bfd/coffswap.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/coffswap.h?ref=5b660084e26050d2e7f1fda06daec1e83311c188",
      "patch": "@@ -264,9 +264,6 @@ coff_swap_filehdr_in (bfd * abfd, void * src, void * dst)\n   filehdr_dst->f_nsyms  = H_GET_32 (abfd, filehdr_src->f_nsyms);\n   filehdr_dst->f_opthdr = H_GET_16 (abfd, filehdr_src->f_opthdr);\n   filehdr_dst->f_flags  = H_GET_16 (abfd, filehdr_src->f_flags);\n-#ifdef TIC80_TARGET_ID\n-  filehdr_dst->f_target_id = H_GET_16 (abfd, filehdr_src->f_target_id);\n-#endif\n \n #ifdef COFF_ADJUST_FILEHDR_IN_POST\n   COFF_ADJUST_FILEHDR_IN_POST (abfd, src, dst);\n@@ -289,9 +286,6 @@ coff_swap_filehdr_out (bfd *abfd, void * in, void * out)\n   H_PUT_32 (abfd, filehdr_in->f_nsyms, filehdr_out->f_nsyms);\n   H_PUT_16 (abfd, filehdr_in->f_opthdr, filehdr_out->f_opthdr);\n   H_PUT_16 (abfd, filehdr_in->f_flags, filehdr_out->f_flags);\n-#ifdef TIC80_TARGET_ID\n-  H_PUT_16 (abfd, filehdr_in->f_target_id, filehdr_out->f_target_id);\n-#endif\n \n #ifdef COFF_ADJUST_FILEHDR_OUT_POST\n   COFF_ADJUST_FILEHDR_OUT_POST (abfd, in, out);"
    },
    {
      "sha": "a0ab37ea20c0982af24b4f8813ccb46295bb73a5",
      "filename": "bfd/config.bfd",
      "status": "modified",
      "additions": 0,
      "deletions": 5,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5b660084e26050d2e7f1fda06daec1e83311c188/bfd/config.bfd",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5b660084e26050d2e7f1fda06daec1e83311c188/bfd/config.bfd",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/config.bfd?ref=5b660084e26050d2e7f1fda06daec1e83311c188",
      "patch": "@@ -1333,11 +1333,6 @@ case \"${targ}\" in\n     targ_selvecs=\"tic6x_elf32_linux_be_vec tic6x_elf32_le_vec tic6x_elf32_be_vec\"\n     ;;\n \n-  tic80*-*-*)\n-    targ_defvec=tic80_coff_vec\n-    targ_underscore=yes\n-    ;;\n-\n #ifdef BFD64\n   tilegx-*-*)\n     targ_defvec=tilegx_elf64_le_vec"
    },
    {
      "sha": "bf95857cdeefa12fae50036594280274c94db51c",
      "filename": "bfd/configure",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5b660084e26050d2e7f1fda06daec1e83311c188/bfd/configure",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5b660084e26050d2e7f1fda06daec1e83311c188/bfd/configure",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/configure?ref=5b660084e26050d2e7f1fda06daec1e83311c188",
      "patch": "@@ -14923,7 +14923,6 @@ do\n     tic6x_elf32_c6000_le_vec)\t tb=\"$tb elf32-tic6x.lo elf32.lo $elf\" ;;\n     tic6x_elf32_linux_be_vec)\t tb=\"$tb elf32-tic6x.lo elf32.lo $elf\" ;;\n     tic6x_elf32_linux_le_vec)\t tb=\"$tb elf32-tic6x.lo elf32.lo $elf\" ;;\n-    tic80_coff_vec)\t\t tb=\"$tb coff-tic80.lo $coff\" ;;\n     tilegx_elf32_be_vec)\t tb=\"$tb elf32-tilegx.lo elfxx-tilegx.lo elf32.lo $elf\" ; target_size=32 ;;\n     tilegx_elf32_le_vec)\t tb=\"$tb elf32-tilegx.lo elfxx-tilegx.lo elf32.lo $elf\" ; target_size=32 ;;\n     tilegx_elf64_be_vec)\t tb=\"$tb elf64-tilegx.lo elfxx-tilegx.lo elf64.lo $elf\" ; target_size=64 ;;"
    },
    {
      "sha": "c673a29892838780e5814bd75a046eaa83dddf68",
      "filename": "bfd/configure.ac",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5b660084e26050d2e7f1fda06daec1e83311c188/bfd/configure.ac",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5b660084e26050d2e7f1fda06daec1e83311c188/bfd/configure.ac",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/configure.ac?ref=5b660084e26050d2e7f1fda06daec1e83311c188",
      "patch": "@@ -659,7 +659,6 @@ do\n     tic6x_elf32_c6000_le_vec)\t tb=\"$tb elf32-tic6x.lo elf32.lo $elf\" ;;\n     tic6x_elf32_linux_be_vec)\t tb=\"$tb elf32-tic6x.lo elf32.lo $elf\" ;;\n     tic6x_elf32_linux_le_vec)\t tb=\"$tb elf32-tic6x.lo elf32.lo $elf\" ;;\n-    tic80_coff_vec)\t\t tb=\"$tb coff-tic80.lo $coff\" ;;\n     tilegx_elf32_be_vec)\t tb=\"$tb elf32-tilegx.lo elfxx-tilegx.lo elf32.lo $elf\" ; target_size=32 ;;\n     tilegx_elf32_le_vec)\t tb=\"$tb elf32-tilegx.lo elfxx-tilegx.lo elf32.lo $elf\" ; target_size=32 ;;\n     tilegx_elf64_be_vec)\t tb=\"$tb elf64-tilegx.lo elfxx-tilegx.lo elf64.lo $elf\" ; target_size=64 ;;"
    },
    {
      "sha": "2fcbd9ddc460a7b1df59b2f08763b7252d6f38f8",
      "filename": "bfd/cpu-tic80.c",
      "status": "removed",
      "additions": 0,
      "deletions": 42,
      "changes": 42,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/62e6599087efba193e0156d89ee65fb74fc99cb2/bfd/cpu-tic80.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/62e6599087efba193e0156d89ee65fb74fc99cb2/bfd/cpu-tic80.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/cpu-tic80.c?ref=62e6599087efba193e0156d89ee65fb74fc99cb2",
      "patch": "@@ -1,42 +0,0 @@\n-/* bfd back-end for TI TMS320C80 (MVP) support\n-   Copyright (C) 1996-2019 Free Software Foundation, Inc.\n-   Written by Fred Fish at Cygnus support (fnf@cygnus.com)\n-\n-   This file is part of BFD, the Binary File Descriptor library.\n-\n-   This program is free software; you can redistribute it and/or modify\n-   it under the terms of the GNU General Public License as published by\n-   the Free Software Foundation; either version 3 of the License, or\n-   (at your option) any later version.\n-\n-   This program is distributed in the hope that it will be useful,\n-   but WITHOUT ANY WARRANTY; without even the implied warranty of\n-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-   GNU General Public License for more details.\n-\n-   You should have received a copy of the GNU General Public License\n-   along with this program; if not, write to the Free Software\n-   Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston,\n-   MA 02110-1301, USA.  */\n-\n-#include \"sysdep.h\"\n-#include \"bfd.h\"\n-#include \"libbfd.h\"\n-\n-const bfd_arch_info_type bfd_tic80_arch =\n-{\n-  32,\t\t\t\t/* Bits in a word.  */\n-  32,\t\t\t\t/* Bits in an address.  */\n-  8,\t\t\t\t/* Bits in a byte.  */\n-  bfd_arch_tic80,\t\t/* Architecture number.  */\n-  0,\t\t\t\t/* Only 1 machine.  */\n-  \"tic80\",\t\t\t/* Architecture name.  */\n-  \"tic80\",\t\t\t/* Printable name.  */\n-  2,\t\t\t\t/* Section alignment power.  */\n-  TRUE,\t\t\t\t/* Default machine.  */\n-  bfd_default_compatible,\n-  bfd_default_scan,\n-  bfd_arch_default_fill,\n-  NULL,\t\t\t\t/* Pointer to next in chain.  */\n-  0 /* Maximum offset of a reloc from the start of an insn.  */\n-};"
    },
    {
      "sha": "a84908b61ea956b489bd6fafa29938c29a6cb637",
      "filename": "bfd/po/SRC-POTFILES.in",
      "status": "modified",
      "additions": 0,
      "deletions": 2,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5b660084e26050d2e7f1fda06daec1e83311c188/bfd/po/SRC-POTFILES.in",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5b660084e26050d2e7f1fda06daec1e83311c188/bfd/po/SRC-POTFILES.in",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/po/SRC-POTFILES.in?ref=5b660084e26050d2e7f1fda06daec1e83311c188",
      "patch": "@@ -32,7 +32,6 @@ coff-stgo32.c\n coff-tic30.c\n coff-tic4x.c\n coff-tic54x.c\n-coff-tic80.c\n coff-x86_64.c\n coff-z80.c\n coff-z8k.c\n@@ -117,7 +116,6 @@ cpu-tic30.c\n cpu-tic4x.c\n cpu-tic54x.c\n cpu-tic6x.c\n-cpu-tic80.c\n cpu-tilegx.c\n cpu-tilepro.c\n cpu-v850.c"
    },
    {
      "sha": "0c84a72b422ceee350355c9a002710d35f135b4a",
      "filename": "bfd/targets.c",
      "status": "modified",
      "additions": 0,
      "deletions": 2,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5b660084e26050d2e7f1fda06daec1e83311c188/bfd/targets.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5b660084e26050d2e7f1fda06daec1e83311c188/bfd/targets.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/targets.c?ref=5b660084e26050d2e7f1fda06daec1e83311c188",
      "patch": "@@ -899,7 +899,6 @@ extern const bfd_target tic6x_elf32_c6000_be_vec;\n extern const bfd_target tic6x_elf32_c6000_le_vec;\n extern const bfd_target tic6x_elf32_linux_be_vec;\n extern const bfd_target tic6x_elf32_linux_le_vec;\n-extern const bfd_target tic80_coff_vec;\n extern const bfd_target tilegx_elf32_be_vec;\n extern const bfd_target tilegx_elf32_le_vec;\n extern const bfd_target tilegx_elf64_be_vec;\n@@ -1306,7 +1305,6 @@ static const bfd_target * const _bfd_target_vector[] =\n \t&tic54x_coff2_vec,\n \t&tic6x_elf32_be_vec,\n \t&tic6x_elf32_le_vec,\n-\t&tic80_coff_vec,\n \n \t&tilegx_elf32_be_vec,\n \t&tilegx_elf32_le_vec,"
    },
    {
      "sha": "b8ae470f836f86c8fb1c60e8a188984f24a504f3",
      "filename": "binutils/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5b660084e26050d2e7f1fda06daec1e83311c188/binutils/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5b660084e26050d2e7f1fda06daec1e83311c188/binutils/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/ChangeLog?ref=5b660084e26050d2e7f1fda06daec1e83311c188",
      "patch": "@@ -1,3 +1,8 @@\n+2019-12-17  Alan Modra  <amodra@gmail.com>\n+\n+\t* testsuite/binutils-all/objcopy.exp: Remove tic80 support.\n+\t* testsuite/binutils-all/objdump.exp: Likewise.\n+\n 2019-12-11  Alan Modra  <amodra@gmail.com>\n \n \t* od-xcoff.c (dump_dumpx_core): Adjust for bfd_h_get_8 change."
    },
    {
      "sha": "88f63fee393013d8388d8cbf0e79f986793905b7",
      "filename": "binutils/testsuite/binutils-all/objcopy.exp",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5b660084e26050d2e7f1fda06daec1e83311c188/binutils/testsuite/binutils-all/objcopy.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5b660084e26050d2e7f1fda06daec1e83311c188/binutils/testsuite/binutils-all/objcopy.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/testsuite/binutils-all/objcopy.exp?ref=5b660084e26050d2e7f1fda06daec1e83311c188",
      "patch": "@@ -81,7 +81,6 @@ proc objcopy_test {testname srcfile} {\n \tsetup_xfail \"m8*-*\"\n \tsetup_xfail \"sh-*-coff*\"\n \tsetup_xfail \"tic54x-*-*\"\n-\tsetup_xfail \"tic80-*-*\"\n \n \tclear_xfail \"hppa*64*-*-hpux*\" \"hppa*-*-linux*\" \"hppa*-*-lites*\"\n \tclear_xfail \"hppa*-*-*n*bsd*\" \"hppa*-*-rtems*\" \"*-*-*elf*\""
    },
    {
      "sha": "5089ea81ff2421c93123026547bef0118c549f90",
      "filename": "binutils/testsuite/binutils-all/objdump.exp",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5b660084e26050d2e7f1fda06daec1e83311c188/binutils/testsuite/binutils-all/objdump.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5b660084e26050d2e7f1fda06daec1e83311c188/binutils/testsuite/binutils-all/objdump.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/testsuite/binutils-all/objdump.exp?ref=5b660084e26050d2e7f1fda06daec1e83311c188",
      "patch": "@@ -39,7 +39,7 @@ lappend cpus_expected d10v d30v fr30 fr500 fr550 h8 hppa i386 iamcu ip2022\n lappend cpus_expected m16c m32c m32r m68hc11 m68hc12 m68k MCore mep c5 h1 MicroBlaze\n lappend cpus_expected mips mn10200 mn10300 ms1 msp MSP430 nds32 n1h_v3 ns32k\n lappend cpus_expected or1k or1knd pj powerpc pyramid riscv romp rs6000 s390 sh sparc\n-lappend cpus_expected tic54x tic80 tilegx tms320c30 tms320c4x tms320c54x\n+lappend cpus_expected tic54x tilegx tms320c30 tms320c4x tms320c54x\n lappend cpus_expected v850 vax x86-64 xscale xtensa z8k z8001 z8002\n \n # Make sure the target CPU shows up in the list."
    },
    {
      "sha": "875bcf8fe561e62860835b417ff10f3dfdcb5977",
      "filename": "gas/ChangeLog",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5b660084e26050d2e7f1fda06daec1e83311c188/gas/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5b660084e26050d2e7f1fda06daec1e83311c188/gas/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ChangeLog?ref=5b660084e26050d2e7f1fda06daec1e83311c188",
      "patch": "@@ -1,3 +1,7 @@\n+2019-12-17  Alan Modra  <amodra@gmail.com>\n+\n+\t* doc/as.texi: Remove mention of tic80.\n+\n 2019-12-12  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR gas/25274"
    },
    {
      "sha": "c132f86c2f8b1d9145b47603840751850b97172d",
      "filename": "gas/doc/as.texi",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5b660084e26050d2e7f1fda06daec1e83311c188/gas/doc/as.texi",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5b660084e26050d2e7f1fda06daec1e83311c188/gas/doc/as.texi",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/doc/as.texi?ref=5b660084e26050d2e7f1fda06daec1e83311c188",
      "patch": "@@ -4588,7 +4588,7 @@ with no-op instructions when appropriate.\n \n The way the required alignment is specified varies from system to system.\n For the arc, hppa, i386 using ELF, iq2000, m68k, or1k,\n-s390, sparc, tic4x, tic80 and xtensa, the first expression is the\n+s390, sparc, tic4x and xtensa, the first expression is the\n alignment request in bytes.  For example @samp{.align 8} advances\n the location counter until it is a multiple of 8.  If the location counter\n is already a multiple of 8, no change is needed.  For the tic54x, the"
    },
    {
      "sha": "ce3e0496068c32b13f11b04707d68858b80668f6",
      "filename": "include/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5b660084e26050d2e7f1fda06daec1e83311c188/include/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5b660084e26050d2e7f1fda06daec1e83311c188/include/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/ChangeLog?ref=5b660084e26050d2e7f1fda06daec1e83311c188",
      "patch": "@@ -1,3 +1,8 @@\n+2019-12-17  Alan Modra  <amodra@gmail.com>\n+\n+\t* coff/tic80.h: Delete file.\n+\t* opcode/tic80.h: Delete file.\n+\n 2019-12-16  Alan Modra  <amodra@gmail.com>\n \n \t* opcode/crx.h (inst <match>): Make unsigned int."
    },
    {
      "sha": "921ee5070c696961fe222a30890609a530b834c6",
      "filename": "include/coff/tic80.h",
      "status": "removed",
      "additions": 0,
      "deletions": 123,
      "changes": 123,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/62e6599087efba193e0156d89ee65fb74fc99cb2/include/coff/tic80.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/62e6599087efba193e0156d89ee65fb74fc99cb2/include/coff/tic80.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/coff/tic80.h?ref=62e6599087efba193e0156d89ee65fb74fc99cb2",
      "patch": "@@ -1,123 +0,0 @@\n-/* coff information for TI TMS320C80 (MVP)\n-   \n-   Copyright (C) 2001-2019 Free Software Foundation, Inc.\n-\n-   This program is free software; you can redistribute it and/or modify\n-   it under the terms of the GNU General Public License as published by\n-   the Free Software Foundation; either version 3 of the License, or\n-   (at your option) any later version.\n-   \n-   This program is distributed in the hope that it will be useful,\n-   but WITHOUT ANY WARRANTY; without even the implied warranty of\n-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n-   GNU General Public License for more details.\n-   \n-   You should have received a copy of the GNU General Public License\n-   along with this program; if not, write to the Free Software\n-   Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston,\n-   MA 02110-1301, USA.  */\n-\n-#define DO_NOT_DEFINE_FILHDR\n-#define DO_NOT_DEFINE_SCNHDR\n-#define L_LNNO_SIZE 2\n-#include \"coff/external.h\"\n-\n-/********************** FILE HEADER **********************/\n-\n-struct external_filehdr\n-  {\n-    char f_magic[2];\t/* magic number\t\t\t*/\n-    char f_nscns[2];\t/* number of sections\t\t*/\n-    char f_timdat[4];\t/* time & date stamp\t\t*/\n-    char f_symptr[4];\t/* file pointer to symtab\t*/\n-    char f_nsyms[4];\t/* number of symtab entries\t*/\n-    char f_opthdr[2];\t/* sizeof(optional hdr)\t\t*/\n-    char f_flags[2];\t/* flags\t\t\t*/\n-    char f_target_id[2];/* target id (TIc80 specific)\t*/\n-};\n-\n-#define\tTIC80_ARCH_MAGIC\t0x0C1\t/* Goes in the file header magic number field */\n-#define TIC80_TARGET_ID\t\t0x95\t/* Goes in the target id field */\n-\n-#define TIC80BADMAG(x) ((x).f_magic != TIC80_ARCH_MAGIC)\n-\n-#define\tFILHDR\tstruct external_filehdr\n-#define\tFILHSZ\t22\n-\n-#define TIC80_AOUTHDR_MAGIC\t0x108\t/* Goes in the optional file header magic number field */\n-\n-/********************** SECTION HEADER **********************/\n-\n-struct external_scnhdr\n-{\n-\tchar\t\ts_name[8];\t/* section name\t\t\t*/\n-\tchar\t\ts_paddr[4];\t/* physical address, aliased s_nlib */\n-\tchar\t\ts_vaddr[4];\t/* virtual address\t\t*/\n-\tchar\t\ts_size[4];\t/* section size\t\t\t*/\n-\tchar\t\ts_scnptr[4];\t/* file ptr to raw data for section */\n-\tchar\t\ts_relptr[4];\t/* file ptr to relocation\t*/\n-\tchar\t\ts_lnnoptr[4];\t/* file ptr to line numbers\t*/\n-\tchar\t\ts_nreloc[2];\t/* number of relocation entries\t*/\n-\tchar\t\ts_nlnno[2];\t/* number of line number entries*/\n-\tchar\t\ts_flags[2];\t/* flags\t\t\t*/\n-\tchar\t\ts_reserved[1];\t/* reserved (TIc80 specific)\t*/\n-\tchar\t\ts_mempage[1];\t/* memory page number (TIc80)\t*/\n-};\n-\n-/* Names of \"special\" sections.  */\n-#define _TEXT\t\".text\"\n-#define _DATA\t\".data\"\n-#define _BSS\t\".bss\"\n-#define _CINIT\t\".cinit\"\n-#define _CONST\t\".const\"\n-#define _SWITCH\t\".switch\"\n-#define _STACK\t\".stack\"\n-#define _SYSMEM\t\".sysmem\"\n-\n-#define\tSCNHDR\tstruct external_scnhdr\n-#define\tSCNHSZ\t40\n-  \n-/* FIXME - need to correlate external_auxent with\n-   TIc80 Code Generation Tools User's Guide, CG:A-25 */\n-\n-/********************** RELOCATION DIRECTIVES **********************/\n-\n-/* The external reloc has an offset field, because some of the reloc\n-   types on the h8 don't have room in the instruction for the entire\n-   offset - eg the strange jump and high page addressing modes.  */\n-\n-struct external_reloc\n-{\n-  char r_vaddr[4];\n-  char r_symndx[4];\n-  char r_reserved[2];\n-  char r_type[2];\n-};\n-\n-#define RELOC struct external_reloc\n-#define RELSZ 12\n-\n-/* TIc80 relocation types. */\n-\n-#define R_ABS\t\t0x00\t\t/* Absolute address - no relocation */\n-#define R_RELLONGX\t0x11\t\t/* PP: 32 bits, direct */\n-#define R_PPBASE\t0x34\t\t/* PP: Global base address type */\n-#define R_PPLBASE\t0x35\t\t/* PP: Local base address type */\n-#define R_PP15\t\t0x38\t\t/* PP: Global 15 bit offset */\n-#define R_PP15W\t\t0x39\t\t/* PP: Global 15 bit offset divided by 4 */\n-#define R_PP15H\t\t0x3A\t\t/* PP: Global 15 bit offset divided by 2 */\n-#define R_PP16B\t\t0x3B\t\t/* PP: Global 16 bit offset for bytes */\n-#define R_PPL15\t\t0x3C\t\t/* PP: Local 15 bit offset */\n-#define R_PPL15W\t0x3D\t\t/* PP: Local 15 bit offset divided by 4 */\n-#define R_PPL15H\t0x3E\t\t/* PP: Local 15 bit offset divided by 2 */\n-#define R_PPL16B\t0x3F\t\t/* PP: Local 16 bit offset for bytes */\n-#define R_PPN15\t\t0x40\t\t/* PP: Global 15 bit negative offset */\n-#define R_PPN15W\t0x41\t\t/* PP: Global 15 bit negative offset divided by 4 */\n-#define R_PPN15H\t0x42\t\t/* PP: Global 15 bit negative offset divided by 2 */\n-#define R_PPN16B\t0x43\t\t/* PP: Global 16 bit negative byte offset */\n-#define R_PPLN15\t0x44\t\t/* PP: Local 15 bit negative offset */\n-#define R_PPLN15W\t0x45\t\t/* PP: Local 15 bit negative offset divided by 4 */\n-#define R_PPLN15H\t0x46\t\t/* PP: Local 15 bit negative offset divided by 2 */\n-#define R_PPLN16B\t0x47\t\t/* PP: Local 16 bit negative byte offset */\n-#define R_MPPCR15W\t0x4E\t\t/* MP: 15 bit PC-relative divided by 4 */\n-#define R_MPPCR\t\t0x4F\t\t/* MP: 32 bit PC-relative divided by 4 */"
    },
    {
      "sha": "ac1249fcc376ee243a67d7ff178fdb5d15c15f1a",
      "filename": "include/opcode/tic80.h",
      "status": "removed",
      "additions": 0,
      "deletions": 283,
      "changes": 283,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/62e6599087efba193e0156d89ee65fb74fc99cb2/include/opcode/tic80.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/62e6599087efba193e0156d89ee65fb74fc99cb2/include/opcode/tic80.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/opcode/tic80.h?ref=62e6599087efba193e0156d89ee65fb74fc99cb2",
      "patch": "@@ -1,283 +0,0 @@\n-/* tic80.h -- Header file for TI TMS320C80 (MV) opcode table\n-   Copyright (C) 1996-2019 Free Software Foundation, Inc.\n-   Written by Fred Fish (fnf@cygnus.com), Cygnus Support\n-\n-   This file is part of GDB, GAS, and the GNU binutils.\n-\n-   GDB, GAS, and the GNU binutils are free software; you can redistribute\n-   them and/or modify them under the terms of the GNU General Public\n-   License as published by the Free Software Foundation; either version 3,\n-   or (at your option) any later version.\n-\n-   GDB, GAS, and the GNU binutils are distributed in the hope that they\n-   will be useful, but WITHOUT ANY WARRANTY; without even the implied\n-   warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See\n-   the GNU General Public License for more details.\n-\n-   You should have received a copy of the GNU General Public License\n-   along with this file; see the file COPYING3.  If not, write to the Free\n-   Software Foundation, 51 Franklin Street - Fifth Floor, Boston,\n-   MA 02110-1301, USA.  */\n-\n-#ifndef TIC80_H\n-#define TIC80_H\n-\n-/* The opcode table is an array of struct tic80_opcode.  */\n-\n-struct tic80_opcode\n-{\n-  /* The opcode name.  */\n-\n-  const char *name;\n-\n-  /* The opcode itself.  Those bits which will be filled in with operands\n-     are zeroes.  */\n-\n-  unsigned long opcode;\n-\n-  /* The opcode mask.  This is used by the disassembler.  This is a mask\n-     containing ones indicating those bits which must match the opcode\n-     field, and zeroes indicating those bits which need not match (and are\n-     presumably filled in by operands).  */\n-\n-  unsigned long mask;\n-\n-  /* Special purpose flags for this opcode. */\n-\n-  unsigned char flags;\n-\n-  /* An array of operand codes.  Each code is an index into the operand\n-     table.  They appear in the order which the operands must appear in\n-     assembly code, and are terminated by a zero.  FIXME: Adjust size to\n-     match actual requirements when TIc80 support is complete */\n-\n-  unsigned char operands[8];\n-};\n-\n-/* The table itself is sorted by major opcode number, and is otherwise in\n-   the order in which the disassembler should consider instructions.\n-   FIXME: This isn't currently true. */\n-\n-extern const struct tic80_opcode tic80_opcodes[];\n-extern const int tic80_num_opcodes;\n-\n-\f\n-/* The operands table is an array of struct tic80_operand.  */\n-\n-struct tic80_operand\n-{\n-  /* The number of bits in the operand.  */\n-\n-  int bits;\n-\n-  /* How far the operand is left shifted in the instruction.  */\n-\n-  int shift;\n-\n-  /* Insertion function.  This is used by the assembler.  To insert an\n-     operand value into an instruction, check this field.\n-\n-     If it is NULL, execute\n-         i |= (op & ((1 << o->bits) - 1)) << o->shift;\n-     (i is the instruction which we are filling in, o is a pointer to\n-     this structure, and op is the opcode value; this assumes twos\n-     complement arithmetic).\n-\n-     If this field is not NULL, then simply call it with the\n-     instruction and the operand value.  It will return the new value\n-     of the instruction.  If the ERRMSG argument is not NULL, then if\n-     the operand value is illegal, *ERRMSG will be set to a warning\n-     string (the operand will be inserted in any case).  If the\n-     operand value is legal, *ERRMSG will be unchanged (most operands\n-     can accept any value).  */\n-\n-  unsigned long (*insert)\n-    (unsigned long instruction, long op, const char **errmsg);\n-\n-  /* Extraction function.  This is used by the disassembler.  To\n-     extract this operand type from an instruction, check this field.\n-\n-     If it is NULL, compute\n-         op = ((i) >> o->shift) & ((1 << o->bits) - 1);\n-\t if ((o->flags & TIC80_OPERAND_SIGNED) != 0\n-\t     && (op & (1 << (o->bits - 1))) != 0)\n-\t   op -= 1 << o->bits;\n-     (i is the instruction, o is a pointer to this structure, and op\n-     is the result; this assumes twos complement arithmetic).\n-\n-     If this field is not NULL, then simply call it with the\n-     instruction value.  It will return the value of the operand.  If\n-     the INVALID argument is not NULL, *INVALID will be set to\n-     non-zero if this operand type can not actually be extracted from\n-     this operand (i.e., the instruction does not match).  If the\n-     operand is valid, *INVALID will not be changed.  */\n-\n-  long (*extract) (unsigned long instruction, int *invalid);\n-\n-  /* One bit syntax flags.  */\n-\n-  unsigned long flags;\n-};\n-\n-/* Elements in the table are retrieved by indexing with values from\n-   the operands field of the tic80_opcodes table.  */\n-\n-extern const struct tic80_operand tic80_operands[];\n-\n-\f\n-/* Values defined for the flags field of a struct tic80_operand.\n-\n-   Note that flags for all predefined symbols, such as the general purpose\n-   registers (ex: r10), control registers (ex: FPST), condition codes (ex:\n-   eq0.b), bit numbers (ex: gt.b), etc are large enough that they can be\n-   or'd into an int where the lower bits contain the actual numeric value\n-   that correponds to this predefined symbol.  This way a single int can\n-   contain both the value of the symbol and it's type.\n- */\n-\n-/* This operand must be an even register number.  Floating point numbers\n-   for example are stored in even/odd register pairs. */\n-\n-#define TIC80_OPERAND_EVEN\t(1u << 0)\n-\n-/* This operand must be an odd register number and must be one greater than\n-   the register number of the previous operand.  I.E. the second register in\n-   an even/odd register pair. */\n-\n-#define TIC80_OPERAND_ODD\t(1u << 1)\n-\n-/* This operand takes signed values.  */\n-\n-#define TIC80_OPERAND_SIGNED\t(1u << 2)\n-\n-/* This operand may be either a predefined constant name or a numeric value.\n-   An example would be a condition code like \"eq0.b\" which has the numeric\n-   value 0x2. */\n-\n-#define TIC80_OPERAND_NUM\t(1u << 3)\n-\n-/* This operand should be wrapped in parentheses rather than separated\n-   from the previous one by a comma.  This is used for various\n-   instructions, like the load and store instructions, which want\n-   their operands to look like \"displacement(reg)\" */\n-\n-#define TIC80_OPERAND_PARENS\t(1u << 4)\n-\n-/* This operand is a PC relative branch offset.  The disassembler prints\n-   these symbolically if possible.  Note that the offsets are taken as word\n-   offsets. */\n-\n-#define TIC80_OPERAND_PCREL\t(1u << 5)\n-\n-/* This flag is a hint to the disassembler for using hex as the prefered\n-   printing format, even for small positive or negative immediate values.\n-   Normally values in the range -999 to 999 are printed as signed decimal\n-   values and other values are printed in hex. */\n-\n-#define TIC80_OPERAND_BITFIELD\t(1u << 6)\n-\n-/* This operand may have a \":m\" modifier specified by bit 17 in a short\n-   immediate form instruction. */\n-\n-#define TIC80_OPERAND_M_SI\t(1u << 7)\n-\n-/* This operand may have a \":m\" modifier specified by bit 15 in a long\n-   immediate or register form instruction. */\n-\n-#define TIC80_OPERAND_M_LI\t(1u << 8)\n-\n-/* This operand may have a \":s\" modifier specified in bit 11 in a long\n-   immediate or register form instruction. */\n-\n-#define TIC80_OPERAND_SCALED\t(1u << 9)\n-\n-/* This operand is a floating point value */\n-\n-#define TIC80_OPERAND_FLOAT\t(1u << 10)\n-\n-/* This operand is an byte offset from a base relocation. The lower\n- two bits of the final relocated address are ignored when the value is\n- written to the program counter. */\n-\n-#define TIC80_OPERAND_BASEREL\t(1u << 11)\n-\n-/* This operand is an \"endmask\" field for a shift instruction.\n-   It is treated special in that it can have values of 0-32,\n-   where 0 and 32 result in the same instruction.  The assembler\n-   must be able to accept both endmask values.  This disassembler\n-   has no way of knowing from the instruction which value was \n-   given at assembly time, so it just uses '0'. */\n-\n-#define TIC80_OPERAND_ENDMASK\t(1u << 12)\n-\n-/* This operand is one of the 32 general purpose registers.\n-   The disassembler prints these with a leading 'r'. */\n-\n-#define TIC80_OPERAND_GPR\t(1u << 27)\n-\n-/* This operand is a floating point accumulator register.\n-   The disassembler prints these with a leading 'a'. */\n-\n-#define TIC80_OPERAND_FPA\t(1u << 28)\n-\n-/* This operand is a control register number, either numeric or\n-   symbolic (like \"EIF\", \"EPC\", etc).\n-   The disassembler prints these symbolically. */\n-\n-#define TIC80_OPERAND_CR\t(1u << 29)\n-\n-/* This operand is a condition code, either numeric or\n-   symbolic (like \"eq0.b\", \"ne0.w\", etc).\n-   The disassembler prints these symbolically. */\n-\n-#define TIC80_OPERAND_CC\t(1u << 30)\n-\n-/* This operand is a bit number, either numeric or\n-   symbolic (like \"eq.b\", \"or.f\", etc).\n-   The disassembler prints these symbolically.\n-   Note that they appear in the instruction in 1's complement relative\n-   to the values given in the manual. */\n-\n-#define TIC80_OPERAND_BITNUM\t(1u << 31)\n-\n-/* This mask is used to strip operand bits from an int that contains\n-   both operand bits and a numeric value in the lsbs. */\n-\n-#define TIC80_OPERAND_MASK\t(TIC80_OPERAND_GPR | TIC80_OPERAND_FPA | TIC80_OPERAND_CR | TIC80_OPERAND_CC | TIC80_OPERAND_BITNUM)\n-\n-\f\n-/* Flag bits for the struct tic80_opcode flags field. */\n-\n-#define TIC80_VECTOR\t\t01\t/* Is a vector instruction */\n-#define TIC80_NO_R0_DEST\t02\t/* Register r0 cannot be a destination register */\n-\n-\f\n-/* The opcodes library contains a table that allows translation from predefined\n-   symbol names to numeric values, and vice versa. */\n-\n-/* Structure to hold information about predefined symbols.  */\n-\n-struct predefined_symbol\n-{\n-  char *name;\t\t/* name to recognize */\n-  int value;\n-};\n-\n-#define PDS_NAME(pdsp) ((pdsp) -> name)\n-#define PDS_VALUE(pdsp) ((pdsp) -> value)\n-\n-/* Translation array.  */\n-extern const struct predefined_symbol tic80_predefined_symbols[];\n-/* How many members in the array.  */\n-extern const int tic80_num_predefined_symbols;\n-\n-/* Translate value to symbolic name.  */\n-const char *tic80_value_to_symbol (int val, int class);\n-\n-/* Translate symbolic name to value.  */\n-int tic80_symbol_to_value (char *name, int class);\n-\n-const struct predefined_symbol *tic80_next_predefined_symbol\n-  (const struct predefined_symbol *);\n-\n-#endif /* TIC80_H */"
    },
    {
      "sha": "f23d70b043cc816e78219cc58cb42d9fb277e161",
      "filename": "ld/ChangeLog",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5b660084e26050d2e7f1fda06daec1e83311c188/ld/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5b660084e26050d2e7f1fda06daec1e83311c188/ld/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ChangeLog?ref=5b660084e26050d2e7f1fda06daec1e83311c188",
      "patch": "@@ -1,3 +1,12 @@\n+2019-12-17  Alan Modra  <amodra@gmail.com>\n+\n+\t* emulparams/tic80coff.sh: Delete file.\n+\t* scripttempl/tic80coff.sc: Delete file.\n+\t* configure.tgt: Remove tic80 support.\n+\t* Makefile.am: Likewise.\n+\t* Makefile.in: Regenerate.\n+\t* po/BLD-POTFILES.in: Regenerate.\n+\n 2019-12-12  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* testsuite/ld-i386/align-branch-1.d: New file."
    },
    {
      "sha": "cd2ff301c3ce4bd5d042479573e26d4e2e5936f9",
      "filename": "ld/Makefile.am",
      "status": "modified",
      "additions": 0,
      "deletions": 2,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5b660084e26050d2e7f1fda06daec1e83311c188/ld/Makefile.am",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5b660084e26050d2e7f1fda06daec1e83311c188/ld/Makefile.am",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/Makefile.am?ref=5b660084e26050d2e7f1fda06daec1e83311c188",
      "patch": "@@ -379,7 +379,6 @@ ALL_EMULATION_SOURCES = \\\n \tetic3xcoff_onchip.c \\\n \tetic4xcoff.c \\\n \tetic54xcoff.c \\\n-\tetic80coff.c \\\n \tev850.c \\\n \tev850_rh850.c \\\n \tevanilla.c \\\n@@ -869,7 +868,6 @@ $(ALL_EMULATION_SOURCES) $(ALL_64_EMULATION_SOURCES): $(GEN_DEPENDS)\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/etic3xcoff_onchip.Pc@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/etic4xcoff.Pc@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/etic54xcoff.Pc@am__quote@\n-@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/etic80coff.Pc@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/ev850.Pc@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/ev850_rh850.Pc@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/evanilla.Pc@am__quote@"
    },
    {
      "sha": "d27bafb3640f30f863406ae42fb57998f5cc71fc",
      "filename": "ld/Makefile.in",
      "status": "modified",
      "additions": 0,
      "deletions": 3,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5b660084e26050d2e7f1fda06daec1e83311c188/ld/Makefile.in",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5b660084e26050d2e7f1fda06daec1e83311c188/ld/Makefile.in",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/Makefile.in?ref=5b660084e26050d2e7f1fda06daec1e83311c188",
      "patch": "@@ -869,7 +869,6 @@ ALL_EMULATION_SOURCES = \\\n \tetic3xcoff_onchip.c \\\n \tetic4xcoff.c \\\n \tetic54xcoff.c \\\n-\tetic80coff.c \\\n \tev850.c \\\n \tev850_rh850.c \\\n \tevanilla.c \\\n@@ -1490,7 +1489,6 @@ distclean-compile:\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/etic3xcoff_onchip.Po@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/etic4xcoff.Po@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/etic54xcoff.Po@am__quote@\n-@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/etic80coff.Po@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/ev850.Po@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/ev850_rh850.Po@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/evanilla.Po@am__quote@\n@@ -2475,7 +2473,6 @@ $(ALL_EMULATION_SOURCES) $(ALL_64_EMULATION_SOURCES): $(GEN_DEPENDS)\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/etic3xcoff_onchip.Pc@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/etic4xcoff.Pc@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/etic54xcoff.Pc@am__quote@\n-@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/etic80coff.Pc@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/ev850.Pc@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/ev850_rh850.Pc@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/evanilla.Pc@am__quote@"
    },
    {
      "sha": "1e90d883ef87b06a1f3ac65e6d9f30780369e209",
      "filename": "ld/configure.tgt",
      "status": "modified",
      "additions": 0,
      "deletions": 3,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5b660084e26050d2e7f1fda06daec1e83311c188/ld/configure.tgt",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5b660084e26050d2e7f1fda06daec1e83311c188/ld/configure.tgt",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/configure.tgt?ref=5b660084e26050d2e7f1fda06daec1e83311c188",
      "patch": "@@ -901,9 +901,6 @@ tic6x-*-uclinux)\ttarg_emul=elf32_tic6x_linux_le\n \t\t\ttarg_extra_emuls=\"elf32_tic6x_linux_be elf32_tic6x_le elf32_tic6x_be\"\n \t\t\ttarg_extra_libpath=$targ_extra_emuls\n \t\t\t;;\n-tic80-*-*)\t\ttarg_emul=tic80coff\n-\t\t\ttarg_extra_ofiles=\n-\t\t\t;;\n tilegx-*-*)\t\ttarg_emul=elf64tilegx\n \t\t\ttarg_extra_emuls=\"elf64tilegx_be elf32tilegx elf32tilegx_be\"\n \t\t\ttarg_extra_libpath=$targ_extra_emuls"
    },
    {
      "sha": "5fce9349376b385eaa0c480b367d9a263624e26e",
      "filename": "ld/emulparams/tic80coff.sh",
      "status": "removed",
      "additions": 0,
      "deletions": 50,
      "changes": 50,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/62e6599087efba193e0156d89ee65fb74fc99cb2/ld/emulparams/tic80coff.sh",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/62e6599087efba193e0156d89ee65fb74fc99cb2/ld/emulparams/tic80coff.sh",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/emulparams/tic80coff.sh?ref=62e6599087efba193e0156d89ee65fb74fc99cb2",
      "patch": "@@ -1,50 +0,0 @@\n-# This file is sourced by the genscripts.sh script.\n-# These are shell variables that are used later by either genscripts\n-# or on of the scripts that it sources.\n-\n-# The name of the scripttempl script to use.  In this case, genscripts\n-# uses scripttempl/tic80coff.sc\n-#\n-SCRIPT_NAME=tic80coff\n-\n-# The name of the emultempl script to use.  If set to \"template\" then\n-# genscripts.sh will use the script emultempl/template.em.  If not set,\n-# then the default value is \"generic\".\n-#\n-# TEMPLATE_NAME=\n-\n-# If this is set to an nonempty string, genscripts.sh will invoke the\n-# scripttempl script an extra time to create a shared library script.\n-#\n-# GENERATE_SHLIB_SCRIPT=\n-\n-# The BFD output format to use.  The scripttempl script will use it in\n-# an OUTPUT_FORMAT expression in the linker script.\n-#\n-OUTPUT_FORMAT=\"coff-tic80\"\n-\n-# This is normally set to indicate the architecture to use, such as\n-# \"sparc\".  The scripttempl script will normally use it in an OUTPUT_ARCH\n-# expression in the linker script.\n-#\n-ARCH=tic80\n-\n-# Some scripttempl scripts use this to set the entry address in an ENTRY\n-# expression in the linker script.\n-#\n-# ENTRY=\n-\n-# The scripttempl script uses this to set the start address of the\n-# \".text\" section.\n-#\n-TEXT_START_ADDR=0x2000000\n-\n-# The genscripts.sh script uses this to set the default value of\n-# DATA_ALIGNMENT when running the scripttempl script.\n-#\n-# SEGMENT_SIZE=\n-\n-# If SEGMENT_SIZE is not defined, the genscripts.sh script uses this\n-# to define it.\n-#\n-TARGET_PAGE_SIZE=0x1000"
    },
    {
      "sha": "d171bb946863a1ea2d69803f64b41d6fc53c61cb",
      "filename": "ld/po/BLD-POTFILES.in",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5b660084e26050d2e7f1fda06daec1e83311c188/ld/po/BLD-POTFILES.in",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5b660084e26050d2e7f1fda06daec1e83311c188/ld/po/BLD-POTFILES.in",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/po/BLD-POTFILES.in?ref=5b660084e26050d2e7f1fda06daec1e83311c188",
      "patch": "@@ -292,7 +292,6 @@ etic3xcoff.c\n etic3xcoff_onchip.c\n etic4xcoff.c\n etic54xcoff.c\n-etic80coff.c\n ev850.c\n ev850_rh850.c\n evanilla.c"
    },
    {
      "sha": "692227a8b433e43b730ddb38db739d1fb6deb11b",
      "filename": "ld/scripttempl/tic80coff.sc",
      "status": "removed",
      "additions": 0,
      "deletions": 86,
      "changes": 86,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/62e6599087efba193e0156d89ee65fb74fc99cb2/ld/scripttempl/tic80coff.sc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/62e6599087efba193e0156d89ee65fb74fc99cb2/ld/scripttempl/tic80coff.sc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/scripttempl/tic80coff.sc?ref=62e6599087efba193e0156d89ee65fb74fc99cb2",
      "patch": "@@ -1,86 +0,0 @@\n-# Linker script for TI TMS320C80 (tic80) COFF.\n-#\n-# Copyright (C) 2014-2019 Free Software Foundation, Inc.\n-#\n-# Copying and distribution of this file, with or without modification,\n-# are permitted in any medium without royalty provided the copyright\n-# notice and this notice are preserved.\n-#\n-# Besides the shell variables set by the emulparams script, and the LD_FLAG\n-# variable, the genscripts.sh script will set the following variables for each\n-# time this script is run to generate one of the linker scripts for ldscripts:\n-#\n-# RELOCATING: Set to a non-empty string when the linker is going to be doing\n-# a final relocation.\n-#\n-# CONSTRUCTING: Set to a non-empty string when the linker is going to be\n-# building global constructor and destructor tables.\n-#\n-# DATA_ALIGNMENT: Set to an ALIGN expression when the output should be page\n-# aligned, or to \".\" when generating the -N script.\n-#\n-# CREATE_SHLIB: Set to a non-empty string when generating a script for\n-# the -shared linker arg.\n-\n-test -z \"$TEXT_START_ADDR\" && TEXT_START_ADDR=\"0x80000 + SIZEOF_HEADERS\"\n-test -z \"$ENTRY\" && ENTRY=__start\n-\n-cat <<EOF\n-/* Copyright (C) 2014-2019 Free Software Foundation, Inc.\n-\n-   Copying and distribution of this script, with or without modification,\n-   are permitted in any medium without royalty provided the copyright\n-   notice and this notice are preserved.  */\n-\n-OUTPUT_FORMAT(\"${OUTPUT_FORMAT}\")\n-${LIB_SEARCH_DIRS}\n-\n-${RELOCATING+ENTRY (${ENTRY})}\n-\n-SECTIONS\n-{\n-  .text ${RELOCATING+ $TEXT_START_ADDR} : {\n-    ${RELOCATING+KEEP (*(SORT_NONE(.init)))\n-    KEEP (*(SORT_NONE(.fini)))}\n-    *(.text)\n-  }\n-  .const ALIGN(4) : {\n-    *(.const)\n-  }\n-  .ctors ALIGN(4) : {\n-    ${CONSTRUCTING+ . = ALIGN(4);}\n-    ${CONSTRUCTING+ ___CTOR_LIST__ = .;}\n-    ${CONSTRUCTING+ LONG(-1)}\n-    *(.ctors)\n-    ${CONSTRUCTING+ ___CTOR_END__ = .;}\n-    ${CONSTRUCTING+ LONG(0)}\n-  }\n-  .dtors ALIGN(4) : {\n-    ${CONSTRUCTING+ ___DTOR_LIST__ = .;}\n-    ${CONSTRUCTING+ LONG(-1)}\n-    ${CONSTRUCTING+ *(.dtors)}\n-    ${CONSTRUCTING+ ___DTOR_END__ = .;}\n-    ${CONSTRUCTING+ LONG(0)}\n-  }\n-  ${RELOCATING+ etext  =  .;}\n-  .data : {\n-    *(.data)\n-    ${RELOCATING+ __edata  =  .};\n-  }\n-  .bss : {\n-    ${RELOCATING+ __bss_start = .};\n-    *(.bss)\n-    *(COMMON)\n-     ${RELOCATING+ _end = ALIGN(0x8)};\n-     ${RELOCATING+ __end = ALIGN(0x8)};\n-  }\n-  .stab  0 ${RELOCATING+(NOLOAD)} :\n-  {\n-    [ .stab ]\n-  }\n-  .stabstr  0 ${RELOCATING+(NOLOAD)} :\n-  {\n-    [ .stabstr ]\n-  }\n-}\n-EOF"
    },
    {
      "sha": "744d8f8bfa793879bae566d7fe818202d17ce5a8",
      "filename": "opcodes/ChangeLog",
      "status": "modified",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5b660084e26050d2e7f1fda06daec1e83311c188/opcodes/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5b660084e26050d2e7f1fda06daec1e83311c188/opcodes/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/ChangeLog?ref=5b660084e26050d2e7f1fda06daec1e83311c188",
      "patch": "@@ -1,3 +1,15 @@\n+2019-12-17  Alan Modra  <amodra@gmail.com>\n+\n+\t* tic80-dis.c: Delete file.\n+\t* tic80-opc.c: Delete file.\n+\t* disassemble.c: Remove tic80 support.\n+\t* disassemble.h: Likewise.\n+\t* Makefile.am: Likewise.\n+\t* configure.ac: Likewise.\n+\t* Makefile.in: Regenerate.\n+\t* configure: Regenerate.\n+\t* po/POTFILES.in: Regenerate.\n+\n 2019-12-17  Alan Modra  <amodra@gmail.com>\n \n \t* bpf-ibld.c: Regenerate."
    },
    {
      "sha": "3ef0c48c1d765f0012f5c7a941c622aebaf2cb4c",
      "filename": "opcodes/Makefile.am",
      "status": "modified",
      "additions": 0,
      "deletions": 2,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5b660084e26050d2e7f1fda06daec1e83311c188/opcodes/Makefile.am",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5b660084e26050d2e7f1fda06daec1e83311c188/opcodes/Makefile.am",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/Makefile.am?ref=5b660084e26050d2e7f1fda06daec1e83311c188",
      "patch": "@@ -245,8 +245,6 @@ TARGET_LIBOPCODES_CFILES = \\\n \ttic54x-dis.c \\\n \ttic54x-opc.c \\\n \ttic6x-dis.c \\\n-\ttic80-dis.c \\\n-\ttic80-opc.c \\\n \ttilegx-dis.c \\\n \ttilegx-opc.c \\\n \ttilepro-dis.c \\"
    },
    {
      "sha": "6515df0b079be220eaf95438af97036d71197f53",
      "filename": "opcodes/Makefile.in",
      "status": "modified",
      "additions": 0,
      "deletions": 4,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5b660084e26050d2e7f1fda06daec1e83311c188/opcodes/Makefile.in",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5b660084e26050d2e7f1fda06daec1e83311c188/opcodes/Makefile.in",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/Makefile.in?ref=5b660084e26050d2e7f1fda06daec1e83311c188",
      "patch": "@@ -635,8 +635,6 @@ TARGET_LIBOPCODES_CFILES = \\\n \ttic54x-dis.c \\\n \ttic54x-opc.c \\\n \ttic6x-dis.c \\\n-\ttic80-dis.c \\\n-\ttic80-opc.c \\\n \ttilegx-dis.c \\\n \ttilegx-opc.c \\\n \ttilepro-dis.c \\\n@@ -1051,8 +1049,6 @@ distclean-compile:\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/tic54x-dis.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/tic54x-opc.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/tic6x-dis.Plo@am__quote@\n-@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/tic80-dis.Plo@am__quote@\n-@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/tic80-opc.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/tilegx-dis.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/tilegx-opc.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/tilepro-dis.Plo@am__quote@"
    },
    {
      "sha": "5903fe4fa5fa853e12e46a2527bdb10d7b689baa",
      "filename": "opcodes/configure",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5b660084e26050d2e7f1fda06daec1e83311c188/opcodes/configure",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5b660084e26050d2e7f1fda06daec1e83311c188/opcodes/configure",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/configure?ref=5b660084e26050d2e7f1fda06daec1e83311c188",
      "patch": "@@ -12933,7 +12933,6 @@ if test x${all_targets} = xfalse ; then\n \tbfd_tic4x_arch)\t\tta=\"$ta tic4x-dis.lo\" ;;\n \tbfd_tic54x_arch)\tta=\"$ta tic54x-dis.lo tic54x-opc.lo\" ;;\n \tbfd_tic6x_arch)\t\tta=\"$ta tic6x-dis.lo\" ;;\n-\tbfd_tic80_arch)\t\tta=\"$ta tic80-dis.lo tic80-opc.lo\" ;;\n \tbfd_tilegx_arch)\tta=\"$ta tilegx-dis.lo tilegx-opc.lo\" ;;\n \tbfd_tilepro_arch)\tta=\"$ta tilepro-dis.lo tilepro-opc.lo\" ;;\n \tbfd_v850_arch)\t\tta=\"$ta v850-opc.lo v850-dis.lo\" ;;"
    },
    {
      "sha": "96fb596a1e0c8a94ef817f3dddf2ee59b830c035",
      "filename": "opcodes/configure.ac",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5b660084e26050d2e7f1fda06daec1e83311c188/opcodes/configure.ac",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5b660084e26050d2e7f1fda06daec1e83311c188/opcodes/configure.ac",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/configure.ac?ref=5b660084e26050d2e7f1fda06daec1e83311c188",
      "patch": "@@ -324,7 +324,6 @@ if test x${all_targets} = xfalse ; then\n \tbfd_tic4x_arch)\t\tta=\"$ta tic4x-dis.lo\" ;;\n \tbfd_tic54x_arch)\tta=\"$ta tic54x-dis.lo tic54x-opc.lo\" ;;\n \tbfd_tic6x_arch)\t\tta=\"$ta tic6x-dis.lo\" ;;\n-\tbfd_tic80_arch)\t\tta=\"$ta tic80-dis.lo tic80-opc.lo\" ;;\n \tbfd_tilegx_arch)\tta=\"$ta tilegx-dis.lo tilegx-opc.lo\" ;;\n \tbfd_tilepro_arch)\tta=\"$ta tilepro-dis.lo tilepro-opc.lo\" ;;\n \tbfd_v850_arch)\t\tta=\"$ta v850-opc.lo v850-dis.lo\" ;;"
    },
    {
      "sha": "cc1de6986e2d3d1d06047aa302fa184d2e469914",
      "filename": "opcodes/disassemble.c",
      "status": "modified",
      "additions": 0,
      "deletions": 6,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5b660084e26050d2e7f1fda06daec1e83311c188/opcodes/disassemble.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5b660084e26050d2e7f1fda06daec1e83311c188/opcodes/disassemble.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/disassemble.c?ref=5b660084e26050d2e7f1fda06daec1e83311c188",
      "patch": "@@ -88,7 +88,6 @@\n #define ARCH_tic4x\n #define ARCH_tic54x\n #define ARCH_tic6x\n-#define ARCH_tic80\n #define ARCH_tilegx\n #define ARCH_tilepro\n #define ARCH_v850\n@@ -464,11 +463,6 @@ disassembler (enum bfd_architecture a,\n       disassemble = print_insn_tic6x;\n       break;\n #endif\n-#ifdef ARCH_tic80\n-    case bfd_arch_tic80:\n-      disassemble = print_insn_tic80;\n-      break;\n-#endif\n #ifdef ARCH_ft32\n     case bfd_arch_ft32:\n       disassemble = print_insn_ft32;"
    },
    {
      "sha": "945508519a849658601e2d3c026f79dad3bb03b8",
      "filename": "opcodes/disassemble.h",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5b660084e26050d2e7f1fda06daec1e83311c188/opcodes/disassemble.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5b660084e26050d2e7f1fda06daec1e83311c188/opcodes/disassemble.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/disassemble.h?ref=5b660084e26050d2e7f1fda06daec1e83311c188",
      "patch": "@@ -87,7 +87,6 @@ extern int print_insn_tic30\t\t(bfd_vma, disassemble_info *);\n extern int print_insn_tic4x\t\t(bfd_vma, disassemble_info *);\n extern int print_insn_tic54x\t\t(bfd_vma, disassemble_info *);\n extern int print_insn_tic6x\t\t(bfd_vma, disassemble_info *);\n-extern int print_insn_tic80\t\t(bfd_vma, disassemble_info *);\n extern int print_insn_tilegx\t\t(bfd_vma, disassemble_info *);\n extern int print_insn_tilepro\t\t(bfd_vma, disassemble_info *);\n extern int print_insn_v850\t\t(bfd_vma, disassemble_info *);"
    },
    {
      "sha": "757220476e57cfbf7e22fc175e8049e5b6ceaf50",
      "filename": "opcodes/po/POTFILES.in",
      "status": "modified",
      "additions": 0,
      "deletions": 2,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5b660084e26050d2e7f1fda06daec1e83311c188/opcodes/po/POTFILES.in",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5b660084e26050d2e7f1fda06daec1e83311c188/opcodes/po/POTFILES.in",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/po/POTFILES.in?ref=5b660084e26050d2e7f1fda06daec1e83311c188",
      "patch": "@@ -205,8 +205,6 @@ tic4x-dis.c\n tic54x-dis.c\n tic54x-opc.c\n tic6x-dis.c\n-tic80-dis.c\n-tic80-opc.c\n tilegx-dis.c\n tilegx-opc.c\n tilepro-dis.c"
    },
    {
      "sha": "3bb05c053ab1f101e9926c5fdea3af8444321127",
      "filename": "opcodes/tic80-dis.c",
      "status": "removed",
      "additions": 0,
      "deletions": 315,
      "changes": 315,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/62e6599087efba193e0156d89ee65fb74fc99cb2/opcodes/tic80-dis.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/62e6599087efba193e0156d89ee65fb74fc99cb2/opcodes/tic80-dis.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/tic80-dis.c?ref=62e6599087efba193e0156d89ee65fb74fc99cb2",
      "patch": "@@ -1,315 +0,0 @@\n-/* Print TI TMS320C80 (MVP) instructions\n-   Copyright (C) 1996-2019 Free Software Foundation, Inc.\n-\n-   This file is part of the GNU opcodes library.\n-\n-   This library is free software; you can redistribute it and/or modify\n-   it under the terms of the GNU General Public License as published by\n-   the Free Software Foundation; either version 3, or (at your option)\n-   any later version.\n-\n-   It is distributed in the hope that it will be useful, but WITHOUT\n-   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n-   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n-   License for more details.\n-\n-   You should have received a copy of the GNU General Public License\n-   along with this program; if not, write to the Free Software\n-   Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston,\n-   MA 02110-1301, USA.  */\n-\n-#include \"sysdep.h\"\n-#include <stdio.h>\n-#include \"opcode/tic80.h\"\n-#include \"disassemble.h\"\n-\n-static int length;\n-\f\n-/* Print an integer operand.  Try to be somewhat smart about the\n-   format by assuming that small positive or negative integers are\n-   probably loop increment values, structure offsets, or similar\n-   values that are more meaningful printed as signed decimal values.\n-   Larger numbers are probably better printed as hex values.  */\n-\n-static void\n-print_operand_integer (struct disassemble_info *info, long value)\n-{\n-  if ((value > 9999 || value < -9999))\n-    (*info->fprintf_func) (info->stream, \"%#lx\", value);\n-  else\n-    (*info->fprintf_func) (info->stream, \"%ld\", value);\n-}\n-\f\n-/* FIXME: depends upon sizeof (long) == sizeof (float) and\n-   also upon host floating point format matching target\n-   floating point format.  */\n-\n-static void\n-print_operand_float (struct disassemble_info *info, long value)\n-{\n-  union { float f; long l; } fval;\n-\n-  fval.l = value;\n-  (*info->fprintf_func) (info->stream, \"%g\", fval.f);\n-}\n-\n-static void\n-print_operand_control_register (struct disassemble_info *info, long value)\n-{\n-  const char *tmp;\n-\n-  tmp = tic80_value_to_symbol (value, TIC80_OPERAND_CR);\n-  if (tmp != NULL)\n-    (*info->fprintf_func) (info->stream, \"%s\", tmp);\n-  else\n-    (*info->fprintf_func) (info->stream, \"%#lx\", value);\n-}\n-\n-static void\n-print_operand_condition_code (struct disassemble_info *info, long value)\n-{\n-  const char *tmp;\n-\n-  tmp = tic80_value_to_symbol (value, TIC80_OPERAND_CC);\n-  if (tmp != NULL)\n-    (*info->fprintf_func) (info->stream, \"%s\", tmp);\n-  else\n-    (*info->fprintf_func) (info->stream, \"%ld\", value);\n-}\n-\n-static void\n-print_operand_bitnum (struct disassemble_info *info, long value)\n-{\n-  int bitnum;\n-  const char *tmp;\n-\n-  bitnum = ~value & 0x1F;\n-  tmp = tic80_value_to_symbol (bitnum, TIC80_OPERAND_BITNUM);\n-  if (tmp != NULL)\n-    (*info->fprintf_func) (info->stream, \"%s\", tmp);\n-  else\n-    (*info->fprintf_func) (info->stream, \"%d\", bitnum);\n-}\n-\f\n-/* Print the operand as directed by the flags.  */\n-\n-#define M_SI(insn,op) ((((op)->flags & TIC80_OPERAND_M_SI) != 0) && ((insn) & (1 << 17)))\n-#define M_LI(insn,op) ((((op)->flags & TIC80_OPERAND_M_LI) != 0) && ((insn) & (1 << 15)))\n-#define R_SCALED(insn,op) ((((op)->flags & TIC80_OPERAND_SCALED) != 0) && ((insn) & (1 << 11)))\n-\n-static void\n-print_operand (struct disassemble_info *info,\n-\t       long value,\n-\t       unsigned long insn,\n-\t       const struct tic80_operand *operand,\n-\t       bfd_vma memaddr)\n-{\n-  if ((operand->flags & TIC80_OPERAND_GPR) != 0)\n-    {\n-      (*info->fprintf_func) (info->stream, \"r%ld\", value);\n-      if (M_SI (insn, operand) || M_LI (insn, operand))\n-\t{\n-\t  (*info->fprintf_func) (info->stream, \":m\");\n-\t}\n-    }\n-  else if ((operand->flags & TIC80_OPERAND_FPA) != 0)\n-    (*info->fprintf_func) (info->stream, \"a%ld\", value);\n-\n-  else if ((operand->flags & TIC80_OPERAND_PCREL) != 0)\n-    (*info->print_address_func) (memaddr + 4 * value, info);\n-\n-  else if ((operand->flags & TIC80_OPERAND_BASEREL) != 0)\n-    (*info->print_address_func) (value, info);\n-\n-  else if ((operand->flags & TIC80_OPERAND_BITNUM) != 0)\n-    print_operand_bitnum (info, value);\n-\n-  else if ((operand->flags & TIC80_OPERAND_CC) != 0)\n-    print_operand_condition_code (info, value);\n-\n-  else if ((operand->flags & TIC80_OPERAND_CR) != 0)\n-    print_operand_control_register (info, value);\n-\n-  else if ((operand->flags & TIC80_OPERAND_FLOAT) != 0)\n-    print_operand_float (info, value);\n-\n-  else if ((operand->flags & TIC80_OPERAND_BITFIELD))\n-    (*info->fprintf_func) (info->stream, \"%#lx\", value);\n-\n-  else\n-    print_operand_integer (info, value);\n-\n-  /* If this is a scaled operand, then print the modifier.  */\n-  if (R_SCALED (insn, operand))\n-    (*info->fprintf_func) (info->stream, \":s\");\n-}\n-\f\n-/* Get the next 32 bit word from the instruction stream and convert it\n-   into internal format in the unsigned long INSN, for which we are\n-   passed the address.  Return 0 on success, -1 on error.  */\n-\n-static int\n-fill_instruction (struct disassemble_info *info,\n-\t\t  bfd_vma memaddr,\n-\t\t  unsigned long *insnp)\n-{\n-  bfd_byte buffer[4];\n-  int status;\n-\n-  /* Get the bits for the next 32 bit word and put in buffer.  */\n-  status = (*info->read_memory_func) (memaddr + length, buffer, 4, info);\n-  if (status != 0)\n-    {\n-      (*info->memory_error_func) (status, memaddr, info);\n-      return -1;\n-    }\n-\n-  /* Read was successful, so increment count of bytes read and convert\n-     the bits into internal format.  */\n-\n-  length += 4;\n-  if (info->endian == BFD_ENDIAN_LITTLE)\n-    *insnp = bfd_getl32 (buffer);\n-\n-  else if (info->endian == BFD_ENDIAN_BIG)\n-    *insnp = bfd_getb32 (buffer);\n-\n-  else\n-    /* FIXME: Should probably just default to one or the other.  */\n-    abort ();\n-\n-  return 0;\n-}\n-\n-/* We have chosen an opcode table entry.  */\n-\n-static int\n-print_one_instruction (struct disassemble_info *info,\n-\t\t       bfd_vma memaddr,\n-\t\t       unsigned long insn,\n-\t\t       const struct tic80_opcode *opcode)\n-{\n-  const struct tic80_operand *operand;\n-  long value;\n-  int status;\n-  const unsigned char *opindex;\n-  int close_paren;\n-\n-  (*info->fprintf_func) (info->stream, \"%-10s\", opcode->name);\n-\n-  for (opindex = opcode->operands; *opindex != 0; opindex++)\n-    {\n-      operand = tic80_operands + *opindex;\n-\n-      /* Extract the value from the instruction.  */\n-      if (operand->extract)\n-\tvalue = (*operand->extract) (insn, NULL);\n-\n-      else if (operand->bits == 32)\n-\t{\n-\t  status = fill_instruction (info, memaddr, (unsigned long *) &value);\n-\t  if (status == -1)\n-\t    return status;\n-\t}\n-      else\n-\t{\n-\t  value = (insn >> operand->shift) & ((1 << operand->bits) - 1);\n-\n-\t  if ((operand->flags & TIC80_OPERAND_SIGNED) != 0\n-\t      && (value & (1 << (operand->bits - 1))) != 0)\n-\t    value -= 1 << operand->bits;\n-\t}\n-\n-      /* If this operand is enclosed in parenthesis, then print\n-\t the open paren, otherwise just print the regular comma\n-\t separator, except for the first operand.  */\n-      if ((operand->flags & TIC80_OPERAND_PARENS) == 0)\n-\t{\n-\t  close_paren = 0;\n-\t  if (opindex != opcode->operands)\n-\t    (*info->fprintf_func) (info->stream, \",\");\n-\t}\n-      else\n-\t{\n-\t  close_paren = 1;\n-\t  (*info->fprintf_func) (info->stream, \"(\");\n-\t}\n-\n-      print_operand (info, value, insn, operand, memaddr);\n-\n-      /* If we printed an open paren before printing this operand, close\n-\t it now. The flag gets reset on each loop.  */\n-      if (close_paren)\n-\t(*info->fprintf_func) (info->stream, \")\");\n-    }\n-\n-  return length;\n-}\n-\f\n-/* There are no specific bits that tell us for certain whether a vector\n-   instruction opcode contains one or two instructions.  However since\n-   a destination register of r0 is illegal, we can check for nonzero\n-   values in both destination register fields.  Only opcodes that have\n-   two valid instructions will have non-zero in both.  */\n-\n-#define TWO_INSN(insn) ((((insn) & (0x1F << 27)) != 0) && (((insn) & (0x1F << 22)) != 0))\n-\n-static int\n-print_instruction (struct disassemble_info *info,\n-\t\t   bfd_vma memaddr,\n-\t\t   unsigned long insn,\n-\t\t   const struct tic80_opcode *vec_opcode)\n-{\n-  const struct tic80_opcode *opcode;\n-  const struct tic80_opcode *opcode_end;\n-\n-  /* Find the first opcode match in the opcodes table.  For vector\n-     opcodes (vec_opcode != NULL) find the first match that is not the\n-     previously found match.  FIXME: there should be faster ways to\n-     search (hash table or binary search), but don't worry too much\n-     about it until other TIc80 support is finished.  */\n-\n-  opcode_end = tic80_opcodes + tic80_num_opcodes;\n-  for (opcode = tic80_opcodes; opcode < opcode_end; opcode++)\n-    {\n-      if ((insn & opcode->mask) == opcode->opcode &&\n-\t  opcode != vec_opcode)\n-\tbreak;\n-    }\n-\n-  if (opcode == opcode_end)\n-    {\n-      /* No match found, just print the bits as a .word directive.  */\n-      (*info->fprintf_func) (info->stream, \".word %#08lx\", insn);\n-    }\n-  else\n-    {\n-      /* Match found, decode the instruction.  */\n-      length = print_one_instruction (info, memaddr, insn, opcode);\n-      if (opcode->flags & TIC80_VECTOR && vec_opcode == NULL && TWO_INSN (insn))\n-\t{\n-\t  /* There is another instruction to print from the same opcode.\n-\t     Print the separator and then find and print the other\n-\t     instruction.  */\n-\t  (*info->fprintf_func) (info->stream, \"   ||   \");\n-\t  length = print_instruction (info, memaddr, insn, opcode);\n-\t}\n-    }\n-\n-  return length;\n-}\n-\f\n-int\n-print_insn_tic80 (bfd_vma memaddr, struct disassemble_info *info)\n-{\n-  unsigned long insn;\n-  int status;\n-\n-  length = 0;\n-  info->bytes_per_line = 8;\n-  status = fill_instruction (info, memaddr, &insn);\n-  if (status != -1)\n-    status = print_instruction (info, memaddr, insn, NULL);\n-\n-  return status;\n-}"
    },
    {
      "sha": "517bf627e5044870b5ae13010af550985eb76263",
      "filename": "opcodes/tic80-opc.c",
      "status": "removed",
      "additions": 0,
      "deletions": 1211,
      "changes": 1211,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/62e6599087efba193e0156d89ee65fb74fc99cb2/opcodes/tic80-opc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/62e6599087efba193e0156d89ee65fb74fc99cb2/opcodes/tic80-opc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/tic80-opc.c?ref=62e6599087efba193e0156d89ee65fb74fc99cb2",
      "patch": "@@ -1,1211 +0,0 @@\n-/* Opcode table for TI TMS320C80 (MVP).\n-   Copyright (C) 1996-2019 Free Software Foundation, Inc.\n-\n-   This file is part of the GNU opcodes library.\n-\n-   This library is free software; you can redistribute it and/or modify\n-   it under the terms of the GNU General Public License as published by\n-   the Free Software Foundation; either version 3, or (at your option)\n-   any later version.\n-\n-   It is distributed in the hope that it will be useful, but WITHOUT\n-   ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n-   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n-   License for more details.\n-\n-   You should have received a copy of the GNU General Public License\n-   along with this file; see the file COPYING.  If not, write to the\n-   Free Software Foundation, 51 Franklin Street - Fifth Floor, Boston,\n-   MA 02110-1301, USA.  */\n-\n-#include \"sysdep.h\"\n-#include <stdio.h>\n-#include \"opcode/tic80.h\"\n-\n-/* This file holds various tables for the TMS320C80 (MVP).\n-\n-   The opcode table is strictly constant data, so the compiler should\n-   be able to put it in the .text section.\n-\n-   This file also holds the operand table.  All knowledge about\n-   inserting operands into instructions and vice-versa is kept in this\n-   file.\n-\n-   The predefined register table maps from register names to register\n-   values.  */\n-\n-\f\n-/* Table of predefined symbol names, such as general purpose registers,\n-   floating point registers, condition codes, control registers, and bit\n-   numbers.\n-\n-   The table is sorted case independently by name so that it is suitable for\n-   searching via a binary search using a case independent comparison\n-   function.\n-\n-   Note that the type of the symbol is stored in the upper bits of the value\n-   field, which allows the value and type to be passed around as a unit in a\n-   single int.  The types have to be masked off before using the numeric\n-   value as a number.\n-*/\n-\n-const struct predefined_symbol tic80_predefined_symbols[] =\n-{\n-  { \"a0\",\tTIC80_OPERAND_FPA | 0 },\n-  { \"a1\",\tTIC80_OPERAND_FPA | 1 },\n-  { \"alw.b\",\tTIC80_OPERAND_CC | 7 },\n-  { \"alw.h\",\tTIC80_OPERAND_CC | 15 },\n-  { \"alw.w\",\tTIC80_OPERAND_CC | 23 },\n-  { \"ANASTAT\",\tTIC80_OPERAND_CR | 0x34 },\n-  { \"BRK1\",\tTIC80_OPERAND_CR | 0x39 },\n-  { \"BRK2\",\tTIC80_OPERAND_CR | 0x3A },\n-  { \"CONFIG\",\tTIC80_OPERAND_CR | 2 },\n-  { \"DLRU\",\tTIC80_OPERAND_CR | 0x500 },\n-  { \"DTAG0\",\tTIC80_OPERAND_CR | 0x400 },\n-  { \"DTAG1\",\tTIC80_OPERAND_CR | 0x401 },\n-  { \"DTAG10\",\tTIC80_OPERAND_CR | 0x40A },\n-  { \"DTAG11\",\tTIC80_OPERAND_CR | 0x40B },\n-  { \"DTAG12\",\tTIC80_OPERAND_CR | 0x40C },\n-  { \"DTAG13\",\tTIC80_OPERAND_CR | 0x40D },\n-  { \"DTAG14\",\tTIC80_OPERAND_CR | 0x40E },\n-  { \"DTAG15\",\tTIC80_OPERAND_CR | 0x40F },\n-  { \"DTAG2\",\tTIC80_OPERAND_CR | 0x402 },\n-  { \"DTAG3\",\tTIC80_OPERAND_CR | 0x403 },\n-  { \"DTAG4\",\tTIC80_OPERAND_CR | 0x404 },\n-  { \"DTAG5\",\tTIC80_OPERAND_CR | 0x405 },\n-  { \"DTAG6\",\tTIC80_OPERAND_CR | 0x406 },\n-  { \"DTAG7\",\tTIC80_OPERAND_CR | 0x407 },\n-  { \"DTAG8\",\tTIC80_OPERAND_CR | 0x408 },\n-  { \"DTAG9\",\tTIC80_OPERAND_CR | 0x409 },\n-  { \"ECOMCNTL\",\tTIC80_OPERAND_CR | 0x33 },\n-  { \"EIP\",\tTIC80_OPERAND_CR | 1 },\n-  { \"EPC\",\tTIC80_OPERAND_CR | 0 },\n-  { \"eq.b\",\tTIC80_OPERAND_BITNUM  | 0 },\n-  { \"eq.f\",\tTIC80_OPERAND_BITNUM  | 20 },\n-  { \"eq.h\",\tTIC80_OPERAND_BITNUM  | 10 },\n-  { \"eq.w\",\tTIC80_OPERAND_BITNUM  | 20 },\n-  { \"eq0.b\",\tTIC80_OPERAND_CC | 2 },\n-  { \"eq0.h\",\tTIC80_OPERAND_CC | 10 },\n-  { \"eq0.w\",\tTIC80_OPERAND_CC | 18 },\n-  { \"FLTADR\",\tTIC80_OPERAND_CR | 0x11 },\n-  { \"FLTDTH\",\tTIC80_OPERAND_CR | 0x14 },\n-  { \"FLTDTL\",\tTIC80_OPERAND_CR | 0x13 },\n-  { \"FLTOP\",\tTIC80_OPERAND_CR | 0x10 },\n-  { \"FLTTAG\",\tTIC80_OPERAND_CR | 0x12 },\n-  { \"FPST\",\tTIC80_OPERAND_CR | 8 },\n-  { \"ge.b\",\tTIC80_OPERAND_BITNUM  | 5 },\n-  { \"ge.f\",\tTIC80_OPERAND_BITNUM  | 25 },\n-  { \"ge.h\",\tTIC80_OPERAND_BITNUM  | 15 },\n-  { \"ge.w\",\tTIC80_OPERAND_BITNUM  | 25 },\n-  { \"ge0.b\",\tTIC80_OPERAND_CC | 3 },\n-  { \"ge0.h\",\tTIC80_OPERAND_CC | 11 },\n-  { \"ge0.w\",\tTIC80_OPERAND_CC | 19 },\n-  { \"gt.b\",\tTIC80_OPERAND_BITNUM  | 2 },\n-  { \"gt.f\",\tTIC80_OPERAND_BITNUM  | 22 },\n-  { \"gt.h\",\tTIC80_OPERAND_BITNUM  | 12 },\n-  { \"gt.w\",\tTIC80_OPERAND_BITNUM  | 22 },\n-  { \"gt0.b\",\tTIC80_OPERAND_CC | 1 },\n-  { \"gt0.h\",\tTIC80_OPERAND_CC | 9 },\n-  { \"gt0.w\",\tTIC80_OPERAND_CC | 17 },\n-  { \"hi.b\",\tTIC80_OPERAND_BITNUM  | 6 },\n-  { \"hi.h\",\tTIC80_OPERAND_BITNUM  | 16 },\n-  { \"hi.w\",\tTIC80_OPERAND_BITNUM  | 26 },\n-  { \"hs.b\",\tTIC80_OPERAND_BITNUM  | 9 },\n-  { \"hs.h\",\tTIC80_OPERAND_BITNUM  | 19 },\n-  { \"hs.w\",\tTIC80_OPERAND_BITNUM  | 29 },\n-  { \"ib.f\",\tTIC80_OPERAND_BITNUM  | 28 },\n-  { \"IE\",\tTIC80_OPERAND_CR | 6 },\n-  { \"ILRU\",\tTIC80_OPERAND_CR | 0x300 },\n-  { \"in.f\",\tTIC80_OPERAND_BITNUM  | 27 },\n-  { \"IN0P\",\tTIC80_OPERAND_CR | 0x4000 },\n-  { \"IN1P\",\tTIC80_OPERAND_CR | 0x4001 },\n-  { \"INTPEN\",\tTIC80_OPERAND_CR | 4 },\n-  { \"ITAG0\",\tTIC80_OPERAND_CR | 0x200 },\n-  { \"ITAG1\",\tTIC80_OPERAND_CR | 0x201 },\n-  { \"ITAG10\",\tTIC80_OPERAND_CR | 0x20A },\n-  { \"ITAG11\",\tTIC80_OPERAND_CR | 0x20B },\n-  { \"ITAG12\",\tTIC80_OPERAND_CR | 0x20C },\n-  { \"ITAG13\",\tTIC80_OPERAND_CR | 0x20D },\n-  { \"ITAG14\",\tTIC80_OPERAND_CR | 0x20E },\n-  { \"ITAG15\",\tTIC80_OPERAND_CR | 0x20F },\n-  { \"ITAG2\",\tTIC80_OPERAND_CR | 0x202 },\n-  { \"ITAG3\",\tTIC80_OPERAND_CR | 0x203 },\n-  { \"ITAG4\",\tTIC80_OPERAND_CR | 0x204 },\n-  { \"ITAG5\",\tTIC80_OPERAND_CR | 0x205 },\n-  { \"ITAG6\",\tTIC80_OPERAND_CR | 0x206 },\n-  { \"ITAG7\",\tTIC80_OPERAND_CR | 0x207 },\n-  { \"ITAG8\",\tTIC80_OPERAND_CR | 0x208 },\n-  { \"ITAG9\",\tTIC80_OPERAND_CR | 0x209 },\n-  { \"le.b\",\tTIC80_OPERAND_BITNUM  | 3 },\n-  { \"le.f\",\tTIC80_OPERAND_BITNUM  | 23 },\n-  { \"le.h\",\tTIC80_OPERAND_BITNUM  | 13 },\n-  { \"le.w\",\tTIC80_OPERAND_BITNUM  | 23 },\n-  { \"le0.b\",\tTIC80_OPERAND_CC | 6 },\n-  { \"le0.h\",\tTIC80_OPERAND_CC | 14 },\n-  { \"le0.w\",\tTIC80_OPERAND_CC | 22 },\n-  { \"lo.b\",\tTIC80_OPERAND_BITNUM  | 8 },\n-  { \"lo.h\",\tTIC80_OPERAND_BITNUM  | 18 },\n-  { \"lo.w\",\tTIC80_OPERAND_BITNUM  | 28 },\n-  { \"ls.b\",\tTIC80_OPERAND_BITNUM  | 7 },\n-  { \"ls.h\",\tTIC80_OPERAND_BITNUM  | 17 },\n-  { \"ls.w\",\tTIC80_OPERAND_BITNUM  | 27 },\n-  { \"lt.b\",\tTIC80_OPERAND_BITNUM  | 4 },\n-  { \"lt.f\",\tTIC80_OPERAND_BITNUM  | 24 },\n-  { \"lt.h\",\tTIC80_OPERAND_BITNUM  | 14 },\n-  { \"lt.w\",\tTIC80_OPERAND_BITNUM  | 24 },\n-  { \"lt0.b\",\tTIC80_OPERAND_CC | 4 },\n-  { \"lt0.h\",\tTIC80_OPERAND_CC | 12 },\n-  { \"lt0.w\",\tTIC80_OPERAND_CC | 20 },\n-  { \"MIP\",\tTIC80_OPERAND_CR | 0x31 },\n-  { \"MPC\",\tTIC80_OPERAND_CR | 0x30 },\n-  { \"ne.b\",\tTIC80_OPERAND_BITNUM  | 1 },\n-  { \"ne.f\",\tTIC80_OPERAND_BITNUM  | 21 },\n-  { \"ne.h\",\tTIC80_OPERAND_BITNUM  | 11 },\n-  { \"ne.w\",\tTIC80_OPERAND_BITNUM  | 21 },\n-  { \"ne0.b\",\tTIC80_OPERAND_CC | 5 },\n-  { \"ne0.h\",\tTIC80_OPERAND_CC | 13 },\n-  { \"ne0.w\",\tTIC80_OPERAND_CC | 21 },\n-  { \"nev.b\",\tTIC80_OPERAND_CC | 0 },\n-  { \"nev.h\",\tTIC80_OPERAND_CC | 8 },\n-  { \"nev.w\",\tTIC80_OPERAND_CC | 16 },\n-  { \"ob.f\",\tTIC80_OPERAND_BITNUM  | 29 },\n-  { \"or.f\",\tTIC80_OPERAND_BITNUM  | 31 },\n-  { \"ou.f\",\tTIC80_OPERAND_BITNUM  | 26 },\n-  { \"OUTP\",\tTIC80_OPERAND_CR | 0x4002 },\n-  { \"PKTREQ\",\tTIC80_OPERAND_CR | 0xD },\n-  { \"PPERROR\",\tTIC80_OPERAND_CR | 0xA },\n-  { \"r0\",\tTIC80_OPERAND_GPR | 0 },\n-  { \"r1\",\tTIC80_OPERAND_GPR | 1 },\n-  { \"r10\",\tTIC80_OPERAND_GPR | 10 },\n-  { \"r11\",\tTIC80_OPERAND_GPR | 11 },\n-  { \"r12\",\tTIC80_OPERAND_GPR | 12 },\n-  { \"r13\",\tTIC80_OPERAND_GPR | 13 },\n-  { \"r14\",\tTIC80_OPERAND_GPR | 14 },\n-  { \"r15\",\tTIC80_OPERAND_GPR | 15 },\n-  { \"r16\",\tTIC80_OPERAND_GPR | 16 },\n-  { \"r17\",\tTIC80_OPERAND_GPR | 17 },\n-  { \"r18\",\tTIC80_OPERAND_GPR | 18 },\n-  { \"r19\",\tTIC80_OPERAND_GPR | 19 },\n-  { \"r2\",\tTIC80_OPERAND_GPR | 2 },\n-  { \"r20\",\tTIC80_OPERAND_GPR | 20 },\n-  { \"r21\",\tTIC80_OPERAND_GPR | 21 },\n-  { \"r22\",\tTIC80_OPERAND_GPR | 22 },\n-  { \"r23\",\tTIC80_OPERAND_GPR | 23 },\n-  { \"r24\",\tTIC80_OPERAND_GPR | 24 },\n-  { \"r25\",\tTIC80_OPERAND_GPR | 25 },\n-  { \"r26\",\tTIC80_OPERAND_GPR | 26 },\n-  { \"r27\",\tTIC80_OPERAND_GPR | 27 },\n-  { \"r28\",\tTIC80_OPERAND_GPR | 28 },\n-  { \"r29\",\tTIC80_OPERAND_GPR | 29 },\n-  { \"r3\",\tTIC80_OPERAND_GPR | 3 },\n-  { \"r30\",\tTIC80_OPERAND_GPR | 30 },\n-  { \"r31\",\tTIC80_OPERAND_GPR | 31 },\n-  { \"r4\",\tTIC80_OPERAND_GPR | 4 },\n-  { \"r5\",\tTIC80_OPERAND_GPR | 5 },\n-  { \"r6\",\tTIC80_OPERAND_GPR | 6 },\n-  { \"r7\",\tTIC80_OPERAND_GPR | 7 },\n-  { \"r8\",\tTIC80_OPERAND_GPR | 8 },\n-  { \"r9\",\tTIC80_OPERAND_GPR | 9 },\n-  { \"SYSSTK\",\tTIC80_OPERAND_CR | 0x20 },\n-  { \"SYSTMP\",\tTIC80_OPERAND_CR | 0x21 },\n-  { \"TCOUNT\",\tTIC80_OPERAND_CR | 0xE },\n-  { \"TSCALE\",\tTIC80_OPERAND_CR | 0xF },\n-  { \"uo.f\",\tTIC80_OPERAND_BITNUM  | 30 },\n-};\n-\n-const int tic80_num_predefined_symbols = sizeof (tic80_predefined_symbols) / sizeof (struct predefined_symbol);\n-\n-/* This function takes a predefined symbol name in NAME, symbol class\n-   in CLASS, and translates it to a numeric value, which it returns.\n-\n-   If CLASS is zero, any symbol that matches NAME is translated.  If\n-   CLASS is non-zero, then only a symbol that has symbol_class CLASS is\n-   matched.\n-\n-   If no translation is possible, it returns -1, a value not used by\n-   any predefined symbol. Note that the predefined symbol array is\n-   presorted case independently by name.\n-\n-   This function is implemented with the assumption that there are no\n-   duplicate names in the predefined symbol array, which happens to be\n-   true at the moment.\n-\n- */\n-\n-int\n-tic80_symbol_to_value (char *name, int symbol_class)\n-{\n-  const struct predefined_symbol *pdsp;\n-  int low = 0;\n-  int middle;\n-  int high = tic80_num_predefined_symbols - 1;\n-  int cmp;\n-  int rtnval = -1;\n-\n-  while (low <= high)\n-    {\n-      middle = (low + high) / 2;\n-      cmp = strcasecmp (name, tic80_predefined_symbols[middle].name);\n-      if (cmp < 0)\n-\t{\n-\t  high = middle - 1;\n-\t}\n-      else if (cmp > 0)\n-\t{\n-\t  low = middle + 1;\n-\t}\n-      else\n-\t{\n-\t  pdsp = &tic80_predefined_symbols[middle];\n-\t  if ((symbol_class == 0) || (symbol_class & PDS_VALUE (pdsp)))\n-\t    {\n-\t      rtnval = PDS_VALUE (pdsp);\n-\t    }\n-\t  /* For now we assume that there are no duplicate names */\n-\t  break;\n-\t}\n-    }\n-  return (rtnval);\n-}\n-\n-/* This function takes a value VAL and finds a matching predefined\n-   symbol that is in the operand symbol_class specified by CLASS.  If CLASS\n-   is zero, the first matching symbol is returned. */\n-\n-const char *\n-tic80_value_to_symbol (int val, int symbol_class)\n-{\n-  const struct predefined_symbol *pdsp;\n-  int ival;\n-  char *name;\n-\n-  name = NULL;\n-  for (pdsp = tic80_predefined_symbols;\n-       pdsp < tic80_predefined_symbols + tic80_num_predefined_symbols;\n-       pdsp++)\n-    {\n-      ival = PDS_VALUE (pdsp) & ~TIC80_OPERAND_MASK;\n-      if (ival == val)\n-\t{\n-\t  if ((symbol_class == 0) || (symbol_class & PDS_VALUE (pdsp)))\n-\t    {\n-\t      /* Found the desired match */\n-\t      name = PDS_NAME (pdsp);\n-\t      break;\n-\t    }\n-\t}\n-    }\n-  return (name);\n-}\n-\n-/* This function returns a pointer to the next symbol in the predefined\n-   symbol table after PDSP, or NULL if PDSP points to the last symbol.  If\n-   PDSP is NULL, it returns the first symbol in the table.  Thus it can be\n-   used to walk through the table by first calling it with NULL and then\n-   calling it with each value it returned on the previous call, until it\n-   returns NULL. */\n-\n-const struct predefined_symbol *\n-tic80_next_predefined_symbol (const struct predefined_symbol *pdsp)\n-{\n-  if (pdsp == NULL)\n-    {\n-      pdsp = tic80_predefined_symbols;\n-    }\n-  else if (pdsp >= tic80_predefined_symbols &&\n-\t   pdsp < tic80_predefined_symbols + tic80_num_predefined_symbols - 1)\n-    {\n-      pdsp++;\n-    }\n-  else\n-    {\n-      pdsp = NULL;\n-    }\n-  return (pdsp);\n-}\n-\n-\n-\f\n-/* The operands table.  The fields are:\n-\n-\tbits, shift, insertion function, extraction function, flags\n- */\n-\n-const struct tic80_operand tic80_operands[] =\n-{\n-\n-  /* The zero index is used to indicate the end of the list of operands.  */\n-\n-#define UNUSED (0)\n-  { 0, 0, 0, 0, 0 },\n-\n-  /* Short signed immediate value in bits 14-0. */\n-\n-#define SSI (UNUSED + 1)\n-  { 15, 0, NULL, NULL, TIC80_OPERAND_SIGNED },\n-\n-  /* Short unsigned immediate value in bits 14-0 */\n-\n-#define SUI (SSI + 1)\n-  { 15, 0, NULL, NULL, 0 },\n-\n-  /* Short unsigned bitfield in bits 14-0.  We distinguish this\n-     from a regular unsigned immediate value only for the convenience\n-     of the disassembler and the user. */\n-\n-#define SUBF (SUI + 1)\n-  { 15, 0, NULL, NULL, TIC80_OPERAND_BITFIELD },\n-\n-  /* Long signed immediate in following 32 bit word */\n-\n-#define LSI (SUBF + 1)\n-  { 32, 0, NULL, NULL, TIC80_OPERAND_SIGNED },\n-\n-  /* Long unsigned immediate in following 32 bit word */\n-\n-#define LUI (LSI + 1)\n-  { 32, 0, NULL, NULL, 0 },\n-\n-  /* Long unsigned bitfield in following 32 bit word.  We distinguish\n-     this from a regular unsigned immediate value only for the\n-     convenience of the disassembler and the user. */\n-\n-#define LUBF (LUI + 1)\n-  { 32, 0, NULL, NULL, TIC80_OPERAND_BITFIELD },\n-\n-  /* Single precision floating point immediate in following 32 bit\n-     word. */\n-\n-#define SPFI (LUBF + 1)\n-  { 32, 0, NULL, NULL, TIC80_OPERAND_FLOAT },\n-\n-  /* Register in bits 4-0 */\n-\n-#define REG_0 (SPFI + 1)\n-  { 5, 0, NULL, NULL, TIC80_OPERAND_GPR },\n-\n-  /* Even register in bits 4-0 */\n-\n-#define REG_0_E (REG_0 + 1)\n-  { 5, 0, NULL, NULL, TIC80_OPERAND_GPR | TIC80_OPERAND_EVEN },\n-\n-  /* Register in bits 26-22 */\n-\n-#define REG_22 (REG_0_E + 1)\n-  { 5, 22, NULL, NULL, TIC80_OPERAND_GPR },\n-\n-  /* Even register in bits 26-22 */\n-\n-#define REG_22_E (REG_22 + 1)\n-  { 5, 22, NULL, NULL, TIC80_OPERAND_GPR | TIC80_OPERAND_EVEN },\n-\n-  /* Register in bits 31-27 */\n-\n-#define REG_DEST (REG_22_E + 1)\n-  { 5, 27, NULL, NULL, TIC80_OPERAND_GPR },\n-\n-  /* Even register in bits 31-27 */\n-\n-#define REG_DEST_E (REG_DEST + 1)\n-  { 5, 27, NULL, NULL, TIC80_OPERAND_GPR | TIC80_OPERAND_EVEN },\n-\n-  /* Floating point accumulator register (a0-a3) specified by bit 16 (MSB)\n-     and bit 11 (LSB) */\n-  /* FIXME!  Needs to use functions to insert and extract the register\n-     number in bits 16 and 11. */\n-\n-#define REG_FPA (REG_DEST_E + 1)\n-  { 0, 0, NULL, NULL, TIC80_OPERAND_FPA },\n-\n-  /* Short signed PC word offset in bits 14-0 */\n-\n-#define OFF_SS_PC (REG_FPA + 1)\n-  { 15, 0, NULL, NULL, TIC80_OPERAND_PCREL | TIC80_OPERAND_SIGNED },\n-\n-  /* Long signed PC word offset in following 32 bit word */\n-\n-#define OFF_SL_PC (OFF_SS_PC + 1)\n-  { 32, 0, NULL, NULL, TIC80_OPERAND_PCREL | TIC80_OPERAND_SIGNED },\n-\n-  /* Short signed base relative byte offset in bits 14-0 */\n-\n-#define OFF_SS_BR (OFF_SL_PC + 1)\n-  { 15, 0, NULL, NULL, TIC80_OPERAND_BASEREL | TIC80_OPERAND_SIGNED },\n-\n-  /* Long signed base relative byte offset in following 32 bit word */\n-\n-#define OFF_SL_BR (OFF_SS_BR + 1)\n-  { 32, 0, NULL, NULL, TIC80_OPERAND_BASEREL | TIC80_OPERAND_SIGNED },\n-\n-  /* Long signed base relative byte offset in following 32 bit word\n-     with optional \":s\" modifier flag in bit 11 */\n-\n-#define OFF_SL_BR_SCALED (OFF_SL_BR + 1)\n-  { 32, 0, NULL, NULL, TIC80_OPERAND_BASEREL | TIC80_OPERAND_SIGNED | TIC80_OPERAND_SCALED },\n-\n-  /* BITNUM in bits 31-27 */\n-\n-#define BITNUM (OFF_SL_BR_SCALED + 1)\n-  { 5, 27, NULL, NULL, TIC80_OPERAND_BITNUM },\n-\n-  /* Condition code in bits 31-27 */\n-\n-#define CC (BITNUM + 1)\n-  { 5, 27, NULL, NULL, TIC80_OPERAND_CC },\n-\n-  /* Control register number in bits 14-0 */\n-\n-#define CR_SI (CC + 1)\n-  { 15, 0, NULL, NULL, TIC80_OPERAND_CR },\n-\n-  /* Control register number in next 32 bit word */\n-\n-#define CR_LI (CR_SI + 1)\n-  { 32, 0, NULL, NULL, TIC80_OPERAND_CR },\n-\n-  /* A base register in bits 26-22, enclosed in parens */\n-\n-#define REG_BASE (CR_LI + 1)\n-  { 5, 22, NULL, NULL, TIC80_OPERAND_GPR | TIC80_OPERAND_PARENS },\n-\n-  /* A base register in bits 26-22, enclosed in parens, with optional \":m\"\n-     flag in bit 17 (short immediate instructions only) */\n-\n-#define REG_BASE_M_SI (REG_BASE + 1)\n-  { 5, 22, NULL, NULL, TIC80_OPERAND_GPR | TIC80_OPERAND_PARENS | TIC80_OPERAND_M_SI },\n-\n-  /* A base register in bits 26-22, enclosed in parens, with optional \":m\"\n-   flag in bit 15 (long immediate and register instructions only) */\n-\n-#define REG_BASE_M_LI (REG_BASE_M_SI + 1)\n-  { 5, 22, NULL, NULL, TIC80_OPERAND_GPR | TIC80_OPERAND_PARENS | TIC80_OPERAND_M_LI },\n-\n-  /* Scaled register in bits 4-0, with optional \":s\" modifier flag in bit 11 */\n-\n-#define REG_SCALED (REG_BASE_M_LI + 1)\n-  { 5, 0, NULL, NULL, TIC80_OPERAND_GPR | TIC80_OPERAND_SCALED },\n-\n-  /* Unsigned immediate in bits 4-0, used only for shift instructions */\n-\n-#define ROTATE (REG_SCALED + 1)\n-  { 5, 0, NULL, NULL, 0 },\n-\n-  /* Unsigned immediate in bits 9-5, used only for shift instructions */\n-#define ENDMASK (ROTATE + 1)\n-  { 5, 5, NULL, NULL, TIC80_OPERAND_ENDMASK },\n-\n-};\n-\n-const int tic80_num_operands = sizeof (tic80_operands)/sizeof(*tic80_operands);\n-\n-\f\n-/* Macros used to generate entries for the opcodes table. */\n-\n-#define FIXME 0\n-\n-/* Short-Immediate Format Instructions - basic opcode */\n-#define OP_SI(x)\t(((x) & 0x7F) << 15)\n-#define MASK_SI\t\tOP_SI(0x7F)\n-\n-/* Long-Immediate Format Instructions - basic opcode */\n-#define OP_LI(x)\t(((x) & 0x3FF) << 12)\n-#define MASK_LI\t\tOP_LI(0x3FF)\n-\n-/* Register Format Instructions - basic opcode */\n-#define OP_REG(x)\tOP_LI(x)\t/* For readability */\n-#define MASK_REG\tMASK_LI\t\t/* For readability */\n-\n-/* The 'n' bit at bit 10 */\n-#define n(x)\t\t((x) << 10)\n-\n-/* The 'i' bit at bit 11 */\n-#define i(x)\t\t((x) << 11)\n-\n-/* The 'F' bit at bit 27 */\n-#define F(x)\t\t((x) << 27)\n-\n-/* The 'E' bit at bit 27 */\n-#define E(x)\t\t((x) << 27)\n-\n-/* The 'M' bit at bit 15 in register and long immediate opcodes */\n-#define M_REG(x)\t((x) << 15)\n-#define M_LI(x)\t\t((x) << 15)\n-\n-/* The 'M' bit at bit 17 in short immediate opcodes */\n-#define M_SI(x)\t\t((x) << 17)\n-\n-/* The 'SZ' field at bits 14-13 in register and long immediate opcodes */\n-#define SZ_REG(x)\t((x) << 13)\n-#define SZ_LI(x)\t((x) << 13)\n-\n-/* The 'SZ' field at bits 16-15 in short immediate opcodes */\n-#define SZ_SI(x)\t((x) << 15)\n-\n-/* The 'D' (direct external memory access) bit at bit 10 in long immediate\n-   and register opcodes. */\n-#define D(x)\t\t((x) << 10)\n-\n-/* The 'S' (scale offset by data size) bit at bit 11 in long immediate\n-   and register opcodes. */\n-#define S(x)\t\t((x) << 11)\n-\n-/* The 'PD' field at bits 10-9 in floating point instructions */\n-#define PD(x)\t\t((x) << 9)\n-\n-/* The 'P2' field at bits 8-7 in floating point instructions */\n-#define P2(x)\t\t((x) << 7)\n-\n-/* The 'P1' field at bits 6-5 in floating point instructions */\n-#define P1(x)\t\t((x) << 5)\n-\n-/* The 'a' field at bit 16 in vector instructions */\n-#define V_a1(x)\t\t((x) << 16)\n-\n-/* The 'a' field at bit 11 in vector instructions */\n-#define V_a0(x)\t\t((x) << 11)\n-\n-/* The 'm' field at bit 10 in vector instructions */\n-#define V_m(x)\t\t((x) << 10)\n-\n-/* The 'S' field at bit 9 in vector instructions */\n-#define V_S(x)\t\t((x) << 9)\n-\n-/* The 'Z' field at bit 8 in vector instructions */\n-#define V_Z(x)\t\t((x) << 8)\n-\n-/* The 'p' field at bit 6 in vector instructions */\n-#define V_p(x)\t\t((x) << 6)\n-\n-/* The opcode field at bits 21-17 for vector instructions */\n-#define OP_V(x)\t\t((x) << 17)\n-#define MASK_V\t\tOP_V(0x1F)\n-\n-\f\n-/* The opcode table.  Formatted for better readability on a wide screen.  Also, all\n- entries with the same mnemonic are sorted so that they are adjacent in the table,\n- allowing the use of a hash table to locate the first of a sequence of opcodes that have\n- a particular name.  The short immediate forms also come before the long immediate forms\n- so that the assembler will pick the \"best fit\" for the size of the operand, except for\n- the case of the PC relative forms, where the long forms come first and are the default\n- forms. */\n-\n-const struct tic80_opcode tic80_opcodes[] = {\n-\n-  /* The \"nop\" instruction is really \"rdcr 0,r0\".  We put it first so that this\n-     specific bit pattern will get disassembled as a nop rather than an rdcr. The\n-     mask of all ones ensures that this will happen. */\n-\n-  {\"nop\",\tOP_SI(0x4),\t~0,\t\t0,\t\t{0}\t\t\t},\n-\n-  /* The \"br\" instruction is really \"bbz target,r0,31\".  We put it first so that\n-     this specific bit pattern will get disassembled as a br rather than bbz. */\n-\n-  {\"br\",\tOP_SI(0x48),\t0xFFFF8000,\t0,\t{OFF_SS_PC}\t},\n-  {\"br\",\tOP_LI(0x391),\t0xFFFFF000,\t0,\t{OFF_SL_PC}\t},\n-  {\"br\",\tOP_REG(0x390),\t0xFFFFF000,\t0,\t{REG_0}\t\t},\n-  {\"br.a\",\tOP_SI(0x49),\t0xFFFF8000,\t0,\t{OFF_SS_PC}\t},\n-  {\"br.a\",\tOP_LI(0x393),\t0xFFFFF000,\t0,\t{OFF_SL_PC}\t},\n-  {\"br.a\",\tOP_REG(0x392),\t0xFFFFF000,\t0,\t{REG_0}\t\t},\n-\n-  /* Signed integer ADD */\n-\n-  {\"add\",\tOP_SI(0x58),\tMASK_SI,\t0,\t{SSI, REG_22, REG_DEST}\t\t},\n-  {\"add\",\tOP_LI(0x3B1),\tMASK_LI,\t0,\t{LSI, REG_22, REG_DEST}\t\t},\n-  {\"add\",\tOP_REG(0x3B0),\tMASK_REG,\t0,\t{REG_0, REG_22, REG_DEST}\t},\n-\n-  /* Unsigned integer ADD */\n-\n-  {\"addu\",\tOP_SI(0x59),\tMASK_SI,\t0,\t{SSI, REG_22, REG_DEST}\t\t},\n-  {\"addu\",\tOP_LI(0x3B3),\tMASK_LI,\t0,\t{LSI, REG_22, REG_DEST}\t\t},\n-  {\"addu\",\tOP_REG(0x3B2),\tMASK_REG,\t0,\t{REG_0, REG_22, REG_DEST}\t},\n-\n-  /* Bitwise AND */\n-\n-  {\"and\",\tOP_SI(0x11),\tMASK_SI,\t0,\t{SUBF, REG_22, REG_DEST}\t},\n-  {\"and\",\tOP_LI(0x323),\tMASK_LI,\t0,\t{LUBF, REG_22, REG_DEST}\t},\n-  {\"and\",\tOP_REG(0x322),\tMASK_REG,\t0,\t{REG_0, REG_22, REG_DEST}\t},\n-  {\"and.tt\",\tOP_SI(0x11),\tMASK_SI,\t0,\t{SUBF, REG_22, REG_DEST}\t},\n-  {\"and.tt\",\tOP_LI(0x323),\tMASK_LI,\t0,\t{LUBF, REG_22, REG_DEST}\t},\n-  {\"and.tt\",\tOP_REG(0x322),\tMASK_REG,\t0,\t{REG_0, REG_22, REG_DEST}\t},\n-\n-  /* Bitwise AND with ones complement of both sources */\n-\n-  {\"and.ff\",\tOP_SI(0x18),\tMASK_SI,\t0,\t{SUBF, REG_22, REG_DEST}\t},\n-  {\"and.ff\",\tOP_LI(0x331),\tMASK_LI,\t0,\t{LUBF, REG_22, REG_DEST}\t},\n-  {\"and.ff\",\tOP_REG(0x330),\tMASK_REG,\t0,\t{REG_0, REG_22, REG_DEST}\t},\n-\n-  /* Bitwise AND with ones complement of source 1 */\n-\n-  {\"and.ft\",\tOP_SI(0x14),\tMASK_SI,\t0,\t{SUBF, REG_22, REG_DEST}\t},\n-  {\"and.ft\",\tOP_LI(0x329),\tMASK_LI,\t0,\t{LUBF, REG_22, REG_DEST}\t},\n-  {\"and.ft\",\tOP_REG(0x328),\tMASK_REG,\t0,\t{REG_0, REG_22, REG_DEST}\t},\n-\n-  /* Bitwise AND with ones complement of source 2 */\n-\n-  {\"and.tf\",\tOP_SI(0x12),\tMASK_SI,\t0,\t{SUBF, REG_22, REG_DEST}\t},\n-  {\"and.tf\",\tOP_LI(0x325),\tMASK_LI,\t0,\t{LUBF, REG_22, REG_DEST}\t},\n-  {\"and.tf\",\tOP_REG(0x324),\tMASK_REG,\t0,\t{REG_0, REG_22, REG_DEST}\t},\n-\n-  /* Branch Bit One - nonannulled */\n-\n-  {\"bbo\",\tOP_SI(0x4A),\tMASK_SI,\t0, \t{OFF_SS_PC, REG_22, BITNUM}\t},\n-  {\"bbo\",\tOP_LI(0x395),\tMASK_LI,\t0, \t{OFF_SL_PC, REG_22, BITNUM}\t},\n-  {\"bbo\",\tOP_REG(0x394),\tMASK_REG,\t0,\t{REG_0, REG_22, BITNUM}\t\t},\n-\n-  /* Branch Bit One - annulled */\n-\n-  {\"bbo.a\",\tOP_SI(0x4B),\tMASK_SI,\t0, \t{OFF_SS_PC, REG_22, BITNUM}\t},\n-  {\"bbo.a\",\tOP_LI(0x397),\tMASK_LI,\t0, \t{OFF_SL_PC, REG_22, BITNUM}\t},\n-  {\"bbo.a\",\tOP_REG(0x396),\tMASK_REG,\t0,\t{REG_0, REG_22, BITNUM}\t\t},\n-\n-  /* Branch Bit Zero - nonannulled */\n-\n-  {\"bbz\",\tOP_SI(0x48),\tMASK_SI,\t0, \t{OFF_SS_PC, REG_22, BITNUM}\t},\n-  {\"bbz\",\tOP_LI(0x391),\tMASK_LI,\t0, \t{OFF_SL_PC, REG_22, BITNUM}\t},\n-  {\"bbz\",\tOP_REG(0x390),\tMASK_REG,\t0,\t{REG_0, REG_22, BITNUM}\t\t},\n-\n-  /* Branch Bit Zero - annulled */\n-\n-  {\"bbz.a\",\tOP_SI(0x49),\tMASK_SI,\t0, \t{OFF_SS_PC, REG_22, BITNUM}\t},\n-  {\"bbz.a\",\tOP_LI(0x393),\tMASK_LI,\t0, \t{OFF_SL_PC, REG_22, BITNUM}\t},\n-  {\"bbz.a\",\tOP_REG(0x392),\tMASK_REG,\t0,\t{REG_0, REG_22, BITNUM}\t\t},\n-\n-  /* Branch Conditional - nonannulled */\n-\n-  {\"bcnd\",\tOP_SI(0x4C),\tMASK_SI,\t0, \t{OFF_SS_PC, REG_22, CC}\t},\n-  {\"bcnd\",\tOP_LI(0x399),\tMASK_LI,\t0, \t{OFF_SL_PC, REG_22, CC}\t},\n-  {\"bcnd\",\tOP_REG(0x398),\tMASK_REG,\t0,\t{REG_0, REG_22, CC}\t},\n-\n-  /* Branch Conditional - annulled */\n-\n-  {\"bcnd.a\",\tOP_SI(0x4D),\tMASK_SI,\t0, \t{OFF_SS_PC, REG_22, CC}\t},\n-  {\"bcnd.a\",\tOP_LI(0x39B),\tMASK_LI,\t0, \t{OFF_SL_PC, REG_22, CC}\t},\n-  {\"bcnd.a\",\tOP_REG(0x39A),\tMASK_REG,\t0,\t{REG_0, REG_22, CC}\t},\n-\n-  /* Branch Control Register */\n-\n-  {\"brcr\",\tOP_SI(0x6),\tMASK_SI,\t0,\t{CR_SI}\t},\n-  {\"brcr\",\tOP_LI(0x30D),\tMASK_LI,\t0,\t{CR_LI}\t},\n-  {\"brcr\",\tOP_REG(0x30C),\tMASK_REG,\t0,\t{REG_0}\t},\n-\n-  /* Branch and save return - nonannulled */\n-\n-  {\"bsr\",\tOP_SI(0x40),\tMASK_SI,\t0,\t{OFF_SS_PC, REG_DEST}\t},\n-  {\"bsr\",\tOP_LI(0x381),\tMASK_LI,\t0, \t{OFF_SL_PC, REG_DEST}\t},\n-  {\"bsr\",\tOP_REG(0x380),\tMASK_REG,\t0,\t{REG_0, REG_DEST}\t},\n-\n-  /* Branch and save return - annulled */\n-\n-  {\"bsr.a\",\tOP_SI(0x41),\tMASK_SI,\t0, \t{OFF_SS_PC, REG_DEST}\t},\n-  {\"bsr.a\",\tOP_LI(0x383),\tMASK_LI,\t0, \t{OFF_SL_PC, REG_DEST}\t},\n-  {\"bsr.a\",\tOP_REG(0x382),\tMASK_REG,\t0,\t{REG_0, REG_DEST}\t},\n-\n-  /* Send command */\n-\n-  {\"cmnd\",\tOP_SI(0x2),\tMASK_SI,\t0, \t{SUI}\t},\n-  {\"cmnd\",\tOP_LI(0x305),\tMASK_LI,\t0, \t{LUI}\t},\n-  {\"cmnd\",\tOP_REG(0x304),\tMASK_REG,\t0,\t{REG_0}\t},\n-\n-  /* Integer compare */\n-\n-  {\"cmp\",\tOP_SI(0x50),\tMASK_SI,\t0, \t{SSI, REG_22, REG_DEST}\t\t},\n-  {\"cmp\",\tOP_LI(0x3A1),\tMASK_LI,\t0, \t{LSI, REG_22, REG_DEST}\t\t},\n-  {\"cmp\",\tOP_REG(0x3A0),\tMASK_REG,\t0,\t{REG_0, REG_22, REG_DEST}\t},\n-\n-  /* Flush data cache subblock - don't clear subblock preset flag */\n-\n-  {\"dcachec\",\tOP_SI(0x38),\tF(1) | (MASK_SI  & ~M_SI(1)),\t\t\t0, {SSI, REG_BASE_M_SI}\t\t},\n-  {\"dcachec\",\tOP_LI(0x371),\tF(1) | (MASK_LI  & ~M_LI(1))  | S(1) | D(1),\t0, {LSI, REG_BASE_M_LI}\t\t},\n-  {\"dcachec\",\tOP_REG(0x370),\tF(1) | (MASK_REG & ~M_REG(1)) | S(1) | D(1),\t0, {REG_0, REG_BASE_M_LI}\t},\n-\n-  /* Flush data cache subblock - clear subblock preset flag */\n-\n-  {\"dcachef\",\tOP_SI(0x38)   | F(1),\tF(1) | (MASK_SI  & ~M_SI(1)),\t\t\t0, {SSI, REG_BASE_M_SI}\t\t},\n-  {\"dcachef\",\tOP_LI(0x371)  | F(1),\tF(1) | (MASK_LI  & ~M_LI(1))   | S(1) | D(1),\t0, {LSI, REG_BASE_M_LI}\t\t},\n-  {\"dcachef\",\tOP_REG(0x370) | F(1),\tF(1) | (MASK_REG & ~M_REG(1)) | S(1) | D(1),\t0, {REG_0, REG_BASE_M_LI}\t},\n-\n-  /* Direct load signed data into register */\n-\n-  {\"dld\",\tOP_LI(0x345)  | D(1),\t(MASK_LI  & ~M_REG(1)) | D(1),\t0,\t{OFF_SL_BR_SCALED, REG_BASE_M_LI, REG_DEST}\t},\n-  {\"dld\",\tOP_REG(0x344) | D(1),\t(MASK_REG & ~M_REG(1)) | D(1),\t0,\t{REG_SCALED, REG_BASE_M_LI, REG_DEST}\t\t},\n-  {\"dld.b\",\tOP_LI(0x341)  | D(1),\t(MASK_LI  & ~M_REG(1)) | D(1),\t0,\t{OFF_SL_BR_SCALED, REG_BASE_M_LI, REG_DEST}\t},\n-  {\"dld.b\",\tOP_REG(0x340) | D(1),\t(MASK_REG & ~M_REG(1)) | D(1),\t0,\t{REG_SCALED, REG_BASE_M_LI, REG_DEST}\t\t},\n-  {\"dld.d\",\tOP_LI(0x347)  | D(1),\t(MASK_LI  & ~M_REG(1)) | D(1),\t0,\t{OFF_SL_BR_SCALED, REG_BASE_M_LI, REG_DEST_E}\t},\n-  {\"dld.d\",\tOP_REG(0x346) | D(1),\t(MASK_REG & ~M_REG(1)) | D(1),\t0,\t{REG_SCALED, REG_BASE_M_LI, REG_DEST_E}\t\t},\n-  {\"dld.h\",\tOP_LI(0x343)  | D(1),\t(MASK_LI  & ~M_REG(1)) | D(1),\t0,\t{OFF_SL_BR_SCALED, REG_BASE_M_LI, REG_DEST}\t},\n-  {\"dld.h\",\tOP_REG(0x342) | D(1),\t(MASK_REG & ~M_REG(1)) | D(1),\t0,\t{REG_SCALED, REG_BASE_M_LI, REG_DEST}\t\t},\n-\n-  /* Direct load unsigned data into register */\n-\n-  {\"dld.ub\",\tOP_LI(0x351)  | D(1),\t(MASK_LI  &  ~M_REG(1)) | D(1),\t0,\t{OFF_SL_BR_SCALED, REG_BASE_M_LI, REG_DEST}\t},\n-  {\"dld.ub\",\tOP_REG(0x350) | D(1),\t(MASK_REG & ~M_REG(1))  | D(1),\t0,\t{REG_SCALED, REG_BASE_M_LI, REG_DEST}\t\t},\n-  {\"dld.uh\",\tOP_LI(0x353)  | D(1),\t(MASK_LI  &  ~M_REG(1)) | D(1),\t0,\t{OFF_SL_BR_SCALED, REG_BASE_M_LI, REG_DEST}\t},\n-  {\"dld.uh\",\tOP_REG(0x352) | D(1),\t(MASK_REG & ~M_REG(1))  | D(1),\t0,\t{REG_SCALED, REG_BASE_M_LI, REG_DEST}\t\t},\n-\n-  /* Direct store data into memory */\n-\n-  {\"dst\",\tOP_LI(0x365)  | D(1),\t(MASK_LI  & ~M_REG(1)) | D(1),\t0,\t{OFF_SL_BR_SCALED, REG_BASE_M_LI, REG_DEST}\t},\n-  {\"dst\",\tOP_REG(0x364) | D(1),\t(MASK_REG & ~M_REG(1)) | D(1),\t0,\t{REG_SCALED, REG_BASE_M_LI, REG_DEST}\t\t},\n-  {\"dst.b\",\tOP_LI(0x361)  | D(1),\t(MASK_LI  & ~M_REG(1)) | D(1),\t0,\t{OFF_SL_BR_SCALED, REG_BASE_M_LI, REG_DEST}\t},\n-  {\"dst.b\",\tOP_REG(0x360) | D(1),\t(MASK_REG & ~M_REG(1)) | D(1),\t0,\t{REG_SCALED, REG_BASE_M_LI, REG_DEST}\t\t},\n-  {\"dst.d\",\tOP_LI(0x367)  | D(1),\t(MASK_LI  & ~M_REG(1)) | D(1),\t0,\t{OFF_SL_BR_SCALED, REG_BASE_M_LI, REG_DEST_E}\t},\n-  {\"dst.d\",\tOP_REG(0x366) | D(1),\t(MASK_REG & ~M_REG(1)) | D(1),\t0,\t{REG_SCALED, REG_BASE_M_LI, REG_DEST_E}\t\t},\n-  {\"dst.h\",\tOP_LI(0x363)  | D(1),\t(MASK_LI  & ~M_REG(1)) | D(1),\t0,\t{OFF_SL_BR_SCALED, REG_BASE_M_LI, REG_DEST}\t},\n-  {\"dst.h\",\tOP_REG(0x362) | D(1),\t(MASK_REG & ~M_REG(1)) | D(1),\t0,\t{REG_SCALED, REG_BASE_M_LI, REG_DEST}\t\t},\n-\n-  /* Emulation stop */\n-\n-  {\"estop\",\tOP_LI(0x3FC),\tMASK_LI,\t0,\t\t{0}\t},\n-\n-  /* Emulation trap */\n-\n-  {\"etrap\",\tOP_SI(0x1)    | E(1),\tMASK_SI  | E(1),\t0,\t{SUI}\t},\n-  {\"etrap\",\tOP_LI(0x303)  | E(1),\tMASK_LI  | E(1),\t0,\t{LUI}\t},\n-  {\"etrap\",\tOP_REG(0x302) | E(1),\tMASK_REG | E(1),\t0,\t{REG_0}\t},\n-\n-  /* Floating-point addition */\n-\n-  {\"fadd.ddd\",\tOP_REG(0x3E0) | PD(1) | P2(1) | P1(1),\tMASK_REG | PD(3) | P2(3) | P1(3), 0,\t {REG_0_E, REG_22_E, REG_DEST_E}\t},\n-  {\"fadd.dsd\",\tOP_REG(0x3E0) | PD(1) | P2(0) | P1(1),\tMASK_REG | PD(3) | P2(3) | P1(3), 0,\t {REG_0_E, REG_22, REG_DEST_E}\t},\n-  {\"fadd.sdd\",\tOP_LI(0x3E1)  | PD(1) | P2(1) | P1(0),\tMASK_LI  | PD(3) | P2(3) | P1(3), 0,\t {SPFI, REG_22_E, REG_DEST_E}\t},\n-  {\"fadd.sdd\",\tOP_REG(0x3E0) | PD(1) | P2(1) | P1(0),\tMASK_REG | PD(3) | P2(3) | P1(3), 0,\t {REG_0, REG_22_E, REG_DEST_E}\t},\n-  {\"fadd.ssd\",\tOP_LI(0x3E1)  | PD(1) | P2(0) | P1(0),\tMASK_LI  | PD(3) | P2(3) | P1(3), 0,\t {SPFI, REG_22, REG_DEST_E}\t},\n-  {\"fadd.ssd\",\tOP_REG(0x3E0) | PD(1) | P2(0) | P1(0),\tMASK_REG | PD(3) | P2(3) | P1(3), 0,\t {REG_0, REG_22, REG_DEST_E}\t},\n-  {\"fadd.sss\",\tOP_LI(0x3E1)  | PD(0) | P2(0) | P1(0),\tMASK_LI  | PD(3) | P2(3) | P1(3), 0,\t {SPFI, REG_22, REG_DEST}\t},\n-  {\"fadd.sss\",\tOP_REG(0x3E0) | PD(0) | P2(0) | P1(0),\tMASK_REG | PD(3) | P2(3) | P1(3), 0,\t {REG_0, REG_22, REG_DEST}\t},\n-\n-  /* Floating point compare */\n-\n-  {\"fcmp.dd\",\tOP_REG(0x3EA) | PD(0) | P2(1) | P1(1),\tMASK_REG | PD(3) | P2(3) | P1(3),  0,\t {REG_0_E, REG_22_E, REG_DEST}\t},\n-  {\"fcmp.ds\",\tOP_REG(0x3EA) | PD(0) | P2(0) | P1(1),\tMASK_REG | PD(3) | P2(3) | P1(3),  0,\t {REG_0_E, REG_22, REG_DEST}\t},\n-  {\"fcmp.sd\",\tOP_LI(0x3EB)  | PD(0) | P2(1) | P1(0),\tMASK_LI  | PD(3) | P2(3) | P1(3),  0,\t {SPFI, REG_22_E, REG_DEST}\t},\n-  {\"fcmp.sd\",\tOP_REG(0x3EA) | PD(0) | P2(1) | P1(0),\tMASK_REG | PD(3) | P2(3) | P1(3),  0,\t {REG_0, REG_22_E, REG_DEST}\t},\n-  {\"fcmp.ss\",\tOP_LI(0x3EB)  | PD(0) | P2(0) | P1(0),\tMASK_LI  | PD(3) | P2(3) | P1(3),  0,\t {SPFI, REG_22, REG_DEST}\t},\n-  {\"fcmp.ss\",\tOP_REG(0x3EA) | PD(0) | P2(0) | P1(0),\tMASK_REG | PD(3) | P2(3) | P1(3),  0,\t {REG_0, REG_22, REG_DEST}\t},\n-\n-  /* Floating point divide */\n-\n-  {\"fdiv.ddd\",\tOP_REG(0x3E6) | PD(1) | P2(1) | P1(1),\tMASK_REG | PD(3) | P2(3) | P1(3), 0,\t {REG_0_E, REG_22_E, REG_DEST_E}\t},\n-  {\"fdiv.dsd\",\tOP_REG(0x3E6) | PD(1) | P2(0) | P1(1),\tMASK_REG | PD(3) | P2(3) | P1(3), 0,\t {REG_0_E, REG_22, REG_DEST_E}\t},\n-  {\"fdiv.sdd\",\tOP_LI(0x3E7)  | PD(1) | P2(1) | P1(0),\tMASK_LI  | PD(3) | P2(3) | P1(3), 0,\t {SPFI, REG_22_E, REG_DEST_E}\t},\n-  {\"fdiv.sdd\",\tOP_REG(0x3E6) | PD(1) | P2(1) | P1(0),\tMASK_REG | PD(3) | P2(3) | P1(3), 0,\t {REG_0, REG_22_E, REG_DEST_E}\t},\n-  {\"fdiv.ssd\",\tOP_LI(0x3E7)  | PD(1) | P2(0) | P1(0),\tMASK_LI  | PD(3) | P2(3) | P1(3), 0,\t {SPFI, REG_22, REG_DEST_E}\t},\n-  {\"fdiv.ssd\",\tOP_REG(0x3E6) | PD(1) | P2(0) | P1(0),\tMASK_REG | PD(3) | P2(3) | P1(3), 0,\t {REG_0, REG_22, REG_DEST_E}\t},\n-  {\"fdiv.sss\",\tOP_LI(0x3E7)  | PD(0) | P2(0) | P1(0),\tMASK_LI  | PD(3) | P2(3) | P1(3), 0,\t {SPFI, REG_22, REG_DEST}\t},\n-  {\"fdiv.sss\",\tOP_REG(0x3E6) | PD(0) | P2(0) | P1(0),\tMASK_REG | PD(3) | P2(3) | P1(3), 0,\t {REG_0, REG_22, REG_DEST}\t},\n-\n-  /* Floating point multiply */\n-\n-  {\"fmpy.ddd\",\tOP_REG(0x3E4) | PD(1) | P2(1) | P1(1),\tMASK_REG | PD(3) | P2(3) | P1(3), 0,\t {REG_0_E, REG_22_E, REG_DEST_E}\t},\n-  {\"fmpy.dsd\",\tOP_REG(0x3E4) | PD(1) | P2(0) | P1(1),\tMASK_REG | PD(3) | P2(3) | P1(3), 0,\t {REG_0_E, REG_22, REG_DEST_E}\t},\n-  {\"fmpy.iii\",\tOP_LI(0x3E5)  | PD(2) | P2(2) | P1(2),\tMASK_LI  | PD(3) | P2(3) | P1(3), 0,\t {LSI, REG_22, REG_DEST}\t},\n-  {\"fmpy.iii\",\tOP_REG(0x3E4) | PD(2) | P2(2) | P1(2),\tMASK_REG | PD(3) | P2(3) | P1(3), 0,\t {REG_0, REG_22, REG_DEST}\t},\n-  {\"fmpy.sdd\",\tOP_LI(0x3E5)  | PD(1) | P2(1) | P1(0),\tMASK_LI  | PD(3) | P2(3) | P1(3), 0,\t {SPFI, REG_22_E, REG_DEST_E}\t},\n-  {\"fmpy.sdd\",\tOP_REG(0x3E4) | PD(1) | P2(1) | P1(0),\tMASK_REG | PD(3) | P2(3) | P1(3), 0,\t {REG_0, REG_22_E, REG_DEST_E}\t},\n-  {\"fmpy.ssd\",\tOP_LI(0x3E5)  | PD(1) | P2(0) | P1(0),\tMASK_LI  | PD(3) | P2(3) | P1(3), 0,\t {SPFI, REG_22, REG_DEST_E}\t},\n-  {\"fmpy.ssd\",\tOP_REG(0x3E4) | PD(1) | P2(0) | P1(0),\tMASK_REG | PD(3) | P2(3) | P1(3), 0,\t {REG_0, REG_22, REG_DEST_E}\t},\n-  {\"fmpy.sss\",\tOP_LI(0x3E5)  | PD(0) | P2(0) | P1(0),\tMASK_LI  | PD(3) | P2(3) | P1(3), 0,\t {SPFI, REG_22, REG_DEST}\t},\n-  {\"fmpy.sss\",\tOP_REG(0x3E4) | PD(0) | P2(0) | P1(0),\tMASK_REG | PD(3) | P2(3) | P1(3), 0,\t {REG_0, REG_22, REG_DEST}\t},\n-  {\"fmpy.uuu\",\tOP_LI(0x3E5)  | PD(3) | P2(3) | P1(3),\tMASK_LI  | PD(3) | P2(3) | P1(3), 0,\t {LUI, REG_22, REG_DEST}\t},\n-  {\"fmpy.uuu\",\tOP_REG(0x3E4) | PD(3) | P2(3) | P1(3),\tMASK_REG | PD(3) | P2(3) | P1(3), 0,\t {REG_0, REG_22, REG_DEST}\t},\n-\n-  /* Convert/Round to Minus Infinity */\n-\n-  {\"frndm.dd\",\tOP_REG(0x3E8) | PD(1) | P2(3) | P1(1),\tMASK_REG | PD(3) | P2(3) | P1(3), 0,\t {REG_0_E, REG_DEST_E}\t},\n-  {\"frndm.di\",\tOP_REG(0x3E8) | PD(2) | P2(3) | P1(1),\tMASK_REG | PD(3) | P2(3) | P1(3), 0,\t {REG_0_E, REG_DEST}\t},\n-  {\"frndm.ds\",\tOP_REG(0x3E8) | PD(0) | P2(3) | P1(1),\tMASK_REG | PD(3) | P2(3) | P1(3), 0,\t {REG_0_E, REG_DEST}\t},\n-  {\"frndm.du\",\tOP_REG(0x3E8) | PD(3) | P2(3) | P1(1),\tMASK_REG | PD(3) | P2(3) | P1(3), 0,\t {REG_0_E, REG_DEST}\t},\n-  {\"frndm.id\",\tOP_LI(0x3E9)  | PD(1) | P2(3) | P1(2),\tMASK_LI  | PD(3) | P2(3) | P1(3), 0,\t {LSI, REG_DEST_E}\t},\n-  {\"frndm.id\",\tOP_REG(0x3E8) | PD(1) | P2(3) | P1(2),\tMASK_REG | PD(3) | P2(3) | P1(3), 0,\t {REG_0, REG_DEST_E}\t},\n-  {\"frndm.is\",\tOP_LI(0x3E9)  | PD(0) | P2(3) | P1(2),\tMASK_LI  | PD(3) | P2(3) | P1(3), 0,\t {LSI, REG_DEST}\t},\n-  {\"frndm.is\",\tOP_REG(0x3E8) | PD(0) | P2(3) | P1(2),\tMASK_REG | PD(3) | P2(3) | P1(3), 0,\t {REG_0, REG_DEST}\t},\n-  {\"frndm.sd\",\tOP_LI(0x3E9)  | PD(1) | P2(3) | P1(0),\tMASK_LI  | PD(3) | P2(3) | P1(3), 0,\t {SPFI, REG_DEST_E}\t},\n-  {\"frndm.sd\",\tOP_REG(0x3E8) | PD(1) | P2(3) | P1(0),\tMASK_REG | PD(3) | P2(3) | P1(3), 0,\t {REG_0, REG_DEST_E}\t},\n-  {\"frndm.si\",\tOP_LI(0x3E9)  | PD(2) | P2(3) | P1(0),\tMASK_LI  | PD(3) | P2(3) | P1(3), 0,\t {SPFI, REG_DEST}\t},\n-  {\"frndm.si\",\tOP_REG(0x3E8) | PD(2) | P2(3) | P1(0),\tMASK_REG | PD(3) | P2(3) | P1(3), 0,\t {REG_0, REG_DEST}\t},\n-  {\"frndm.ss\",\tOP_LI(0x3E9)  | PD(0) | P2(3) | P1(0),\tMASK_LI  | PD(3) | P2(3) | P1(3), 0,\t {SPFI, REG_DEST}\t},\n-  {\"frndm.ss\",\tOP_REG(0x3E8) | PD(0) | P2(3) | P1(0),\tMASK_REG | PD(3) | P2(3) | P1(3), 0,\t {REG_0, REG_DEST}\t},\n-  {\"frndm.su\",\tOP_LI(0x3E9)  | PD(3) | P2(3) | P1(0),\tMASK_LI  | PD(3) | P2(3) | P1(3), 0,\t {SPFI, REG_DEST}\t},\n-  {\"frndm.su\",\tOP_REG(0x3E8) | PD(3) | P2(3) | P1(0),\tMASK_REG | PD(3) | P2(3) | P1(3), 0,\t {REG_0, REG_DEST}\t},\n-  {\"frndm.ud\",\tOP_LI(0x3E9)  | PD(1) | P2(3) | P1(3),\tMASK_LI  | PD(3) | P2(3) | P1(3), 0,\t {LSI, REG_DEST_E}\t},\n-  {\"frndm.ud\",\tOP_REG(0x3E8) | PD(1) | P2(3) | P1(3),\tMASK_REG | PD(3) | P2(3) | P1(3), 0,\t {REG_0, REG_DEST_E}\t},\n-  {\"frndm.us\",\tOP_LI(0x3E9)  | PD(0) | P2(3) | P1(3),\tMASK_LI  | PD(3) | P2(3) | P1(3), 0,\t {LSI, REG_DEST}\t},\n-  {\"frndm.us\",\tOP_REG(0x3E8) | PD(0) | P2(3) | P1(3),\tMASK_REG | PD(3) | P2(3) | P1(3), 0,\t {REG_0, REG_DEST}\t},\n-\n-  /* Convert/Round to Nearest */\n-\n-  {\"frndn.dd\",\tOP_REG(0x3E8) | PD(1) | P2(0) | P1(1),\tMASK_REG | PD(3) | P2(3) | P1(3), 0,\t {REG_0_E, REG_DEST_E}\t},\n-  {\"frndn.di\",\tOP_REG(0x3E8) | PD(2) | P2(0) | P1(1),\tMASK_REG | PD(3) | P2(3) | P1(3), 0,\t {REG_0_E, REG_DEST}\t},\n-  {\"frndn.ds\",\tOP_REG(0x3E8) | PD(0) | P2(0) | P1(1),\tMASK_REG | PD(3) | P2(3) | P1(3), 0,\t {REG_0_E, REG_DEST}\t},\n-  {\"frndn.du\",\tOP_REG(0x3E8) | PD(3) | P2(0) | P1(1),\tMASK_REG | PD(3) | P2(3) | P1(3), 0,\t {REG_0_E, REG_DEST}\t},\n-  {\"frndn.id\",\tOP_LI(0x3E9)  | PD(1) | P2(0) | P1(2),\tMASK_LI  | PD(3) | P2(3) | P1(3), 0,\t {LSI, REG_DEST_E}\t},\n-  {\"frndn.id\",\tOP_REG(0x3E8) | PD(1) | P2(0) | P1(2),\tMASK_REG | PD(3) | P2(3) | P1(3), 0,\t {REG_0, REG_DEST_E}\t},\n-  {\"frndn.is\",\tOP_LI(0x3E9)  | PD(0) | P2(0) | P1(2),\tMASK_LI  | PD(3) | P2(3) | P1(3), 0,\t {LSI, REG_DEST}\t},\n-  {\"frndn.is\",\tOP_REG(0x3E8) | PD(0) | P2(0) | P1(2),\tMASK_REG | PD(3) | P2(3) | P1(3), 0,\t {REG_0, REG_DEST}\t},\n-  {\"frndn.sd\",\tOP_LI(0x3E9)  | PD(1) | P2(0) | P1(0),\tMASK_LI  | PD(3) | P2(3) | P1(3), 0,\t {SPFI, REG_DEST_E}\t},\n-  {\"frndn.sd\",\tOP_REG(0x3E8) | PD(1) | P2(0) | P1(0),\tMASK_REG | PD(3) | P2(3) | P1(3), 0,\t {REG_0, REG_DEST_E}\t},\n-  {\"frndn.si\",\tOP_LI(0x3E9)  | PD(2) | P2(0) | P1(0),\tMASK_LI  | PD(3) | P2(3) | P1(3), 0,\t {SPFI, REG_DEST}\t},\n-  {\"frndn.si\",\tOP_REG(0x3E8) | PD(2) | P2(0) | P1(0),\tMASK_REG | PD(3) | P2(3) | P1(3), 0,\t {REG_0, REG_DEST}\t},\n-  {\"frndn.ss\",\tOP_LI(0x3E9)  | PD(0) | P2(0) | P1(0),\tMASK_LI  | PD(3) | P2(3) | P1(3), 0,\t {SPFI, REG_DEST}\t},\n-  {\"frndn.ss\",\tOP_REG(0x3E8) | PD(0) | P2(0) | P1(0),\tMASK_REG | PD(3) | P2(3) | P1(3), 0,\t {REG_0, REG_DEST}\t},\n-  {\"frndn.su\",\tOP_LI(0x3E9)  | PD(3) | P2(0) | P1(0),\tMASK_LI  | PD(3) | P2(3) | P1(3), 0,\t {SPFI, REG_DEST}\t},\n-  {\"frndn.su\",\tOP_REG(0x3E8) | PD(3) | P2(0) | P1(0),\tMASK_REG | PD(3) | P2(3) | P1(3), 0,\t {REG_0, REG_DEST}\t},\n-  {\"frndn.ud\",\tOP_LI(0x3E9)  | PD(1) | P2(0) | P1(3),\tMASK_LI  | PD(3) | P2(3) | P1(3), 0,\t {LSI, REG_DEST_E}\t},\n-  {\"frndn.ud\",\tOP_REG(0x3E8) | PD(1) | P2(0) | P1(3),\tMASK_REG | PD(3) | P2(3) | P1(3), 0,\t {REG_0, REG_DEST_E}\t},\n-  {\"frndn.us\",\tOP_LI(0x3E9)  | PD(0) | P2(0) | P1(3),\tMASK_LI  | PD(3) | P2(3) | P1(3), 0,\t {LSI, REG_DEST}\t},\n-  {\"frndn.us\",\tOP_REG(0x3E8) | PD(0) | P2(0) | P1(3),\tMASK_REG | PD(3) | P2(3) | P1(3), 0,\t {REG_0, REG_DEST}\t},\n-\n-  /* Convert/Round to Positive Infinity */\n-\n-  {\"frndp.dd\",\tOP_REG(0x3E8) | PD(1) | P2(2) | P1(1),\tMASK_REG | PD(3) | P2(3) | P1(3), 0,\t {REG_0_E, REG_DEST_E}\t},\n-  {\"frndp.di\",\tOP_REG(0x3E8) | PD(2) | P2(2) | P1(1),\tMASK_REG | PD(3) | P2(3) | P1(3), 0,\t {REG_0_E, REG_DEST}\t},\n-  {\"frndp.ds\",\tOP_REG(0x3E8) | PD(0) | P2(2) | P1(1),\tMASK_REG | PD(3) | P2(3) | P1(3), 0,\t {REG_0_E, REG_DEST}\t},\n-  {\"frndp.du\",\tOP_REG(0x3E8) | PD(3) | P2(2) | P1(1),\tMASK_REG | PD(3) | P2(3) | P1(3), 0,\t {REG_0_E, REG_DEST}\t},\n-  {\"frndp.id\",\tOP_LI(0x3E9)  | PD(1) | P2(2) | P1(2),\tMASK_LI  | PD(3) | P2(3) | P1(3), 0,\t {LSI, REG_DEST_E}\t},\n-  {\"frndp.id\",\tOP_REG(0x3E8) | PD(1) | P2(2) | P1(2),\tMASK_REG | PD(3) | P2(3) | P1(3), 0,\t {REG_0, REG_DEST_E}\t},\n-  {\"frndp.is\",\tOP_LI(0x3E9)  | PD(0) | P2(2) | P1(2),\tMASK_LI  | PD(3) | P2(3) | P1(3), 0,\t {LSI, REG_DEST}\t},\n-  {\"frndp.is\",\tOP_REG(0x3E8) | PD(0) | P2(2) | P1(2),\tMASK_REG | PD(3) | P2(3) | P1(3), 0,\t {REG_0, REG_DEST}\t},\n-  {\"frndp.sd\",\tOP_LI(0x3E9)  | PD(1) | P2(2) | P1(0),\tMASK_LI  | PD(3) | P2(3) | P1(3), 0,\t {SPFI, REG_DEST_E}\t},\n-  {\"frndp.sd\",\tOP_REG(0x3E8) | PD(1) | P2(2) | P1(0),\tMASK_REG | PD(3) | P2(3) | P1(3), 0,\t {REG_0, REG_DEST_E}\t},\n-  {\"frndp.si\",\tOP_LI(0x3E9)  | PD(2) | P2(2) | P1(0),\tMASK_LI  | PD(3) | P2(3) | P1(3), 0,\t {SPFI, REG_DEST}\t},\n-  {\"frndp.si\",\tOP_REG(0x3E8) | PD(2) | P2(2) | P1(0),\tMASK_REG | PD(3) | P2(3) | P1(3), 0,\t {REG_0, REG_DEST}\t},\n-  {\"frndp.ss\",\tOP_LI(0x3E9)  | PD(0) | P2(2) | P1(0),\tMASK_LI  | PD(3) | P2(3) | P1(3), 0,\t {SPFI, REG_DEST}\t},\n-  {\"frndp.ss\",\tOP_REG(0x3E8) | PD(0) | P2(2) | P1(0),\tMASK_REG | PD(3) | P2(3) | P1(3), 0,\t {REG_0, REG_DEST}\t},\n-  {\"frndp.su\",\tOP_LI(0x3E9)  | PD(3) | P2(2) | P1(0),\tMASK_LI  | PD(3) | P2(3) | P1(3), 0,\t {SPFI, REG_DEST}\t},\n-  {\"frndp.su\",\tOP_REG(0x3E8) | PD(3) | P2(2) | P1(0),\tMASK_REG | PD(3) | P2(3) | P1(3), 0,\t {REG_0, REG_DEST}\t},\n-  {\"frndp.ud\",\tOP_LI(0x3E9)  | PD(1) | P2(2) | P1(3),\tMASK_LI  | PD(3) | P2(3) | P1(3), 0,\t {LSI, REG_DEST_E}\t},\n-  {\"frndp.ud\",\tOP_REG(0x3E8) | PD(1) | P2(2) | P1(3),\tMASK_REG | PD(3) | P2(3) | P1(3), 0,\t {REG_0, REG_DEST_E}\t},\n-  {\"frndp.us\",\tOP_LI(0x3E9)  | PD(0) | P2(2) | P1(3),\tMASK_LI  | PD(3) | P2(3) | P1(3), 0,\t {LSI, REG_DEST}\t},\n-  {\"frndp.us\",\tOP_REG(0x3E8) | PD(0) | P2(2) | P1(3),\tMASK_REG | PD(3) | P2(3) | P1(3), 0,\t {REG_0, REG_DEST}\t},\n-\n-  /* Convert/Round to Zero */\n-\n-  {\"frndz.dd\",\tOP_REG(0x3E8) | PD(1) | P2(1) | P1(1),\tMASK_REG | PD(3) | P2(3) | P1(3), 0,\t {REG_0_E, REG_DEST_E}\t},\n-  {\"frndz.di\",\tOP_REG(0x3E8) | PD(2) | P2(1) | P1(1),\tMASK_REG | PD(3) | P2(3) | P1(3), 0,\t {REG_0_E, REG_DEST}\t},\n-  {\"frndz.ds\",\tOP_REG(0x3E8) | PD(0) | P2(1) | P1(1),\tMASK_REG | PD(3) | P2(3) | P1(3), 0,\t {REG_0_E, REG_DEST}\t},\n-  {\"frndz.du\",\tOP_REG(0x3E8) | PD(3) | P2(1) | P1(1),\tMASK_REG | PD(3) | P2(3) | P1(3), 0,\t {REG_0_E, REG_DEST}\t},\n-  {\"frndz.id\",\tOP_LI(0x3E9)  | PD(1) | P2(1) | P1(2),\tMASK_LI  | PD(3) | P2(3) | P1(3), 0,\t {LSI, REG_DEST_E}\t},\n-  {\"frndz.id\",\tOP_REG(0x3E8) | PD(1) | P2(1) | P1(2),\tMASK_REG | PD(3) | P2(3) | P1(3), 0,\t {REG_0, REG_DEST_E}\t},\n-  {\"frndz.is\",\tOP_LI(0x3E9)  | PD(0) | P2(1) | P1(2),\tMASK_LI  | PD(3) | P2(3) | P1(3), 0,\t {LSI, REG_DEST}\t},\n-  {\"frndz.is\",\tOP_REG(0x3E8) | PD(0) | P2(1) | P1(2),\tMASK_REG | PD(3) | P2(3) | P1(3), 0,\t {REG_0, REG_DEST}\t},\n-  {\"frndz.sd\",\tOP_LI(0x3E9)  | PD(1) | P2(1) | P1(0),\tMASK_LI  | PD(3) | P2(3) | P1(3), 0,\t {SPFI, REG_DEST_E}\t},\n-  {\"frndz.sd\",\tOP_REG(0x3E8) | PD(1) | P2(1) | P1(0),\tMASK_REG | PD(3) | P2(3) | P1(3), 0,\t {REG_0, REG_DEST_E}\t},\n-  {\"frndz.si\",\tOP_LI(0x3E9)  | PD(2) | P2(1) | P1(0),\tMASK_LI  | PD(3) | P2(3) | P1(3), 0,\t {SPFI, REG_DEST}\t},\n-  {\"frndz.si\",\tOP_REG(0x3E8) | PD(2) | P2(1) | P1(0),\tMASK_REG | PD(3) | P2(3) | P1(3), 0,\t {REG_0, REG_DEST}\t},\n-  {\"frndz.ss\",\tOP_LI(0x3E9)  | PD(0) | P2(1) | P1(0),\tMASK_LI  | PD(3) | P2(3) | P1(3), 0,\t {SPFI, REG_DEST}\t},\n-  {\"frndz.ss\",\tOP_REG(0x3E8) | PD(0) | P2(1) | P1(0),\tMASK_REG | PD(3) | P2(3) | P1(3), 0,\t {REG_0, REG_DEST}\t},\n-  {\"frndz.su\",\tOP_LI(0x3E9)  | PD(3) | P2(1) | P1(0),\tMASK_LI  | PD(3) | P2(3) | P1(3), 0,\t {SPFI, REG_DEST}\t},\n-  {\"frndz.su\",\tOP_REG(0x3E8) | PD(3) | P2(1) | P1(0),\tMASK_REG | PD(3) | P2(3) | P1(3), 0,\t {REG_0, REG_DEST}\t},\n-  {\"frndz.ud\",\tOP_LI(0x3E9)  | PD(1) | P2(1) | P1(3),\tMASK_LI  | PD(3) | P2(3) | P1(3), 0,\t {LSI, REG_DEST_E}\t},\n-  {\"frndz.ud\",\tOP_REG(0x3E8) | PD(1) | P2(1) | P1(3),\tMASK_REG | PD(3) | P2(3) | P1(3), 0,\t {REG_0, REG_DEST_E}\t},\n-  {\"frndz.us\",\tOP_LI(0x3E9)  | PD(0) | P2(1) | P1(3),\tMASK_LI  | PD(3) | P2(3) | P1(3), 0,\t {LSI, REG_DEST}\t},\n-  {\"frndz.us\",\tOP_REG(0x3E8) | PD(0) | P2(1) | P1(3),\tMASK_REG | PD(3) | P2(3) | P1(3), 0,\t {REG_0, REG_DEST}\t},\n-\n-  /* Floating point square root */\n-\n-  {\"fsqrt.dd\",\tOP_REG(0x3EE) | PD(1) | P2(0) | P1(1),\tMASK_REG | PD(3) | P2(3) | P1(3), 0,\t {REG_0_E, REG_DEST_E}\t},\n-  {\"fsqrt.sd\",\tOP_LI(0x3EF)  | PD(1) | P2(0) | P1(0),\tMASK_LI  | PD(3) | P2(3) | P1(3), 0,\t {SPFI, REG_DEST_E}\t},\n-  {\"fsqrt.sd\",\tOP_REG(0x3EE) | PD(1) | P2(0) | P1(0),\tMASK_REG | PD(3) | P2(3) | P1(3), 0,\t {REG_0, REG_DEST_E}\t},\n-  {\"fsqrt.ss\",\tOP_LI(0x3EF)  | PD(0) | P2(0) | P1(0),\tMASK_LI  | PD(3) | P2(3) | P1(3), 0,\t {SPFI, REG_DEST}\t},\n-  {\"fsqrt.ss\",\tOP_REG(0x3EE) | PD(0) | P2(0) | P1(0),\tMASK_REG | PD(3) | P2(3) | P1(3), 0,\t {REG_0, REG_DEST}\t},\n-\n-  /* Floating point subtraction */\n-\n-  { \"fsub.ddd\",\tOP_REG(0x3E2) | PD(1) | P2(1) | P1(1),\tMASK_REG | PD(3) | P2(3) | P1(3), 0,\t {REG_0_E, REG_22_E, REG_DEST_E}\t},\n-  { \"fsub.dsd\",\tOP_REG(0x3E2) | PD(1) | P2(0) | P1(1),\tMASK_REG | PD(3) | P2(3) | P1(3), 0,\t {REG_0_E, REG_22, REG_DEST_E}\t},\n-  { \"fsub.sdd\",\tOP_LI(0x3E3)  | PD(1) | P2(1) | P1(0),\tMASK_LI  | PD(3) | P2(3) | P1(3), 0,\t {SPFI, REG_22_E, REG_DEST_E}\t},\n-  { \"fsub.sdd\",\tOP_REG(0x3E2) | PD(1) | P2(1) | P1(0),\tMASK_REG | PD(3) | P2(3) | P1(3), 0,\t {REG_0, REG_22_E, REG_DEST_E}\t},\n-  { \"fsub.ssd\",\tOP_LI(0x3E3)  | PD(1) | P2(0) | P1(0),\tMASK_LI  | PD(3) | P2(3) | P1(3), 0,\t {SPFI, REG_22, REG_DEST_E}\t},\n-  { \"fsub.ssd\",\tOP_REG(0x3E2) | PD(1) | P2(0) | P1(0),\tMASK_REG | PD(3) | P2(3) | P1(3), 0,\t {REG_0, REG_22, REG_DEST_E}\t},\n-  { \"fsub.sss\",\tOP_LI(0x3E3)  | PD(0) | P2(0) | P1(0),\tMASK_LI  | PD(3) | P2(3) | P1(3), 0,\t {SPFI, REG_22, REG_DEST}\t},\n-  { \"fsub.sss\",\tOP_REG(0x3E2) | PD(0) | P2(0) | P1(0),\tMASK_REG | PD(3) | P2(3) | P1(3), 0,\t {REG_0, REG_22, REG_DEST}\t},\n-\n-  /* Illegal instructions */\n-\n-  {\"illop0\",\tOP_SI(0x0),\tMASK_SI,\t0,\t{0}\t},\n-  {\"illopF\",\t0x1FF << 13,\t0x1FF << 13,\t0,\t{0}\t},\n-\n-  /* Jump and save return */\n-\n-  {\"jsr\",\tOP_SI(0x44),\tMASK_SI,\t0,\t{OFF_SS_BR, REG_BASE, REG_DEST}\t},\n-  {\"jsr\",\tOP_LI(0x389),\tMASK_LI,\t0,\t{OFF_SL_BR, REG_BASE, REG_DEST}\t},\n-  {\"jsr\",\tOP_REG(0x388),\tMASK_REG,\t0,\t{REG_0, REG_BASE, REG_DEST}\t},\n-  {\"jsr.a\",\tOP_SI(0x45),\tMASK_SI,\t0,\t{OFF_SS_BR, REG_BASE, REG_DEST}\t},\n-  {\"jsr.a\",\tOP_LI(0x38B),\tMASK_LI,\t0,\t{OFF_SL_BR, REG_BASE, REG_DEST}\t},\n-  {\"jsr.a\",\tOP_REG(0x38A),\tMASK_REG,\t0,\t{REG_0, REG_BASE, REG_DEST}\t},\n-\n-  /* Load Signed Data Into Register */\n-\n-  {\"ld\",\tOP_SI(0x22),\t\t(MASK_SI  & ~M_SI(1)),\t\t0,\t{OFF_SS_BR, REG_BASE_M_SI, REG_DEST}\t\t},\n-  {\"ld\",\tOP_LI(0x345)  | D(0),\t(MASK_LI  & ~M_REG(1)) | D(1),\t0,\t{OFF_SL_BR_SCALED, REG_BASE_M_LI, REG_DEST}\t},\n-  {\"ld\",\tOP_REG(0x344) | D(0),\t(MASK_REG & ~M_REG(1)) | D(1),\t0,\t{REG_SCALED, REG_BASE_M_LI, REG_DEST}\t\t},\n-  {\"ld.b\",\tOP_SI(0x20),\t\t(MASK_SI  & ~M_SI(1)),\t\t0,\t{OFF_SS_BR, REG_BASE_M_SI, REG_DEST}\t\t},\n-  {\"ld.b\",\tOP_LI(0x341)  | D(0),\t(MASK_LI  & ~M_REG(1)) | D(1),\t0,\t{OFF_SL_BR_SCALED, REG_BASE_M_LI, REG_DEST}\t},\n-  {\"ld.b\",\tOP_REG(0x340) | D(0),\t(MASK_REG & ~M_REG(1)) | D(1),\t0,\t{REG_SCALED, REG_BASE_M_LI, REG_DEST}\t\t},\n-  {\"ld.d\",\tOP_SI(0x23),\t\t(MASK_SI  & ~M_SI(1)),\t\t0,\t{OFF_SS_BR, REG_BASE_M_SI, REG_DEST_E}\t\t},\n-  {\"ld.d\",\tOP_LI(0x347)  | D(0),\t(MASK_LI  & ~M_REG(1)) | D(1),\t0,\t{OFF_SL_BR_SCALED, REG_BASE_M_LI, REG_DEST_E}\t},\n-  {\"ld.d\",\tOP_REG(0x346) | D(0),\t(MASK_REG & ~M_REG(1)) | D(1),\t0,\t{REG_SCALED, REG_BASE_M_LI, REG_DEST_E}\t\t},\n-  {\"ld.h\",\tOP_SI(0x21),\t\t(MASK_SI  & ~M_SI(1)),\t\t0,\t{OFF_SS_BR, REG_BASE_M_SI, REG_DEST}\t\t},\n-  {\"ld.h\",\tOP_LI(0x343)  | D(0),\t(MASK_LI  & ~M_REG(1)) | D(1),\t0,\t{OFF_SL_BR_SCALED, REG_BASE_M_LI, REG_DEST}\t},\n-  {\"ld.h\",\tOP_REG(0x342) | D(0),\t(MASK_REG & ~M_REG(1)) | D(1),\t0,\t{REG_SCALED, REG_BASE_M_LI, REG_DEST}\t\t},\n-\n-  /* Load Unsigned Data Into Register */\n-\n-  {\"ld.ub\",\tOP_SI(0x28),\t\t(MASK_SI  & ~M_SI(1)),\t\t0,\t{OFF_SS_BR, REG_BASE_M_SI, REG_DEST}\t\t},\n-  {\"ld.ub\",\tOP_LI(0x351)  | D(0),\t(MASK_LI  & ~M_REG(1)) | D(1),\t0,\t{OFF_SL_BR_SCALED, REG_BASE_M_LI, REG_DEST}\t},\n-  {\"ld.ub\",\tOP_REG(0x350) | D(0),\t(MASK_REG & ~M_REG(1)) | D(1),\t0,\t{REG_SCALED, REG_BASE_M_LI, REG_DEST}\t\t},\n-  {\"ld.uh\",\tOP_SI(0x29),\t\t(MASK_SI  & ~M_SI(1)),\t\t0,\t{OFF_SS_BR, REG_BASE_M_SI, REG_DEST}\t\t},\n-  {\"ld.uh\",\tOP_LI(0x353)  | D(0),\t(MASK_LI  & ~M_REG(1)) | D(1),\t0,\t{OFF_SL_BR_SCALED, REG_BASE_M_LI, REG_DEST}\t},\n-  {\"ld.uh\",\tOP_REG(0x352) | D(0),\t(MASK_REG & ~M_REG(1)) | D(1),\t0,\t{REG_SCALED, REG_BASE_M_LI, REG_DEST}\t\t},\n-\n-  /* Leftmost one */\n-\n-  {\"lmo\",\tOP_LI(0x3F0),\tMASK_LI,\t0,\t{REG_22, REG_DEST}\t},\n-\n-  /* Bitwise logical OR.  Note that \"or.tt\" and \"or\" are the same instructions. */\n-\n-  {\"or.ff\",\tOP_SI(0x1E),\tMASK_SI,\t0,\t{SUI, REG_22, REG_DEST}\t\t},\n-  {\"or.ff\",\tOP_LI(0x33D),\tMASK_LI,\t0,\t{LUI, REG_22, REG_DEST}\t\t},\n-  {\"or.ff\",\tOP_REG(0x33C),\tMASK_REG,\t0,\t{REG_0, REG_22, REG_DEST}\t},\n-  {\"or.ft\",\tOP_SI(0x1D),\tMASK_SI,\t0,\t{SUI, REG_22, REG_DEST}\t\t},\n-  {\"or.ft\",\tOP_LI(0x33B),\tMASK_LI,\t0,\t{LUI, REG_22, REG_DEST}\t\t},\n-  {\"or.ft\",\tOP_REG(0x33A),\tMASK_REG,\t0,\t{REG_0, REG_22, REG_DEST}\t},\n-  {\"or.tf\",\tOP_SI(0x1B),\tMASK_SI,\t0,\t{SUI, REG_22, REG_DEST}\t\t},\n-  {\"or.tf\",\tOP_LI(0x337),\tMASK_LI,\t0,\t{LUI, REG_22, REG_DEST}\t\t},\n-  {\"or.tf\",\tOP_REG(0x336),\tMASK_REG,\t0,\t{REG_0, REG_22, REG_DEST}\t},\n-  {\"or.tt\",\tOP_SI(0x17),\tMASK_SI,\t0,\t{SUI, REG_22, REG_DEST}\t\t},\n-  {\"or.tt\",\tOP_LI(0x32F),\tMASK_LI,\t0,\t{LUI, REG_22, REG_DEST}\t\t},\n-  {\"or.tt\",\tOP_REG(0x32E),\tMASK_REG,\t0,\t{REG_0, REG_22, REG_DEST}\t},\n-  {\"or\",\tOP_SI(0x17),\tMASK_SI,\t0,\t{SUI, REG_22, REG_DEST}\t\t},\n-  {\"or\",\tOP_LI(0x32F),\tMASK_LI,\t0,\t{LUI, REG_22, REG_DEST}\t\t},\n-  {\"or\",\tOP_REG(0x32E),\tMASK_REG,\t0,\t{REG_0, REG_22, REG_DEST}\t},\n-\n-  /* Read Control Register */\n-\n-  {\"rdcr\",\tOP_SI(0x4),\tMASK_SI  | (0x1F << 22),\t0,\t{CR_SI, REG_DEST}\t},\n-  {\"rdcr\",\tOP_LI(0x309),\tMASK_LI  | (0x1F << 22),\t0,\t{CR_LI, REG_DEST}\t},\n-  {\"rdcr\",\tOP_REG(0x308),\tMASK_REG | (0x1F << 22),\t0,\t{REG_0, REG_DEST}\t},\n-\n-  /* Rightmost one */\n-\n-  {\"rmo\",\tOP_LI(0x3F2),\tMASK_LI,\t0,\t\t{REG_22, REG_DEST}\t},\n-\n-  /* Shift Register Left - note that rotl, shl, and ins are all alternate names for one of the shift instructions.\n-     They appear prior to their sl equivalent so that they will be diassembled as the alternate name. */\n-\n-\n-  {\"ins\",\tOP_REG(0x31E) | i(0) | n(0),\tMASK_REG | i(1) | n(1),\t0,\t{REG_0, ENDMASK, REG_22, REG_DEST}\t},\n-  {\"ins\",\tOP_SI(0xF)    | i(0) | n(0),\tMASK_SI  | i(1) | n(1),\t0,\t{ROTATE, ENDMASK, REG_22, REG_DEST}\t},\n-  {\"rotl\",\tOP_REG(0x310) | i(0) | n(0),\tMASK_REG | i(1) | n(1),\t0,\t{REG_0, ENDMASK, REG_22, REG_DEST}\t},\n-  {\"rotl\",\tOP_SI(0x8)    | i(0) | n(0),\tMASK_SI  | i(1) | n(1),\t0,\t{ROTATE, ENDMASK, REG_22, REG_DEST}\t},\n-  {\"shl\",\tOP_REG(0x31C) | i(0) | n(0),\tMASK_REG | i(1) | n(1),\t0, \t{REG_0, ENDMASK, REG_22, REG_DEST}\t},\n-  {\"shl\",\tOP_SI(0xE)    | i(0) | n(0),\tMASK_SI  | i(1) | n(1),\t0, \t{ROTATE, ENDMASK, REG_22, REG_DEST}\t},\n-  {\"sl.dm\",\tOP_REG(0x312) | i(0) | n(0),\tMASK_REG | i(1) | n(1),\t0, \t{REG_0, ENDMASK, REG_22, REG_DEST}\t},\n-  {\"sl.dm\",\tOP_SI(0x9)    | i(0) | n(0),\tMASK_SI  | i(1) | n(1),\t0, \t{ROTATE, ENDMASK, REG_22, REG_DEST}\t},\n-  {\"sl.ds\",\tOP_REG(0x314) | i(0) | n(0),\tMASK_REG | i(1) | n(1),\t0, \t{REG_0, ENDMASK, REG_22, REG_DEST}\t},\n-  {\"sl.ds\",\tOP_SI(0xA)    | i(0) | n(0),\tMASK_SI  | i(1) | n(1),\t0, \t{ROTATE, ENDMASK, REG_22, REG_DEST}\t},\n-  {\"sl.dz\",\tOP_REG(0x310) | i(0) | n(0),\tMASK_REG | i(1) | n(1),\t0, \t{REG_0, ENDMASK, REG_22, REG_DEST}\t},\n-  {\"sl.dz\",\tOP_SI(0x8)    | i(0) | n(0),\tMASK_SI  | i(1) | n(1),\t0, \t{ROTATE, ENDMASK, REG_22, REG_DEST}\t},\n-  {\"sl.em\",\tOP_REG(0x318) | i(0) | n(0),\tMASK_REG | i(1) | n(1),\t0, \t{REG_0, ENDMASK, REG_22, REG_DEST}\t},\n-  {\"sl.em\",\tOP_SI(0xC)    | i(0) | n(0),\tMASK_SI  | i(1) | n(1),\t0, \t{ROTATE, ENDMASK, REG_22, REG_DEST}\t},\n-  {\"sl.es\",\tOP_REG(0x31A) | i(0) | n(0),\tMASK_REG | i(1) | n(1),\t0, \t{REG_0, ENDMASK, REG_22, REG_DEST}\t},\n-  {\"sl.es\",\tOP_SI(0xD)    | i(0) | n(0),\tMASK_SI  | i(1) | n(1),\t0, \t{ROTATE, ENDMASK, REG_22, REG_DEST}\t},\n-  {\"sl.ez\",\tOP_REG(0x316) | i(0) | n(0),\tMASK_REG | i(1) | n(1),\t0, \t{REG_0, ENDMASK, REG_22, REG_DEST}\t},\n-  {\"sl.ez\",\tOP_SI(0xB)    | i(0) | n(0),\tMASK_SI  | i(1) | n(1),\t0, \t{ROTATE, ENDMASK, REG_22, REG_DEST}\t},\n-  {\"sl.im\",\tOP_REG(0x31E) | i(0) | n(0),\tMASK_REG | i(1) | n(1),\t0, \t{REG_0, ENDMASK, REG_22, REG_DEST}\t},\n-  {\"sl.im\",\tOP_SI(0xF)    | i(0) | n(0),\tMASK_SI  | i(1) | n(1),\t0, \t{ROTATE, ENDMASK, REG_22, REG_DEST}\t},\n-  {\"sl.iz\",\tOP_REG(0x31C) | i(0) | n(0),\tMASK_REG | i(1) | n(1),\t0, \t{REG_0, ENDMASK, REG_22, REG_DEST}\t},\n-  {\"sl.iz\",\tOP_SI(0xE)    | i(0) | n(0),\tMASK_SI  | i(1) | n(1),\t0, \t{ROTATE, ENDMASK, REG_22, REG_DEST}\t},\n-\n-  /* Shift Register Left With Inverted Endmask */\n-\n-  {\"sli.dm\",\tOP_REG(0x312) | i(1) | n(0),\tMASK_REG | i(1) | n(1),\t0,\t{REG_0, ENDMASK, REG_22, REG_DEST}\t},\n-  {\"sli.dm\",\tOP_SI(0x9)    | i(1) | n(0),\tMASK_SI  | i(1) | n(1),\t0, \t{ROTATE, ENDMASK, REG_22, REG_DEST}\t},\n-  {\"sli.ds\",\tOP_REG(0x314) | i(1) | n(0),\tMASK_REG | i(1) | n(1),\t0,\t{REG_0, ENDMASK, REG_22, REG_DEST}\t},\n-  {\"sli.ds\",\tOP_SI(0xA)    | i(1) | n(0),\tMASK_SI  | i(1) | n(1),\t0, \t{ROTATE, ENDMASK, REG_22, REG_DEST}\t},\n-  {\"sli.dz\",\tOP_REG(0x310) | i(1) | n(0),\tMASK_REG | i(1) | n(1),\t0,\t{REG_0, ENDMASK, REG_22, REG_DEST}\t},\n-  {\"sli.dz\",\tOP_SI(0x8)    | i(1) | n(0),\tMASK_SI  | i(1) | n(1),\t0, \t{ROTATE, ENDMASK, REG_22, REG_DEST}\t},\n-  {\"sli.em\",\tOP_REG(0x318) | i(1) | n(0),\tMASK_REG | i(1) | n(1),\t0,\t{REG_0, ENDMASK, REG_22, REG_DEST}\t},\n-  {\"sli.em\",\tOP_SI(0xC)    | i(1) | n(0),\tMASK_SI  | i(1) | n(1),\t0, \t{ROTATE, ENDMASK, REG_22, REG_DEST}\t},\n-  {\"sli.es\",\tOP_REG(0x31A) | i(1) | n(0),\tMASK_REG | i(1) | n(1),\t0,\t{REG_0, ENDMASK, REG_22, REG_DEST}\t},\n-  {\"sli.es\",\tOP_SI(0xD)    | i(1) | n(0),\tMASK_SI  | i(1) | n(1),\t0, \t{ROTATE, ENDMASK, REG_22, REG_DEST}\t},\n-  {\"sli.ez\",\tOP_REG(0x316) | i(1) | n(0),\tMASK_REG | i(1) | n(1),\t0,\t{REG_0, ENDMASK, REG_22, REG_DEST}\t},\n-  {\"sli.ez\",\tOP_SI(0xB)    | i(1) | n(0),\tMASK_SI  | i(1) | n(1),\t0, \t{ROTATE, ENDMASK, REG_22, REG_DEST}\t},\n-  {\"sli.im\",\tOP_REG(0x31E) | i(1) | n(0),\tMASK_REG | i(1) | n(1),\t0,\t{REG_0, ENDMASK, REG_22, REG_DEST}\t},\n-  {\"sli.im\",\tOP_SI(0xF)    | i(1) | n(0),\tMASK_SI  | i(1) | n(1),\t0, \t{ROTATE, ENDMASK, REG_22, REG_DEST}\t},\n-  {\"sli.iz\",\tOP_REG(0x31C) | i(1) | n(0),\tMASK_REG | i(1) | n(1),\t0,\t{REG_0, ENDMASK, REG_22, REG_DEST}\t},\n-  {\"sli.iz\",\tOP_SI(0xE)    | i(1) | n(0),\tMASK_SI  | i(1) | n(1),\t0, \t{ROTATE, ENDMASK, REG_22, REG_DEST}\t},\n-\n-  /* Shift Register Right - note that exts, extu, rotr, sra, and srl are all alternate names for one of the shift instructions.\n-     They appear prior to their sr equivalent so that they will be diassembled as the alternate name. */\n-\n-  {\"exts\",\tOP_REG(0x314) | i(0) | n(1),\tMASK_REG | i(1) | n(1),\t0,\t{REG_0, ENDMASK, REG_22, REG_DEST}\t},\n-  {\"exts\",\tOP_SI(0xA)    | i(0) | n(1),\tMASK_SI  | i(1) | n(1),\t0, \t{ROTATE, ENDMASK, REG_22, REG_DEST}\t},\n-  {\"extu\",\tOP_REG(0x310) | i(0) | n(1),\tMASK_REG | i(1) | n(1),\t0,\t{REG_0, ENDMASK, REG_22, REG_DEST}\t},\n-  {\"extu\",\tOP_SI(0x8)    | i(0) | n(1),\tMASK_SI  | i(1) | n(1),\t0, \t{ROTATE, ENDMASK, REG_22, REG_DEST}\t},\n-  {\"rotr\",\tOP_REG(0x310) | i(0) | n(1),\tMASK_REG | i(1) | n(1),\t0,\t{REG_0, ENDMASK, REG_22, REG_DEST}\t},\n-  {\"rotr\",\tOP_SI(0x8)    | i(0) | n(1),\tMASK_SI  | i(1) | n(1),\t0,\t{ROTATE, ENDMASK, REG_22, REG_DEST}\t},\n-  {\"sra\",\tOP_REG(0x31A) | i(0) | n(1),\tMASK_REG | i(1) | n(1),\t0,\t{REG_0, ENDMASK, REG_22, REG_DEST}\t},\n-  {\"sra\",\tOP_SI(0xD)    | i(0) | n(1),\tMASK_SI  | i(1) | n(1),\t0, \t{ROTATE, ENDMASK, REG_22, REG_DEST}\t},\n-  {\"srl\",\tOP_REG(0x316) | i(0) | n(1),\tMASK_REG | i(1) | n(1),\t0,\t{REG_0, ENDMASK, REG_22, REG_DEST}\t},\n-  {\"srl\",\tOP_SI(0xB)    | i(0) | n(1),\tMASK_SI  | i(1) | n(1),\t0, \t{ROTATE, ENDMASK, REG_22, REG_DEST}\t},\n-  {\"sr.dm\",\tOP_REG(0x312) | i(0) | n(1),\tMASK_REG | i(1) | n(1),\t0,\t{REG_0, ENDMASK, REG_22, REG_DEST}\t},\n-  {\"sr.dm\",\tOP_SI(0x9)    | i(0) | n(1),\tMASK_SI  | i(1) | n(1),\t0, \t{ROTATE, ENDMASK, REG_22, REG_DEST}\t},\n-  {\"sr.ds\",\tOP_REG(0x314) | i(0) | n(1),\tMASK_REG | i(1) | n(1),\t0,\t{REG_0, ENDMASK, REG_22, REG_DEST}\t},\n-  {\"sr.ds\",\tOP_SI(0xA)    | i(0) | n(1),\tMASK_SI  | i(1) | n(1),\t0, \t{ROTATE, ENDMASK, REG_22, REG_DEST}\t},\n-  {\"sr.dz\",\tOP_REG(0x310) | i(0) | n(1),\tMASK_REG | i(1) | n(1),\t0,\t{REG_0, ENDMASK, REG_22, REG_DEST}\t},\n-  {\"sr.dz\",\tOP_SI(0x8)    | i(0) | n(1),\tMASK_SI  | i(1) | n(1),\t0, \t{ROTATE, ENDMASK, REG_22, REG_DEST}\t},\n-  {\"sr.em\",\tOP_REG(0x318) | i(0) | n(1),\tMASK_REG | i(1) | n(1),\t0,\t{REG_0, ENDMASK, REG_22, REG_DEST}\t},\n-  {\"sr.em\",\tOP_SI(0xC)    | i(0) | n(1),\tMASK_SI  | i(1) | n(1),\t0, \t{ROTATE, ENDMASK, REG_22, REG_DEST}\t},\n-  {\"sr.es\",\tOP_REG(0x31A) | i(0) | n(1),\tMASK_REG | i(1) | n(1),\t0,\t{REG_0, ENDMASK, REG_22, REG_DEST}\t},\n-  {\"sr.es\",\tOP_SI(0xD)    | i(0) | n(1),\tMASK_SI  | i(1) | n(1),\t0, \t{ROTATE, ENDMASK, REG_22, REG_DEST}\t},\n-  {\"sr.ez\",\tOP_REG(0x316) | i(0) | n(1),\tMASK_REG | i(1) | n(1),\t0,\t{REG_0, ENDMASK, REG_22, REG_DEST}\t},\n-  {\"sr.ez\",\tOP_SI(0xB)    | i(0) | n(1),\tMASK_SI  | i(1) | n(1),\t0, \t{ROTATE, ENDMASK, REG_22, REG_DEST}\t},\n-  {\"sr.im\",\tOP_REG(0x31E) | i(0) | n(1),\tMASK_REG | i(1) | n(1),\t0,\t{REG_0, ENDMASK, REG_22, REG_DEST}\t},\n-  {\"sr.im\",\tOP_SI(0xF)    | i(0) | n(1),\tMASK_SI  | i(1) | n(1),\t0, \t{ROTATE, ENDMASK, REG_22, REG_DEST}\t},\n-  {\"sr.iz\",\tOP_REG(0x31C) | i(0) | n(1),\tMASK_REG | i(1) | n(1),\t0,\t{REG_0, ENDMASK, REG_22, REG_DEST}\t},\n-  {\"sr.iz\",\tOP_SI(0xE)    | i(0) | n(1),\tMASK_SI  | i(1) | n(1),\t0, \t{ROTATE, ENDMASK, REG_22, REG_DEST}\t},\n-\n-  /* Shift Register Right With Inverted Endmask */\n-\n-  {\"sri.dm\",\tOP_REG(0x312) | i(1) | n(1),\tMASK_REG | i(1) | n(1),\t0,\t{REG_0, ENDMASK, REG_22, REG_DEST}\t},\n-  {\"sri.dm\",\tOP_SI(0x9)    | i(1) | n(1),\tMASK_SI  | i(1) | n(1),\t0, \t{ROTATE, ENDMASK, REG_22, REG_DEST}\t},\n-  {\"sri.ds\",\tOP_REG(0x314) | i(1) | n(1),\tMASK_REG | i(1) | n(1),\t0,\t{REG_0, ENDMASK, REG_22, REG_DEST}\t},\n-  {\"sri.ds\",\tOP_SI(0xA)    | i(1) | n(1),\tMASK_SI  | i(1) | n(1),\t0, \t{ROTATE, ENDMASK, REG_22, REG_DEST}\t},\n-  {\"sri.dz\",\tOP_REG(0x310) | i(1) | n(1),\tMASK_REG | i(1) | n(1),\t0,\t{REG_0, ENDMASK, REG_22, REG_DEST}\t},\n-  {\"sri.dz\",\tOP_SI(0x8)    | i(1) | n(1),\tMASK_SI  | i(1) | n(1),\t0, \t{ROTATE, ENDMASK, REG_22, REG_DEST}\t},\n-  {\"sri.em\",\tOP_REG(0x318) | i(1) | n(1),\tMASK_REG | i(1) | n(1),\t0,\t{REG_0, ENDMASK, REG_22, REG_DEST}\t},\n-  {\"sri.em\",\tOP_SI(0xC)    | i(1) | n(1),\tMASK_SI  | i(1) | n(1),\t0, \t{ROTATE, ENDMASK, REG_22, REG_DEST}\t},\n-  {\"sri.es\",\tOP_REG(0x31A) | i(1) | n(1),\tMASK_REG | i(1) | n(1),\t0,\t{REG_0, ENDMASK, REG_22, REG_DEST}\t},\n-  {\"sri.es\",\tOP_SI(0xD)    | i(1) | n(1),\tMASK_SI  | i(1) | n(1),\t0, \t{ROTATE, ENDMASK, REG_22, REG_DEST}\t},\n-  {\"sri.ez\",\tOP_REG(0x316) | i(1) | n(1),\tMASK_REG | i(1) | n(1),\t0,\t{REG_0, ENDMASK, REG_22, REG_DEST}\t},\n-  {\"sri.ez\",\tOP_SI(0xB)    | i(1) | n(1),\tMASK_SI  | i(1) | n(1),\t0, \t{ROTATE, ENDMASK, REG_22, REG_DEST}\t},\n-  {\"sri.im\",\tOP_REG(0x31E) | i(1) | n(1),\tMASK_REG | i(1) | n(1),\t0,\t{REG_0, ENDMASK, REG_22, REG_DEST}\t},\n-  {\"sri.im\",\tOP_SI(0xF)    | i(1) | n(1),\tMASK_SI  | i(1) | n(1),\t0, \t{ROTATE, ENDMASK, REG_22, REG_DEST}\t},\n-  {\"sri.iz\",\tOP_REG(0x31C) | i(1) | n(1),\tMASK_REG | i(1) | n(1),\t0,\t{REG_0, ENDMASK, REG_22, REG_DEST}\t},\n-  {\"sri.iz\",\tOP_SI(0xE)    | i(1) | n(1),\tMASK_SI  | i(1) | n(1),\t0, \t{ROTATE, ENDMASK, REG_22, REG_DEST}\t},\n-\n-  /* Store Data into Memory */\n-\n-  {\"st\",\tOP_SI(0x32),\t\t(MASK_SI  & ~M_SI(1)),\t\t0, \t{OFF_SS_BR, REG_BASE_M_SI, REG_DEST}\t\t},\n-  {\"st\",\tOP_LI(0x365)  | D(0),\t(MASK_LI  & ~M_REG(1)) | D(1),\t0,\t{OFF_SL_BR_SCALED, REG_BASE_M_LI, REG_DEST}\t},\n-  {\"st\",\tOP_REG(0x364) | D(0),\t(MASK_REG & ~M_REG(1)) | D(1),\t0,\t{REG_SCALED, REG_BASE_M_LI, REG_DEST}\t\t},\n-  {\"st.b\",\tOP_SI(0x30),\t\t(MASK_SI  & ~M_SI(1)),\t\t0, \t{OFF_SS_BR, REG_BASE_M_SI, REG_DEST}\t\t},\n-  {\"st.b\",\tOP_LI(0x361)  | D(0),\t(MASK_LI  & ~M_REG(1)) | D(1),\t0,\t{OFF_SL_BR_SCALED, REG_BASE_M_LI, REG_DEST}\t},\n-  {\"st.b\",\tOP_REG(0x360) | D(0),\t(MASK_REG & ~M_REG(1)) | D(1),\t0,\t{REG_SCALED, REG_BASE_M_LI, REG_DEST}\t\t},\n-  {\"st.d\",\tOP_SI(0x33),\t\t(MASK_SI  & ~M_SI(1)),\t\t0, \t{OFF_SS_BR, REG_BASE_M_SI, REG_DEST_E}\t\t},\n-  {\"st.d\",\tOP_LI(0x367)  | D(0),\t(MASK_LI  & ~M_REG(1)) | D(1),\t0,\t{OFF_SL_BR_SCALED, REG_BASE_M_LI, REG_DEST_E}\t},\n-  {\"st.d\",\tOP_REG(0x366) | D(0),\t(MASK_REG & ~M_REG(1)) | D(1),\t0,\t{REG_SCALED, REG_BASE_M_LI, REG_DEST_E}\t\t},\n-  {\"st.h\",\tOP_SI(0x31),\t\t(MASK_SI  & ~M_SI(1)),\t\t0, \t{OFF_SS_BR, REG_BASE_M_SI, REG_DEST}\t\t},\n-  {\"st.h\",\tOP_LI(0x363)  | D(0),\t(MASK_LI  & ~M_REG(1)) | D(1),\t0,\t{OFF_SL_BR_SCALED, REG_BASE_M_LI, REG_DEST}\t},\n-  {\"st.h\",\tOP_REG(0x362) | D(0),\t(MASK_REG & ~M_REG(1)) | D(1),\t0,\t{REG_SCALED, REG_BASE_M_LI, REG_DEST}\t\t},\n-\n-  /* Signed Integer Subtract */\n-\n-  {\"sub\",\tOP_SI(0x5A),\tMASK_SI,\t0, \t{SSI, REG_22, REG_DEST}\t\t},\n-  {\"sub\",\tOP_LI(0x3B5),\tMASK_LI,\t0,\t{LSI, REG_22, REG_DEST}\t\t},\n-  {\"sub\",\tOP_REG(0x3B4),\tMASK_REG,\t0,\t{REG_0, REG_22, REG_DEST}\t},\n-\n-  /* Unsigned Integer Subtract */\n-\n-  {\"subu\",\tOP_SI(0x5B),\tMASK_SI,\t0, \t{SSI, REG_22, REG_DEST}\t\t},\n-  {\"subu\",\tOP_LI(0x3B7),\tMASK_LI,\t0,\t{LSI, REG_22, REG_DEST}\t\t},\n-  {\"subu\",\tOP_REG(0x3B6),\tMASK_REG,\t0,\t{REG_0, REG_22, REG_DEST}\t},\n-\n-  /* Write Control Register\n-     Is a special form of the \"swcr\" instruction so comes before it in the table. */\n-\n-  {\"wrcr\",\tOP_SI(0x5),\tMASK_SI | (0x1F << 27),\t\t0,\t{CR_SI, REG_22}\t},\n-  {\"wrcr\",\tOP_LI(0x30B),\tMASK_LI | (0x1F << 27),\t\t0,\t{CR_LI, REG_22}\t},\n-  {\"wrcr\",\tOP_REG(0x30A),\tMASK_REG | (0x1F << 27),\t0,\t{REG_0, REG_22}\t},\n-\n-  /* Swap Control Register */\n-\n-  {\"swcr\",\tOP_SI(0x5),\tMASK_SI,\t0,\t{CR_SI, REG_22, REG_DEST}\t},\n-  {\"swcr\",\tOP_LI(0x30B),\tMASK_LI,\t0,\t{CR_LI, REG_22, REG_DEST}\t},\n-  {\"swcr\",\tOP_REG(0x30A),\tMASK_REG,\t0,\t{REG_0, REG_22, REG_DEST}\t},\n-\n-  /* Trap */\n-\n-  {\"trap\",\tOP_SI(0x1)    | E(0),\tMASK_SI  | E(1),\t0,\t{SUI}\t},\n-  {\"trap\",\tOP_LI(0x303)  | E(0),\tMASK_LI  | E(1),\t0,\t{LUI}\t},\n-  {\"trap\",\tOP_REG(0x302) | E(0),\tMASK_REG | E(1),\t0,\t{REG_0}\t},\n-\n-  /* Vector Floating-Point Add */\n-\n-  {\"vadd.dd\",\tOP_REG(0x3C0) | P2(1) | P1(1),\tMASK_REG | V_a1(1) | P2(1) | P1(1),\tTIC80_VECTOR,\t{REG_0_E, REG_22_E, REG_22_E}\t},\n-  {\"vadd.sd\",\tOP_LI(0x3C1)  | P2(1) | P1(0),\tMASK_LI  | V_a1(1) | P2(1) | P1(1),\tTIC80_VECTOR,\t{SPFI, REG_22_E, REG_22_E}\t},\n-  {\"vadd.sd\",\tOP_REG(0x3C0) | P2(1) | P1(0),\tMASK_REG | V_a1(1) | P2(1) | P1(1),\tTIC80_VECTOR,\t{REG_0, REG_22_E, REG_22_E}\t},\n-  {\"vadd.ss\",\tOP_LI(0x3C1)  | P2(0) | P1(0),\tMASK_LI  | V_a1(1) | P2(1) | P1(1),\tTIC80_VECTOR,\t{SPFI, REG_22, REG_22}\t},\n-  {\"vadd.ss\",\tOP_REG(0x3C0) | P2(0) | P1(0),\tMASK_REG | V_a1(1) | P2(1) | P1(1),\tTIC80_VECTOR,\t{REG_0, REG_22, REG_22}\t},\n-\n-  /* Vector Floating-Point Multiply and Add to Accumulator FIXME! This is not yet fully implemented.\n-   From the documentation there appears to be no way to tell the difference between the opcodes for\n-   instructions that have register destinations and instructions that have accumulator destinations.\n-   Further investigation is necessary.  Since this isn't critical to getting a TIC80 toolchain up\n-   and running, it is defered until later. */\n-\n-  /* Vector Floating-Point Multiply\n-   Note: If r0 is in the destination reg, then this is a \"vector nop\" instruction. */\n-\n-  {\"vmpy.dd\",\tOP_REG(0x3C4) | P2(1) | P1(1),\tMASK_REG | V_a1(1) | P2(1) | P1(1),\tTIC80_VECTOR | TIC80_NO_R0_DEST, {REG_0_E, REG_22_E, REG_22_E} },\n-  {\"vmpy.sd\",\tOP_LI(0x3C5)  | P2(1) | P1(0),\tMASK_LI  | V_a1(1) | P2(1) | P1(1),\tTIC80_VECTOR | TIC80_NO_R0_DEST, {SPFI, REG_22_E, REG_22_E}\t},\n-  {\"vmpy.sd\",\tOP_REG(0x3C4) | P2(1) | P1(0),\tMASK_REG | V_a1(1) | P2(1) | P1(1),\tTIC80_VECTOR | TIC80_NO_R0_DEST, {REG_0, REG_22_E, REG_22_E} },\n-  {\"vmpy.ss\",\tOP_LI(0x3C5)  | P2(0) | P1(0),\tMASK_LI  | V_a1(1) | P2(1) | P1(1),\tTIC80_VECTOR | TIC80_NO_R0_DEST, {SPFI, REG_22, REG_22}\t},\n-  {\"vmpy.ss\",\tOP_REG(0x3C4) | P2(0) | P1(0),\tMASK_REG | V_a1(1) | P2(1) | P1(1),\tTIC80_VECTOR | TIC80_NO_R0_DEST, {REG_0, REG_22, REG_22} },\n-\n-  /* Vector Floating-Point Multiply and Subtract from Accumulator\n-     FIXME: See note above for vmac instruction */\n-\n-  /* Vector Floating-Point Subtract Accumulator From Source\n-     FIXME: See note above for vmac instruction */\n-\n-  /* Vector Round With Floating-Point Input\n-     FIXME: See note above for vmac instruction */\n-\n-  /* Vector Round with Integer Input */\n-\n-  {\"vrnd.id\",\tOP_LI (0x3CB)  | P2(1) | P1(0),\tMASK_LI  | V_a0(1) | V_Z(1) | P2(1) | P1(1),\tTIC80_VECTOR, {LSI, REG_22_E}},\n-  {\"vrnd.id\",\tOP_REG (0x3CA) | P2(1) | P1(0),\tMASK_REG | V_a0(1) | V_Z(1) | P2(1) | P1(1),\tTIC80_VECTOR, {REG_0, REG_22_E}},\n-  {\"vrnd.is\",\tOP_LI (0x3CB)  | P2(0) | P1(0),\tMASK_LI  | V_a0(1) | V_Z(1) | P2(1) | P1(1),\tTIC80_VECTOR, {LSI, REG_22}},\n-  {\"vrnd.is\",\tOP_REG (0x3CA) | P2(0) | P1(0),\tMASK_REG | V_a0(1) | V_Z(1) | P2(1) | P1(1),\tTIC80_VECTOR, {REG_0, REG_22}},\n-  {\"vrnd.ud\",\tOP_LI (0x3CB)  | P2(1) | P1(1),\tMASK_LI  | V_a0(1) | V_Z(1) | P2(1) | P1(1),\tTIC80_VECTOR, {LUI, REG_22_E}},\n-  {\"vrnd.ud\",\tOP_REG (0x3CA) | P2(1) | P1(1),\tMASK_REG | V_a0(1) | V_Z(1) | P2(1) | P1(1),\tTIC80_VECTOR, {REG_0, REG_22_E}},\n-  {\"vrnd.us\",\tOP_LI (0x3CB)  | P2(0) | P1(1),\tMASK_LI  | V_a0(1) | V_Z(1) | P2(1) | P1(1),\tTIC80_VECTOR, {LUI, REG_22}},\n-  {\"vrnd.us\",\tOP_REG (0x3CA) | P2(0) | P1(1),\tMASK_REG | V_a0(1) | V_Z(1) | P2(1) | P1(1),\tTIC80_VECTOR, {REG_0, REG_22}},\n-\n-  /* Vector Floating-Point Subtract */\n-\n-  {\"vsub.dd\",\tOP_REG(0x3C2) | P2(1) | P1(1),\tMASK_REG | V_a1(1) | P2(1) | P1(1),\tTIC80_VECTOR,\t{REG_0_E, REG_22_E, REG_22_E}\t},\n-  {\"vsub.sd\",\tOP_LI(0x3C3)  | P2(1) | P1(0),\tMASK_LI  | V_a1(1) | P2(1) | P1(1),\tTIC80_VECTOR,\t{SPFI, REG_22_E, REG_22_E}\t},\n-  {\"vsub.sd\",\tOP_REG(0x3C2) | P2(1) | P1(0),\tMASK_REG | V_a1(1) | P2(1) | P1(1),\tTIC80_VECTOR,\t{REG_0, REG_22_E, REG_22_E}\t},\n-  {\"vsub.ss\",\tOP_LI(0x3C3)  | P2(0) | P1(0),\tMASK_LI  | V_a1(1) | P2(1) | P1(1),\tTIC80_VECTOR,\t{SPFI, REG_22, REG_22}\t},\n-  {\"vsub.ss\",\tOP_REG(0x3C2) | P2(0) | P1(0),\tMASK_REG | V_a1(1) | P2(1) | P1(1),\tTIC80_VECTOR,\t{REG_0, REG_22, REG_22}\t},\n-\n-  /* Vector Load Data Into Register - Note that the vector load/store instructions come after the other\n-   vector instructions so that the disassembler will always print the load/store instruction second for\n-   vector instructions that have two instructions in the same opcode. */\n-\n-  {\"vld0.d\",\tOP_V(0x1E) | V_m(1) | V_S(1) | V_p(0),\tMASK_V | V_m(1) | V_S(1) | V_p(1),\tTIC80_VECTOR, {REG_DEST_E} },\n-  {\"vld0.s\",\tOP_V(0x1E) | V_m(1) | V_S(0) | V_p(0),\tMASK_V | V_m(1) | V_S(1) | V_p(1),\tTIC80_VECTOR, {REG_DEST} },\n-  {\"vld1.d\",\tOP_V(0x1E) | V_m(1) | V_S(1) | V_p(1),\tMASK_V | V_m(1) | V_S(1) | V_p(1),\tTIC80_VECTOR, {REG_DEST_E} },\n-  {\"vld1.s\",\tOP_V(0x1E) | V_m(1) | V_S(0) | V_p(1),\tMASK_V | V_m(1) | V_S(1) | V_p(1),\tTIC80_VECTOR, {REG_DEST} },\n-\n-  /* Vector Store Data Into Memory - Note that the vector load/store instructions come after the other\n-   vector instructions so that the disassembler will always print the load/store instruction second for\n-   vector instructions that have two instructions in the same opcode. */\n-\n-  {\"vst.d\",\tOP_V(0x1E) | V_m(0) | V_S(1) | V_p(1),\tMASK_V | V_m(1) | V_S(1) | V_p(1),\tTIC80_VECTOR, {REG_DEST_E} },\n-  {\"vst.s\",\tOP_V(0x1E) | V_m(0) | V_S(0) | V_p(1),\tMASK_V | V_m(1) | V_S(1) | V_p(1),\tTIC80_VECTOR, {REG_DEST} },\n-\n-  {\"xnor\",\tOP_SI(0x19),\tMASK_SI,\t0,\t{SUBF, REG_22, REG_DEST} },\n-  {\"xnor\",\tOP_LI(0x333),\tMASK_LI,\t0,\t{LUBF, REG_22, REG_DEST} },\n-  {\"xnor\",\tOP_REG(0x332),\tMASK_REG,\t0,\t{REG_0, REG_22, REG_DEST} },\n-\n-  {\"xor\",\tOP_SI(0x16),\tMASK_SI,\t0,\t{SUBF, REG_22, REG_DEST} },\n-  {\"xor\",\tOP_LI(0x32D),\tMASK_LI,\t0,\t{LUBF, REG_22, REG_DEST} },\n-  {\"xor\",\tOP_REG(0x32C),\tMASK_REG,\t0,\t{REG_0, REG_22, REG_DEST} },\n-\n-};\n-\n-const int tic80_num_opcodes = sizeof (tic80_opcodes) / sizeof (tic80_opcodes[0]);"
    }
  ]
}