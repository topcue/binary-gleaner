{
  "sha": "39bcc47c7e94c746d5acdb52f20f9617a6473292",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MzliY2M0N2M3ZTk0Yzc0NmQ1YWNkYjUyZjIwZjk2MTdhNjQ3MzI5Mg==",
  "commit": {
    "author": {
      "name": "Tankut Baris Aktemur",
      "email": "tankut.baris.aktemur@intel.com",
      "date": "2019-10-23T18:40:02Z"
    },
    "committer": {
      "name": "Tankut Baris Aktemur",
      "email": "tankut.baris.aktemur@intel.com",
      "date": "2019-10-23T18:40:02Z"
    },
    "message": "infcall: move assertions in 'call_function_by_hand_dummy' to an earlier spot\n\nThis is a refactoring that performs type assertions on the callee\nfunction at the beginning of 'call_function_by_hand_dummy' rather than\nat a later point so that\n\n- the checks are grouped together at the beginning of the function for\nimproved readability, and\n\n- we don't have to align and push things on the stack only to find out\nlater that the function call is illegal.\n\ngdb/ChangeLog:\n2019-10-23  Tankut Baris Aktemur  <tankut.baris.aktemur@intel.com>\n\n\t* infcall.c (call_function_by_hand_dummy): Refactor.\n\nChange-Id: I411ac083ac6a9ee6eb93c4b82393a81a4fc927be",
    "tree": {
      "sha": "8b4e6c0c6cf10a60082904bd8163b018e33f2717",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/8b4e6c0c6cf10a60082904bd8163b018e33f2717"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/39bcc47c7e94c746d5acdb52f20f9617a6473292",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/39bcc47c7e94c746d5acdb52f20f9617a6473292",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/39bcc47c7e94c746d5acdb52f20f9617a6473292",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/39bcc47c7e94c746d5acdb52f20f9617a6473292/comments",
  "author": {
    "login": "barisaktemur",
    "id": 55686642,
    "node_id": "MDQ6VXNlcjU1Njg2NjQy",
    "avatar_url": "https://avatars.githubusercontent.com/u/55686642?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/barisaktemur",
    "html_url": "https://github.com/barisaktemur",
    "followers_url": "https://api.github.com/users/barisaktemur/followers",
    "following_url": "https://api.github.com/users/barisaktemur/following{/other_user}",
    "gists_url": "https://api.github.com/users/barisaktemur/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/barisaktemur/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/barisaktemur/subscriptions",
    "organizations_url": "https://api.github.com/users/barisaktemur/orgs",
    "repos_url": "https://api.github.com/users/barisaktemur/repos",
    "events_url": "https://api.github.com/users/barisaktemur/events{/privacy}",
    "received_events_url": "https://api.github.com/users/barisaktemur/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "barisaktemur",
    "id": 55686642,
    "node_id": "MDQ6VXNlcjU1Njg2NjQy",
    "avatar_url": "https://avatars.githubusercontent.com/u/55686642?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/barisaktemur",
    "html_url": "https://github.com/barisaktemur",
    "followers_url": "https://api.github.com/users/barisaktemur/followers",
    "following_url": "https://api.github.com/users/barisaktemur/following{/other_user}",
    "gists_url": "https://api.github.com/users/barisaktemur/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/barisaktemur/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/barisaktemur/subscriptions",
    "organizations_url": "https://api.github.com/users/barisaktemur/orgs",
    "repos_url": "https://api.github.com/users/barisaktemur/repos",
    "events_url": "https://api.github.com/users/barisaktemur/events{/privacy}",
    "received_events_url": "https://api.github.com/users/barisaktemur/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "bd888c0fe2cebbcab96d787387e0b32d301e0a2c",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/bd888c0fe2cebbcab96d787387e0b32d301e0a2c",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/bd888c0fe2cebbcab96d787387e0b32d301e0a2c"
    }
  ],
  "stats": {
    "total": 45,
    "additions": 25,
    "deletions": 20
  },
  "files": [
    {
      "sha": "6fafc4466ecfbb5c0861c580a375f2e3ec78ebc1",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/39bcc47c7e94c746d5acdb52f20f9617a6473292/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/39bcc47c7e94c746d5acdb52f20f9617a6473292/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=39bcc47c7e94c746d5acdb52f20f9617a6473292",
      "patch": "@@ -1,3 +1,7 @@\n+2019-10-23  Tankut Baris Aktemur  <tankut.baris.aktemur@intel.com>\n+\n+\t* infcall.c (call_function_by_hand_dummy): Refactor.\n+\n 2019-10-23  Tankut Baris Aktemur  <tankut.baris.aktemur@intel.com>\n \n \t* MAINTAINERS (Write After Approval): Add Tankut Baris Aktemur."
    },
    {
      "sha": "0d8d5b2178e8dcfbf54b9e3e47d2e9858dd85465",
      "filename": "gdb/infcall.c",
      "status": "modified",
      "additions": 21,
      "deletions": 20,
      "changes": 41,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/39bcc47c7e94c746d5acdb52f20f9617a6473292/gdb/infcall.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/39bcc47c7e94c746d5acdb52f20f9617a6473292/gdb/infcall.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/infcall.c?ref=39bcc47c7e94c746d5acdb52f20f9617a6473292",
      "patch": "@@ -746,6 +746,27 @@ call_function_by_hand_dummy (struct value *function,\n   if (!gdbarch_push_dummy_call_p (gdbarch))\n     error (_(\"This target does not support function calls.\"));\n \n+  /* Find the function type and do a sanity check.  */\n+  type *ftype;\n+  type *values_type;\n+  CORE_ADDR funaddr = find_function_addr (function, &values_type, &ftype);\n+\n+  if (values_type == NULL)\n+    values_type = default_return_type;\n+  if (values_type == NULL)\n+    {\n+      const char *name = get_function_name (funaddr,\n+\t\t\t\t\t    name_buf, sizeof (name_buf));\n+      error (_(\"'%s' has unknown return type; \"\n+\t       \"cast the call to its declared return type\"),\n+\t     name);\n+    }\n+\n+  values_type = check_typedef (values_type);\n+\n+  if (args.size () < TYPE_NFIELDS (ftype))\n+    error (_(\"Too few arguments in function call.\"));\n+\n   /* A holder for the inferior status.\n      This is only needed while we're preparing the inferior function call.  */\n   infcall_control_state_up inf_status (save_infcall_control_state ());\n@@ -851,23 +872,6 @@ call_function_by_hand_dummy (struct value *function,\n       }\n   }\n \n-  type *ftype;\n-  type *values_type;\n-  CORE_ADDR funaddr = find_function_addr (function, &values_type, &ftype);\n-\n-  if (values_type == NULL)\n-    values_type = default_return_type;\n-  if (values_type == NULL)\n-    {\n-      const char *name = get_function_name (funaddr,\n-\t\t\t\t\t    name_buf, sizeof (name_buf));\n-      error (_(\"'%s' has unknown return type; \"\n-\t       \"cast the call to its declared return type\"),\n-\t     name);\n-    }\n-\n-  values_type = check_typedef (values_type);\n-\n   /* Are we returning a value using a structure return?  */\n \n   if (gdbarch_return_in_first_hidden_param_p (gdbarch, values_type))\n@@ -945,9 +949,6 @@ call_function_by_hand_dummy (struct value *function,\n       internal_error (__FILE__, __LINE__, _(\"bad switch\"));\n     }\n \n-  if (args.size () < TYPE_NFIELDS (ftype))\n-    error (_(\"Too few arguments in function call.\"));\n-\n   for (int i = args.size () - 1; i >= 0; i--)\n     {\n       int prototyped;"
    }
  ]
}