{
  "sha": "5ad8755225ce901ccd23f1c2995f2f315b0ed8fc",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NWFkODc1NTIyNWNlOTAxY2NkMjNmMWMyOTk1ZjJmMzE1YjBlZDhmYw==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-12-29T23:03:46Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-12-29T23:05:29Z"
    },
    "message": "Re: Revise sleb128 and uleb128 reader\n\nA missing part of git commit cd30bcef4a685.\n\n\t* od-macho.c: Include elfcomm.h.\n\t(dump_dyld_info_rebase, dump_dyld_info_bind): Fix read_leb128 args.\n\t(dump_dyld_info_export_1, dump_segment_split_info): Likewise.",
    "tree": {
      "sha": "4d8101399c79e9d4868333a03c7c47895b14069f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/4d8101399c79e9d4868333a03c7c47895b14069f"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/5ad8755225ce901ccd23f1c2995f2f315b0ed8fc",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5ad8755225ce901ccd23f1c2995f2f315b0ed8fc",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/5ad8755225ce901ccd23f1c2995f2f315b0ed8fc",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5ad8755225ce901ccd23f1c2995f2f315b0ed8fc/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "2c5b6e1a1c406cbe06e2d6f77861764ebd01b9ce",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2c5b6e1a1c406cbe06e2d6f77861764ebd01b9ce",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/2c5b6e1a1c406cbe06e2d6f77861764ebd01b9ce"
    }
  ],
  "stats": {
    "total": 49,
    "additions": 28,
    "deletions": 21
  },
  "files": [
    {
      "sha": "2e6126327158dfb58c325a522163147778fc5d6a",
      "filename": "binutils/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5ad8755225ce901ccd23f1c2995f2f315b0ed8fc/binutils/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5ad8755225ce901ccd23f1c2995f2f315b0ed8fc/binutils/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/ChangeLog?ref=5ad8755225ce901ccd23f1c2995f2f315b0ed8fc",
      "patch": "@@ -1,3 +1,9 @@\n+2019-12-30  Alan Modra  <amodra@gmail.com>\n+\n+\t* od-macho.c: Include elfcomm.h.\n+\t(dump_dyld_info_rebase, dump_dyld_info_bind): Fix read_leb128 args.\n+\t(dump_dyld_info_export_1, dump_segment_split_info): Likewise.\n+\n 2019-12-23  Hans-Peter Nilsson  <hp@axis.com>\n \n \t* dwarf.c (display_debug_lines_decoded): Cast printf parameter to"
    },
    {
      "sha": "1c75c5dbccba41638cd83c7f0046a0396bf5c0f2",
      "filename": "binutils/od-macho.c",
      "status": "modified",
      "additions": 22,
      "deletions": 21,
      "changes": 43,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5ad8755225ce901ccd23f1c2995f2f315b0ed8fc/binutils/od-macho.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5ad8755225ce901ccd23f1c2995f2f315b0ed8fc/binutils/od-macho.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/od-macho.c?ref=5ad8755225ce901ccd23f1c2995f2f315b0ed8fc",
      "patch": "@@ -26,6 +26,7 @@\n #include \"bfd.h\"\n #include \"objdump.h\"\n #include \"bucomm.h\"\n+#include \"elfcomm.h\"\n #include \"dwarf.h\"\n #include \"bfdlink.h\"\n #include \"mach-o.h\"\n@@ -709,13 +710,13 @@ dump_dyld_info_rebase (bfd *abfd, unsigned char *buf, unsigned int len,\n \t\t  bfd_mach_o_get_name (bfd_mach_o_dyld_rebase_type_name, imm));\n \t  break;\n \tcase BFD_MACH_O_REBASE_OPCODE_SET_SEGMENT_AND_OFFSET_ULEB:\n-\t  leb = read_leb128 (buf + i, &leblen, 0, buf + len);\n+\t  leb = read_leb128 (buf + i, buf + len, 0, &leblen, NULL);\n \t  printf (\"set segment: %u and offset: 0x%08x\\n\",\n \t\t  imm, (unsigned) leb);\n \t  i += leblen;\n \t  break;\n \tcase BFD_MACH_O_REBASE_OPCODE_ADD_ADDR_ULEB:\n-\t  leb = read_leb128 (buf + i, &leblen, 0, buf + len);\n+\t  leb = read_leb128 (buf + i, buf + len, 0, &leblen, NULL);\n \t  printf (\"add addr uleb: 0x%08x\\n\", (unsigned) leb);\n \t  i += leblen;\n \t  break;\n@@ -726,20 +727,20 @@ dump_dyld_info_rebase (bfd *abfd, unsigned char *buf, unsigned int len,\n \t  printf (\"rebase imm times: %u\\n\", imm);\n \t  break;\n \tcase BFD_MACH_O_REBASE_OPCODE_DO_REBASE_ULEB_TIMES:\n-\t  leb = read_leb128 (buf + i, &leblen, 0, buf + len);\n+\t  leb = read_leb128 (buf + i, buf + len, 0, &leblen, NULL);\n \t  printf (\"rebase uleb times: %u\\n\", (unsigned) leb);\n \t  i += leblen;\n \t  break;\n \tcase BFD_MACH_O_REBASE_OPCODE_DO_REBASE_ADD_ADDR_ULEB:\n-\t  leb = read_leb128 (buf + i, &leblen, 0, buf + len);\n+\t  leb = read_leb128 (buf + i, buf + len, 0, &leblen, NULL);\n \t  printf (\"rebase add addr uleb: %u\\n\", (unsigned) leb);\n \t  i += leblen;\n \t  break;\n \tcase BFD_MACH_O_REBASE_OPCODE_DO_REBASE_ULEB_TIMES_SKIPPING_ULEB:\n-\t  leb = read_leb128 (buf + i, &leblen, 0, buf + len);\n+\t  leb = read_leb128 (buf + i, buf + len, 0, &leblen, NULL);\n \t  printf (\"rebase uleb times (%u)\", (unsigned) leb);\n \t  i += leblen;\n-\t  leb = read_leb128 (buf + i, &leblen, 0, buf + len);\n+\t  leb = read_leb128 (buf + i, buf + len, 0, &leblen, NULL);\n \t  printf (\" skipping uleb (%u)\\n\", (unsigned) leb);\n \t  i += leblen;\n \t  break;\n@@ -776,7 +777,7 @@ dump_dyld_info_bind (bfd *abfd, unsigned char *buf, unsigned int len,\n \t  printf (\"set dylib ordinal imm: %u\\n\", imm);\n \t  break;\n \tcase BFD_MACH_O_BIND_OPCODE_SET_DYLIB_ORDINAL_ULEB:\n-\t  leb = read_leb128 (buf + i, &leblen, 0, buf + len);\n+\t  leb = read_leb128 (buf + i, buf + len, 0, &leblen, NULL);\n \t  printf (\"set dylib ordinal uleb: %u\\n\", imm);\n \t  i += leblen;\n \t  break;\n@@ -799,38 +800,38 @@ dump_dyld_info_bind (bfd *abfd, unsigned char *buf, unsigned int len,\n \tcase BFD_MACH_O_BIND_OPCODE_SET_ADDEND_SLEB:\n \t  {\n \t    bfd_signed_vma svma;\n-\t    svma = read_leb128 (buf + i, &leblen, 0, buf + len);\n+\t    svma = read_leb128 (buf + i, buf + len, 0, &leblen, NULL);\n \t    printf (\"set addend sleb: 0x%08x\\n\", (unsigned) svma);\n \t    i += leblen;\n \t  }\n \t  break;\n \tcase BFD_MACH_O_BIND_OPCODE_SET_SEGMENT_AND_OFFSET_ULEB:\n-\t  leb = read_leb128 (buf + i, &leblen, 0, buf + len);\n+\t  leb = read_leb128 (buf + i, buf + len, 0, &leblen, NULL);\n \t  printf (\"set segment: %u and offset: 0x%08x\\n\",\n \t\t  imm, (unsigned) leb);\n \t  i += leblen;\n \t  break;\n \tcase BFD_MACH_O_BIND_OPCODE_ADD_ADDR_ULEB:\n-\t  leb = read_leb128 (buf + i, &leblen, 0, buf + len);\n+\t  leb = read_leb128 (buf + i, buf + len, 0, &leblen, NULL);\n \t  printf (\"add addr uleb: 0x%08x\\n\", (unsigned) leb);\n \t  i += leblen;\n \t  break;\n \tcase BFD_MACH_O_BIND_OPCODE_DO_BIND:\n \t  printf (\"do bind\\n\");\n \t  break;\n \tcase BFD_MACH_O_BIND_OPCODE_DO_BIND_ADD_ADDR_ULEB:\n-\t  leb = read_leb128 (buf + i, &leblen, 0, buf + len);\n+\t  leb = read_leb128 (buf + i, buf + len, 0, &leblen, NULL);\n \t  printf (\"do bind add addr uleb: 0x%08x\\n\", (unsigned) leb);\n \t  i += leblen;\n \t  break;\n \tcase BFD_MACH_O_BIND_OPCODE_DO_BIND_ADD_ADDR_IMM_SCALED:\n \t  printf (\"do bind add addr imm scaled: %u\\n\", imm * ptrsize);\n \t  break;\n \tcase BFD_MACH_O_BIND_OPCODE_DO_BIND_ULEB_TIMES_SKIPPING_ULEB:\n-\t  leb = read_leb128 (buf + i, &leblen, 0, buf + len);\n+\t  leb = read_leb128 (buf + i, buf + len, 0, &leblen, NULL);\n \t  printf (\"do bind uleb times (%u)\", (unsigned) leb);\n \t  i += leblen;\n-\t  leb = read_leb128 (buf + i, &leblen, 0, buf + len);\n+\t  leb = read_leb128 (buf + i, buf + len, 0, &leblen, NULL);\n \t  printf (\" skipping uleb (%u)\\n\", (unsigned) leb);\n \t  i += leblen;\n \t  break;\n@@ -858,15 +859,15 @@ dump_dyld_info_export_1 (bfd *abfd, unsigned char *buf, unsigned int len,\n   unsigned int child_count;\n   unsigned int i;\n \n-  size = read_leb128 (buf + off, &leblen, 0, buf + len);\n+  size = read_leb128 (buf + off, buf + len, 0, &leblen, NULL);\n   off += leblen;\n \n   if (size != 0)\n     {\n       bfd_vma flags;\n       struct export_info_data *d;\n \n-      flags = read_leb128 (buf + off, &leblen, 0, buf + len);\n+      flags = read_leb128 (buf + off, buf + len, 0, &leblen, NULL);\n       off += leblen;\n \n       fputs (\"   \", stdout);\n@@ -889,7 +890,7 @@ dump_dyld_info_export_1 (bfd *abfd, unsigned char *buf, unsigned int len,\n \t{\n \t  bfd_vma lib;\n \n-\t  lib = read_leb128 (buf + off, &leblen, 0, buf + len);\n+\t  lib = read_leb128 (buf + off, buf + len, 0, &leblen, NULL);\n \t  off += leblen;\n \n \t  fputs (\" [reexport] \", stdout);\n@@ -911,12 +912,12 @@ dump_dyld_info_export_1 (bfd *abfd, unsigned char *buf, unsigned int len,\n \t  bfd_vma offset;\n \t  bfd_vma resolv = 0;\n \n-\t  offset = read_leb128 (buf + off, &leblen, 0, buf + len);\n+\t  offset = read_leb128 (buf + off, buf + len, 0, &leblen, NULL);\n \t  off += leblen;\n \n \t  if (flags & BFD_MACH_O_EXPORT_SYMBOL_FLAGS_STUB_AND_RESOLVER)\n \t    {\n-\t      resolv = read_leb128 (buf + off, &leblen, 0, buf + len);\n+\t      resolv = read_leb128 (buf + off, buf + len, 0, &leblen, NULL);\n \t      off += leblen;\n \t    }\n \n@@ -929,7 +930,7 @@ dump_dyld_info_export_1 (bfd *abfd, unsigned char *buf, unsigned int len,\n \t}\n     }\n \n-  child_count = read_leb128 (buf + off, &leblen, 0, buf + len);\n+  child_count = read_leb128 (buf + off, buf + len, 0, &leblen, NULL);\n   off += leblen;\n \n   for (i = 0; i < child_count; i++)\n@@ -943,7 +944,7 @@ dump_dyld_info_export_1 (bfd *abfd, unsigned char *buf, unsigned int len,\n \n       off += strlen ((const char *)buf + off) + 1;\n \n-      sub_off = read_leb128 (buf + off, &leblen, 0, buf + len);\n+      sub_off = read_leb128 (buf + off, buf + len, 0, &leblen, NULL);\n       off += leblen;\n \n       dump_dyld_info_export_1 (abfd, buf, len, sub_off, &sub_data, base);\n@@ -1311,7 +1312,7 @@ dump_segment_split_info (bfd *abfd, bfd_mach_o_linkedit_command *cmd)\n     }\n   for (p = buf + 1; *p != 0; p += len)\n     {\n-      addr += read_leb128 (p, &len, 0, buf + cmd->datasize);\n+      addr += read_leb128 (p, buf + cmd->datasize, 0, &len, NULL);\n       fputs (\"    \", stdout);\n       bfd_printf_vma (abfd, addr);\n       putchar ('\\n');"
    }
  ]
}