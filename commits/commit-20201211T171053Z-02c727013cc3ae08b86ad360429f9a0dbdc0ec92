{
  "sha": "02c727013cc3ae08b86ad360429f9a0dbdc0ec92",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MDJjNzI3MDEzY2MzYWUwOGI4NmFkMzYwNDI5ZjlhMGRiZGMwZWM5Mg==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-12-11T16:59:15Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-12-11T17:10:53Z"
    },
    "message": "Avoid side effects in expression lexers\n\nI noticed that some of the lexers were calling write_dollar_variable\nfrom the lexer.  This seems like a bad practice, so this patch moves\nthe side effects into the parsers.\n\nI tested this by re-running gdb.fortran and gdb.modula2; the Pascal\ncompiler on my machine seems not to work, so I couldn't test\ngdb.pascal.\n\nI note that the type-tracking in the Pascal is also incorrect, in that\na convenience variable's type may change between parsing and\nevaluation (or even during the course of evaluation).\n\ngdb/ChangeLog\n2020-12-11  Tom Tromey  <tom@tromey.com>\n\n\t* p-exp.y (intvar): Remove global.\n\t(DOLLAR_VARIABLE): Change type.\n\t(start): Update.\n\t(exp): Call write_dollar_variable here...\n\t(yylex): ... not here.\n\t* m2-exp.y (DOLLAR_VARIABLE): Change type.\n\t(variable): Call write_dollar_variable here...\n\t(yylex): ... not here.\n\t* f-exp.y (DOLLAR_VARIABLE): Change type.\n\t(exp): Call write_dollar_variable here...\n\t(yylex): ... not here.",
    "tree": {
      "sha": "a2ab1ef9c1f3d7c441e615f01fd671c135742827",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/a2ab1ef9c1f3d7c441e615f01fd671c135742827"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/02c727013cc3ae08b86ad360429f9a0dbdc0ec92",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/02c727013cc3ae08b86ad360429f9a0dbdc0ec92",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/02c727013cc3ae08b86ad360429f9a0dbdc0ec92",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/02c727013cc3ae08b86ad360429f9a0dbdc0ec92/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "14a772212b8e8e19b45a23e2dacb61ceff0d4979",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/14a772212b8e8e19b45a23e2dacb61ceff0d4979",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/14a772212b8e8e19b45a23e2dacb61ceff0d4979"
    }
  ],
  "stats": {
    "total": 80,
    "additions": 44,
    "deletions": 36
  },
  "files": [
    {
      "sha": "992da3db30223a1f3a17283326c6d57ea21539fb",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 14,
      "deletions": 0,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/02c727013cc3ae08b86ad360429f9a0dbdc0ec92/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/02c727013cc3ae08b86ad360429f9a0dbdc0ec92/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=02c727013cc3ae08b86ad360429f9a0dbdc0ec92",
      "patch": "@@ -1,3 +1,17 @@\n+2020-12-11  Tom Tromey  <tom@tromey.com>\n+\n+\t* p-exp.y (intvar): Remove global.\n+\t(DOLLAR_VARIABLE): Change type.\n+\t(start): Update.\n+\t(exp): Call write_dollar_variable here...\n+\t(yylex): ... not here.\n+\t* m2-exp.y (DOLLAR_VARIABLE): Change type.\n+\t(variable): Call write_dollar_variable here...\n+\t(yylex): ... not here.\n+\t* f-exp.y (DOLLAR_VARIABLE): Change type.\n+\t(exp): Call write_dollar_variable here...\n+\t(yylex): ... not here.\n+\n 2020-12-11  Tom Tromey  <tom@tromey.com>\n \n \t* varobj.c (varobj_create): Update."
    },
    {
      "sha": "ea32056f6dba22657c7a00bf74a7ec09239f64b4",
      "filename": "gdb/f-exp.y",
      "status": "modified",
      "additions": 4,
      "deletions": 6,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/02c727013cc3ae08b86ad360429f9a0dbdc0ec92/gdb/f-exp.y",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/02c727013cc3ae08b86ad360429f9a0dbdc0ec92/gdb/f-exp.y",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/f-exp.y?ref=02c727013cc3ae08b86ad360429f9a0dbdc0ec92",
      "patch": "@@ -174,7 +174,7 @@ static int parse_number (struct parser_state *, const char *, int,\n %token SINGLE DOUBLE PRECISION\n %token <lval> CHARACTER \n \n-%token <voidval> DOLLAR_VARIABLE\n+%token <sval> DOLLAR_VARIABLE\n \n %token <opcode> ASSIGN_MODIFY\n %token <opcode> UNOP_INTRINSIC BINOP_INTRINSIC\n@@ -509,6 +509,7 @@ exp\t:\tvariable\n \t;\n \n exp\t:\tDOLLAR_VARIABLE\n+\t\t\t{ write_dollar_variable (pstate, $1); }\n \t;\n \n exp\t:\tSIZEOF '(' type ')'\t%prec UNARY\n@@ -1357,11 +1358,8 @@ yylex (void)\n   yylval.sval.length = namelen;\n   \n   if (*tokstart == '$')\n-    {\n-      write_dollar_variable (pstate, yylval.sval);\n-      return DOLLAR_VARIABLE;\n-    }\n-  \n+    return DOLLAR_VARIABLE;\n+\n   /* Use token-type TYPENAME for symbols that happen to be defined\n      currently as names of types; NAME for other symbols.\n      The caller is not constrained to care about the distinction.  */"
    },
    {
      "sha": "d4f3c2c1e455e7347533d309dbf64c61f1e95183",
      "filename": "gdb/m2-exp.y",
      "status": "modified",
      "additions": 3,
      "deletions": 5,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/02c727013cc3ae08b86ad360429f9a0dbdc0ec92/gdb/m2-exp.y",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/02c727013cc3ae08b86ad360429f9a0dbdc0ec92/gdb/m2-exp.y",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/m2-exp.y?ref=02c727013cc3ae08b86ad360429f9a0dbdc0ec92",
      "patch": "@@ -125,7 +125,7 @@ static int number_sign = 1;\n /* The GDB scope operator */\n %token COLONCOLON\n \n-%token <voidval> DOLLAR_VARIABLE\n+%token <sval> DOLLAR_VARIABLE\n \n /* M2 tokens */\n %left ','\n@@ -535,6 +535,7 @@ variable:\tfblock\n \n /* GDB internal ($foo) variable */\n variable:\tDOLLAR_VARIABLE\n+\t\t\t{ write_dollar_variable (pstate, $1); }\n \t;\n \n /* GDB scope operator */\n@@ -952,10 +953,7 @@ yylex (void)\n   yylval.sval.length = namelen;\n \n   if (*tokstart == '$')\n-    {\n-      write_dollar_variable (pstate, yylval.sval);\n-      return DOLLAR_VARIABLE;\n-    }\n+    return DOLLAR_VARIABLE;\n \n   /* Use token-type BLOCKNAME for symbols that happen to be defined as\n      functions.  If this is not so, then ..."
    },
    {
      "sha": "618557c472aa47e01248eb7659da517468cdf551",
      "filename": "gdb/p-exp.y",
      "status": "modified",
      "additions": 23,
      "deletions": 25,
      "changes": 48,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/02c727013cc3ae08b86ad360429f9a0dbdc0ec92/gdb/p-exp.y",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/02c727013cc3ae08b86ad360429f9a0dbdc0ec92/gdb/p-exp.y",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/p-exp.y?ref=02c727013cc3ae08b86ad360429f9a0dbdc0ec92",
      "patch": "@@ -115,7 +115,6 @@ static int parse_number (struct parser_state *,\n \t\t\t const char *, int, int, YYSTYPE *);\n \n static struct type *current_type;\n-static struct internalvar *intvar;\n static int leftdiv_is_integer;\n static void push_current_type (void);\n static void pop_current_type (void);\n@@ -161,7 +160,7 @@ static int search_field;\n /* Special type cases, put in to allow the parser to distinguish different\n    legal basetypes.  */\n \n-%token <voidval> DOLLAR_VARIABLE\n+%token <sval> DOLLAR_VARIABLE\n \n \n /* Object pascal */\n@@ -192,7 +191,6 @@ static int search_field;\n %%\n \n start   :\t{ current_type = NULL;\n-\t\t  intvar = NULL;\n \t\t  search_field = 0;\n \t\t  leftdiv_is_integer = 0;\n \t\t}\n@@ -526,17 +524,28 @@ exp\t:\tvariable\n \t;\n \n exp\t:\tDOLLAR_VARIABLE\n-\t\t\t/* Already written by write_dollar_variable.\n-\t\t\t   Handle current_type.  */\n- \t\t\t{  if (intvar) {\n- \t\t\t     struct value * val, * mark;\n-\n-\t\t\t     mark = value_mark ();\n- \t\t\t     val = value_of_internalvar (pstate->gdbarch (),\n- \t\t\t\t\t\t\t intvar);\n- \t\t\t     current_type = value_type (val);\n-\t\t\t     value_release_to_mark (mark);\n- \t\t\t   }\n+\t\t\t{\n+\t\t\t  write_dollar_variable (pstate, $1);\n+\n+\t\t\t  /* $ is the normal prefix for pascal\n+\t\t\t     hexadecimal values but this conflicts\n+\t\t\t     with the GDB use for debugger variables\n+\t\t\t     so in expression to enter hexadecimal\n+\t\t\t     values we still need to use C syntax with\n+\t\t\t     0xff */\n+\t\t\t  std::string tmp ($1.ptr, $1.length);\n+\t\t\t  /* Handle current_type.  */\n+\t\t\t  struct internalvar *intvar\n+\t\t\t    = lookup_only_internalvar (tmp.c_str () + 1);\n+\t\t\t  if (intvar != nullptr)\n+\t\t\t    {\n+\t\t\t      scoped_value_mark mark;\n+\n+\t\t\t      value *val\n+\t\t\t\t= value_of_internalvar (pstate->gdbarch (),\n+\t\t\t\t\t\t\tintvar);\n+\t\t\t      current_type = value_type (val);\n+\t\t\t    }\n  \t\t\t}\n  \t;\n \n@@ -1494,17 +1503,6 @@ yylex (void)\n \n   if (*tokstart == '$')\n     {\n-      char *tmp;\n-\n-      /* $ is the normal prefix for pascal hexadecimal values\n-\tbut this conflicts with the GDB use for debugger variables\n-\tso in expression to enter hexadecimal values\n-\twe still need to use C syntax with 0xff  */\n-      write_dollar_variable (pstate, yylval.sval);\n-      tmp = (char *) alloca (namelen + 1);\n-      memcpy (tmp, tokstart, namelen);\n-      tmp[namelen] = '\\0';\n-      intvar = lookup_only_internalvar (tmp + 1);\n       free (uptokstart);\n       return DOLLAR_VARIABLE;\n     }"
    }
  ]
}