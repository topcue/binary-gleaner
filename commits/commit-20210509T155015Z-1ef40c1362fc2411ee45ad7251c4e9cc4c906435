{
  "sha": "1ef40c1362fc2411ee45ad7251c4e9cc4c906435",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MWVmNDBjMTM2MmZjMjQxMWVlNDVhZDcyNTFjNGU5Y2M0YzkwNjQzNQ==",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2021-05-08T15:28:41Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2021-05-09T15:50:15Z"
    },
    "message": "gdb/py: convert debug logging in py-unwind to use new scheme\n\nConverts the debug print out in python/py-unwind.c to use the new\ndebug printing scheme.  I have also modified what is printed in a few\nplaces, for example, rather than printing frame pointers, I now print\nthe frame level, this matches what we do in the general 'set debug\nframe' tracing, and is usually more helpful (I think).\n\nI also added a couple of ENTER/EXIT scope printers.\n\ngdb/ChangeLog:\n\n\t* python/py-unwind.c (pyuw_debug): Convert to bool.\n\t(show_pyuw_debug): New function.\n\t(pyuw_debug_printf): Define.\n\t(PYUW_SCOPED_DEBUG_ENTER_EXIT): Define.\n\t(pyuw_this_id): Convert to new debug print macros.\n\t(pyuw_prev_register): Likewise.\n\t(pyuw_sniffer): Likewise.\n\t(pyuw_dealloc_cache): Likewise.\n\t(_initialize_py_unwind): Update now pyuw_debug is a bool, and add\n\tshow function when registering.",
    "tree": {
      "sha": "b97de7cac4f4e58272101a92897538188c7066d6",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/b97de7cac4f4e58272101a92897538188c7066d6"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/1ef40c1362fc2411ee45ad7251c4e9cc4c906435",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1ef40c1362fc2411ee45ad7251c4e9cc4c906435",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/1ef40c1362fc2411ee45ad7251c4e9cc4c906435",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1ef40c1362fc2411ee45ad7251c4e9cc4c906435/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "927c4e355e307698d58e6cad17f866bf5515f16e",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/927c4e355e307698d58e6cad17f866bf5515f16e",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/927c4e355e307698d58e6cad17f866bf5515f16e"
    }
  ],
  "stats": {
    "total": 67,
    "additions": 51,
    "deletions": 16
  },
  "files": [
    {
      "sha": "db21675e8e2d2cfc96bc49a2e96d9270e30ef260",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 13,
      "deletions": 0,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1ef40c1362fc2411ee45ad7251c4e9cc4c906435/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1ef40c1362fc2411ee45ad7251c4e9cc4c906435/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=1ef40c1362fc2411ee45ad7251c4e9cc4c906435",
      "patch": "@@ -1,3 +1,16 @@\n+2021-05-09  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* python/py-unwind.c (pyuw_debug): Convert to bool.\n+\t(show_pyuw_debug): New function.\n+\t(pyuw_debug_printf): Define.\n+\t(PYUW_SCOPED_DEBUG_ENTER_EXIT): Define.\n+\t(pyuw_this_id): Convert to new debug print macros.\n+\t(pyuw_prev_register): Likewise.\n+\t(pyuw_sniffer): Likewise.\n+\t(pyuw_dealloc_cache): Likewise.\n+\t(_initialize_py_unwind): Update now pyuw_debug is a bool, and add\n+\tshow function when registering.\n+\n 2021-05-09  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* dummy-frame.c (fprint_dummy_frames): Convert use of"
    },
    {
      "sha": "7c195eb539daec7ba89bcea59e0fe1e8f0113853",
      "filename": "gdb/python/py-unwind.c",
      "status": "modified",
      "additions": 38,
      "deletions": 16,
      "changes": 54,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1ef40c1362fc2411ee45ad7251c4e9cc4c906435/gdb/python/py-unwind.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1ef40c1362fc2411ee45ad7251c4e9cc4c906435/gdb/python/py-unwind.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-unwind.c?ref=1ef40c1362fc2411ee45ad7251c4e9cc4c906435",
      "patch": "@@ -28,8 +28,28 @@\n #include \"regcache.h\"\n #include \"valprint.h\"\n \n-#define TRACE_PY_UNWIND(level, args...) if (pyuw_debug >= level)  \\\n-  { fprintf_unfiltered (gdb_stdlog, args); }\n+/* Debugging of Python unwinders.  */\n+\n+static bool pyuw_debug;\n+\n+/* Implementation of \"show debug py-unwind\".  */\n+\n+static void\n+show_pyuw_debug (struct ui_file *file, int from_tty,\n+\t\t struct cmd_list_element *c, const char *value)\n+{\n+  fprintf_filtered (file, _(\"Python unwinder debugging is %s.\\n\"), value);\n+}\n+\n+/* Print a \"py-unwind\" debug statement.  */\n+\n+#define pyuw_debug_printf(fmt, ...) \\\n+  debug_prefixed_printf_cond (pyuw_debug, \"py-unwind\", fmt, ##__VA_ARGS__)\n+\n+/* Print \"py-unwind\" enter/exit debug statements.  */\n+\n+#define PYUW_SCOPED_DEBUG_ENTER_EXIT \\\n+  scoped_debug_enter_exit (pyuw_debug, \"py-unwind\")\n \n struct pending_frame_object\n {\n@@ -96,8 +116,6 @@ extern PyTypeObject pending_frame_object_type\n extern PyTypeObject unwind_info_object_type\n     CPYCHECKER_TYPE_OBJECT_FOR_TYPEDEF (\"unwind_info_object\");\n \n-static unsigned int pyuw_debug = 0;\n-\n static struct gdbarch_data *pyuw_gdbarch_data;\n \n /* Convert gdb.Value instance to inferior's pointer.  Return 1 on success,\n@@ -431,9 +449,7 @@ pyuw_this_id (struct frame_info *this_frame, void **cache_ptr,\n \t      struct frame_id *this_id)\n {\n   *this_id = ((cached_frame_info *) *cache_ptr)->frame_id;\n-  if (pyuw_debug >= 1)\n-    fprintf_unfiltered (gdb_stdlog, \"%s: frame_id: %s\\n\", __FUNCTION__,\n-\t\t\tthis_id->to_string ().c_str ());\n+  pyuw_debug_printf (\"frame_id: %s\", this_id->to_string ().c_str ());\n }\n \n /* frame_unwind.prev_register.  */\n@@ -442,12 +458,14 @@ static struct value *\n pyuw_prev_register (struct frame_info *this_frame, void **cache_ptr,\n \t\t    int regnum)\n {\n+  PYUW_SCOPED_DEBUG_ENTER_EXIT;\n+\n   cached_frame_info *cached_frame = (cached_frame_info *) *cache_ptr;\n   cached_reg_t *reg_info = cached_frame->reg;\n   cached_reg_t *reg_info_end = reg_info + cached_frame->reg_count;\n \n-  TRACE_PY_UNWIND (1, \"%s (frame=%p,...,reg=%d)\\n\", __FUNCTION__, this_frame,\n-\t\t   regnum);\n+  pyuw_debug_printf (\"frame=%d, reg=%d\",\n+\t\t     frame_relative_level (this_frame), regnum);\n   for (; reg_info < reg_info_end; ++reg_info)\n     {\n       if (regnum == reg_info->num)\n@@ -463,14 +481,17 @@ static int\n pyuw_sniffer (const struct frame_unwind *self, struct frame_info *this_frame,\n \t      void **cache_ptr)\n {\n+  PYUW_SCOPED_DEBUG_ENTER_EXIT;\n+\n   struct gdbarch *gdbarch = (struct gdbarch *) (self->unwind_data);\n   cached_frame_info *cached_frame;\n \n   gdbpy_enter enter_py (gdbarch, current_language);\n \n-  TRACE_PY_UNWIND (3, \"%s (SP=%s, PC=%s)\\n\", __FUNCTION__,\n-\t\t   paddress (gdbarch, get_frame_sp (this_frame)),\n-\t\t   paddress (gdbarch, get_frame_pc (this_frame)));\n+  pyuw_debug_printf (\"frame=%d, sp=%s, pc=%s\",\n+\t\t     frame_relative_level (this_frame),\n+\t\t     paddress (gdbarch, get_frame_sp (this_frame)),\n+\t\t     paddress (gdbarch, get_frame_pc (this_frame)));\n \n   /* Create PendingFrame instance to pass to sniffers.  */\n   pending_frame_object *pfo = PyObject_New (pending_frame_object,\n@@ -554,6 +575,7 @@ pyuw_sniffer (const struct frame_unwind *self, struct frame_info *this_frame,\n   }\n \n   *cache_ptr = cached_frame;\n+  pyuw_debug_printf (\"frame claimed\");\n   return 1;\n }\n \n@@ -562,7 +584,7 @@ pyuw_sniffer (const struct frame_unwind *self, struct frame_info *this_frame,\n static void\n pyuw_dealloc_cache (struct frame_info *this_frame, void *cache)\n {\n-  TRACE_PY_UNWIND (3, \"%s: enter\", __FUNCTION__);\n+  PYUW_SCOPED_DEBUG_ENTER_EXIT;\n   cached_frame_info *cached_frame = (cached_frame_info *) cache;\n \n   for (int i = 0; i < cached_frame->reg_count; i++)\n@@ -614,13 +636,13 @@ void _initialize_py_unwind ();\n void\n _initialize_py_unwind ()\n {\n-  add_setshow_zuinteger_cmd\n+  add_setshow_boolean_cmd\n       (\"py-unwind\", class_maintenance, &pyuw_debug,\n \t_(\"Set Python unwinder debugging.\"),\n \t_(\"Show Python unwinder debugging.\"),\n-\t_(\"When non-zero, Python unwinder debugging is enabled.\"),\n-\tNULL,\n+\t_(\"When on, Python unwinder debugging is enabled.\"),\n \tNULL,\n+\tshow_pyuw_debug,\n \t&setdebuglist, &showdebuglist);\n   pyuw_gdbarch_data\n     = gdbarch_data_register_post_init (pyuw_gdbarch_data_init);"
    }
  ]
}