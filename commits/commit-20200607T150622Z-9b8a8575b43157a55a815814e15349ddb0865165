{
  "sha": "9b8a8575b43157a55a815814e15349ddb0865165",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OWI4YTg1NzViNDMxNTdhNTVhODE1ODE0ZTE1MzQ5ZGRiMDg2NTE2NQ==",
  "commit": {
    "author": {
      "name": "H.J. Lu",
      "email": "hjl.tools@gmail.com",
      "date": "2020-06-07T15:06:22Z"
    },
    "committer": {
      "name": "H.J. Lu",
      "email": "hjl.tools@gmail.com",
      "date": "2020-06-07T15:06:22Z"
    },
    "message": "elf64-hppa: Replace plt_sec/plt_rel_sec with root.splt/root.srelplt\n\nelf64-hppa should use root.splt and root.srelplt instead of plt_sec and\nplt_rel_sec so that elflink.c can see splt and srelplt.  This fixed:\n\nFAIL: ld-elf/pr19539\n\n\t* elf64-hppa.c (elf64_hppa_link_hash_table): Remove plt_sec and\n\tplt_rel_sec.\n\t(elf64_hppa_check_relocs): Replace plt_sec/plt_rel_sec with\n\troot.splt/root.srelplt.\n\t(elf64_hppa_create_dynamic_sections): Likewise.\n\t(elf64_hppa_size_dynamic_sections): Likewise.\n\t(elf64_hppa_finish_dynamic_symbol): Likewise.\n\t(elf_hppa_final_link): Likewise.\n\t(elf_hppa_final_link_relocate): Likewise.",
    "tree": {
      "sha": "aa007006d80d982db2a577d5de22acfc617b7a70",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/aa007006d80d982db2a577d5de22acfc617b7a70"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/9b8a8575b43157a55a815814e15349ddb0865165",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9b8a8575b43157a55a815814e15349ddb0865165",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/9b8a8575b43157a55a815814e15349ddb0865165",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9b8a8575b43157a55a815814e15349ddb0865165/comments",
  "author": {
    "login": "hjl-tools",
    "id": 1072356,
    "node_id": "MDQ6VXNlcjEwNzIzNTY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/hjl-tools",
    "html_url": "https://github.com/hjl-tools",
    "followers_url": "https://api.github.com/users/hjl-tools/followers",
    "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}",
    "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions",
    "organizations_url": "https://api.github.com/users/hjl-tools/orgs",
    "repos_url": "https://api.github.com/users/hjl-tools/repos",
    "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}",
    "received_events_url": "https://api.github.com/users/hjl-tools/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "hjl-tools",
    "id": 1072356,
    "node_id": "MDQ6VXNlcjEwNzIzNTY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/hjl-tools",
    "html_url": "https://github.com/hjl-tools",
    "followers_url": "https://api.github.com/users/hjl-tools/followers",
    "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}",
    "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions",
    "organizations_url": "https://api.github.com/users/hjl-tools/orgs",
    "repos_url": "https://api.github.com/users/hjl-tools/repos",
    "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}",
    "received_events_url": "https://api.github.com/users/hjl-tools/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "82836c928ffc6aaa9e594ba69af5f446bdc95bf4",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/82836c928ffc6aaa9e594ba69af5f446bdc95bf4",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/82836c928ffc6aaa9e594ba69af5f446bdc95bf4"
    }
  ],
  "stats": {
    "total": 50,
    "additions": 30,
    "deletions": 20
  },
  "files": [
    {
      "sha": "0506a2971dbc62bc02adf75f361c375e469e3867",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9b8a8575b43157a55a815814e15349ddb0865165/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9b8a8575b43157a55a815814e15349ddb0865165/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=9b8a8575b43157a55a815814e15349ddb0865165",
      "patch": "@@ -1,3 +1,15 @@\n+2020-06-07  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\t* elf64-hppa.c (elf64_hppa_link_hash_table): Remove plt_sec and\n+\tplt_rel_sec.\n+\t(elf64_hppa_check_relocs): Replace plt_sec/plt_rel_sec with\n+\troot.splt/root.srelplt.\n+\t(elf64_hppa_create_dynamic_sections): Likewise.\n+\t(elf64_hppa_size_dynamic_sections): Likewise.\n+\t(elf64_hppa_finish_dynamic_symbol): Likewise.\n+\t(elf_hppa_final_link): Likewise.\n+\t(elf_hppa_final_link_relocate): Likewise.\n+\n 2020-06-06  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* elfxx-sparc.c (_bfd_sparc_elf_size_dynamic_sections): Updated."
    },
    {
      "sha": "1088bcc21f05c3e9c49275ff7ce06b4ee5e94535",
      "filename": "bfd/elf64-hppa.c",
      "status": "modified",
      "additions": 18,
      "deletions": 20,
      "changes": 38,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9b8a8575b43157a55a815814e15349ddb0865165/bfd/elf64-hppa.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9b8a8575b43157a55a815814e15349ddb0865165/bfd/elf64-hppa.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf64-hppa.c?ref=9b8a8575b43157a55a815814e15349ddb0865165",
      "patch": "@@ -117,8 +117,6 @@ struct elf64_hppa_link_hash_table\n   /* Shortcuts to get to the various linker defined sections.  */\n   asection *dlt_sec;\n   asection *dlt_rel_sec;\n-  asection *plt_sec;\n-  asection *plt_rel_sec;\n   asection *opd_sec;\n   asection *opd_rel_sec;\n   asection *other_rel_sec;\n@@ -802,7 +800,7 @@ elf64_hppa_check_relocs (bfd *abfd,\n \n       if (need_entry & NEED_PLT)\n \t{\n-\t  if (! hppa_info->plt_sec\n+\t  if (! hppa_info->root.splt\n \t      && ! get_plt (abfd, info, hppa_info))\n \t    goto err_out;\n \n@@ -1181,7 +1179,7 @@ get_plt (bfd *abfd,\n   asection *plt;\n   bfd *dynobj;\n \n-  plt = hppa_info->plt_sec;\n+  plt = hppa_info->root.splt;\n   if (!plt)\n     {\n       dynobj = hppa_info->root.dynobj;\n@@ -1201,7 +1199,7 @@ get_plt (bfd *abfd,\n \t  return FALSE;\n \t}\n \n-      hppa_info->plt_sec = plt;\n+      hppa_info->root.splt = plt;\n     }\n \n   return TRUE;\n@@ -1360,7 +1358,7 @@ elf64_hppa_create_dynamic_sections (bfd *abfd,\n   if (s == NULL\n       || !bfd_set_section_alignment (s, 3))\n     return FALSE;\n-  hppa_info->plt_rel_sec = s;\n+  hppa_info->root.srelplt = s;\n \n   s = bfd_make_section_anyway_with_flags (abfd, \".rela.data\",\n \t\t\t\t\t  (SEC_ALLOC | SEC_LOAD\n@@ -1454,7 +1452,7 @@ allocate_dynrel_entries (struct elf_link_hash_entry *eh, void *data)\n       else if (shared)\n \tt = 2 * sizeof (Elf64_External_Rela);\n \n-      hppa_info->plt_rel_sec->size += t;\n+      hppa_info->root.srelplt->size += t;\n     }\n \n   return TRUE;\n@@ -1653,8 +1651,8 @@ elf64_hppa_size_dynamic_sections (bfd *output_bfd, struct bfd_link_info *info)\n \t}\n       else\n \t{\n-\t  sec = hppa_info->plt_sec;\n-\t  srel = hppa_info->plt_rel_sec;\n+\t  sec = hppa_info->root.splt;\n+\t  srel = hppa_info->root.srelplt;\n \t  for (; local_plt < end_local_plt; ++local_plt)\n \t    {\n \t      if (*local_plt > 0)\n@@ -1707,12 +1705,12 @@ elf64_hppa_size_dynamic_sections (bfd *output_bfd, struct bfd_link_info *info)\n       hppa_info->dlt_sec->size = data.ofs;\n     }\n \n-  if (hppa_info->plt_sec)\n+  if (hppa_info->root.splt)\n     {\n-      data.ofs = hppa_info->plt_sec->size;\n+      data.ofs = hppa_info->root.splt->size;\n       elf_link_hash_traverse (&hppa_info->root,\n \t\t\t      allocate_global_data_plt, &data);\n-      hppa_info->plt_sec->size = data.ofs;\n+      hppa_info->root.splt->size = data.ofs;\n     }\n \n   if (hppa_info->stub_sec)\n@@ -1950,9 +1948,9 @@ elf64_hppa_finish_dynamic_symbol (bfd *output_bfd,\n     return FALSE;\n \n   stub = hppa_info->stub_sec;\n-  splt = hppa_info->plt_sec;\n+  splt = hppa_info->root.splt;\n   sopd = hppa_info->opd_sec;\n-  spltrel = hppa_info->plt_rel_sec;\n+  spltrel = hppa_info->root.srelplt;\n \n   /* Incredible.  It is actually necessary to NOT use the symbol's real\n      value when building the dynamic symbol table for a shared library.\n@@ -2532,13 +2530,13 @@ elf64_hppa_finish_dynamic_sections (bfd *output_bfd,\n \t      break;\n \n \t    case DT_JMPREL:\n-\t      s = hppa_info->plt_rel_sec;\n+\t      s = hppa_info->root.srelplt;\n \t      dyn.d_un.d_ptr = s->output_section->vma + s->output_offset;\n \t      bfd_elf64_swap_dyn_out (output_bfd, &dyn, dyncon);\n \t      break;\n \n \t    case DT_PLTRELSZ:\n-\t      s = hppa_info->plt_rel_sec;\n+\t      s = hppa_info->root.srelplt;\n \t      dyn.d_un.d_val = s->size;\n \t      bfd_elf64_swap_dyn_out (output_bfd, &dyn, dyncon);\n \t      break;\n@@ -2563,7 +2561,7 @@ elf64_hppa_finish_dynamic_sections (bfd *output_bfd,\n \t      /* There is some question about whether or not the size of\n \t\t the PLT relocs should be included here.  HP's tools do\n \t\t it, so we'll emulate them.  */\n-\t      s = hppa_info->plt_rel_sec;\n+\t      s = hppa_info->root.srelplt;\n \t      dyn.d_un.d_val += s->size;\n \t      bfd_elf64_swap_dyn_out (output_bfd, &dyn, dyncon);\n \t      break;\n@@ -2981,7 +2979,7 @@ elf_hppa_final_link (bfd *abfd, struct bfd_link_info *info)\n \t     that order) and set __gp to the base address of whichever\n \t     section is found first.  */\n \n-\t  sec = hppa_info->plt_sec;\n+\t  sec = hppa_info->root.splt;\n \t  if (sec && ! (sec->flags & SEC_EXCLUDE))\n \t    gp_val = (sec->output_offset\n \t\t      + sec->output_section->vma\n@@ -3530,8 +3528,8 @@ elf_hppa_final_link_relocate (Elf_Internal_Rela *rel,\n \t   to the start of the DLT, so we have to compute the absolute\n \t   address, then subtract out the value of __gp.  */\n \tvalue = (hh->plt_offset\n-\t\t + hppa_info->plt_sec->output_offset\n-\t\t + hppa_info->plt_sec->output_section->vma);\n+\t\t + hppa_info->root.splt->output_offset\n+\t\t + hppa_info->root.splt->output_section->vma);\n \tvalue -= _bfd_get_gp_value (output_bfd);\n \n \t/* All PLTOFF relocations are basically the same at this point,"
    }
  ]
}