{
  "sha": "4a421c53cf609d68fe956c2e7270d34c0ab8500f",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NGE0MjFjNTNjZjYwOWQ2OGZlOTU2YzJlNzI3MGQzNGMwYWI4NTAwZg==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-04-30T07:03:25Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-05-24T00:57:53Z"
    },
    "message": "PowerPC GOT_PCREL34 optimisation\n\nbfd/\n\t* elf64-ppc.c (ppc64_elf_check_relocs): Set has_gotrel for\n\tR_PPC64_GOT_PCREL34.\n\t(xlate_pcrel_opt): New function.\n\t(ppc64_elf_edit_toc): Handle R_PPC64_GOT_PCREL34.\n\t(ppc64_elf_relocate_section): Edit GOT indirect to GOT relative\n\tfor R_PPC64_GOT_PCREL34.  Implement R_PPC64_PCREL_OPT optimisation.\nld/\n\t* testsuite/ld-powerpc/pcrelopt.s,\n\t* testsuite/ld-powerpc/pcrelopt.d,\n\t* testsuite/ld-powerpc/pcrelopt.sec: New test.\n\t* testsuite/ld-powerpc/powerpc.exp: Run it.",
    "tree": {
      "sha": "8a241a9458a01b131577c6eaf6b5ca98d91d4421",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/8a241a9458a01b131577c6eaf6b5ca98d91d4421"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/4a421c53cf609d68fe956c2e7270d34c0ab8500f",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4a421c53cf609d68fe956c2e7270d34c0ab8500f",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/4a421c53cf609d68fe956c2e7270d34c0ab8500f",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4a421c53cf609d68fe956c2e7270d34c0ab8500f/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "5663e321848545857a690f30a780187e3366bd2d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5663e321848545857a690f30a780187e3366bd2d",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/5663e321848545857a690f30a780187e3366bd2d"
    }
  ],
  "stats": {
    "total": 457,
    "additions": 444,
    "deletions": 13
  },
  "files": [
    {
      "sha": "0e21664e91d989628611008d8fd696f7cad61e38",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4a421c53cf609d68fe956c2e7270d34c0ab8500f/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4a421c53cf609d68fe956c2e7270d34c0ab8500f/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=4a421c53cf609d68fe956c2e7270d34c0ab8500f",
      "patch": "@@ -1,3 +1,12 @@\n+2019-05-24  Alan Modra  <amodra@gmail.com>\n+\n+\t* elf64-ppc.c (ppc64_elf_check_relocs): Set has_gotrel for\n+\tR_PPC64_GOT_PCREL34.\n+\t(xlate_pcrel_opt): New function.\n+\t(ppc64_elf_edit_toc): Handle R_PPC64_GOT_PCREL34.\n+\t(ppc64_elf_relocate_section): Edit GOT indirect to GOT relative\n+\tfor R_PPC64_GOT_PCREL34.  Implement R_PPC64_PCREL_OPT optimisation.\n+\n 2019-05-24  Alan Modra  <amodra@gmail.com>\n \n \t* reloc.c (BFD_RELOC_PPC64_D34, BFD_RELOC_PPC64_D34_LO),"
    },
    {
      "sha": "75189b6967f9fffe0cd0a60d01a3beb45b2e749e",
      "filename": "bfd/elf64-ppc.c",
      "status": "modified",
      "additions": 210,
      "deletions": 13,
      "changes": 223,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4a421c53cf609d68fe956c2e7270d34c0ab8500f/bfd/elf64-ppc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4a421c53cf609d68fe956c2e7270d34c0ab8500f/bfd/elf64-ppc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf64-ppc.c?ref=4a421c53cf609d68fe956c2e7270d34c0ab8500f",
      "patch": "@@ -4567,14 +4567,14 @@ ppc64_elf_check_relocs (bfd *abfd, struct bfd_link_info *info,\n \tcase R_PPC64_GOT16_DS:\n \tcase R_PPC64_GOT16_HA:\n \tcase R_PPC64_GOT16_LO_DS:\n+\tcase R_PPC64_GOT_PCREL34:\n \t  ppc64_elf_tdata (abfd)->has_gotrel = 1;\n \t  ppc64_elf_section_data (sec)->has_gotrel = 1;\n \t  /* Fall through.  */\n \n \tcase R_PPC64_GOT16:\n \tcase R_PPC64_GOT16_HI:\n \tcase R_PPC64_GOT16_LO:\n-\tcase R_PPC64_GOT_PCREL34:\n \tdogot:\n \t  /* This symbol requires a global offset table entry.  */\n \t  sec->has_toc_reloc = 1;\n@@ -8141,6 +8141,114 @@ ok_lo_toc_insn (unsigned int insn, enum elf_ppc64_reloc_type r_type)\n \t      && (insn & 1) == 0));\n }\n \n+/* PCREL_OPT in one instance flags to the linker that a pair of insns:\n+     pld ra,symbol@got@pcrel\n+     load/store rt,0(ra)\n+   or\n+     paddi ra,symbol@pcrel\n+     load/store rt,0(ra)\n+   may be translated to\n+     pload/pstore rt,symbol@pcrel\n+     nop.\n+   This function returns true if the optimization is possible, placing\n+   the prefix insn in *PINSN1 and a NOP in *PINSN2.\n+\n+   On entry to this function, the linker has already determined that\n+   the pld can be replaced with paddi: *PINSN1 is that paddi insn,\n+   while *PINSN2 is the second instruction.  */\n+\n+static bfd_boolean\n+xlate_pcrel_opt (uint64_t *pinsn1, uint64_t *pinsn2)\n+{\n+  uint32_t insn2 = *pinsn2 >> 32;\n+  uint64_t i1new;\n+\n+  /* Check that regs match.  */\n+  if (((insn2 >> 16) & 31) != ((*pinsn1 >> 21) & 31))\n+    return FALSE;\n+\n+  switch ((insn2 >> 26) & 63)\n+    {\n+    default:\n+      return FALSE;\n+\n+    case 32: /* lwz */\n+    case 34: /* lbz */\n+    case 36: /* stw */\n+    case 38: /* stb */\n+    case 40: /* lhz */\n+    case 42: /* lha */\n+    case 44: /* sth */\n+    case 48: /* lfs */\n+    case 50: /* lfd */\n+    case 52: /* stfs */\n+    case 54: /* stfd */\n+      /* These are the PMLS cases, where we just need to tack a prefix\n+\t on the insn.  Check that the D field is zero.  */\n+      if ((insn2 & 0xffff) != 0)\n+\treturn FALSE;\n+      i1new = ((1ULL << 58) | (2ULL << 56) | (1ULL << 52)\n+\t       | (insn2 & ((63ULL << 26) | (31ULL << 21))));\n+      break;\n+\n+    case 58: /* lwa, ld */\n+      if ((insn2 & 0xfffd) != 0)\n+\treturn FALSE;\n+      i1new = ((1ULL << 58) | (1ULL << 52)\n+\t       | (insn2 & 2 ? 41ULL << 26 : 57ULL << 26)\n+\t       | (insn2 & (31ULL << 21)));\n+      break;\n+\n+    case 57: /* lxsd, lxssp */\n+      if ((insn2 & 0xfffc) != 0 || (insn2 & 3) < 2)\n+\treturn FALSE;\n+      i1new = ((1ULL << 58) | (1ULL << 52)\n+\t       | ((40ULL | (insn2 & 3)) << 26)\n+\t       | (insn2 & (31ULL << 21)));\n+      break;\n+\n+    case 61: /* stxsd, stxssp, lxv, stxv  */\n+      if ((insn2 & 3) == 0)\n+\treturn FALSE;\n+      else if ((insn2 & 3) >= 2)\n+\t{\n+\t  if ((insn2 & 0xfffc) != 0)\n+\t    return FALSE;\n+\t  i1new = ((1ULL << 58) | (1ULL << 52)\n+\t\t   | ((44ULL | (insn2 & 3)) << 26)\n+\t\t   | (insn2 & (31ULL << 21)));\n+\t}\n+      else\n+\t{\n+\t  if ((insn2 & 0xfff0) != 0)\n+\t    return FALSE;\n+\t  i1new = ((1ULL << 58) | (1ULL << 52)\n+\t\t   | ((50ULL | (insn2 & 4) | ((insn2 & 8) >> 3)) << 26)\n+\t\t   | (insn2 & (31ULL << 21)));\n+\t}\n+      break;\n+\n+    case 56: /* lq */\n+      if ((insn2 & 0xffff) != 0)\n+\treturn FALSE;\n+      i1new = ((1ULL << 58) | (1ULL << 52)\n+\t       | (insn2 & ((63ULL << 26) | (31ULL << 21))));\n+      break;\n+\n+    case 62: /* std, stq */\n+      if ((insn2 & 0xfffd) != 0)\n+\treturn FALSE;\n+      i1new = ((1ULL << 58) | (1ULL << 52)\n+\t       | ((insn2 & 2) == 0 ? 61ULL << 26 : 60ULL << 26)\n+\t       | (insn2 & (31ULL << 21)));\n+      break;\n+    }\n+\n+  *pinsn1 = i1new;\n+  *pinsn2 = (uint64_t) NOP << 32;\n+  return TRUE;\n+}\n+\n /* Examine all relocs referencing .toc sections in order to remove\n    unused .toc entries.  */\n \n@@ -8797,8 +8905,8 @@ ppc64_elf_edit_toc (struct bfd_link_info *info)\n     }\n \n   /* Look for cases where we can change an indirect GOT access to\n-     a GOT relative access, possibly reducing the number of GOT\n-     entries.  */\n+     a GOT relative or PC relative access, possibly reducing the\n+     number of GOT entries.  */\n   for (ibfd = info->input_bfds; ibfd != NULL; ibfd = ibfd->link.next)\n     {\n       asection *sec;\n@@ -8849,8 +8957,8 @@ ppc64_elf_edit_toc (struct bfd_link_info *info)\n \t      asection *sym_sec;\n \t      struct elf_link_hash_entry *h;\n \t      struct got_entry *ent;\n-\t      bfd_vma val;\n-\t      unsigned char buf[4];\n+\t      bfd_vma sym_addend, val, pc;\n+\t      unsigned char buf[8];\n \t      unsigned int insn;\n \n \t      r_type = ELF64_R_TYPE (rel->r_info);\n@@ -8862,6 +8970,11 @@ ppc64_elf_edit_toc (struct bfd_link_info *info)\n \t\tcase R_PPC64_GOT16_DS:\n \t\tcase R_PPC64_GOT16_HA:\n \t\tcase R_PPC64_GOT16_LO_DS:\n+\t\t  sym_addend = rel->r_addend;\n+\t\t  break;\n+\n+\t\tcase R_PPC64_GOT_PCREL34:\n+\t\t  sym_addend = 0;\n \t\t  break;\n \t\t}\n \n@@ -8877,7 +8990,7 @@ ppc64_elf_edit_toc (struct bfd_link_info *info)\n \t\tval = h->root.u.def.value;\n \t      else\n \t\tval = sym->st_value;\n-\t      val += rel->r_addend;\n+\t      val += sym_addend;\n \t      val += sym_sec->output_section->vma + sym_sec->output_offset;\n \n \t      switch (r_type)\n@@ -8919,6 +9032,22 @@ ppc64_elf_edit_toc (struct bfd_link_info *info)\n \t\t  if ((insn & (0x3f << 26 | 0x3)) != 58u << 26 /* ld */)\n \t\t    continue;\n \t\t  break;\n+\n+\t\tcase R_PPC64_GOT_PCREL34:\n+\t\t  pc = rel->r_offset;\n+\t\t  pc += sec->output_section->vma + sec->output_offset;\n+\t\t  if (val - pc + (1ULL << 33) >= 1ULL << 34)\n+\t\t    continue;\n+\t\t  if (!bfd_get_section_contents (ibfd, sec, buf,\n+\t\t\t\t\t\t rel->r_offset & ~3, 8))\n+\t\t    goto got_error_ret;\n+\t\t  insn = bfd_get_32 (ibfd, buf);\n+\t\t  if ((insn & (-1u << 18)) != ((1u << 26) | (1u << 20)))\n+\t\t    continue;\n+\t\t  insn = bfd_get_32 (ibfd, buf + 4);\n+\t\t  if ((insn & (0x3f << 26)) != 57u << 26)\n+\t\t    continue;\n+\t\t  break;\n \t\t}\n \n \t      if (h != NULL)\n@@ -8929,7 +9058,7 @@ ppc64_elf_edit_toc (struct bfd_link_info *info)\n \t\t  ent = local_got_ents[r_symndx];\n \t\t}\n \t      for (; ent != NULL; ent = ent->next)\n-\t\tif (ent->addend == rel->r_addend\n+\t\tif (ent->addend == sym_addend\n \t\t    && ent->owner == ibfd\n \t\t    && ent->tls_type == 0)\n \t\t  break;\n@@ -13772,6 +13901,8 @@ ppc64_elf_relocate_section (bfd *output_bfd,\n       Elf_Internal_Rela orig_rel;\n       reloc_howto_type *howto;\n       struct reloc_howto_struct alt_howto;\n+      uint64_t pinsn;\n+      bfd_vma offset;\n \n     again:\n       orig_rel = *rel;\n@@ -14134,7 +14265,6 @@ ppc64_elf_relocate_section (bfd *output_bfd,\n \t  if ((tls_mask & TLS_TLS) != 0 && (tls_mask & TLS_LD) == 0)\n \t    {\n \t      unsigned int insn1, insn2;\n-\t      bfd_vma offset;\n \n \t    tls_ldgd_opt:\n \t      offset = (bfd_vma) -1;\n@@ -14236,9 +14366,9 @@ ppc64_elf_relocate_section (bfd *output_bfd,\n \t      && rel + 1 < relend)\n \t    {\n \t      unsigned int insn2;\n-\t      bfd_vma offset = rel->r_offset;\n \t      enum elf_ppc64_reloc_type r_type1 = ELF64_R_TYPE (rel[1].r_info);\n \n+\t      offset = rel->r_offset;\n \t      if (is_plt_seq_reloc (r_type1))\n \t\t{\n \t\t  bfd_put_32 (output_bfd, NOP, contents + offset);\n@@ -14285,9 +14415,9 @@ ppc64_elf_relocate_section (bfd *output_bfd,\n \t      && rel + 1 < relend)\n \t    {\n \t      unsigned int insn2;\n-\t      bfd_vma offset = rel->r_offset;\n \t      enum elf_ppc64_reloc_type r_type1 = ELF64_R_TYPE (rel[1].r_info);\n \n+\t      offset = rel->r_offset;\n \t      if (is_plt_seq_reloc (r_type1))\n \t\t{\n \t\t  bfd_put_32 (output_bfd, NOP, contents + offset);\n@@ -14431,7 +14561,7 @@ ppc64_elf_relocate_section (bfd *output_bfd,\n \t      && relocation + 0x80008000 <= 0xffffffff)\n \t    {\n \t      unsigned int insn1, insn2;\n-\t      bfd_vma offset = rel->r_offset - d_offset;\n+\t      offset = rel->r_offset - d_offset;\n \t      insn1 = bfd_get_32 (input_bfd, contents + offset);\n \t      insn2 = bfd_get_32 (input_bfd, contents + offset + 4);\n \t      if ((insn1 & 0xffff0000) == ADDIS_R2_R12\n@@ -14823,6 +14953,74 @@ ppc64_elf_relocate_section (bfd *output_bfd,\n \t\t}\n \t    }\n \t  break;\n+\n+\tcase R_PPC64_GOT_PCREL34:\n+\t  from = (rel->r_offset\n+\t\t  + input_section->output_section->vma\n+\t\t  + input_section->output_offset);\n+\t  if (relocation - from + (1ULL << 33) < 1ULL << 34\n+\t      && SYMBOL_REFERENCES_LOCAL (info, &h->elf))\n+\t    {\n+\t      offset = rel->r_offset;\n+\t      pinsn = bfd_get_32 (input_bfd, contents + offset);\n+\t      pinsn <<= 32;\n+\t      pinsn |= bfd_get_32 (input_bfd, contents + offset + 4);\n+\t      if ((pinsn & ((-1ULL << 50) | (63ULL << 26)))\n+\t\t   == ((1ULL << 58) | (1ULL << 52) | (57ULL << 26) /* pld */))\n+\t\t{\n+\t\t  /* Replace with paddi.  */\n+\t\t  pinsn += (2ULL << 56) + (14ULL << 26) - (57ULL << 26);\n+\t\t  r_type = R_PPC64_PCREL34;\n+\t\t  rel->r_info = ELF64_R_INFO (r_symndx, r_type);\n+\t\t  bfd_put_32 (input_bfd, pinsn >> 32, contents + offset);\n+\t\t  bfd_put_32 (input_bfd, pinsn, contents + offset + 4);\n+\t\t  goto pcrelopt;\n+\t\t}\n+\t    }\n+\t  break;\n+\n+\tcase R_PPC64_PCREL34:\n+\t  if (SYMBOL_REFERENCES_LOCAL (info, &h->elf))\n+\t    {\n+\t      offset = rel->r_offset;\n+\t      pinsn = bfd_get_32 (input_bfd, contents + offset);\n+\t      pinsn <<= 32;\n+\t      pinsn |= bfd_get_32 (input_bfd, contents + offset + 4);\n+\t      if ((pinsn & ((-1ULL << 50) | (63ULL << 26)))\n+\t\t   == ((1ULL << 58) | (2ULL << 56) | (1ULL << 52)\n+\t\t       | (14ULL << 26) /* paddi */))\n+\t\t{\n+\t\tpcrelopt:\n+\t\t  if (rel + 1 < relend\n+\t\t      && rel[1].r_offset == offset\n+\t\t      && rel[1].r_info == ELF64_R_INFO (0, R_PPC64_PCREL_OPT))\n+\t\t    {\n+\t\t      bfd_vma off2 = rel[1].r_addend;\n+\t\t      if (off2 == 0)\n+\t\t\t/* zero means next insn.  */\n+\t\t\toff2 = 8;\n+\t\t      off2 += offset;\n+\t\t      if (off2 + 4 <= input_section->size)\n+\t\t\t{\n+\t\t\t  uint64_t pinsn2;\n+\t\t\t  pinsn2 = bfd_get_32 (input_bfd, contents + off2);\n+\t\t\t  pinsn2 <<= 32;\n+\t\t\t  if ((pinsn2 & (63ULL << 58)) == 1ULL << 58)\n+\t\t\t    break;\n+\t\t\t  if (xlate_pcrel_opt (&pinsn, &pinsn2))\n+\t\t\t    {\n+\t\t\t      bfd_put_32 (input_bfd, pinsn >> 32,\n+\t\t\t\t\t  contents + offset);\n+\t\t\t      bfd_put_32 (input_bfd, pinsn,\n+\t\t\t\t\t  contents + offset + 4);\n+\t\t\t      bfd_put_32 (input_bfd, pinsn2 >> 32,\n+\t\t\t\t\t  contents + off2);\n+\t\t\t    }\n+\t\t\t}\n+\t\t    }\n+\t\t}\n+\t    }\n+\t  break;\n \t}\n \n       /* Set `addend'.  */\n@@ -14847,6 +15045,7 @@ ppc64_elf_relocate_section (bfd *output_bfd,\n \tcase R_PPC64_GNU_VTINHERIT:\n \tcase R_PPC64_GNU_VTENTRY:\n \tcase R_PPC64_ENTRY:\n+\tcase R_PPC64_PCREL_OPT:\n \t  goto copy_reloc;\n \n \t  /* GOT16 relocations.  Like an ADDR16 using the symbol's\n@@ -15882,8 +16081,6 @@ ppc64_elf_relocate_section (bfd *output_bfd,\n \t    r = bfd_reloc_outofrange;\n \t  else\n \t    {\n-\t      uint64_t pinsn;\n-\n \t      relocation += addend;\n \t      if (howto->pc_relative)\n \t\trelocation -= (rel->r_offset"
    },
    {
      "sha": "be42aba307082613d72de1062600c1b49dfe7346",
      "filename": "ld/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4a421c53cf609d68fe956c2e7270d34c0ab8500f/ld/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4a421c53cf609d68fe956c2e7270d34c0ab8500f/ld/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ChangeLog?ref=4a421c53cf609d68fe956c2e7270d34c0ab8500f",
      "patch": "@@ -1,3 +1,10 @@\n+2019-05-24  Alan Modra  <amodra@gmail.com>\n+\n+\t* testsuite/ld-powerpc/pcrelopt.s,\n+\t* testsuite/ld-powerpc/pcrelopt.d,\n+\t* testsuite/ld-powerpc/pcrelopt.sec: New test.\n+\t* testsuite/ld-powerpc/powerpc.exp: Run it.\n+\n 2019-05-23  Jose E. Marchesi  <jose.marchesi@oracle.com>\n \n \t* Makefile.am (ALL_64_EMULATION_SOURCES): Add eelf64bpf.c."
    },
    {
      "sha": "18fdb95abffd4415ec35b31923e494abe4482c9c",
      "filename": "ld/testsuite/ld-powerpc/pcrelopt.d",
      "status": "added",
      "additions": 89,
      "deletions": 0,
      "changes": 89,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4a421c53cf609d68fe956c2e7270d34c0ab8500f/ld/testsuite/ld-powerpc/pcrelopt.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4a421c53cf609d68fe956c2e7270d34c0ab8500f/ld/testsuite/ld-powerpc/pcrelopt.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-powerpc/pcrelopt.d?ref=4a421c53cf609d68fe956c2e7270d34c0ab8500f",
      "patch": "@@ -0,0 +1,89 @@\n+\n+.*:     file format .*\n+\n+Disassembly of section \\.text:\n+\n+0+10000200 <_start>:\n+.*:\t(06 10 00 01|01 00 10 06) \tplbz    r3,66320\n+.*:\t(88 60 03 10|10 03 60 88) \n+.*:\t(60 00 00 00|00 00 00 60) \tnop\n+.*:\t(06 10 00 01|01 00 10 06) \tplhz    r4,66308\n+.*:\t(a0 80 03 04|04 03 80 a0) \n+.*:\t(60 00 00 00|00 00 00 60) \tnop\n+.*:\t(60 00 00 00|00 00 00 60) \tnop\n+.*:\t(60 00 00 00|00 00 00 60) \tnop\n+.*:\t(06 10 00 01|01 00 10 06) \tplha    r3,66288\n+.*:\t(a8 60 02 f0|f0 02 60 a8) \n+.*:\t(40 82 ff f4|f4 ff 82 40) \tbne     .*\n+.*:\t(06 10 00 01|01 00 10 06) \tplwz    r3,66276\n+.*:\t(80 60 02 e4|e4 02 60 80) \n+.*:\t(60 00 00 00|00 00 00 60) \tnop\n+.*:\t(04 10 00 01|01 00 10 04) \tplwa    r3,66264\n+.*:\t(a4 60 02 d8|d8 02 60 a4) \n+.*:\t(60 00 00 00|00 00 00 60) \tnop\n+.*:\t(04 10 00 01|01 00 10 04) \tpld     r3,66252\n+.*:\t(e4 60 02 cc|cc 02 60 e4) \n+.*:\t(60 00 00 00|00 00 00 60) \tnop\n+.*:\t(04 10 00 01|01 00 10 04) \tplq     r14,66240\n+.*:\t(e1 c0 02 c0|c0 02 c0 e1) \n+.*:\t(60 00 00 00|00 00 00 60) \tnop\n+.*:\t(06 10 00 01|01 00 10 06) \tplfs    f1,66228\n+.*:\t(c0 20 02 b4|b4 02 20 c0) \n+.*:\t(60 00 00 00|00 00 00 60) \tnop\n+.*:\t(06 10 00 01|01 00 10 06) \tplfd    f1,66216\n+.*:\t(c8 20 02 a8|a8 02 20 c8) \n+.*:\t(60 00 00 00|00 00 00 60) \tnop\n+.*:\t(04 10 00 01|01 00 10 04) \tplxsd   v30,66204\n+.*:\t(ab c0 02 9c|9c 02 c0 ab) \n+.*:\t(60 00 00 00|00 00 00 60) \tnop\n+.*:\t(04 10 00 01|01 00 10 04) \tplxssp  v31,66192\n+.*:\t(af e0 02 90|90 02 e0 af) \n+.*:\t(60 00 00 00|00 00 00 60) \tnop\n+.*:\t(04 10 00 01|01 00 10 04) \tplxv    vs63,66180\n+.*:\t(cf e0 02 84|84 02 e0 cf) \n+.*:\t(60 00 00 00|00 00 00 60) \tnop\n+.*:\t(04 10 00 01|01 00 10 04) \tplxv    vs0,66168\n+.*:\t(c8 00 02 78|78 02 00 c8) \n+.*:\t(60 00 00 00|00 00 00 60) \tnop\n+.*:\t(06 10 00 01|01 00 10 06) \tpstb    r3,66156\n+.*:\t(98 60 02 6c|6c 02 60 98) \n+.*:\t(60 00 00 00|00 00 00 60) \tnop\n+.*:\t(06 10 00 01|01 00 10 06) \tpsth    r3,66144\n+.*:\t(b0 60 02 60|60 02 60 b0) \n+.*:\t(60 00 00 00|00 00 00 60) \tnop\n+.*:\t(60 00 00 00|00 00 00 60) \tnop\n+.*:\t(06 10 00 01|01 00 10 06) \tpstw    r3,66128\n+.*:\t(90 60 02 50|50 02 60 90) \n+.*:\t(60 00 00 00|00 00 00 60) \tnop\n+.*:\t(04 10 00 01|01 00 10 04) \tpstd    r3,66116\n+.*:\t(f4 60 02 44|44 02 60 f4) \n+.*:\t(60 00 00 00|00 00 00 60) \tnop\n+.*:\t(04 10 00 01|01 00 10 04) \tpstq    r14,66104\n+.*:\t(f1 c0 02 38|38 02 c0 f1) \n+.*:\t(60 00 00 00|00 00 00 60) \tnop\n+.*:\t(06 10 00 01|01 00 10 06) \tpstfd   f1,66092\n+.*:\t(d8 20 02 2c|2c 02 20 d8) \n+.*:\t(60 00 00 00|00 00 00 60) \tnop\n+.*:\t(06 10 00 01|01 00 10 06) \tpstfs   f2,66080\n+.*:\t(d0 40 02 20|20 02 40 d0) \n+.*:\t(60 00 00 00|00 00 00 60) \tnop\n+.*:\t(60 00 00 00|00 00 00 60) \tnop\n+.*:\t(04 10 00 01|01 00 10 04) \tpstxsd  v30,66064\n+.*:\t(bb c0 02 10|10 02 c0 bb) \n+.*:\t(60 00 00 00|00 00 00 60) \tnop\n+.*:\t(04 10 00 01|01 00 10 04) \tpstxssp v31,66052\n+.*:\t(bf e0 02 04|04 02 e0 bf) \n+.*:\t(60 00 00 00|00 00 00 60) \tnop\n+.*:\t(04 10 00 01|01 00 10 04) \tpstxv   vs63,66040\n+.*:\t(df e0 01 f8|f8 01 e0 df) \n+.*:\t(60 00 00 00|00 00 00 60) \tnop\n+.*:\t(04 10 00 01|01 00 10 04) \tpstxv   vs0,66028\n+.*:\t(d8 00 01 ec|ec 01 00 d8) \n+.*:\t(60 00 00 00|00 00 00 60) \tnop\n+.*:\t(04 10 00 01|01 00 10 04) \tpld     r9,66008\n+.*:\t(e5 20 01 d8|d8 01 20 e5) \n+.*:\t(e8 09 00 00|00 00 09 e8) \tld      r0,0\\(r9\\)\n+.*:\t(60 00 00 00|00 00 00 60) \tnop\n+.*:\t(06 10 00 01|01 00 10 06) \tpla     r7,66000\n+.*:\t(38 e0 01 d0|d0 01 e0 38) \n+.*:\t(88 c7 00 00|00 00 c7 88) \tlbz     r6,0\\(r7\\)"
    },
    {
      "sha": "78b0f51f733d2b5ac6683623042ce8e66a60b409",
      "filename": "ld/testsuite/ld-powerpc/pcrelopt.s",
      "status": "added",
      "additions": 119,
      "deletions": 0,
      "changes": 119,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4a421c53cf609d68fe956c2e7270d34c0ab8500f/ld/testsuite/ld-powerpc/pcrelopt.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4a421c53cf609d68fe956c2e7270d34c0ab8500f/ld/testsuite/ld-powerpc/pcrelopt.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-powerpc/pcrelopt.s?ref=4a421c53cf609d68fe956c2e7270d34c0ab8500f",
      "patch": "@@ -0,0 +1,119 @@\n+\t.text\n+\t.globl _start\n+_start:\n+# original PCREL_OPT definition, with second insn immediately after first\n+\tpld 9,sym@got@pcrel\n+\t\t.reloc .-8,R_PPC64_PCREL_OPT,0\n+\tlbz 3,0(9)\n+\n+# but we now allow an offset to the second insn\n+\tpld 22,sym@got@pcrel\n+\t\t.reloc .-8,R_PPC64_PCREL_OPT,0f-(.-8)\n+\tnop\n+0:\tlhz 4,0(22)\n+\n+# in fact, it can even be before the \"first\" insn\n+0: \tlha 3,0(9)\n+\tpld 9,sym@got@pcrel\n+\t\t.reloc .-8,R_PPC64_PCREL_OPT,0b-(.-8)\n+\tbne 0b\n+\n+# and of course, other local labels work\n+\tpld 9,sym@got@pcrel\n+\t\t.reloc .-8,R_PPC64_PCREL_OPT,.L1-(.-8)\n+.L1:\tlwz 3,0(9)\n+\n+\tpld 9,sym@got@pcrel\n+\t\t.reloc .-8,R_PPC64_PCREL_OPT,0f-(.-8)\n+0:\tlwa 3,0(9)\n+\n+\tpld 9,sym@got@pcrel\n+\t\t.reloc .-8,R_PPC64_PCREL_OPT,0f-(.-8)\n+0:\tld 3,0(9)\n+\n+\tpld 9,sym@got@pcrel\n+\t\t.reloc .-8,R_PPC64_PCREL_OPT,0f-(.-8)\n+0:\tlq 14,0(9)\n+\n+\tpld 9,sym@got@pcrel\n+\t\t.reloc .-8,R_PPC64_PCREL_OPT,0f-(.-8)\n+0:\tlfs 1,0(9)\n+\n+\tpld 9,sym@got@pcrel\n+\t\t.reloc .-8,R_PPC64_PCREL_OPT,0f-(.-8)\n+0:\tlfd 1,0(9)\n+\n+\tpld 9,sym@got@pcrel\n+\t\t.reloc .-8,R_PPC64_PCREL_OPT,0f-(.-8)\n+0:\tlxsd 30,0(9)\n+\n+\tpld 9,sym@got@pcrel\n+\t\t.reloc .-8,R_PPC64_PCREL_OPT,0f-(.-8)\n+0:\tlxssp 31,0(9)\n+\n+\tpld 9,sym@got@pcrel\n+\t\t.reloc .-8,R_PPC64_PCREL_OPT,0f-(.-8)\n+0:\tlxv 63,0(9)\n+\n+\tpld 9,sym@got@pcrel\n+\t\t.reloc .-8,R_PPC64_PCREL_OPT,0f-(.-8)\n+0:\tlxv 0,0(9)\n+\n+\tpld 9,sym@got@pcrel\n+\t\t.reloc .-8,R_PPC64_PCREL_OPT,0f-(.-8)\n+0:\tstb 3,0(9)\n+\n+\tpld 9,sym@got@pcrel\n+\t\t.reloc .-8,R_PPC64_PCREL_OPT,0f-(.-8)\n+0:\tsth 3,0(9)\n+\n+\tpld 9,sym@got@pcrel\n+\t\t.reloc .-8,R_PPC64_PCREL_OPT,0f-(.-8)\n+0:\tstw 3,0(9)\n+\n+\tpld 9,sym@got@pcrel\n+\t\t.reloc .-8,R_PPC64_PCREL_OPT,0f-(.-8)\n+0:\tstd 3,0(9)\n+\n+\tpld 9,sym@got@pcrel\n+\t\t.reloc .-8,R_PPC64_PCREL_OPT,0f-(.-8)\n+0:\tstq 14,0(9)\n+\n+\tpld 9,sym@got@pcrel\n+\t\t.reloc .-8,R_PPC64_PCREL_OPT,0f-(.-8)\n+0:\tstfd 1,0(9)\n+\n+\tpld 9,sym@got@pcrel\n+\t\t.reloc .-8,R_PPC64_PCREL_OPT,0f-(.-8)\n+0:\tstfs 2,0(9)\n+\n+\tpld 9,sym@got@pcrel\n+\t\t.reloc .-8,R_PPC64_PCREL_OPT,0f-(.-8)\n+0:\tstxsd 30,0(9)\n+\n+\tpld 9,sym@got@pcrel\n+\t\t.reloc .-8,R_PPC64_PCREL_OPT,0f-(.-8)\n+0:\tstxssp 31,0(9)\n+\n+\tpld 9,sym@got@pcrel\n+\t\t.reloc .-8,R_PPC64_PCREL_OPT,0f-(.-8)\n+0:\tstxv 63,0(9)\n+\n+\tpld 9,sym@got@pcrel\n+\t\t.reloc .-8,R_PPC64_PCREL_OPT,0f-(.-8)\n+0:\tstxv 0,0(9)\n+\n+# This should not optimize\n+\t.extern i\n+\t.type i,@object\n+\tpld 9,i@got@pcrel\n+\t\t.reloc .-8,R_PPC64_PCREL_OPT,0f-(.-8)\n+0:\tld 0,0(9)\n+\n+# and this should edit from GOT indirect to GOT relative\n+# ie. change the pld to paddi, leaving the lbz as is.\n+\tpld 7,sym@got@pcrel\n+\tlbz 6,0(7)\n+\n+\t.data\n+sym:\t.space 32"
    },
    {
      "sha": "1dcd3a7362c79926abe47e9b1591a25a8bc3eaf3",
      "filename": "ld/testsuite/ld-powerpc/pcrelopt.sec",
      "status": "added",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4a421c53cf609d68fe956c2e7270d34c0ab8500f/ld/testsuite/ld-powerpc/pcrelopt.sec",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4a421c53cf609d68fe956c2e7270d34c0ab8500f/ld/testsuite/ld-powerpc/pcrelopt.sec",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-powerpc/pcrelopt.sec?ref=4a421c53cf609d68fe956c2e7270d34c0ab8500f",
      "patch": "@@ -0,0 +1,6 @@\n+# check for just one GOT entry\n+#...\n+.* \\.rela\\.dyn +RELA +[0-9a-f]+ [0-9a-f]+ 000018 .*\n+#...\n+.* \\.got +PROGBITS +[0-9a-f]+ [0-9a-f]+ 000010 .*\n+#pass"
    },
    {
      "sha": "658f319739e611d230126c522187dd73db7b870d",
      "filename": "ld/testsuite/ld-powerpc/powerpc.exp",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4a421c53cf609d68fe956c2e7270d34c0ab8500f/ld/testsuite/ld-powerpc/powerpc.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4a421c53cf609d68fe956c2e7270d34c0ab8500f/ld/testsuite/ld-powerpc/powerpc.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/testsuite/ld-powerpc/powerpc.exp?ref=4a421c53cf609d68fe956c2e7270d34c0ab8500f",
      "patch": "@@ -260,6 +260,10 @@ set ppc64elftests {\n     {\"notoc ext\" \"\" \"\" \"-a64\" {ext.s} {} \"\"}\n     {\"notoc\" \"-melf64ppc --no-plt-localentry -T ext.lnk\" \"\" \"-a64\" {notoc.s}\n \t{{objdump -d notoc.d} {readelf {-wf -W} notoc.wf}} \"notoc\"}\n+    {\"pcrelopt\" \"-melf64ppc --hash-style=gnu\" \"tmpdir/symtocbase.so\"\n+\t\"-a64 -mfuture\" {pcrelopt.s}\n+\t{{objdump {-d -Mfuture} pcrelopt.d}\n+\t {readelf {-S --wide} pcrelopt.sec}} \"pcrelopt\" }\n }\n \n set ppceabitests {"
    }
  ]
}