{
  "sha": "228c8f4be0c428369ec6b68e25696863d1e62ed7",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MjI4YzhmNGJlMGM0MjgzNjllYzZiNjhlMjU2OTY4NjNkMWU2MmVkNw==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-12-19T11:16:01Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-12-19T11:22:47Z"
    },
    "message": "xcoff slurp_armap bounds checking\n\n\"count * 8 >= size\" might overflow, \"count >= size / 8\" doesn't.\n\n\t* coff-rs6000.c (_bfd_xcoff_slurp_armap): Don't overflow when\n\tchecking symbol count against section size.  Guard against strlen\n\trunning off end of buffer by allocating one more byte and zeroing.\n\t* coff64-rs6000.c (xcoff64_slurp_armap): Likewise.",
    "tree": {
      "sha": "a69cb8af2acba328adf7cf8e59a5ccfab599b288",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/a69cb8af2acba328adf7cf8e59a5ccfab599b288"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/228c8f4be0c428369ec6b68e25696863d1e62ed7",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/228c8f4be0c428369ec6b68e25696863d1e62ed7",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/228c8f4be0c428369ec6b68e25696863d1e62ed7",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/228c8f4be0c428369ec6b68e25696863d1e62ed7/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "f00901886d0acb7a4d4b177a5cabe8bd9ca2307b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f00901886d0acb7a4d4b177a5cabe8bd9ca2307b",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/f00901886d0acb7a4d4b177a5cabe8bd9ca2307b"
    }
  ],
  "stats": {
    "total": 46,
    "additions": 40,
    "deletions": 6
  },
  "files": [
    {
      "sha": "dc264de3cc360cd741a32c6d3de1b7350e9bed00",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/228c8f4be0c428369ec6b68e25696863d1e62ed7/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/228c8f4be0c428369ec6b68e25696863d1e62ed7/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=228c8f4be0c428369ec6b68e25696863d1e62ed7",
      "patch": "@@ -1,3 +1,10 @@\n+2019-12-18  Alan Modra  <amodra@gmail.com>\n+\n+\t* coff-rs6000.c (_bfd_xcoff_slurp_armap): Don't overflow when\n+\tchecking symbol count against section size.  Guard against strlen\n+\trunning off end of buffer by allocating one more byte and zeroing.\n+\t* coff64-rs6000.c (xcoff64_slurp_armap): Likewise.\n+\n 2019-12-18  Alan Modra  <amodra@gmail.com>\n \n \t* elf32-ppc.c (ppc_elf_get_synthetic_symtab): Use size_t for vars."
    },
    {
      "sha": "995a88a3095154de2ba434e6612dc7faba8661de",
      "filename": "bfd/coff-rs6000.c",
      "status": "modified",
      "additions": 22,
      "deletions": 4,
      "changes": 26,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/228c8f4be0c428369ec6b68e25696863d1e62ed7/bfd/coff-rs6000.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/228c8f4be0c428369ec6b68e25696863d1e62ed7/bfd/coff-rs6000.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/coff-rs6000.c?ref=228c8f4be0c428369ec6b68e25696863d1e62ed7",
      "patch": "@@ -1260,18 +1260,27 @@ _bfd_xcoff_slurp_armap (bfd *abfd)\n \treturn FALSE;\n \n       GET_VALUE_IN_FIELD (sz, hdr.size, 10);\n+      if (sz == (bfd_size_type) -1)\n+\t{\n+\t  bfd_set_error (bfd_error_no_memory);\n+\t  return FALSE;\n+\t}\n \n       /* Read in the entire symbol table.  */\n-      contents = (bfd_byte *) bfd_alloc (abfd, sz);\n+      contents = (bfd_byte *) bfd_alloc (abfd, sz + 1);\n       if (contents == NULL)\n \treturn FALSE;\n       if (bfd_bread (contents, sz, abfd) != sz)\n \treturn FALSE;\n \n+      /* Ensure strings are NULL terminated so we don't wander off the\n+\t end of the buffer.  */\n+      contents[sz] = 0;\n+\n       /* The symbol table starts with a four byte count.  */\n       c = H_GET_32 (abfd, contents);\n \n-      if (c * 4 >= sz)\n+      if (c >= sz / 4)\n \t{\n \t  bfd_set_error (bfd_error_bad_value);\n \t  return FALSE;\n@@ -1315,18 +1324,27 @@ _bfd_xcoff_slurp_armap (bfd *abfd)\n \treturn FALSE;\n \n       GET_VALUE_IN_FIELD (sz, hdr.size, 10);\n+      if (sz == (bfd_size_type) -1)\n+\t{\n+\t  bfd_set_error (bfd_error_no_memory);\n+\t  return FALSE;\n+\t}\n \n       /* Read in the entire symbol table.  */\n-      contents = (bfd_byte *) bfd_alloc (abfd, sz);\n+      contents = (bfd_byte *) bfd_alloc (abfd, sz + 1);\n       if (contents == NULL)\n \treturn FALSE;\n       if (bfd_bread (contents, sz, abfd) != sz)\n \treturn FALSE;\n \n+      /* Ensure strings are NULL terminated so we don't wander off the\n+\t end of the buffer.  */\n+      contents[sz] = 0;\n+\n       /* The symbol table starts with an eight byte count.  */\n       c = H_GET_64 (abfd, contents);\n \n-      if (c * 8 >= sz)\n+      if (c >= sz / 8)\n \t{\n \t  bfd_set_error (bfd_error_bad_value);\n \t  return FALSE;"
    },
    {
      "sha": "4db61e5706428d22d0e2c67795b599bbd1dbafe6",
      "filename": "bfd/coff64-rs6000.c",
      "status": "modified",
      "additions": 11,
      "deletions": 2,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/228c8f4be0c428369ec6b68e25696863d1e62ed7/bfd/coff64-rs6000.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/228c8f4be0c428369ec6b68e25696863d1e62ed7/bfd/coff64-rs6000.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/coff64-rs6000.c?ref=228c8f4be0c428369ec6b68e25696863d1e62ed7",
      "patch": "@@ -1933,18 +1933,27 @@ xcoff64_slurp_armap (bfd *abfd)\n     return FALSE;\n \n   sz = bfd_scan_vma (hdr.size, (const char **) NULL, 10);\n+  if (sz == (bfd_size_type) -1)\n+    {\n+      bfd_set_error (bfd_error_no_memory);\n+      return FALSE;\n+    }\n \n   /* Read in the entire symbol table.  */\n-  contents = (bfd_byte *) bfd_alloc (abfd, sz);\n+  contents = (bfd_byte *) bfd_alloc (abfd, sz + 1);\n   if (contents == NULL)\n     return FALSE;\n   if (bfd_bread (contents, sz, abfd) != sz)\n     return FALSE;\n \n+  /* Ensure strings are NULL terminated so we don't wander off the end\n+     of the buffer.  */\n+  contents[sz] = 0;\n+\n   /* The symbol table starts with an eight byte count.  */\n   c = H_GET_64 (abfd, contents);\n \n-  if (c * 8 >= sz)\n+  if (c >= sz / 8)\n     {\n       bfd_set_error (bfd_error_bad_value);\n       return FALSE;"
    }
  ]
}