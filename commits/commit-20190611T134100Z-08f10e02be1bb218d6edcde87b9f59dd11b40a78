{
  "sha": "08f10e02be1bb218d6edcde87b9f59dd11b40a78",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MDhmMTBlMDJiZTFiYjIxOGQ2ZWRjZGU4N2I5ZjU5ZGQxMWI0MGE3OA==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-05-29T21:49:10Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-06-11T13:41:00Z"
    },
    "message": "Move gdb's xmalloc and friends to new file\n\nWhen \"common\" becomes a library, linking will cause a symbol clash,\nbecause \"xmalloc\" and some related symbols are defined in that\nlibrary, libiberty, and readline.\n\nTo work around this problem, this patch moves the clashing symbols to\na new file, which is then compiled separately for both gdb and\ngdbserver.\n\ngdb/ChangeLog\n2019-06-11  Tom Tromey  <tom@tromey.com>\n\n\t* common/common-utils.c (xmalloc, xrealloc, xcalloc)\n\t(xmalloc_failed): Move to alloc.c.\n\t* alloc.c: New file.\n\t* Makefile.in (COMMON_SFILES): Add alloc.c.\n\ngdb/gdbserver/ChangeLog\n2019-06-11  Tom Tromey  <tom@tromey.com>\n\n\t* Makefile.in (SFILES): Add alloc.c.\n\t(OBS): Add alloc.o.\n\t(IPA_OBJS): Add alloc-ipa.o.\n\t(alloc-ipa.o): New target.\n\t(%.o: ../%.c): New pattern rule.",
    "tree": {
      "sha": "543019f39f95edb714d800496003cee9d82c173d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/543019f39f95edb714d800496003cee9d82c173d"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/08f10e02be1bb218d6edcde87b9f59dd11b40a78",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/08f10e02be1bb218d6edcde87b9f59dd11b40a78",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/08f10e02be1bb218d6edcde87b9f59dd11b40a78",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/08f10e02be1bb218d6edcde87b9f59dd11b40a78/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "1c7fe9515dc1e8aa6378075ef56a646c1efdf7f5",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1c7fe9515dc1e8aa6378075ef56a646c1efdf7f5",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/1c7fe9515dc1e8aa6378075ef56a646c1efdf7f5"
    }
  ],
  "stats": {
    "total": 210,
    "additions": 138,
    "deletions": 72
  },
  "files": [
    {
      "sha": "08b2ae267ffd31b4d45fcd260b573bbf8aa32b66",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/08f10e02be1bb218d6edcde87b9f59dd11b40a78/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/08f10e02be1bb218d6edcde87b9f59dd11b40a78/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=08f10e02be1bb218d6edcde87b9f59dd11b40a78",
      "patch": "@@ -1,3 +1,10 @@\n+2019-06-11  Tom Tromey  <tom@tromey.com>\n+\n+\t* common/common-utils.c (xmalloc, xrealloc, xcalloc)\n+\t(xmalloc_failed): Move to alloc.c.\n+\t* alloc.c: New file.\n+\t* Makefile.in (COMMON_SFILES): Add alloc.c.\n+\n 2019-06-11  Tom Tromey  <tom@tromey.com>\n \n \t* nat/linux-waitpid.c: Don't include server.h."
    },
    {
      "sha": "15ec7a61b1ca449060ad21ea06f8ac4b741f4e73",
      "filename": "gdb/Makefile.in",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/08f10e02be1bb218d6edcde87b9f59dd11b40a78/gdb/Makefile.in",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/08f10e02be1bb218d6edcde87b9f59dd11b40a78/gdb/Makefile.in",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/Makefile.in?ref=08f10e02be1bb218d6edcde87b9f59dd11b40a78",
      "patch": "@@ -924,6 +924,7 @@ COMMON_SFILES = \\\n \tada-varobj.c \\\n \taddrmap.c \\\n \tagent.c \\\n+\talloc.c \\\n \tannotate.c \\\n \tarch-utils.c \\\n \tauto-load.c \\"
    },
    {
      "sha": "95488a72cf2c73ed6a70cfa6d773a07d26ba9149",
      "filename": "gdb/alloc.c",
      "status": "added",
      "additions": 111,
      "deletions": 0,
      "changes": 111,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/08f10e02be1bb218d6edcde87b9f59dd11b40a78/gdb/alloc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/08f10e02be1bb218d6edcde87b9f59dd11b40a78/gdb/alloc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/alloc.c?ref=08f10e02be1bb218d6edcde87b9f59dd11b40a78",
      "patch": "@@ -0,0 +1,111 @@\n+/* Shared allocation functions for GDB, the GNU debugger.\n+\n+   Copyright (C) 1986-2019 Free Software Foundation, Inc.\n+\n+   This file is part of GDB.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+/* This file is unusual.\n+\n+   Because both libiberty and readline define xmalloc and friends, the\n+   functions in this file can't appear in a library -- that will cause\n+   link errors.\n+\n+   And, because we want to turn the common code into a library, this\n+   file can't live there.\n+\n+   So, it lives in gdb and is built separately by gdb and gdbserver.\n+   Please be aware of this when modifying it.\n+\n+   This also explains why this file includes common-defs.h and not\n+   defs.h or server.h -- we'd prefer to avoid depending on the\n+   GDBSERVER define when possible, and for this file it seemed\n+   simple to do so.  */\n+\n+#include \"common/common-defs.h\"\n+#include \"libiberty.h\"\n+#include \"common/errors.h\"\n+\n+/* The xmalloc() (libiberty.h) family of memory management routines.\n+\n+   These are like the ISO-C malloc() family except that they implement\n+   consistent semantics and guard against typical memory management\n+   problems.  */\n+\n+/* NOTE: These are declared using PTR to ensure consistency with\n+   \"libiberty.h\".  xfree() is GDB local.  */\n+\n+PTR                            /* ARI: PTR */\n+xmalloc (size_t size)\n+{\n+  void *val;\n+\n+  /* See libiberty/xmalloc.c.  This function need's to match that's\n+     semantics.  It never returns NULL.  */\n+  if (size == 0)\n+    size = 1;\n+\n+  val = malloc (size);         /* ARI: malloc */\n+  if (val == NULL)\n+    malloc_failure (size);\n+\n+  return val;\n+}\n+\n+PTR                              /* ARI: PTR */\n+xrealloc (PTR ptr, size_t size)          /* ARI: PTR */\n+{\n+  void *val;\n+\n+  /* See libiberty/xmalloc.c.  This function need's to match that's\n+     semantics.  It never returns NULL.  */\n+  if (size == 0)\n+    size = 1;\n+\n+  if (ptr != NULL)\n+    val = realloc (ptr, size);\t/* ARI: realloc */\n+  else\n+    val = malloc (size);\t        /* ARI: malloc */\n+  if (val == NULL)\n+    malloc_failure (size);\n+\n+  return val;\n+}\n+\n+PTR                            /* ARI: PTR */\n+xcalloc (size_t number, size_t size)\n+{\n+  void *mem;\n+\n+  /* See libiberty/xmalloc.c.  This function need's to match that's\n+     semantics.  It never returns NULL.  */\n+  if (number == 0 || size == 0)\n+    {\n+      number = 1;\n+      size = 1;\n+    }\n+\n+  mem = calloc (number, size);      /* ARI: xcalloc */\n+  if (mem == NULL)\n+    malloc_failure (number * size);\n+\n+  return mem;\n+}\n+\n+void\n+xmalloc_failed (size_t size)\n+{\n+  malloc_failure (size);\n+}"
    },
    {
      "sha": "dd839a0d4d12e900a285317149fd163a96a7bef1",
      "filename": "gdb/common/common-utils.c",
      "status": "modified",
      "additions": 0,
      "deletions": 72,
      "changes": 72,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/08f10e02be1bb218d6edcde87b9f59dd11b40a78/gdb/common/common-utils.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/08f10e02be1bb218d6edcde87b9f59dd11b40a78/gdb/common/common-utils.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/common/common-utils.c?ref=08f10e02be1bb218d6edcde87b9f59dd11b40a78",
      "patch": "@@ -22,84 +22,12 @@\n #include \"host-defs.h\"\n #include <ctype.h>\n \n-/* The xmalloc() (libiberty.h) family of memory management routines.\n-\n-   These are like the ISO-C malloc() family except that they implement\n-   consistent semantics and guard against typical memory management\n-   problems.  */\n-\n-/* NOTE: These are declared using PTR to ensure consistency with\n-   \"libiberty.h\".  xfree() is GDB local.  */\n-\n-PTR                            /* ARI: PTR */\n-xmalloc (size_t size)\n-{\n-  void *val;\n-\n-  /* See libiberty/xmalloc.c.  This function need's to match that's\n-     semantics.  It never returns NULL.  */\n-  if (size == 0)\n-    size = 1;\n-\n-  val = malloc (size);         /* ARI: malloc */\n-  if (val == NULL)\n-    malloc_failure (size);\n-\n-  return val;\n-}\n-\n-PTR                              /* ARI: PTR */\n-xrealloc (PTR ptr, size_t size)          /* ARI: PTR */\n-{\n-  void *val;\n-\n-  /* See libiberty/xmalloc.c.  This function need's to match that's\n-     semantics.  It never returns NULL.  */\n-  if (size == 0)\n-    size = 1;\n-\n-  if (ptr != NULL)\n-    val = realloc (ptr, size);\t/* ARI: realloc */\n-  else\n-    val = malloc (size);\t        /* ARI: malloc */\n-  if (val == NULL)\n-    malloc_failure (size);\n-\n-  return val;\n-}\n-\n-PTR                            /* ARI: PTR */           \n-xcalloc (size_t number, size_t size)\n-{\n-  void *mem;\n-\n-  /* See libiberty/xmalloc.c.  This function need's to match that's\n-     semantics.  It never returns NULL.  */\n-  if (number == 0 || size == 0)\n-    {\n-      number = 1;\n-      size = 1;\n-    }\n-\n-  mem = calloc (number, size);      /* ARI: xcalloc */\n-  if (mem == NULL)\n-    malloc_failure (number * size);\n-\n-  return mem;\n-}\n-\n void *\n xzalloc (size_t size)\n {\n   return xcalloc (1, size);\n }\n \n-void\n-xmalloc_failed (size_t size)\n-{\n-  malloc_failure (size);\n-}\n-\n /* Like asprintf/vasprintf but get an internal_error if the call\n    fails. */\n "
    },
    {
      "sha": "460daab6ea073533cf0a9c28fdbee057c1ca7b7d",
      "filename": "gdb/gdbserver/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/08f10e02be1bb218d6edcde87b9f59dd11b40a78/gdb/gdbserver/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/08f10e02be1bb218d6edcde87b9f59dd11b40a78/gdb/gdbserver/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbserver/ChangeLog?ref=08f10e02be1bb218d6edcde87b9f59dd11b40a78",
      "patch": "@@ -1,3 +1,11 @@\n+2019-06-11  Tom Tromey  <tom@tromey.com>\n+\n+\t* Makefile.in (SFILES): Add alloc.c.\n+\t(OBS): Add alloc.o.\n+\t(IPA_OBJS): Add alloc-ipa.o.\n+\t(alloc-ipa.o): New target.\n+\t(%.o: ../%.c): New pattern rule.\n+\n 2019-06-10  Tom Tromey  <tromey@adacore.com>\n \n \t* remote-utils.c (look_up_one_symbol, relocate_instruction): Don't"
    },
    {
      "sha": "792325bc511dfce87d4bc150c0044a44d219260e",
      "filename": "gdb/gdbserver/Makefile.in",
      "status": "modified",
      "additions": 11,
      "deletions": 0,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/08f10e02be1bb218d6edcde87b9f59dd11b40a78/gdb/gdbserver/Makefile.in",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/08f10e02be1bb218d6edcde87b9f59dd11b40a78/gdb/gdbserver/Makefile.in",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbserver/Makefile.in?ref=08f10e02be1bb218d6edcde87b9f59dd11b40a78",
      "patch": "@@ -197,6 +197,7 @@ SFILES = \\\n \t$(srcdir)/arch/arm-get-next-pcs.c \\\n \t$(srcdir)/arch/arm-linux.c \\\n \t$(srcdir)/arch/ppc-linux-common.c \\\n+\t$(srcdir)/../alloc.c \\\n \t$(srcdir)/common/btrace-common.c \\\n \t$(srcdir)/common/buffer.c \\\n \t$(srcdir)/common/cleanups.c \\\n@@ -238,6 +239,7 @@ SOURCES = $(SFILES)\n TAGFILES = $(SOURCES) ${HFILES} ${ALLPARAM} ${POSSLIBS}\n \n OBS = \\\n+\talloc.o \\\n \tax.o \\\n \tcommon/agent.o \\\n \tcommon/btrace-common.o \\\n@@ -414,6 +416,7 @@ gdbreplay$(EXEEXT): $(sort $(GDBREPLAY_OBS)) $(LIBGNU) $(LIBIBERTY)\n \t\t$(LIBIBERTY)\n \n IPA_OBJS = \\\n+\talloc-ipa.o \\\n \tax-ipa.o \\\n \tcommon/common-utils-ipa.o \\\n \tcommon/errors-ipa.o \\\n@@ -569,6 +572,10 @@ ax.o: ax.c\n \t$(COMPILE) $(WARN_CFLAGS_NO_FORMAT) $<\n \t$(POSTCOMPILE)\n \n+alloc-ipa.o: ../alloc.c\n+\t$(IPAGENT_COMPILE) $(WARN_CFLAGS_NO_FORMAT) $<\n+\t$(POSTCOMPILE)\n+\n # Rules for objects that go in the in-process agent.\n \n arch/%-ipa.o: ../arch/%.c\n@@ -624,6 +631,10 @@ common/%.o: ../common/%.c\n \t$(COMPILE) $<\n \t$(POSTCOMPILE)\n \n+%.o: ../%.c\n+\t$(COMPILE) $<\n+\t$(POSTCOMPILE)\n+\n # Rules for register format descriptions.  Suffix destination files with\n # -generated to identify and clean them easily.\n "
    }
  ]
}