{
  "sha": "082cce059d78bdb4a9fadbbacc2cd1dc3668f084",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MDgyY2NlMDU5ZDc4YmRiNGE5ZmFkYmJhY2MyY2QxZGMzNjY4ZjA4NA==",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2019-09-16T01:53:11Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2019-10-03T16:48:03Z"
    },
    "message": "gdb/testsuite: Reduce test name duplication in gdb.python tests\n\nThis commit removes some, but not all, of the test name duplication\nwithin the gdb.python tests.  On my local machine this takes the\nnumber of duplicate test names in this set of tests from 174 to 85.\nIt is possible that different setups might encounter more duplicate\ntests.\n\ngdb/testsuite/ChangeLog:\n\n\t* gdb.python/py-parameter.exp: Make test names unique.\n\t* gdb.python/py-template.exp: Likewise.\n\t* gdb.python/py-value.exp: Likewise.",
    "tree": {
      "sha": "7130b0b97238ca89961999ec1a29cbe70b3cc0cd",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/7130b0b97238ca89961999ec1a29cbe70b3cc0cd"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/082cce059d78bdb4a9fadbbacc2cd1dc3668f084",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/082cce059d78bdb4a9fadbbacc2cd1dc3668f084",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/082cce059d78bdb4a9fadbbacc2cd1dc3668f084",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/082cce059d78bdb4a9fadbbacc2cd1dc3668f084/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "2b74ba5a194fdfb152465e786a173b039e28964a",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2b74ba5a194fdfb152465e786a173b039e28964a",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/2b74ba5a194fdfb152465e786a173b039e28964a"
    }
  ],
  "stats": {
    "total": 389,
    "additions": 231,
    "deletions": 158
  },
  "files": [
    {
      "sha": "c0f4a589857a9bf77f88a232565e96f8f8702a6a",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/082cce059d78bdb4a9fadbbacc2cd1dc3668f084/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/082cce059d78bdb4a9fadbbacc2cd1dc3668f084/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=082cce059d78bdb4a9fadbbacc2cd1dc3668f084",
      "patch": "@@ -1,3 +1,9 @@\n+2019-10-03  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* gdb.python/py-parameter.exp: Make test names unique.\n+\t* gdb.python/py-template.exp: Likewise.\n+\t* gdb.python/py-value.exp: Likewise.\n+\n 2019-10-03  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* gdb.base/break-interp.exp: Reduce test name duplication."
    },
    {
      "sha": "b2f78777338a072e2e92aeb0e4d877b82e972096",
      "filename": "gdb/testsuite/gdb.python/py-parameter.exp",
      "status": "modified",
      "additions": 187,
      "deletions": 130,
      "changes": 317,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/082cce059d78bdb4a9fadbbacc2cd1dc3668f084/gdb/testsuite/gdb.python/py-parameter.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/082cce059d78bdb4a9fadbbacc2cd1dc3668f084/gdb/testsuite/gdb.python/py-parameter.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.python/py-parameter.exp?ref=082cce059d78bdb4a9fadbbacc2cd1dc3668f084",
      "patch": "@@ -38,147 +38,204 @@ if { [is_remote host] } {\n gdb_test \"python print (gdb.parameter ('directories'))\" $directories\n \n # Test a simple boolean parameter.\n-gdb_py_test_multiple \"Simple gdb booleanparameter\" \\\n-   \"python\" \"\" \\\n-   \"class TestParam (gdb.Parameter):\" \"\" \\\n-   \"   \\\"\\\"\\\"When enabled, test param does something useful. When disabled, does nothing.\\\"\\\"\\\"\" \"\" \\\n-   \"   show_doc = \\\"Show the state of the boolean test-param\\\"\" \"\"\\\n-   \"   set_doc = \\\"Set the state of the boolean test-param\\\"\" \"\" \\\n-   \"   def get_show_string (self, pvalue):\" \"\"\\\n-   \"      return \\\"The state of the Test Parameter is \\\" + pvalue\" \"\"\\\n-   \"   def get_set_string (self):\" \"\"\\\n-   \"      val = \\\"on\\\"\" \"\"\\\n-   \"      if (self.value == False):\" \"\"\\\n-   \"         val = \\\"off\\\"\" \"\"\\\n-   \"      return \\\"Test Parameter has been set to \\\" + val\" \"\"\\\n-   \"   def __init__ (self, name):\" \"\" \\\n-   \"      super (TestParam, self).__init__ (name, gdb.COMMAND_DATA, gdb.PARAM_BOOLEAN)\" \"\" \\\n-   \"      self.value = True\" \"\" \\\n-   \"test_param = TestParam ('print test-param')\" \"\"\\\n-   \"end\"\n-\n-gdb_test \"python print (test_param.value)\" \"True\" \"test parameter value\"\n-gdb_test \"show print test-param\" \"The state of the Test Parameter is on.*\" \"show parameter on\"\n-gdb_test \"set print test-param off\" \"Test Parameter has been set to off\" \"turn off parameter\"\n-gdb_test \"show print test-param\" \"The state of the Test Parameter is off.*\" \"show parameter off\"\n-gdb_test \"python print (test_param.value)\" \"False\" \"test parameter value\"\n-gdb_test \"help show print test-param\" \"Show the state of the boolean test-param.*\" \"test show help\"\n-gdb_test \"help set print test-param\" \"Set the state of the boolean test-param.*\" \"test set help\"\n-gdb_test \"help set print\" \"set print test-param -- Set the state of the boolean test-param.*\" \"test general help\"\n+with_test_prefix \"boolean parameter\" {\n+    gdb_py_test_multiple \"Simple gdb booleanparameter\" \\\n+\t\"python\" \"\" \\\n+\t\"class TestParam (gdb.Parameter):\" \"\" \\\n+\t\"   \\\"\\\"\\\"When enabled, test param does something useful. When disabled, does nothing.\\\"\\\"\\\"\" \"\" \\\n+\t\"   show_doc = \\\"Show the state of the boolean test-param\\\"\" \"\"\\\n+\t\"   set_doc = \\\"Set the state of the boolean test-param\\\"\" \"\" \\\n+\t\"   def get_show_string (self, pvalue):\" \"\"\\\n+\t\"      return \\\"The state of the Test Parameter is \\\" + pvalue\" \"\"\\\n+\t\"   def get_set_string (self):\" \"\"\\\n+\t\"      val = \\\"on\\\"\" \"\"\\\n+\t\"      if (self.value == False):\" \"\"\\\n+\t\"         val = \\\"off\\\"\" \"\"\\\n+\t\"      return \\\"Test Parameter has been set to \\\" + val\" \"\"\\\n+\t\"   def __init__ (self, name):\" \"\" \\\n+\t\"      super (TestParam, self).__init__ (name, gdb.COMMAND_DATA, gdb.PARAM_BOOLEAN)\" \"\" \\\n+\t\"      self.value = True\" \"\" \\\n+\t\"test_param = TestParam ('print test-param')\" \"\"\\\n+\t\"end\"\n \n+    gdb_test \"python print (test_param.value)\" \"True\" \\\n+\t\"test boolean parameter value is True\"\n+    gdb_test \"show print test-param\" \\\n+\t\"The state of the Test Parameter is on.*\" \"show parameter on\"\n+    gdb_test \"set print test-param off\" \\\n+\t\"Test Parameter has been set to off\" \"turn off parameter\"\n+    gdb_test \"show print test-param\" \\\n+\t\"The state of the Test Parameter is off.*\" \"show parameter off\"\n+    gdb_test \"python print (test_param.value)\" \"False\" \\\n+\t\"test boolean parameter value is False\"\n+    gdb_test \"help show print test-param\" \\\n+\t\"Show the state of the boolean test-param.*\" \"test show help\"\n+    gdb_test \"help set print test-param\" \\\n+\t\"Set the state of the boolean test-param.*\" \"test set help\"\n+    gdb_test \"help set print\" \\\n+\t\"set print test-param -- Set the state of the boolean test-param.*\" \\\n+\t\"test general help\"\n+}\n \n # Test an enum parameter.\n-gdb_py_test_multiple \"enum gdb parameter\" \\\n-   \"python\" \"\" \\\n-   \"class TestEnumParam (gdb.Parameter):\" \"\" \\\n-   \"   \\\"\\\"\\\"When set, test param does something useful. When disabled, does nothing.\\\"\\\"\\\"\" \"\" \\\n-   \"   show_doc = \\\"Show the state of the enum\\\"\" \"\"\\\n-   \"   set_doc = \\\"Set the state of the enum\\\"\" \"\" \\\n-   \"   def get_show_string (self, pvalue):\" \"\"\\\n-   \"      return \\\"The state of the enum is \\\" + pvalue\" \"\"\\\n-   \"   def get_set_string (self):\" \"\"\\\n-   \"      return \\\"The state of the enum has been set to \\\" + self.value\" \"\"\\\n-   \"   def __init__ (self, name):\" \"\" \\\n-   \"      super (TestEnumParam, self).__init__ (name, gdb.COMMAND_DATA, gdb.PARAM_ENUM, \\[\\\"one\\\", \\\"two\\\"\\])\" \"\" \\\n-   \"      self.value = \\\"one\\\"\" \"\" \\\n-   \"test_enum_param = TestEnumParam ('print test-enum-param')\" \"\"\\\n-   \"end\"\n-\n-gdb_test \"python print (test_enum_param.value)\" \"one\" \"test enum parameter value\"\n-gdb_test \"show print test-enum-param\" \"The state of the enum is one.*\" \"show parameter is initial value\"\n-gdb_test \"set print test-enum-param two\" \"The state of the enum has been set to two\" \"set enum to two\"\n-gdb_test \"show print test-enum-param\" \"The state of the enum is two.*\" \"show parameter is new value\"\n-gdb_test \"python print (test_enum_param.value)\" \"two\" \"test enum parameter value\"\n-gdb_test \"set print test-enum-param three\" \"Undefined item: \\\"three\\\".*\" \"set invalid enum parameter\"\n+with_test_prefix \"enum parameter\" {\n+    gdb_py_test_multiple \"enum gdb parameter\" \\\n+\t\"python\" \"\" \\\n+\t\"class TestEnumParam (gdb.Parameter):\" \"\" \\\n+\t\"   \\\"\\\"\\\"When set, test param does something useful. When disabled, does nothing.\\\"\\\"\\\"\" \"\" \\\n+\t\"   show_doc = \\\"Show the state of the enum\\\"\" \"\"\\\n+\t\"   set_doc = \\\"Set the state of the enum\\\"\" \"\" \\\n+\t\"   def get_show_string (self, pvalue):\" \"\"\\\n+\t\"      return \\\"The state of the enum is \\\" + pvalue\" \"\"\\\n+\t\"   def get_set_string (self):\" \"\"\\\n+\t\"      return \\\"The state of the enum has been set to \\\" + self.value\" \"\"\\\n+\t\"   def __init__ (self, name):\" \"\" \\\n+\t\"      super (TestEnumParam, self).__init__ (name, gdb.COMMAND_DATA, gdb.PARAM_ENUM, \\[\\\"one\\\", \\\"two\\\"\\])\" \"\" \\\n+\t\"      self.value = \\\"one\\\"\" \"\" \\\n+\t\"test_enum_param = TestEnumParam ('print test-enum-param')\" \"\"\\\n+\t\"end\"\n+\n+    gdb_test \"python print (test_enum_param.value)\" \"one\" \\\n+\t\"test enum parameter value is one\"\n+    gdb_test \"show print test-enum-param\" \\\n+\t\"The state of the enum is one.*\" \\\n+\t\"show parameter is initial value\"\n+    gdb_test \"set print test-enum-param two\" \\\n+\t\"The state of the enum has been set to two\" \"set enum to two\"\n+    gdb_test \"show print test-enum-param\" \\\n+\t\"The state of the enum is two.*\" \"show parameter is new value\"\n+    gdb_test \"python print (test_enum_param.value)\" \"two\" \\\n+\t\"test enum parameter value is two\"\n+    gdb_test \"set print test-enum-param three\" \\\n+\t\"Undefined item: \\\"three\\\".*\" \"set invalid enum parameter\"\n+}\n \n # Test a file parameter.\n-gdb_py_test_multiple \"file gdb parameter\" \\\n-   \"python\" \"\" \\\n-   \"class TestFileParam (gdb.Parameter):\" \"\" \\\n-   \"   \\\"\\\"\\\"When set, test param does something useful. When disabled, does nothing.\\\"\\\"\\\"\" \"\" \\\n-   \"   show_doc = \\\"Show the name of the file\\\"\" \"\"\\\n-   \"   set_doc = \\\"Set the name of the file\\\"\" \"\" \\\n-   \"   def get_show_string (self, pvalue):\" \"\"\\\n-   \"      return \\\"The name of the file is \\\" + pvalue\" \"\"\\\n-   \"   def get_set_string (self):\" \"\"\\\n-   \"      return \\\"The name of the file has been changed to \\\" + self.value\" \"\"\\\n-   \"   def __init__ (self, name):\" \"\" \\\n-   \"      super (TestFileParam, self).__init__ (name, gdb.COMMAND_FILES, gdb.PARAM_FILENAME)\" \"\" \\\n-   \"      self.value = \\\"foo.txt\\\"\" \"\" \\\n-   \"test_file_param = TestFileParam ('test-file-param')\" \"\"\\\n-   \"end\"\n-\n-gdb_test \"python print (test_file_param.value)\" \"foo.txt\" \"test file parameter value\"\n-gdb_test \"show test-file-param\" \"The name of the file is foo.txt.*\" \"show initial file value\"\n-gdb_test \"set test-file-param bar.txt\" \"The name of the file has been changed to bar.txt\" \"set new file parameter\" 1\n-gdb_test \"show test-file-param\" \"The name of the file is bar.txt.*\" \"show new file value\"\n-gdb_test \"python print (test_file_param.value)\" \"bar.txt\" \"test new file parameter value\"\n-gdb_test \"set test-file-param\" \"Argument required.*\" \n+with_test_prefix \"file parameter\" {\n+    gdb_py_test_multiple \"file gdb parameter\" \\\n+\t\"python\" \"\" \\\n+\t\"class TestFileParam (gdb.Parameter):\" \"\" \\\n+\t\"   \\\"\\\"\\\"When set, test param does something useful. When disabled, does nothing.\\\"\\\"\\\"\" \"\" \\\n+\t\"   show_doc = \\\"Show the name of the file\\\"\" \"\"\\\n+\t\"   set_doc = \\\"Set the name of the file\\\"\" \"\" \\\n+\t\"   def get_show_string (self, pvalue):\" \"\"\\\n+\t\"      return \\\"The name of the file is \\\" + pvalue\" \"\"\\\n+\t\"   def get_set_string (self):\" \"\"\\\n+\t\"      return \\\"The name of the file has been changed to \\\" + self.value\" \"\"\\\n+\t\"   def __init__ (self, name):\" \"\" \\\n+\t\"      super (TestFileParam, self).__init__ (name, gdb.COMMAND_FILES, gdb.PARAM_FILENAME)\" \"\" \\\n+\t\"      self.value = \\\"foo.txt\\\"\" \"\" \\\n+\t\"test_file_param = TestFileParam ('test-file-param')\" \"\"\\\n+\t\"end\"\n+\n+    gdb_test \"python print (test_file_param.value)\" \"foo.txt\" \\\n+\t\"test file parameter value\"\n+    gdb_test \"show test-file-param\" \\\n+\t\"The name of the file is foo.txt.*\" \"show initial file value\"\n+    gdb_test \"set test-file-param bar.txt\" \\\n+\t\"The name of the file has been changed to bar.txt\" \\\n+\t\"set new file parameter\" 1\n+    gdb_test \"show test-file-param\" \\\n+\t\"The name of the file is bar.txt.*\" \"show new file value\"\n+    gdb_test \"python print (test_file_param.value)\" \\\n+\t\"bar.txt\" \"test new file parameter value\"\n+    gdb_test \"set test-file-param\" \"Argument required.*\"\n+}\n \n # Test a parameter that is not documented.\n-gdb_py_test_multiple \"Simple gdb booleanparameter\" \\\n-   \"python\" \"\" \\\n-   \"class TestUndocParam (gdb.Parameter):\" \"\" \\\n-   \"   def get_show_string (self, pvalue):\" \"\"\\\n-   \"      return \\\"The state of the Test Parameter is \\\" + pvalue\" \"\"\\\n-   \"   def get_set_string (self):\" \"\"\\\n-   \"      val = \\\"on\\\"\" \"\"\\\n-   \"      if (self.value == False):\" \"\"\\\n-   \"         val = \\\"off\\\"\" \"\"\\\n-   \"      return \\\"Test Parameter has been set to \\\" + val\" \"\"\\\n-   \"   def __init__ (self, name):\" \"\" \\\n-   \"      super (TestUndocParam, self).__init__ (name, gdb.COMMAND_DATA, gdb.PARAM_BOOLEAN)\" \"\" \\\n-   \"      self.value = True\" \"\" \\\n-   \"test_undoc_param = TestUndocParam ('print test-undoc-param')\" \"\"\\\n-   \"end\"\n-\n-gdb_test \"show print test-undoc-param\" \"The state of the Test Parameter is on.*\" \"show parameter on\"\n-gdb_test \"set print test-undoc-param off\" \"Test Parameter has been set to off\" \"turn off parameter\"\n-gdb_test \"show print test-undoc-param\" \"The state of the Test Parameter is off.*\" \"show parameter off\"\n-gdb_test \"python print (test_undoc_param.value)\" \"False\" \"test parameter value\"\n-gdb_test \"help show print test-undoc-param\" \"This command is not documented.*\" \"test show help\"\n-gdb_test \"help set print test-undoc-param\" \"This command is not documented.*\" \"test set help\"\n-gdb_test \"help set print\" \"set print test-undoc-param -- This command is not documented.*\" \"test general help\"\n+with_test_prefix \"undocumented parameter\" {\n+    gdb_py_test_multiple \"Simple gdb booleanparameter\" \\\n+\t\"python\" \"\" \\\n+\t\"class TestUndocParam (gdb.Parameter):\" \"\" \\\n+\t\"   def get_show_string (self, pvalue):\" \"\"\\\n+\t\"      return \\\"The state of the Test Parameter is \\\" + pvalue\" \"\"\\\n+\t\"   def get_set_string (self):\" \"\"\\\n+\t\"      val = \\\"on\\\"\" \"\"\\\n+\t\"      if (self.value == False):\" \"\"\\\n+\t\"         val = \\\"off\\\"\" \"\"\\\n+\t\"      return \\\"Test Parameter has been set to \\\" + val\" \"\"\\\n+\t\"   def __init__ (self, name):\" \"\" \\\n+\t\"      super (TestUndocParam, self).__init__ (name, gdb.COMMAND_DATA, gdb.PARAM_BOOLEAN)\" \"\" \\\n+\t\"      self.value = True\" \"\" \\\n+\t\"test_undoc_param = TestUndocParam ('print test-undoc-param')\" \"\"\\\n+\t\"end\"\n+\n+    gdb_test \"show print test-undoc-param\" \\\n+\t\"The state of the Test Parameter is on.*\" \"show parameter on\"\n+    gdb_test \"set print test-undoc-param off\" \\\n+\t\"Test Parameter has been set to off\" \"turn off parameter\"\n+    gdb_test \"show print test-undoc-param\" \\\n+\t\"The state of the Test Parameter is off.*\" \"show parameter off\"\n+    gdb_test \"python print (test_undoc_param.value)\" \\\n+\t\"False\" \"test undocumented parameter value is False\"\n+    gdb_test \"help show print test-undoc-param\" \\\n+\t\"This command is not documented.*\" \"test show help\"\n+    gdb_test \"help set print test-undoc-param\" \\\n+\t\"This command is not documented.*\" \"test set help\"\n+    gdb_test \"help set print\" \\\n+\t\"set print test-undoc-param -- This command is not documented.*\" \\\n+\t\"test general help\"\n+}\n \n # Test a parameter that is not documented in any way..\n-gdb_py_test_multiple \"Simple gdb booleanparameter\" \\\n-   \"python\" \"\" \\\n-   \"class TestNodocParam (gdb.Parameter):\" \"\" \\\n-   \"   def __init__ (self, name):\" \"\" \\\n-   \"      super (TestNodocParam, self).__init__ (name, gdb.COMMAND_DATA, gdb.PARAM_BOOLEAN)\" \"\" \\\n-   \"      self.value = True\" \"\" \\\n-   \"test_nodoc_param = TestNodocParam ('print test-nodoc-param')\" \"\"\\\n-   \"end\"\n-\n-gdb_test \"show print test-nodoc-param\" \"This command is not documented.*\" \"show parameter on\"\n-gdb_test_no_output \"set print test-nodoc-param off\" \"turn off parameter\"\n-gdb_test \"show print test-nodoc-param\" \"This command is not documented.*.*\" \"show parameter off\"\n-gdb_test \"python print (test_nodoc_param.value)\" \"False\" \"test parameter value\"\n-gdb_test \"help show print test-nodoc-param\" \"This command is not documented.*\" \"test show help\"\n-gdb_test \"help set print test-nodoc-param\" \"This command is not documented.*\" \"test set help\"\n-gdb_test \"help set print\" \"set print test-nodoc-param -- This command is not documented.*\" \"test general help\"\n+with_test_prefix \"really undocumented parameter\" {\n+    gdb_py_test_multiple \"Simple gdb booleanparameter\" \\\n+\t\"python\" \"\" \\\n+\t\"class TestNodocParam (gdb.Parameter):\" \"\" \\\n+\t\"   def __init__ (self, name):\" \"\" \\\n+\t\"      super (TestNodocParam, self).__init__ (name, gdb.COMMAND_DATA, gdb.PARAM_BOOLEAN)\" \"\" \\\n+\t\"      self.value = True\" \"\" \\\n+\t\"test_nodoc_param = TestNodocParam ('print test-nodoc-param')\" \"\"\\\n+\t\"end\"\n+\n+    gdb_test \"show print test-nodoc-param\" \\\n+\t\"This command is not documented.*\" \"show parameter on\"\n+    gdb_test_no_output \"set print test-nodoc-param off\" \\\n+\t\"turn off parameter\"\n+    gdb_test \"show print test-nodoc-param\" \\\n+\t\"This command is not documented.*.*\" \"show parameter off\"\n+    gdb_test \"python print (test_nodoc_param.value)\" \\\n+\t\"False\" \"test really undocumented parameter value is False\"\n+    gdb_test \"help show print test-nodoc-param\" \\\n+\t\"This command is not documented.*\" \"test show help\"\n+    gdb_test \"help set print test-nodoc-param\" \\\n+\t\"This command is not documented.*\" \"test set help\"\n+    gdb_test \"help set print\" \\\n+\t\"set print test-nodoc-param -- This command is not documented.*\" \\\n+\t\"test general help\"\n+}\n \n # Test deprecated API. Do not use in your own implementations.\n-gdb_py_test_multiple \"Simple gdb booleanparameter\" \\\n-   \"python\" \"\" \\\n-   \"class TestParam (gdb.Parameter):\" \"\" \\\n-   \"   \\\"\\\"\\\"When enabled, test param does something useful. When disabled, does nothing.\\\"\\\"\\\"\" \"\" \\\n-   \"   show_doc = \\\"State of the Test Parameter\\\"\" \"\"\\\n-   \"   set_doc = \\\"Set the state of the Test Parameter\\\"\" \"\" \\\n-   \"   def __init__ (self, name):\" \"\" \\\n-   \"      super (TestParam, self).__init__ (name, gdb.COMMAND_DATA, gdb.PARAM_BOOLEAN)\" \"\" \\\n-   \"      self.value = True\" \"\" \\\n-   \"test_param = TestParam ('print test-param')\" \"\"\\\n-   \"end\"\n-\n-gdb_test \"python print (test_param.value)\" \"True\" \"test parameter value\"\n-gdb_test \"show print test-param\" \"State of the Test Parameter on.*\" \"show parameter on\"\n-gdb_test_no_output \"set print test-param off\" \"turn off parameter\"\n-gdb_test \"show print test-param\" \"State of the Test Parameter off.*\" \"show parameter off\"\n-gdb_test \"python print (test_param.value)\" \"False\" \"test parameter value\"\n-gdb_test \"help show print test-param\" \"State of the Test Parameter.*\" \"test show help\"\n-gdb_test \"help set print test-param\" \"Set the state of the Test Parameter.*\" \"test set help\"\n-gdb_test \"help set print\" \"set print test-param -- Set the state of the Test Parameter.*\" \"test general help\"\n+with_test_prefix \"deprecated API parameter\" {\n+    gdb_py_test_multiple \"Simple gdb booleanparameter\" \\\n+\t\"python\" \"\" \\\n+\t\"class TestParam (gdb.Parameter):\" \"\" \\\n+\t\"   \\\"\\\"\\\"When enabled, test param does something useful. When disabled, does nothing.\\\"\\\"\\\"\" \"\" \\\n+\t\"   show_doc = \\\"State of the Test Parameter\\\"\" \"\"\\\n+\t\"   set_doc = \\\"Set the state of the Test Parameter\\\"\" \"\" \\\n+\t\"   def __init__ (self, name):\" \"\" \\\n+\t\"      super (TestParam, self).__init__ (name, gdb.COMMAND_DATA, gdb.PARAM_BOOLEAN)\" \"\" \\\n+\t\"      self.value = True\" \"\" \\\n+\t\"test_param = TestParam ('print test-param')\" \"\"\\\n+\t\"end\"\n+\n+    gdb_test \"python print (test_param.value)\" \"True\" \\\n+\t\"test deprecated API parameter value is True\"\n+    gdb_test \"show print test-param\" \\\n+\t\"State of the Test Parameter on.*\" \"show parameter on\"\n+    gdb_test_no_output \"set print test-param off\" \"turn off parameter\"\n+    gdb_test \"show print test-param\" \\\n+\t\"State of the Test Parameter off.*\" \"show parameter off\"\n+    gdb_test \"python print (test_param.value)\" \"False\" \\\n+\t\"test deprecated API parameter value is False\"\n+    gdb_test \"help show print test-param\" \\\n+\t\"State of the Test Parameter.*\" \"test show help\"\n+    gdb_test \"help set print test-param\" \\\n+\t\"Set the state of the Test Parameter.*\" \"test set help\"\n+    gdb_test \"help set print\" \\\n+\t\"set print test-param -- Set the state of the Test Parameter.*\" \\\n+\t\"test general help\"\n+}\n \n foreach kind {PARAM_ZUINTEGER PARAM_ZUINTEGER_UNLIMITED} {\n     gdb_py_test_multiple \"Simple gdb $kind\" \\"
    },
    {
      "sha": "d0bded49d923f4a6ebf843d67cefba56089974e8",
      "filename": "gdb/testsuite/gdb.python/py-template.exp",
      "status": "modified",
      "additions": 5,
      "deletions": 3,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/082cce059d78bdb4a9fadbbacc2cd1dc3668f084/gdb/testsuite/gdb.python/py-template.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/082cce059d78bdb4a9fadbbacc2cd1dc3668f084/gdb/testsuite/gdb.python/py-template.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.python/py-template.exp?ref=082cce059d78bdb4a9fadbbacc2cd1dc3668f084",
      "patch": "@@ -48,16 +48,18 @@ proc test_template_arg {exefile type} {\n \treturn\n     }\n     # There is no executable code in main(), so we are where we want to be\n-    gdb_test \"print (foo)\" \".*\"\n-    gdb_test_no_output \"python foo = gdb.history(0)\"\n+    gdb_test \"print (foo)\" \".*\" \\\n+\t\"print (foo) in template test of $type\"\n+    gdb_test_no_output \"python foo = gdb.history(0)\" \\\n+\t\"fetch foo from gdb.history(0) in template test of $type\"\n \n     # Replace '*' with '\\*' in regex.\n     regsub -all {\\*} $type {\\*} t\n     gdb_test \"python print (foo.type.template_argument(0))\" $t $type\n \n     gdb_test \"python print(foo.type.template_argument(-1))\" \\\n \t\"Template argument number must be non-negative\\r\\nError while executing Python code.\" \\\n-\t\"negative template argument number\"\n+\t\"negative template argument number in template test of $type\"\n }\n \n test_template_arg \"${binfile}-ci\" \"const int\""
    },
    {
      "sha": "44939800b9f4d789ca0587a691dee72722d2e06a",
      "filename": "gdb/testsuite/gdb.python/py-value.exp",
      "status": "modified",
      "additions": 33,
      "deletions": 25,
      "changes": 58,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/082cce059d78bdb4a9fadbbacc2cd1dc3668f084/gdb/testsuite/gdb.python/py-value.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/082cce059d78bdb4a9fadbbacc2cd1dc3668f084/gdb/testsuite/gdb.python/py-value.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.python/py-value.exp?ref=082cce059d78bdb4a9fadbbacc2cd1dc3668f084",
      "patch": "@@ -189,9 +189,9 @@ proc test_value_boolean {} {\n \n   gdb_test \"py test_bool (gdb.Value (0))\" \"nay\" \"check evaluation of false integer value in expression\"\n \n-  gdb_test \"py test_bool (gdb.Value (5.2))\" \"yay\" \"check evaluation of true integer value in expression\"\n+  gdb_test \"py test_bool (gdb.Value (5.2))\" \"yay\" \"check evaluation of true float value in expression\"\n \n-  gdb_test \"py test_bool (gdb.Value (0.0))\" \"nay\" \"check evaluation of false integer value in expression\"\n+  gdb_test \"py test_bool (gdb.Value (0.0))\" \"nay\" \"check evaluation of false float value in expression\"\n }\n \n proc test_value_compare {} {\n@@ -232,13 +232,12 @@ proc test_value_in_inferior {} {\n   global gdb_py_is_py3k\n \n   gdb_breakpoint [gdb_get_line_number \"break to inspect struct and union\"]\n-\n   gdb_continue_to_breakpoint \"break to inspect struct and union\"\n \n   # Just get inferior variable s in the value history, available to python.\n   gdb_test \"print s\" \" = {a = 3, b = 5}\" \"\"\n \n-  gdb_py_test_silent_cmd \"python s = gdb.history (0)\" \"get value from history\" 1\n+  gdb_py_test_silent_cmd \"python s = gdb.history (0)\" \"get value s from history\" 1\n \n   gdb_test \"python print ('result = ' + str(s\\['a'\\]))\" \" = 3\" \"access element inside struct using 8-bit string name\"\n   if { $gdb_py_is_py3k == 0 } {\n@@ -290,25 +289,31 @@ proc test_value_in_inferior {} {\n   } else {\n     gdb_test \"python inval = gdb.parse_and_eval('*(int*)0')\"\n     gdb_test \"python print (inval.is_lazy)\" \"True\"\n-    gdb_test \"python inval2 = inval+1\" \"gdb.MemoryError: Cannot access memory at address 0x0.*\" $test\n-    gdb_test \"python inval.fetch_lazy ()\" \"gdb.MemoryError: Cannot access memory at address 0x0.*\" $test\n+    gdb_test \"python inval2 = inval+1\" \\\n+\t\"gdb.MemoryError: Cannot access memory at address 0x0.*\" \\\n+\t\"$test, first test\"\n+    gdb_test \"python inval.fetch_lazy ()\" \\\n+\t\"gdb.MemoryError: Cannot access memory at address 0x0.*\" \\\n+\t\"$test, second test\"\n   }\n   set argc_value [get_integer_valueof \"argc\" 0]\n   gdb_test \"python argc_lazy = gdb.parse_and_eval('argc')\"\n   gdb_test \"python argc_notlazy = gdb.parse_and_eval('argc')\"\n   gdb_test \"python argc_notlazy.fetch_lazy()\"\n-  gdb_test \"python print (argc_lazy.is_lazy)\" \"True\"\n+  gdb_test \"python print (argc_lazy.is_lazy)\" \"True\" \\\n+      \"python print (argc_lazy.is_lazy) the first time\"\n   gdb_test \"python print (argc_notlazy.is_lazy)\" \"False\"\n   gdb_test \"print argc\" \" = $argc_value\" \"sanity check argc\"\n-  gdb_test \"python print (argc_lazy.is_lazy)\" \"\\r\\nTrue\"\n+  gdb_test \"python print (argc_lazy.is_lazy)\" \"\\r\\nTrue\" \\\n+      \"python print (argc_lazy.is_lazy) the second time\"\n   gdb_test_no_output \"set argc=[expr $argc_value + 1]\" \"change argc\"\n   gdb_test \"python print (argc_notlazy)\" \"\\r\\n$argc_value\"\n   gdb_test \"python print (argc_lazy)\" \"\\r\\n[expr $argc_value + 1]\"\n   gdb_test \"python print (argc_lazy.is_lazy)\" \"False\"\n \n   # Test string fetches,  both partial and whole.\n   gdb_test \"print st\" \"\\\"divide et impera\\\"\"\n-  gdb_py_test_silent_cmd \"python st = gdb.history (0)\" \"get value from history\" 1\n+  gdb_py_test_silent_cmd \"python st = gdb.history (0)\" \"get value st from history\" 1\n   gdb_test \"python print (st.string ())\"  \"divide et impera\"  \"Test string with no length\"\n   gdb_test \"python print (st.string (length = -1))\" \"divide et impera\" \"test string (length = -1) is all of the string\"\n   gdb_test \"python print (st.string (length = 6))\" \"divide\"\n@@ -325,7 +330,7 @@ proc test_value_in_inferior {} {\n \n   # Fetch a string that has embedded nulls.\n   gdb_test \"print nullst\" \"\\\"divide\\\\\\\\000et\\\\\\\\000impera\\\".*\"\n-  gdb_py_test_silent_cmd \"python nullst = gdb.history (0)\" \"get value from history\" 1\n+  gdb_py_test_silent_cmd \"python nullst = gdb.history (0)\" \"get value nullst from history\" 1\n   gdb_test \"python print (nullst.string ())\" \"divide\" \"test string to first null\"\n   # Python cannot print strings that contain the null (\\0) character.\n   # For the purposes of this test, use repr()\n@@ -350,26 +355,28 @@ proc test_inferior_function_call {} {\n \n     # Correct inferior call without arguments.\n     gdb_test \"p/x fp1\" \" = $hex.*\"\n-    gdb_py_test_silent_cmd \"python fp1 = gdb.history (0)\" \"get value from history\" 1\n+    gdb_py_test_silent_cmd \"python fp1 = gdb.history (0)\" \"get value fp1 from history\" 1\n     gdb_test \"python fp1 = fp1.dereference()\" \"\"\n     gdb_test \"python result = fp1()\" \"\"\n     gdb_test \"python print (result)\" \"void\"\n \n     # Correct inferior call with arguments.\n-    gdb_test \"p/x fp2\" \" = $hex.*\"\n-    gdb_py_test_silent_cmd \"python fp2 = gdb.history (0)\" \"get value from history\" 1\n+    gdb_test \"p/x fp2\" \" = $hex.*\" \\\n+\t\"print fp2 to place it into history\"\n+    gdb_py_test_silent_cmd \"python fp2 = gdb.history (0)\" \"get value fp2 from history\" 1\n     gdb_test \"python fp2 = fp2.dereference()\" \"\"\n     gdb_test \"python result2 = fp2(10,20)\" \"\"\n     gdb_test \"python print (result2)\" \"30\"\n \n     # Incorrect to call an int value.\n     gdb_test \"p i\" \" = $decimal.*\"\n-    gdb_py_test_silent_cmd \"python i = gdb.history (0)\" \"get value from history\" 1\n+    gdb_py_test_silent_cmd \"python i = gdb.history (0)\" \"get value i from history\" 1\n     gdb_test \"python result3 = i()\" \".*Value is not callable.*\"\n \n     # Incorrect number of arguments.\n-    gdb_test \"p/x fp2\" \" = $hex.*\"\n-    gdb_py_test_silent_cmd \"python fp3 = gdb.history (0)\" \"get value from history\" 1\n+    gdb_test \"p/x fp2\" \" = $hex.*\" \\\n+\t\"print fp2 again to place it into history\"\n+    gdb_py_test_silent_cmd \"python fp3 = gdb.history (0)\" \"get value fp3 from history\" 1\n     gdb_test \"python fp3 = fp3.dereference()\" \"\"\n     gdb_test \"python result2 = fp3(10)\" \".*Too few arguments in function call.*\"\n }\n@@ -451,12 +458,13 @@ proc test_subscript_regression {exefile lang} {\n  }\n \n  gdb_breakpoint [gdb_get_line_number \"break to inspect struct and union\"]\n- gdb_continue_to_breakpoint \"break to inspect struct and union\"\n+ gdb_continue_to_breakpoint \\\n+     \"break to inspect struct and union for subscript regression test\"\n \n  gdb_py_test_silent_cmd \"python intv = gdb.Value(1)\" \\\n-     \"Create a value for subscript test\" 1\n+     \"Create value intv for subscript test\" 1\n  gdb_py_test_silent_cmd \"python stringv = gdb.Value(\\\"foo\\\")\" \\\n-     \"Create a value for subscript test\" 1\n+     \"Create value stringv for subscript test\" 1\n \n  # Try to access an int with a subscript.  This should fail.\n  gdb_test \"python print (intv)\" \"1\" \"baseline print of an int Python value\"\n@@ -469,19 +477,19 @@ proc test_subscript_regression {exefile lang} {\n \n  # Try to access an int array via a pointer with a subscript.  This should pass.\n  gdb_py_test_silent_cmd \"print p\" \"Build pointer to array\" 1\n- gdb_py_test_silent_cmd \"python pointer = gdb.history(0)\" \"\" 1\n+ gdb_py_test_silent_cmd \"python pointer = gdb.history(0)\" \"fetch pointer\" 0\n  gdb_test \"python print (pointer\\[0\\])\" \"1\" \"access array via pointer with int subscript\"\n  gdb_test \"python print (pointer\\[intv\\])\" \"2\" \"access array via pointer with value subscript\"\n \n  # Try to access a single dimension array with a subscript to the\n  # result.  This should fail.\n  gdb_test \"python print (pointer\\[intv\\]\\[0\\])\" \"gdb.error: Cannot subscript requested type.*\" \\\n-     \"Attempt to access an integer with a subscript\"\n+     \"Attempt to access a single dimension array with a two subscripts\"\n \n  # Lastly, test subscript access to an array with multiple\n  # dimensions.  This should pass.\n  gdb_py_test_silent_cmd \"print {\\\"fu \\\",\\\"foo\\\",\\\"bar\\\"}\" \"Build array\" 1\n- gdb_py_test_silent_cmd \"python marray = gdb.history(0)\" \"\" 1\n+ gdb_py_test_silent_cmd \"python marray = gdb.history(0)\" \"fetch marray\" 0\n  gdb_test \"python print (marray\\[1\\]\\[2\\])\" \"o.\" \"test multiple subscript\"\n }\n \n@@ -505,9 +513,9 @@ proc test_value_hash {} {\n     \"three = gdb.Value(3)\" \"\" \\\n     \"vdict = {one:\\\"one str\\\",two:\\\"two str\\\",three:\\\"three str\\\"}\" \"\" \\\n     \"end\"\n-    gdb_test \"python print (vdict\\[one\\])\" \"one str\" \"test dictionary hash\"\n-    gdb_test \"python print (vdict\\[two\\])\" \"two str\" \"test dictionary hash\"\n-    gdb_test \"python print (vdict\\[three\\])\" \"three str\" \"test dictionary hash\"\n+    gdb_test \"python print (vdict\\[one\\])\" \"one str\" \"test dictionary hash for one\"\n+    gdb_test \"python print (vdict\\[two\\])\" \"two str\" \"test dictionary hash for two\"\n+    gdb_test \"python print (vdict\\[three\\])\" \"three str\" \"test dictionary hash for three\"\n     gdb_test \"python print (one.__hash__() == hash(one))\" \"True\" \"test inbuilt hash\"\n }\n "
    }
  ]
}