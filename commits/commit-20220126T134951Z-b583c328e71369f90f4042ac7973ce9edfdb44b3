{
  "sha": "b583c328e71369f90f4042ac7973ce9edfdb44b3",
  "node_id": "C_kwDOANOeidoAKGI1ODNjMzI4ZTcxMzY5ZjkwZjQwNDJhYzc5NzNjZTllZGZkYjQ0YjM",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2022-01-04T18:00:52Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2022-01-26T13:49:51Z"
    },
    "message": "Add a way to temporarily set a gdb parameter from Python\n\nIt's sometimes useful to temporarily set some gdb parameter from\nPython.  Now that the 'endian' crash is fixed, and now that the\ncurrent language is no longer captured by the Python layer, it seems\nreasonable to add a helper function for this situation.\n\nThis adds a new gdb.with_parameter function.  This creates a context\nmanager which temporarily sets some parameter to a specified value.\nThe old value is restored when the context is exited.  This is most\nuseful with the Python \"with\" statement:\n\n   with gdb.with_parameter('language', 'ada'):\n      ... do Ada stuff\n\nThis also adds a simple function to set a parameter,\ngdb.set_parameter, as suggested by Andrew.\n\nThis is PR python/10790.\n\nBug: https://sourceware.org/bugzilla/show_bug.cgi?id=10790",
    "tree": {
      "sha": "3ed1cfd9763fe4984c72d204113f3b166e47d011",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/3ed1cfd9763fe4984c72d204113f3b166e47d011"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/b583c328e71369f90f4042ac7973ce9edfdb44b3",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b583c328e71369f90f4042ac7973ce9edfdb44b3",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/b583c328e71369f90f4042ac7973ce9edfdb44b3",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b583c328e71369f90f4042ac7973ce9edfdb44b3/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "dedb7102b3b35f789fd5c140fe01917eaeae2853",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/dedb7102b3b35f789fd5c140fe01917eaeae2853",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/dedb7102b3b35f789fd5c140fe01917eaeae2853"
    }
  ],
  "stats": {
    "total": 70,
    "additions": 70,
    "deletions": 0
  },
  "files": [
    {
      "sha": "31dff785d4e1908405e91abcb263354835365d07",
      "filename": "gdb/NEWS",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b583c328e71369f90f4042ac7973ce9edfdb44b3/gdb/NEWS",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b583c328e71369f90f4042ac7973ce9edfdb44b3/gdb/NEWS",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/NEWS?ref=b583c328e71369f90f4042ac7973ce9edfdb44b3",
      "patch": "@@ -146,6 +146,13 @@ show debug lin-lwp\n   ** New function gdb.host_charset(), returns a string, which is the\n      name of the current host charset.\n \n+  ** New gdb.set_parameter(NAME, VALUE).  This sets the gdb parameter\n+     NAME to VALUE.\n+\n+  ** New gdb.with_parameter(NAME, VALUE).  This returns a context\n+     manager that temporarily sets the gdb parameter NAME to VALUE,\n+     then resets it when the context is exited.\n+\n * New features in the GDB remote stub, GDBserver\n \n   ** GDBserver is now supported on OpenRISC GNU/Linux."
    },
    {
      "sha": "39bf6e8884dc1907268a95a40931524543e4b3f5",
      "filename": "gdb/doc/python.texi",
      "status": "modified",
      "additions": 26,
      "deletions": 0,
      "changes": 26,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b583c328e71369f90f4042ac7973ce9edfdb44b3/gdb/doc/python.texi",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b583c328e71369f90f4042ac7973ce9edfdb44b3/gdb/doc/python.texi",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/doc/python.texi?ref=b583c328e71369f90f4042ac7973ce9edfdb44b3",
      "patch": "@@ -332,6 +332,32 @@ parameter's value is converted to a Python value of the appropriate\n type, and returned.\n @end defun\n \n+@findex gdb.set_parameter\n+@defun gdb.set_parameter (name, value)\n+Sets the gdb parameter @var{name} to @var{value}.  As with\n+@code{gdb.parameter}, the parameter name string may contain spaces if\n+the parameter has a multi-part name.\n+@end defun\n+\n+@findex gdb.with_parameter\n+@defun gdb.with_parameter (name, value)\n+Create a Python context manager (for use with the Python\n+@command{with} statement) that temporarily sets the gdb parameter\n+@var{name} to @var{value}.  On exit from the context, the previous\n+value will be restored.\n+\n+This uses @code{gdb.parameter} in its implementation, so it can throw\n+the same exceptions as that function.\n+\n+For example, it's sometimes useful to evaluate some Python code with a\n+particular gdb language:\n+\n+@smallexample\n+with gdb.with_parameter('language', 'pascal'):\n+  ... language-specific operations\n+@end smallexample\n+@end defun\n+\n @findex gdb.history\n @defun gdb.history (number)\n Return a value from @value{GDBN}'s value history (@pxref{Value"
    },
    {
      "sha": "d5e7eac45cc5e02046c595897974aef642fb93cc",
      "filename": "gdb/python/lib/gdb/__init__.py",
      "status": "modified",
      "additions": 19,
      "deletions": 0,
      "changes": 19,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b583c328e71369f90f4042ac7973ce9edfdb44b3/gdb/python/lib/gdb/__init__.py",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b583c328e71369f90f4042ac7973ce9edfdb44b3/gdb/python/lib/gdb/__init__.py",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/lib/gdb/__init__.py?ref=b583c328e71369f90f4042ac7973ce9edfdb44b3",
      "patch": "@@ -17,6 +17,7 @@\n import os\n import sys\n import _gdb\n+from contextlib import contextmanager\n \n # Python 3 moved \"reload\"\n if sys.version_info >= (3, 4):\n@@ -231,6 +232,24 @@ def find_pc_line(pc):\n     return current_progspace().find_pc_line(pc)\n \n \n+def set_parameter(name, value):\n+    \"\"\"Set the GDB parameter NAME to VALUE.\"\"\"\n+    execute('set ' + name + ' ' + str(value), to_string=True)\n+\n+\n+@contextmanager\n+def with_parameter(name, value):\n+    \"\"\"Temporarily set the GDB parameter NAME to VALUE.\n+    Note that this is a context manager.\"\"\"\n+    old_value = parameter(name)\n+    set_parameter(name, value)\n+    try:\n+        # Nothing that useful to return.\n+        yield None\n+    finally:\n+        set_parameter(name, old_value)\n+\n+\n try:\n     from pygments import formatters, lexers, highlight\n "
    },
    {
      "sha": "596ab9a9af8522ceb0b567a06a682bf803b0748c",
      "filename": "gdb/testsuite/gdb.python/py-lookup-type.exp",
      "status": "modified",
      "additions": 18,
      "deletions": 0,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b583c328e71369f90f4042ac7973ce9edfdb44b3/gdb/testsuite/gdb.python/py-lookup-type.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b583c328e71369f90f4042ac7973ce9edfdb44b3/gdb/testsuite/gdb.python/py-lookup-type.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.python/py-lookup-type.exp?ref=b583c328e71369f90f4042ac7973ce9edfdb44b3",
      "patch": "@@ -55,10 +55,28 @@ test_lookup_type \"objective-c\" \"char\"\n \n test_lookup_type \"pascal\" \"char\"\n \n+gdb_test \"show language\" \\\n+    \"The current source language is .pascal..\" \\\n+    \"show language before 'with'\"\n+gdb_test_multiline \"look up type using set_parameter\" \\\n+    \"python\" \"\" \\\n+    \"with gdb.with_parameter('language', 'ada'):\" \"\" \\\n+    \"  print(gdb.lookup_type('character'))\" \"\" \\\n+    \"end\" \"character\"\n+gdb_test \"show language\" \\\n+    \"The current source language is .pascal..\" \\\n+    \"show language after 'with'\"\n+\n+\n # Ensure that the language can be changed from within Python and still\n # affect the results.\n gdb_test_multiline \"look up ada type from another language\" \\\n     \"python\" \"\" \\\n     \"gdb.execute('set language ada')\" \"\" \\\n     \"print(gdb.lookup_type('character'))\" \"\" \\\n     \"end\" \"character\"\n+\n+gdb_test_no_output \"python gdb.set_parameter('language', 'rust')\"\n+gdb_test \"show language\" \\\n+    \"The current source language is .rust..\" \\\n+    \"show language after 'set_parameter'\""
    }
  ]
}