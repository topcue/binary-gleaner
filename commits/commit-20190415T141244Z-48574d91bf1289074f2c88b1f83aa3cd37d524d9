{
  "sha": "48574d91bf1289074f2c88b1f83aa3cd37d524d9",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NDg1NzRkOTFiZjEyODkwNzRmMmM4OGIxZjgzYWEzY2QzN2Q1MjRkOQ==",
  "commit": {
    "author": {
      "name": "Alan Hayward",
      "email": "alan.hayward@arm.com",
      "date": "2019-04-15T11:31:21Z"
    },
    "committer": {
      "name": "Alan Hayward",
      "email": "alan.hayward@arm.com",
      "date": "2019-04-15T14:12:44Z"
    },
    "message": "AArch64 SVE: Support changing vector lengths for ptrace\n\nWhen writing registers to the kernel, check if regcache VG has been changed. If\nso then update the thread's vector length, then write back the registers.\n\nWhen reading registers from the kernel, ensure regcache VG register is updated.\nThe regcache registers should already be of the correct length.\n\nRemove all the checks that error if the vector length has changed.\n\ngdb/ChangeLog:\n\n\t* aarch64-linux-nat.c (store_sveregs_to_thread): Set vector length.\n\t* nat/aarch64-sve-linux-ptrace.c (aarch64_sve_set_vq): New function.\n\t(aarch64_sve_regs_copy_to_reg_buf): Remove VG checks.\n\t(aarch64_sve_regs_copy_from_reg_buf): Likewise.\n\t* nat/aarch64-sve-linux-ptrace.h (aarch64_sve_set_vq): New declaration.",
    "tree": {
      "sha": "8bb9c8cbd7c8c487de165db5fd0fe8914f5036d7",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/8bb9c8cbd7c8c487de165db5fd0fe8914f5036d7"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/48574d91bf1289074f2c88b1f83aa3cd37d524d9",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/48574d91bf1289074f2c88b1f83aa3cd37d524d9",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/48574d91bf1289074f2c88b1f83aa3cd37d524d9",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/48574d91bf1289074f2c88b1f83aa3cd37d524d9/comments",
  "author": {
    "login": "a74nh",
    "id": 4146708,
    "node_id": "MDQ6VXNlcjQxNDY3MDg=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4146708?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/a74nh",
    "html_url": "https://github.com/a74nh",
    "followers_url": "https://api.github.com/users/a74nh/followers",
    "following_url": "https://api.github.com/users/a74nh/following{/other_user}",
    "gists_url": "https://api.github.com/users/a74nh/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/a74nh/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/a74nh/subscriptions",
    "organizations_url": "https://api.github.com/users/a74nh/orgs",
    "repos_url": "https://api.github.com/users/a74nh/repos",
    "events_url": "https://api.github.com/users/a74nh/events{/privacy}",
    "received_events_url": "https://api.github.com/users/a74nh/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "a74nh",
    "id": 4146708,
    "node_id": "MDQ6VXNlcjQxNDY3MDg=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4146708?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/a74nh",
    "html_url": "https://github.com/a74nh",
    "followers_url": "https://api.github.com/users/a74nh/followers",
    "following_url": "https://api.github.com/users/a74nh/following{/other_user}",
    "gists_url": "https://api.github.com/users/a74nh/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/a74nh/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/a74nh/subscriptions",
    "organizations_url": "https://api.github.com/users/a74nh/orgs",
    "repos_url": "https://api.github.com/users/a74nh/repos",
    "events_url": "https://api.github.com/users/a74nh/events{/privacy}",
    "received_events_url": "https://api.github.com/users/a74nh/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "4da037ef9dba6c17089250d228efdbe6f7d830c9",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4da037ef9dba6c17089250d228efdbe6f7d830c9",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/4da037ef9dba6c17089250d228efdbe6f7d830c9"
    }
  ],
  "stats": {
    "total": 119,
    "additions": 73,
    "deletions": 46
  },
  "files": [
    {
      "sha": "4e73bf7e2792d15ebc81bd5640fc8a379ab989b5",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/48574d91bf1289074f2c88b1f83aa3cd37d524d9/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/48574d91bf1289074f2c88b1f83aa3cd37d524d9/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=48574d91bf1289074f2c88b1f83aa3cd37d524d9",
      "patch": "@@ -1,3 +1,13 @@\n+2019-04-15  Alan Hayward  <alan.hayward@arm.com>\n+\n+\t* aarch64-linux-nat.c (store_sveregs_to_thread): Set vector length.\n+\t* nat/aarch64-sve-linux-ptrace.c (aarch64_sve_set_vq): New\n+\tfunction.\n+\t(aarch64_sve_regs_copy_to_reg_buf): Remove VG checks.\n+\t(aarch64_sve_regs_copy_from_reg_buf): Likewise.\n+\t* nat/aarch64-sve-linux-ptrace.h (aarch64_sve_set_vq): New\n+\tdeclaration.\n+\n 2019-04-15  Alan Hayward  <alan.hayward@arm.com>\n \n \t* aarch64-linux-nat.c"
    },
    {
      "sha": "8ca96143013e499cbbfe3eafce9a0b5785884f65",
      "filename": "gdb/aarch64-linux-nat.c",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/48574d91bf1289074f2c88b1f83aa3cd37d524d9/gdb/aarch64-linux-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/48574d91bf1289074f2c88b1f83aa3cd37d524d9/gdb/aarch64-linux-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/aarch64-linux-nat.c?ref=48574d91bf1289074f2c88b1f83aa3cd37d524d9",
      "patch": "@@ -412,6 +412,11 @@ store_sveregs_to_thread (struct regcache *regcache)\n   struct iovec iovec;\n   int tid = regcache->ptid ().lwp ();\n \n+  /* First store vector length to the thread.  This is done first to ensure the\n+     ptrace buffers read from the kernel are the correct size.  */\n+  if (!aarch64_sve_set_vq (tid, regcache))\n+    perror_with_name (_(\"Unable to set VG register.\"));\n+\n   /* Obtain a dump of SVE registers from ptrace.  */\n   std::unique_ptr<gdb_byte[]> base = aarch64_sve_get_sveregs (tid);\n "
    },
    {
      "sha": "635b4c9d68a7f90bd8f5e40efb6117fbb0d57f96",
      "filename": "gdb/nat/aarch64-sve-linux-ptrace.c",
      "status": "modified",
      "additions": 48,
      "deletions": 44,
      "changes": 92,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/48574d91bf1289074f2c88b1f83aa3cd37d524d9/gdb/nat/aarch64-sve-linux-ptrace.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/48574d91bf1289074f2c88b1f83aa3cd37d524d9/gdb/nat/aarch64-sve-linux-ptrace.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/nat/aarch64-sve-linux-ptrace.c?ref=48574d91bf1289074f2c88b1f83aa3cd37d524d9",
      "patch": "@@ -27,8 +27,6 @@\n #include \"common/common-regcache.h\"\n #include \"common/byte-vector.h\"\n \n-static bool vq_change_warned = false;\n-\n /* See nat/aarch64-sve-linux-ptrace.h.  */\n \n uint64_t\n@@ -63,6 +61,48 @@ aarch64_sve_get_vq (int tid)\n \n /* See nat/aarch64-sve-linux-ptrace.h.  */\n \n+bool\n+aarch64_sve_set_vq (int tid, uint64_t vq)\n+{\n+  struct iovec iovec;\n+  struct user_sve_header header;\n+\n+  iovec.iov_len = sizeof (header);\n+  iovec.iov_base = &header;\n+\n+  if (ptrace (PTRACE_GETREGSET, tid, NT_ARM_SVE, &iovec) < 0)\n+    {\n+      /* SVE is not supported.  */\n+      return false;\n+    }\n+\n+  header.vl = sve_vl_from_vq (vq);\n+\n+  if (ptrace (PTRACE_SETREGSET, tid, NT_ARM_SVE, &iovec) < 0)\n+    {\n+      /* Vector length change failed.  */\n+      return false;\n+    }\n+\n+  return true;\n+}\n+\n+/* See nat/aarch64-sve-linux-ptrace.h.  */\n+\n+bool\n+aarch64_sve_set_vq (int tid, struct reg_buffer_common *reg_buf)\n+{\n+  if (reg_buf->get_register_status (AARCH64_SVE_VG_REGNUM) != REG_VALID)\n+    return false;\n+\n+  uint64_t reg_vg = 0;\n+  reg_buf->raw_collect (AARCH64_SVE_VG_REGNUM, &reg_vg);\n+\n+  return aarch64_sve_set_vq (tid, sve_vq_from_vg (reg_vg));\n+}\n+\n+/* See nat/aarch64-sve-linux-ptrace.h.  */\n+\n std::unique_ptr<gdb_byte[]>\n aarch64_sve_get_sveregs (int tid)\n {\n@@ -95,37 +135,18 @@ aarch64_sve_regs_copy_to_reg_buf (struct reg_buffer_common *reg_buf,\n {\n   char *base = (char *) buf;\n   struct user_sve_header *header = (struct user_sve_header *) buf;\n-  uint64_t vq, vg_reg_buf = 0;\n \n-  vq = sve_vq_from_vl (header->vl);\n+  uint64_t vq = sve_vq_from_vl (header->vl);\n+  uint64_t vg = sve_vg_from_vl (header->vl);\n \n   /* Sanity check the data in the header.  */\n   if (!sve_vl_valid (header->vl)\n       || SVE_PT_SIZE (vq, header->flags) != header->size)\n     error (_(\"Invalid SVE header from kernel.\"));\n \n-  if (REG_VALID == reg_buf->get_register_status (AARCH64_SVE_VG_REGNUM))\n-    reg_buf->raw_collect (AARCH64_SVE_VG_REGNUM, &vg_reg_buf);\n-\n-  if (vg_reg_buf == 0)\n-    {\n-      /* VG has not been set.  */\n-      vg_reg_buf = sve_vg_from_vl (header->vl);\n-      reg_buf->raw_supply (AARCH64_SVE_VG_REGNUM, &vg_reg_buf);\n-    }\n-  else if (vg_reg_buf != sve_vg_from_vl (header->vl) && !vq_change_warned)\n-    {\n-      /* Vector length on the running process has changed.  GDB currently does\n-\t not support this and will result in GDB showing incorrect partially\n-\t incorrect data for the vector registers.  Warn once and continue.  We\n-\t do not expect many programs to exhibit this behaviour.  To fix this\n-\t we need to spot the change earlier and generate a new target\n-\t descriptor.  */\n-      warning (_(\"SVE Vector length has changed (%ld to %d). \"\n-\t\t \"Vector registers may show incorrect data.\"),\n-\t       vg_reg_buf, sve_vg_from_vl (header->vl));\n-      vq_change_warned = true;\n-    }\n+  /* Update VG.  Note, the registers in the regcache will already be of the\n+     correct length.  */\n+  reg_buf->raw_supply (AARCH64_SVE_VG_REGNUM, &vg);\n \n   if (HAS_SVE_STATE (*header))\n     {\n@@ -187,30 +208,13 @@ aarch64_sve_regs_copy_from_reg_buf (const struct reg_buffer_common *reg_buf,\n {\n   struct user_sve_header *header = (struct user_sve_header *) buf;\n   char *base = (char *) buf;\n-  uint64_t vq, vg_reg_buf = 0;\n-\n-  vq = sve_vq_from_vl (header->vl);\n+  uint64_t vq = sve_vq_from_vl (header->vl);\n \n   /* Sanity check the data in the header.  */\n   if (!sve_vl_valid (header->vl)\n       || SVE_PT_SIZE (vq, header->flags) != header->size)\n     error (_(\"Invalid SVE header from kernel.\"));\n \n-  if (REG_VALID == reg_buf->get_register_status (AARCH64_SVE_VG_REGNUM))\n-    reg_buf->raw_collect (AARCH64_SVE_VG_REGNUM, &vg_reg_buf);\n-\n-  if (vg_reg_buf != 0 && vg_reg_buf != sve_vg_from_vl (header->vl))\n-    {\n-      /* Vector length on the running process has changed.  GDB currently does\n-\t not support this and will result in GDB writing invalid data back to\n-\t the vector registers.  Error and exit.  We do not expect many programs\n-\t to exhibit this behaviour.  To fix this we need to spot the change\n-\t earlier and generate a new target descriptor.  */\n-      error (_(\"SVE Vector length has changed (%ld to %d). \"\n-\t       \"Cannot write back registers.\"),\n-\t     vg_reg_buf, sve_vg_from_vl (header->vl));\n-    }\n-\n   if (!HAS_SVE_STATE (*header))\n     {\n       /* There is no SVE state yet - the register dump contains a fpsimd"
    },
    {
      "sha": "ee994f26c6f515c27b8242d68ae4db9873ab605b",
      "filename": "gdb/nat/aarch64-sve-linux-ptrace.h",
      "status": "modified",
      "additions": 10,
      "deletions": 2,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/48574d91bf1289074f2c88b1f83aa3cd37d524d9/gdb/nat/aarch64-sve-linux-ptrace.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/48574d91bf1289074f2c88b1f83aa3cd37d524d9/gdb/nat/aarch64-sve-linux-ptrace.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/nat/aarch64-sve-linux-ptrace.h?ref=48574d91bf1289074f2c88b1f83aa3cd37d524d9",
      "patch": "@@ -39,17 +39,25 @@\n \n uint64_t aarch64_sve_get_vq (int tid);\n \n+/* Set VQ in the kernel for the given tid, using either the value VQ or\n+   reading from the register VG in the register buffer.  */\n+\n+bool aarch64_sve_set_vq (int tid, uint64_t vq);\n+bool aarch64_sve_set_vq (int tid, struct reg_buffer_common *reg_buf);\n+\n /* Read the current SVE register set using ptrace, allocating space as\n    required.  */\n \n extern std::unique_ptr<gdb_byte[]> aarch64_sve_get_sveregs (int tid);\n \n-/* Put the registers from linux structure buf into register buffer.  */\n+/* Put the registers from linux structure buf into register buffer.  Assumes the\n+   vector lengths in the register buffer match the size in the kernel.  */\n \n extern void aarch64_sve_regs_copy_to_reg_buf (struct reg_buffer_common *reg_buf,\n \t\t\t\t\t      const void *buf);\n \n-/* Put the registers from register buffer into linux structure buf.  */\n+/* Put the registers from register buffer into linux structure buf.  Assumes the\n+   vector lengths in the register buffer match the size in the kernel.  */\n \n extern void\n aarch64_sve_regs_copy_from_reg_buf (const struct reg_buffer_common *reg_buf,"
    }
  ]
}