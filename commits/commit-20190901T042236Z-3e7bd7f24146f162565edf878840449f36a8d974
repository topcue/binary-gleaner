{
  "sha": "3e7bd7f24146f162565edf878840449f36a8d974",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6M2U3YmQ3ZjI0MTQ2ZjE2MjU2NWVkZjg3ODg0MDQ0OWYzNmE4ZDk3NA==",
  "commit": {
    "author": {
      "name": "Jim Wilson",
      "email": "jimw@sifive.com",
      "date": "2019-09-01T04:22:36Z"
    },
    "committer": {
      "name": "Jim Wilson",
      "email": "jimw@sifive.com",
      "date": "2019-09-01T04:22:36Z"
    },
    "message": "RISC-V: Fix linker problems with tls copy relocs.\n\nThe linker doesn't allocate memory space for sections that are only SEC_ALLOC\nand SEC_THREAD_LOCAL.  See the IS_TBSS test in ld/ldlang.c.  So we need to\npretend that .tdata.dyn sections have contents to get the right result.  It\nwill be marked this way anyways if there is a .tdata section to merge with.\n\n\tbfd/\n\tPR 23825\n\t* elfnn-riscv.c (riscv_elf_create_dynamic_sections): Add SEC_LOAD,\n\tSEC_DATA, and SEC_HAS_CONTENTS to .tdata.dyn section.",
    "tree": {
      "sha": "e1562ea8fb24db5b415d76a083a029e91d531d6c",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/e1562ea8fb24db5b415d76a083a029e91d531d6c"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/3e7bd7f24146f162565edf878840449f36a8d974",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3e7bd7f24146f162565edf878840449f36a8d974",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/3e7bd7f24146f162565edf878840449f36a8d974",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3e7bd7f24146f162565edf878840449f36a8d974/comments",
  "author": null,
  "committer": null,
  "parents": [
    {
      "sha": "5d2c57a3b7eae927bac295f4e3b2db120f3423d9",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5d2c57a3b7eae927bac295f4e3b2db120f3423d9",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/5d2c57a3b7eae927bac295f4e3b2db120f3423d9"
    }
  ],
  "stats": {
    "total": 20,
    "additions": 20,
    "deletions": 0
  },
  "files": [
    {
      "sha": "2b063837683660bea5bc7081cadfca6c35e7a887",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3e7bd7f24146f162565edf878840449f36a8d974/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3e7bd7f24146f162565edf878840449f36a8d974/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=3e7bd7f24146f162565edf878840449f36a8d974",
      "patch": "@@ -1,3 +1,9 @@\n+2019-08-31  Jim Wilson  <jimw@sifive.com>\n+\n+\tPR 23825\n+\t* elfnn-riscv.c (riscv_elf_create_dynamic_sections): Add SEC_LOAD,\n+\tSEC_DATA, and SEC_HAS_CONTENTS to .tdata.dyn section.\n+\n 2019-08-30  Jim Wilson  <jimw@sifive.com>\n \n \t* elfnn-riscv.c (riscv_elf_relocate_section): For unresolvable reloc"
    },
    {
      "sha": "1d04ae9b7eff7d3479c3aaf0401ac4badf31d096",
      "filename": "bfd/elfnn-riscv.c",
      "status": "modified",
      "additions": 14,
      "deletions": 0,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3e7bd7f24146f162565edf878840449f36a8d974/bfd/elfnn-riscv.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3e7bd7f24146f162565edf878840449f36a8d974/bfd/elfnn-riscv.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elfnn-riscv.c?ref=3e7bd7f24146f162565edf878840449f36a8d974",
      "patch": "@@ -373,9 +373,23 @@ riscv_elf_create_dynamic_sections (bfd *dynobj,\n \n   if (!bfd_link_pic (info))\n     {\n+      /* Technically, this section doesn't have contents.  It is used as the\n+\t target of TLS copy relocs, to copy TLS data from shared libraries into\n+\t the executable.  However, if we don't mark it as loadable, then it\n+\t matches the IS_TBSS test in ldlang.c, and there is no run-time address\n+\t space allocated for it even though it has SEC_ALLOC.  That test is\n+\t correct for .tbss, but not correct for this section.  There is also\n+\t a second problem that having a section with no contents can only work\n+\t if it comes after all sections with contents in the same segment,\n+\t but the linker script does not guarantee that.  This is just mixed in\n+\t with other .tdata.* sections.  We can fix both problems by lying and\n+\t saying that there are contents.  This section is expected to be small\n+\t so this should not cause a significant extra program startup cost.  */\n       htab->sdyntdata =\n \tbfd_make_section_anyway_with_flags (dynobj, \".tdata.dyn\",\n \t\t\t\t\t    (SEC_ALLOC | SEC_THREAD_LOCAL\n+\t\t\t\t\t     | SEC_LOAD | SEC_DATA\n+\t\t\t\t\t     | SEC_HAS_CONTENTS\n \t\t\t\t\t     | SEC_LINKER_CREATED));\n     }\n "
    }
  ]
}