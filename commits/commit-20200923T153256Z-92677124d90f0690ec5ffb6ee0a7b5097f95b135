{
  "sha": "92677124d90f0690ec5ffb6ee0a7b5097f95b135",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OTI2NzcxMjRkOTBmMDY5MGVjNWZmYjZlZTBhN2I1MDk3Zjk1YjEzNQ==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-09-23T15:32:54Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-09-23T15:32:56Z"
    },
    "message": "Simplify compile_module cleanup\n\nThis simplifies compile_module cleanup by removing the need to\nexplicitly free anything.  struct setup_sections_data is also cleaned\nup a bit.\n\ngdb/ChangeLog\n2020-09-23  Tom Tromey  <tom@tromey.com>\n\n\t* compile/compile-object-run.c (do_module_cleanup)\n\t<~do_module_cleanup> :Remove.\n\t(do_module_cleanup): Update.\n\t* compile/compile-object-load.h (struct munmap_list): Add move\n\tassignment operator.\n\t<source_file>: Now a std::string.\n\t<munmap_list>: Rename.  No longer a pointer.\n\t* compile/compile-object-load.c (struct setup_sections_data): Add\n\tconstructor.\n\t<setup_one_section>: Declare.\n\t<munmap_list>: Move earlier.\n\t<m_bfd>: New member.\n\t<m_last_size, m_last_section_first, m_last_prot,\n\tm_last_max_alignment>: Rename, add initializers where needed.\n\t(setup_sections_data::setup_one_section): Rename from\n\tsetup_sections.  Update.\n\t(compile_object_load): Update.  Don't use bfd_map_over_sections.",
    "tree": {
      "sha": "857576b16b81d4d26c44f3c66ef4192148b64cdb",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/857576b16b81d4d26c44f3c66ef4192148b64cdb"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/92677124d90f0690ec5ffb6ee0a7b5097f95b135",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/92677124d90f0690ec5ffb6ee0a7b5097f95b135",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/92677124d90f0690ec5ffb6ee0a7b5097f95b135",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/92677124d90f0690ec5ffb6ee0a7b5097f95b135/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "e616f60a6bc233acdb9ad1c37833a976f21aecec",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e616f60a6bc233acdb9ad1c37833a976f21aecec",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/e616f60a6bc233acdb9ad1c37833a976f21aecec"
    }
  ],
  "stats": {
    "total": 139,
    "additions": 83,
    "deletions": 56
  },
  "files": [
    {
      "sha": "e7ce8f48a24e56a540ee4ad45822e18a65e3efb9",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 20,
      "deletions": 0,
      "changes": 20,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/92677124d90f0690ec5ffb6ee0a7b5097f95b135/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/92677124d90f0690ec5ffb6ee0a7b5097f95b135/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=92677124d90f0690ec5ffb6ee0a7b5097f95b135",
      "patch": "@@ -1,3 +1,23 @@\n+2020-09-23  Tom Tromey  <tom@tromey.com>\n+\n+\t* compile/compile-object-run.c (do_module_cleanup)\n+\t<~do_module_cleanup> :Remove.\n+\t(do_module_cleanup): Update.\n+\t* compile/compile-object-load.h (struct munmap_list): Add move\n+\tassignment operator.\n+\t<source_file>: Now a std::string.\n+\t<munmap_list>: Rename.  No longer a pointer.\n+\t* compile/compile-object-load.c (struct setup_sections_data): Add\n+\tconstructor.\n+\t<setup_one_section>: Declare.\n+\t<munmap_list>: Move earlier.\n+\t<m_bfd>: New member.\n+\t<m_last_size, m_last_section_first, m_last_prot,\n+\tm_last_max_alignment>: Rename, add initializers where needed.\n+\t(setup_sections_data::setup_one_section): Rename from\n+\tsetup_sections.  Update.\n+\t(compile_object_load): Update.  Don't use bfd_map_over_sections.\n+\n 2020-09-23  Tom Tromey  <tom@tromey.com>\n \n \t* compile/compile-object-run.c (struct do_module_cleanup): Add"
    },
    {
      "sha": "bde3b742db4231ad76b17016f857cade8514eca5",
      "filename": "gdb/compile/compile-object-load.c",
      "status": "modified",
      "additions": 57,
      "deletions": 46,
      "changes": 103,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/92677124d90f0690ec5ffb6ee0a7b5097f95b135/gdb/compile/compile-object-load.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/92677124d90f0690ec5ffb6ee0a7b5097f95b135/gdb/compile/compile-object-load.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/compile/compile-object-load.c?ref=92677124d90f0690ec5ffb6ee0a7b5097f95b135",
      "patch": "@@ -62,34 +62,50 @@ munmap_list::~munmap_list ()\n     }\n }\n \n-/* Helper data for setup_sections.  */\n+/* A data structure that is used to lay out sections of our objfile in\n+   inferior memory.  */\n \n struct setup_sections_data\n {\n+  explicit setup_sections_data (bfd *abfd)\n+    : m_bfd (abfd),\n+      m_last_section_first (abfd->sections)\n+  {\n+  }\n+\n+  /* Place all ABFD sections next to each other obeying all\n+     constraints.  */\n+  void setup_one_section (asection *sect);\n+\n+  /* List of inferior mmap ranges where setup_sections should add its\n+     next range.  */\n+  struct munmap_list munmap_list;\n+\n+private:\n+\n+  /* The BFD.  */\n+  bfd *m_bfd;\n+\n   /* Size of all recent sections with matching LAST_PROT.  */\n-  CORE_ADDR last_size;\n+  CORE_ADDR m_last_size = 0;\n \n   /* First section matching LAST_PROT.  */\n-  asection *last_section_first;\n+  asection *m_last_section_first;\n \n   /* Memory protection like the prot parameter of gdbarch_infcall_mmap. */\n-  unsigned last_prot;\n+  unsigned m_last_prot = -1;\n \n   /* Maximum of alignments of all sections matching LAST_PROT.\n      This value is always at least 1.  This value is always a power of 2.  */\n-  CORE_ADDR last_max_alignment;\n+  CORE_ADDR m_last_max_alignment = -1;\n \n-  /* List of inferior mmap ranges where setup_sections should add its\n-     next range.  */\n-  std::unique_ptr<struct munmap_list> munmap_list;\n };\n \n-/* Place all ABFD sections next to each other obeying all constraints.  */\n+/* See setup_sections_data.  */\n \n-static void\n-setup_sections (bfd *abfd, asection *sect, void *data_voidp)\n+void\n+setup_sections_data::setup_one_section (asection *sect)\n {\n-  struct setup_sections_data *data = (struct setup_sections_data *) data_voidp;\n   CORE_ADDR alignment;\n   unsigned prot;\n \n@@ -112,7 +128,7 @@ setup_sections (bfd *abfd, asection *sect, void *data_voidp)\n       if (compile_debug)\n \tfprintf_unfiltered (gdb_stdlog,\n \t\t\t    \"module \\\"%s\\\" section \\\"%s\\\" size %s prot %u\\n\",\n-\t\t\t    bfd_get_filename (abfd),\n+\t\t\t    bfd_get_filename (m_bfd),\n \t\t\t    bfd_section_name (sect),\n \t\t\t    paddress (target_gdbarch (),\n \t\t\t\t      bfd_section_size (sect)),\n@@ -122,55 +138,55 @@ setup_sections (bfd *abfd, asection *sect, void *data_voidp)\n     prot = -1;\n \n   if (sect == NULL\n-      || (data->last_prot != prot && bfd_section_size (sect) != 0))\n+      || (m_last_prot != prot && bfd_section_size (sect) != 0))\n     {\n       CORE_ADDR addr;\n       asection *sect_iter;\n \n-      if (data->last_size != 0)\n+      if (m_last_size != 0)\n \t{\n-\t  addr = gdbarch_infcall_mmap (target_gdbarch (), data->last_size,\n-\t\t\t\t       data->last_prot);\n-\t  data->munmap_list->add (addr, data->last_size);\n+\t  addr = gdbarch_infcall_mmap (target_gdbarch (), m_last_size,\n+\t\t\t\t       m_last_prot);\n+\t  munmap_list.add (addr, m_last_size);\n \t  if (compile_debug)\n \t    fprintf_unfiltered (gdb_stdlog,\n \t\t\t\t\"allocated %s bytes at %s prot %u\\n\",\n-\t\t\t\tpaddress (target_gdbarch (), data->last_size),\n+\t\t\t\tpaddress (target_gdbarch (), m_last_size),\n \t\t\t\tpaddress (target_gdbarch (), addr),\n-\t\t\t\tdata->last_prot);\n+\t\t\t\tm_last_prot);\n \t}\n       else\n \taddr = 0;\n \n-      if ((addr & (data->last_max_alignment - 1)) != 0)\n+      if ((addr & (m_last_max_alignment - 1)) != 0)\n \terror (_(\"Inferior compiled module address %s \"\n \t\t \"is not aligned to BFD required %s.\"),\n \t       paddress (target_gdbarch (), addr),\n-\t       paddress (target_gdbarch (), data->last_max_alignment));\n+\t       paddress (target_gdbarch (), m_last_max_alignment));\n \n-      for (sect_iter = data->last_section_first; sect_iter != sect;\n+      for (sect_iter = m_last_section_first; sect_iter != sect;\n \t   sect_iter = sect_iter->next)\n \tif ((bfd_section_flags (sect_iter) & SEC_ALLOC) != 0)\n \t  bfd_set_section_vma (sect_iter, addr + bfd_section_vma (sect_iter));\n \n-      data->last_size = 0;\n-      data->last_section_first = sect;\n-      data->last_prot = prot;\n-      data->last_max_alignment = 1;\n+      m_last_size = 0;\n+      m_last_section_first = sect;\n+      m_last_prot = prot;\n+      m_last_max_alignment = 1;\n     }\n \n   if (sect == NULL)\n     return;\n \n   alignment = ((CORE_ADDR) 1) << bfd_section_alignment (sect);\n-  data->last_max_alignment = std::max (data->last_max_alignment, alignment);\n+  m_last_max_alignment = std::max (m_last_max_alignment, alignment);\n \n-  data->last_size = (data->last_size + alignment - 1) & -alignment;\n+  m_last_size = (m_last_size + alignment - 1) & -alignment;\n \n-  bfd_set_section_vma (sect, data->last_size);\n+  bfd_set_section_vma (sect, m_last_size);\n \n-  data->last_size += bfd_section_size (sect);\n-  data->last_size = (data->last_size + alignment - 1) & -alignment;\n+  m_last_size += bfd_section_size (sect);\n+  m_last_size = (m_last_size + alignment - 1) & -alignment;\n }\n \n /* Helper for link_callbacks callbacks vector.  */\n@@ -586,7 +602,6 @@ compile_module_up\n compile_object_load (const compile_file_names &file_names,\n \t\t     enum compile_i_scope_types scope, void *scope_data)\n {\n-  struct setup_sections_data setup_sections_data;\n   CORE_ADDR regs_addr, out_value_addr = 0;\n   struct symbol *func_sym;\n   struct type *func_type;\n@@ -616,14 +631,10 @@ compile_object_load (const compile_file_names &file_names,\n   if ((bfd_get_file_flags (abfd.get ()) & (EXEC_P | DYNAMIC)) != 0)\n     error (_(\"\\\"%s\\\": not in object format.\"), filename.get ());\n \n-  setup_sections_data.last_size = 0;\n-  setup_sections_data.last_section_first = abfd->sections;\n-  setup_sections_data.last_prot = -1;\n-  setup_sections_data.last_max_alignment = 1;\n-  setup_sections_data.munmap_list.reset (new struct munmap_list);\n-\n-  bfd_map_over_sections (abfd.get (), setup_sections, &setup_sections_data);\n-  setup_sections (abfd.get (), NULL, &setup_sections_data);\n+  struct setup_sections_data setup_sections_data (abfd.get ());\n+  for (asection *sect = abfd->sections; sect != nullptr; sect = sect->next)\n+    setup_sections_data.setup_one_section (sect);\n+  setup_sections_data.setup_one_section (nullptr);\n \n   storage_needed = bfd_get_symtab_upper_bound (abfd.get ());\n   if (storage_needed < 0)\n@@ -757,7 +768,7 @@ compile_object_load (const compile_file_names &file_names,\n \t\t\t\t\tTYPE_LENGTH (regs_type),\n \t\t\t\t\tGDB_MMAP_PROT_READ);\n       gdb_assert (regs_addr != 0);\n-      setup_sections_data.munmap_list->add (regs_addr, TYPE_LENGTH (regs_type));\n+      setup_sections_data.munmap_list.add (regs_addr, TYPE_LENGTH (regs_type));\n       if (compile_debug)\n \tfprintf_unfiltered (gdb_stdlog,\n \t\t\t    \"allocated %s bytes at %s for registers\\n\",\n@@ -779,8 +790,8 @@ compile_object_load (const compile_file_names &file_names,\n \t\t\t\t\t     (GDB_MMAP_PROT_READ\n \t\t\t\t\t      | GDB_MMAP_PROT_WRITE));\n       gdb_assert (out_value_addr != 0);\n-      setup_sections_data.munmap_list->add (out_value_addr,\n-\t\t\t\t\t    TYPE_LENGTH (out_value_type));\n+      setup_sections_data.munmap_list.add (out_value_addr,\n+\t\t\t\t\t   TYPE_LENGTH (out_value_type));\n       if (compile_debug)\n \tfprintf_unfiltered (gdb_stdlog,\n \t\t\t    \"allocated %s bytes at %s for printed value\\n\",\n@@ -791,14 +802,14 @@ compile_object_load (const compile_file_names &file_names,\n \n   compile_module_up retval (new struct compile_module);\n   retval->objfile = objfile_holder.release ();\n-  retval->source_file = xstrdup (file_names.source_file ());\n+  retval->source_file = file_names.source_file ();\n   retval->func_sym = func_sym;\n   retval->regs_addr = regs_addr;\n   retval->scope = scope;\n   retval->scope_data = scope_data;\n   retval->out_value_type = out_value_type;\n   retval->out_value_addr = out_value_addr;\n-  retval->munmap_list_head = setup_sections_data.munmap_list.release ();\n+  retval->munmap_list = std::move (setup_sections_data.munmap_list);\n \n   return retval;\n }"
    },
    {
      "sha": "0254390109e92cb7ce552b6e70629f764961bd7e",
      "filename": "gdb/compile/compile-object-load.h",
      "status": "modified",
      "additions": 5,
      "deletions": 3,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/92677124d90f0690ec5ffb6ee0a7b5097f95b135/gdb/compile/compile-object-load.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/92677124d90f0690ec5ffb6ee0a7b5097f95b135/gdb/compile/compile-object-load.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/compile/compile-object-load.h?ref=92677124d90f0690ec5ffb6ee0a7b5097f95b135",
      "patch": "@@ -29,6 +29,8 @@ struct munmap_list\n \n   DISABLE_COPY_AND_ASSIGN (munmap_list);\n \n+  munmap_list &operator= (munmap_list &&) = default;\n+\n   /* Add a region to the list.  */\n   void add (CORE_ADDR addr, CORE_ADDR size);\n \n@@ -56,8 +58,8 @@ struct compile_module\n   /* objfile for the compiled module.  */\n   struct objfile *objfile;\n \n-  /* .c file OBJFILE was built from.  It needs to be xfree-d.  */\n-  char *source_file;\n+  /* .c file OBJFILE was built from.  */\n+  std::string source_file;\n \n   /* Inferior function GCC_FE_WRAPPER_FUNCTION.  */\n   struct symbol *func_sym;\n@@ -81,7 +83,7 @@ struct compile_module\n   CORE_ADDR out_value_addr;\n \n   /* Track inferior memory reserved by inferior mmap.  */\n-  struct munmap_list *munmap_list_head;\n+  struct munmap_list munmap_list;\n };\n \n /* A unique pointer for a compile_module.  */"
    },
    {
      "sha": "f355624d91c27180e894713c975c723a2151eec2",
      "filename": "gdb/compile/compile-object-run.c",
      "status": "modified",
      "additions": 1,
      "deletions": 7,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/92677124d90f0690ec5ffb6ee0a7b5097f95b135/gdb/compile/compile-object-run.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/92677124d90f0690ec5ffb6ee0a7b5097f95b135/gdb/compile/compile-object-run.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/compile/compile-object-run.c?ref=92677124d90f0690ec5ffb6ee0a7b5097f95b135",
      "patch": "@@ -38,12 +38,6 @@ struct do_module_cleanup\n   {\n   }\n \n-  ~do_module_cleanup ()\n-  {\n-    delete module->munmap_list_head;\n-    xfree (module->source_file);\n-  }\n-\n   DISABLE_COPY_AND_ASSIGN (do_module_cleanup);\n \n   /* Boolean to set true upon a call of do_module_cleanup.\n@@ -102,7 +96,7 @@ do_module_cleanup (void *arg, int registers_valid)\n       }\n \n   /* Delete the .c file.  */\n-  unlink (data->module->source_file);\n+  unlink (data->module->source_file.c_str ());\n \n   /* Delete the .o file.  */\n   unlink (objfile_name_s.c_str ());"
    }
  ]
}