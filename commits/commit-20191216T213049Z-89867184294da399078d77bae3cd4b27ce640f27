{
  "sha": "89867184294da399078d77bae3cd4b27ce640f27",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ODk4NjcxODQyOTRkYTM5OTA3OGQ3N2JhZTNjZDRiMjdjZTY0MGYyNw==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2019-12-16T21:30:49Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2019-12-16T21:30:49Z"
    },
    "message": "jit: c++-ify gdb_symtab\n\nThis patch makes the gdb_symtab bit more c++y, in preparation for the\nnext patch that will use an std::forward_list<gdb_symtab>.  It changes\nthe fields to use automatic memory management, in the form of\nstd::string and gdb::unique_xmalloc_ptr, and adds a constructor and a\ndestructor.\n\ngdb/ChangeLog:\n\n\t* jit.c (struct gdb_symtab): Add constructor, destructor,\n\tinitialize fields.\n\t<linetable>: Change type to unique_xmalloc_ptr.\n\t<file_name>: Change type to std::string.\n\t(jit_symtab_open_impl): Allocate gdb_symtab with new.\n\t(jit_symtab_line_mapping_add_impl): Adjust.\n\t(finalize_symtab): Adjust, call delete on stab.",
    "tree": {
      "sha": "f5e655fde291286da3523a949b2e65cf99210857",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/f5e655fde291286da3523a949b2e65cf99210857"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/89867184294da399078d77bae3cd4b27ce640f27",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/89867184294da399078d77bae3cd4b27ce640f27",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/89867184294da399078d77bae3cd4b27ce640f27",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/89867184294da399078d77bae3cd4b27ce640f27/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "d043f8c867f85f1c36cc957da8204fe2907b3aea",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d043f8c867f85f1c36cc957da8204fe2907b3aea",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/d043f8c867f85f1c36cc957da8204fe2907b3aea"
    }
  ],
  "stats": {
    "total": 72,
    "additions": 43,
    "deletions": 29
  },
  "files": [
    {
      "sha": "86718ad83e275d088356078f6420fd0133373f52",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/89867184294da399078d77bae3cd4b27ce640f27/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/89867184294da399078d77bae3cd4b27ce640f27/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=89867184294da399078d77bae3cd4b27ce640f27",
      "patch": "@@ -1,3 +1,13 @@\n+2019-12-16  Simon Marchi  <simon.marchi@polymtl.ca>\n+\n+\t* jit.c (struct gdb_symtab): Add constructor, destructor,\n+\tinitialize fields.\n+\t<linetable>: Change type to unique_xmalloc_ptr.\n+\t<file_name>: Change type to std::string.\n+\t(jit_symtab_open_impl): Allocate gdb_symtab with new.\n+\t(jit_symtab_line_mapping_add_impl): Adjust.\n+\t(finalize_symtab): Adjust, call delete on stab.\n+\n 2019-12-16  Simon Marchi  <simon.marchi@polymtl.ca>\n \n \t* jit.c (finalize_symtab): Set gdb_block_iter_tmp in loop."
    },
    {
      "sha": "07767275f533bcf248b2d6897ce060205fc81241",
      "filename": "gdb/jit.c",
      "status": "modified",
      "additions": 33,
      "deletions": 29,
      "changes": 62,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/89867184294da399078d77bae3cd4b27ce640f27/gdb/jit.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/89867184294da399078d77bae3cd4b27ce640f27/gdb/jit.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/jit.c?ref=89867184294da399078d77bae3cd4b27ce640f27",
      "patch": "@@ -450,19 +450,39 @@ struct gdb_block\n \n struct gdb_symtab\n {\n+  explicit gdb_symtab (const char *file_name)\n+    : file_name (file_name != nullptr ? file_name : \"\")\n+  {}\n+\n+  ~gdb_symtab ()\n+  {\n+    gdb_block *gdb_block_iter, *gdb_block_iter_tmp;\n+\n+    for ((gdb_block_iter = this->blocks,\n+\t  gdb_block_iter_tmp = gdb_block_iter->next);\n+         gdb_block_iter;\n+         gdb_block_iter = gdb_block_iter_tmp)\n+      {\n+        gdb_block_iter_tmp = gdb_block_iter->next;\n+        xfree ((void *) gdb_block_iter->name);\n+        xfree (gdb_block_iter);\n+      }\n+  }\n+\n   /* The list of blocks in this symtab.  These will eventually be\n      converted to real blocks.  */\n-  struct gdb_block *blocks;\n+  struct gdb_block *blocks = nullptr;\n \n   /* The number of blocks inserted.  */\n-  int nblocks;\n+  int nblocks = 0;\n \n   /* A mapping between line numbers to PC.  */\n-  struct linetable *linetable;\n+  gdb::unique_xmalloc_ptr<struct linetable> linetable;\n \n   /* The source file for this symtab.  */\n-  const char *file_name;\n-  struct gdb_symtab *next;\n+  std::string file_name;\n+\n+  struct gdb_symtab *next = nullptr;\n };\n \n /* Proxy object for building an object.  */\n@@ -512,12 +532,9 @@ jit_symtab_open_impl (struct gdb_symbol_callbacks *cb,\n \t\t      struct gdb_object *object,\n \t\t      const char *file_name)\n {\n-  struct gdb_symtab *ret;\n-\n   /* CB stays unused.  See comment in jit_object_open_impl.  */\n \n-  ret = XCNEW (struct gdb_symtab);\n-  ret->file_name = file_name ? xstrdup (file_name) : xstrdup (\"\");\n+  gdb_symtab *ret = new gdb_symtab (file_name);\n   ret->next = object->symtabs;\n   object->symtabs = ret;\n   return ret;\n@@ -605,7 +622,7 @@ jit_symtab_line_mapping_add_impl (struct gdb_symbol_callbacks *cb,\n \n   alloc_len = sizeof (struct linetable)\n \t      + (nlines - 1) * sizeof (struct linetable_entry);\n-  stab->linetable = (struct linetable *) xmalloc (alloc_len);\n+  stab->linetable.reset (XNEWVAR (struct linetable, alloc_len));\n   stab->linetable->nitems = nlines;\n   for (i = 0; i < nlines; i++)\n     {\n@@ -632,7 +649,7 @@ static void\n finalize_symtab (struct gdb_symtab *stab, struct objfile *objfile)\n {\n   struct compunit_symtab *cust;\n-  struct gdb_block *gdb_block_iter, *gdb_block_iter_tmp;\n+  struct gdb_block *gdb_block_iter;\n   struct block *block_iter;\n   int actual_nblocks, i;\n   size_t blockvector_size;\n@@ -641,8 +658,8 @@ finalize_symtab (struct gdb_symtab *stab, struct objfile *objfile)\n \n   actual_nblocks = FIRST_LOCAL_BLOCK + stab->nblocks;\n \n-  cust = allocate_compunit_symtab (objfile, stab->file_name);\n-  allocate_symtab (cust, stab->file_name);\n+  cust = allocate_compunit_symtab (objfile, stab->file_name.c_str ());\n+  allocate_symtab (cust, stab->file_name.c_str ());\n   add_compunit_symtab_to_objfile (cust);\n \n   /* JIT compilers compile in memory.  */\n@@ -656,8 +673,8 @@ finalize_symtab (struct gdb_symtab *stab, struct objfile *objfile)\n \t\t     + sizeof (struct linetable));\n       SYMTAB_LINETABLE (COMPUNIT_FILETABS (cust))\n \t= (struct linetable *) obstack_alloc (&objfile->objfile_obstack, size);\n-      memcpy (SYMTAB_LINETABLE (COMPUNIT_FILETABS (cust)), stab->linetable,\n-\t      size);\n+      memcpy (SYMTAB_LINETABLE (COMPUNIT_FILETABS (cust)),\n+\t      stab->linetable.get (), size);\n     }\n \n   blockvector_size = (sizeof (struct blockvector)\n@@ -758,20 +775,7 @@ finalize_symtab (struct gdb_symtab *stab, struct objfile *objfile)\n \t}\n     }\n \n-  /* Free memory.  */\n-  gdb_block_iter = stab->blocks;\n-\n-  for (gdb_block_iter = stab->blocks, gdb_block_iter_tmp = gdb_block_iter->next;\n-       gdb_block_iter;\n-       gdb_block_iter = gdb_block_iter_tmp)\n-    {\n-      gdb_block_iter_tmp = gdb_block_iter->next;\n-      xfree ((void *) gdb_block_iter->name);\n-      xfree (gdb_block_iter);\n-    }\n-  xfree (stab->linetable);\n-  xfree ((char *) stab->file_name);\n-  xfree (stab);\n+  delete stab;\n }\n \n /* Called when closing a gdb_objfile.  Converts OBJ to a proper"
    }
  ]
}