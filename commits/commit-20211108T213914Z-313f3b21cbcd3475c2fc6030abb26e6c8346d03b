{
  "sha": "313f3b21cbcd3475c2fc6030abb26e6c8346d03b",
  "node_id": "C_kwDOANOeidoAKDMxM2YzYjIxY2JjZDM0NzVjMmZjNjAzMGFiYjI2ZTZjODM0NmQwM2I",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-11-05T19:29:20Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-11-08T21:39:14Z"
    },
    "message": "gdb: remove bpstat typedef, rename bpstats to bpstat\n\nI don't find that the bpstat typedef, which hides a pointer, is\nparticularly useful.  In fact, it confused me many times, and I just see\nit as something to remember that adds cognitive load.  Also, with C++,\nwe might want to be able to pass bpstats objects by const-reference, not\nnecessarily by pointer.\n\nSo, remove the bpstat typedef and rename struct bpstats to bpstat (since\nit represents one bpstat, it makes sense that it is singular).\n\nChange-Id: I52e763b6e54ee666a9e045785f686d37b4f5f849",
    "tree": {
      "sha": "be75de561691f60bc061a6711805a57db50ecbe0",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/be75de561691f60bc061a6711805a57db50ecbe0"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/313f3b21cbcd3475c2fc6030abb26e6c8346d03b",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/313f3b21cbcd3475c2fc6030abb26e6c8346d03b",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/313f3b21cbcd3475c2fc6030abb26e6c8346d03b",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/313f3b21cbcd3475c2fc6030abb26e6c8346d03b/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "9be90c6894a208b32ed7237d4b31ecf9afb1ec8a",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9be90c6894a208b32ed7237d4b31ecf9afb1ec8a",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/9be90c6894a208b32ed7237d4b31ecf9afb1ec8a"
    }
  ],
  "stats": {
    "total": 232,
    "additions": 115,
    "deletions": 117
  },
  "files": [
    {
      "sha": "e76a3000f616196cc27cc80cec0b9d0595d86fcc",
      "filename": "gdb/ada-lang.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/313f3b21cbcd3475c2fc6030abb26e6c8346d03b/gdb/ada-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/313f3b21cbcd3475c2fc6030abb26e6c8346d03b/gdb/ada-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-lang.c?ref=313f3b21cbcd3475c2fc6030abb26e6c8346d03b",
      "patch": "@@ -11805,7 +11805,7 @@ should_stop_exception (const struct bp_location *bl)\n    for all exception catchpoint kinds.  */\n \n static void\n-check_status_exception (bpstat bs)\n+check_status_exception (bpstat *bs)\n {\n   bs->stop = should_stop_exception (bs->bp_location_at.get ());\n }\n@@ -11814,7 +11814,7 @@ check_status_exception (bpstat bs)\n    for all exception catchpoint kinds.  */\n \n static enum print_stop_action\n-print_it_exception (bpstat bs)\n+print_it_exception (bpstat *bs)\n {\n   struct ui_out *uiout = current_uiout;\n   struct breakpoint *b = bs->breakpoint_at;"
    },
    {
      "sha": "9271859c329eb3d36cd60c867b88114f36fd5c72",
      "filename": "gdb/ada-tasks.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/313f3b21cbcd3475c2fc6030abb26e6c8346d03b/gdb/ada-tasks.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/313f3b21cbcd3475c2fc6030abb26e6c8346d03b/gdb/ada-tasks.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-tasks.c?ref=313f3b21cbcd3475c2fc6030abb26e6c8346d03b",
      "patch": "@@ -1433,7 +1433,7 @@ ada_tasks_invalidate_inferior_data (struct inferior *inf)\n /* The 'normal_stop' observer notification callback.  */\n \n static void\n-ada_tasks_normal_stop_observer (struct bpstats *unused_args, int unused_args2)\n+ada_tasks_normal_stop_observer (struct bpstat *unused_args, int unused_args2)\n {\n   /* The inferior has been resumed, and just stopped. This means that\n      our task_list needs to be recomputed before it can be used again.  */"
    },
    {
      "sha": "0998aa95c4fdb2e353e8b79ddbda8a707558c437",
      "filename": "gdb/break-catch-sig.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/313f3b21cbcd3475c2fc6030abb26e6c8346d03b/gdb/break-catch-sig.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/313f3b21cbcd3475c2fc6030abb26e6c8346d03b/gdb/break-catch-sig.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/break-catch-sig.c?ref=313f3b21cbcd3475c2fc6030abb26e6c8346d03b",
      "patch": "@@ -179,7 +179,7 @@ signal_catchpoint_breakpoint_hit (const struct bp_location *bl,\n    catchpoints.  */\n \n static enum print_stop_action\n-signal_catchpoint_print_it (bpstat bs)\n+signal_catchpoint_print_it (bpstat *bs)\n {\n   struct breakpoint *b = bs->breakpoint_at;\n   struct target_waitstatus last;"
    },
    {
      "sha": "cb2d77643ca097b7ebdc87619d6271a922f909b2",
      "filename": "gdb/break-catch-syscall.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/313f3b21cbcd3475c2fc6030abb26e6c8346d03b/gdb/break-catch-syscall.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/313f3b21cbcd3475c2fc6030abb26e6c8346d03b/gdb/break-catch-syscall.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/break-catch-syscall.c?ref=313f3b21cbcd3475c2fc6030abb26e6c8346d03b",
      "patch": "@@ -175,7 +175,7 @@ breakpoint_hit_catch_syscall (const struct bp_location *bl,\n    catchpoints.  */\n \n static enum print_stop_action\n-print_it_catch_syscall (bpstat bs)\n+print_it_catch_syscall (bpstat *bs)\n {\n   struct ui_out *uiout = current_uiout;\n   struct breakpoint *b = bs->breakpoint_at;"
    },
    {
      "sha": "18515166e5152074c4c18dc0e402865a298ea518",
      "filename": "gdb/break-catch-throw.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/313f3b21cbcd3475c2fc6030abb26e6c8346d03b/gdb/break-catch-throw.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/313f3b21cbcd3475c2fc6030abb26e6c8346d03b/gdb/break-catch-throw.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/break-catch-throw.c?ref=313f3b21cbcd3475c2fc6030abb26e6c8346d03b",
      "patch": "@@ -144,7 +144,7 @@ classify_exception_breakpoint (struct breakpoint *b)\n /* Implement the 'check_status' method.  */\n \n static void\n-check_status_exception_catchpoint (struct bpstats *bs)\n+check_status_exception_catchpoint (struct bpstat *bs)\n {\n   struct exception_catchpoint *self\n     = (struct exception_catchpoint *) bs->breakpoint_at;\n@@ -227,7 +227,7 @@ re_set_exception_catchpoint (struct breakpoint *self)\n }\n \n static enum print_stop_action\n-print_it_exception_catchpoint (bpstat bs)\n+print_it_exception_catchpoint (bpstat *bs)\n {\n   struct ui_out *uiout = current_uiout;\n   struct breakpoint *b = bs->breakpoint_at;"
    },
    {
      "sha": "7f4e7ad9eea596d25cefa362ad530362b078cfe4",
      "filename": "gdb/breakpoint.c",
      "status": "modified",
      "additions": 61,
      "deletions": 61,
      "changes": 122,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/313f3b21cbcd3475c2fc6030abb26e6c8346d03b/gdb/breakpoint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/313f3b21cbcd3475c2fc6030abb26e6c8346d03b/gdb/breakpoint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/breakpoint.c?ref=313f3b21cbcd3475c2fc6030abb26e6c8346d03b",
      "patch": "@@ -160,7 +160,7 @@ static int breakpoint_location_address_range_overlap (struct bp_location *,\n static int remove_breakpoint (struct bp_location *);\n static int remove_breakpoint_1 (struct bp_location *, enum remove_bp_reason);\n \n-static enum print_stop_action print_bp_stop_message (bpstat bs);\n+static enum print_stop_action print_bp_stop_message (bpstat *bs);\n \n static int hw_breakpoint_used_count (void);\n \n@@ -4235,10 +4235,10 @@ is_catchpoint (struct breakpoint *b)\n    Also free any storage that is part of a bpstat.  */\n \n void\n-bpstat_clear (bpstat *bsp)\n+bpstat_clear (bpstat **bsp)\n {\n-  bpstat p;\n-  bpstat q;\n+  bpstat *p;\n+  bpstat *q;\n \n   if (bsp == 0)\n     return;\n@@ -4252,7 +4252,7 @@ bpstat_clear (bpstat *bsp)\n   *bsp = NULL;\n }\n \n-bpstats::bpstats (const bpstats &other)\n+bpstat::bpstat (const bpstat &other)\n   : next (NULL),\n     bp_location_at (other.bp_location_at),\n     breakpoint_at (other.breakpoint_at),\n@@ -4268,19 +4268,19 @@ bpstats::bpstats (const bpstats &other)\n /* Return a copy of a bpstat.  Like \"bs1 = bs2\" but all storage that\n    is part of the bpstat is copied as well.  */\n \n-bpstat\n-bpstat_copy (bpstat bs)\n+bpstat *\n+bpstat_copy (bpstat *bs)\n {\n-  bpstat p = NULL;\n-  bpstat tmp;\n-  bpstat retval = NULL;\n+  bpstat *p = nullptr;\n+  bpstat *tmp;\n+  bpstat *retval = nullptr;\n \n   if (bs == NULL)\n     return bs;\n \n   for (; bs != NULL; bs = bs->next)\n     {\n-      tmp = new bpstats (*bs);\n+      tmp = new bpstat (*bs);\n \n       if (p == NULL)\n \t/* This is the first thing in the chain.  */\n@@ -4295,8 +4295,8 @@ bpstat_copy (bpstat bs)\n \n /* Find the bpstat associated with this breakpoint.  */\n \n-bpstat\n-bpstat_find_breakpoint (bpstat bsp, struct breakpoint *breakpoint)\n+bpstat *\n+bpstat_find_breakpoint (bpstat *bsp, struct breakpoint *breakpoint)\n {\n   if (bsp == NULL)\n     return NULL;\n@@ -4312,7 +4312,7 @@ bpstat_find_breakpoint (bpstat bsp, struct breakpoint *breakpoint)\n /* See breakpoint.h.  */\n \n bool\n-bpstat_explains_signal (bpstat bsp, enum gdb_signal sig)\n+bpstat_explains_signal (bpstat *bsp, enum gdb_signal sig)\n {\n   for (; bsp != NULL; bsp = bsp->next)\n     {\n@@ -4345,7 +4345,7 @@ bpstat_explains_signal (bpstat bsp, enum gdb_signal sig)\n    Return 1 otherwise.  */\n \n int\n-bpstat_num (bpstat *bsp, int *num)\n+bpstat_num (bpstat **bsp, int *num)\n {\n   struct breakpoint *b;\n \n@@ -4369,7 +4369,7 @@ bpstat_num (bpstat *bsp, int *num)\n void\n bpstat_clear_actions (void)\n {\n-  bpstat bs;\n+  bpstat *bs;\n \n   if (inferior_ptid == null_ptid)\n     return;\n@@ -4421,9 +4421,9 @@ command_line_is_silent (struct command_line *cmd)\n    bpstat of the current thread.  */\n \n static int\n-bpstat_do_actions_1 (bpstat *bsp)\n+bpstat_do_actions_1 (bpstat **bsp)\n {\n-  bpstat bs;\n+  bpstat *bs;\n   int again = 0;\n \n   /* Avoid endless recursion if a `source' command is contained\n@@ -4589,7 +4589,7 @@ maybe_print_thread_hit_breakpoint (struct ui_out *uiout)\n    normal_stop().  */\n \n static enum print_stop_action\n-print_bp_stop_message (bpstat bs)\n+print_bp_stop_message (bpstat *bs)\n {\n   switch (bs->print_it)\n     {\n@@ -4699,7 +4699,7 @@ print_solib_event (int is_catchpoint)\n    further info to be printed.  */\n \n enum print_stop_action\n-bpstat_print (bpstat bs, int kind)\n+bpstat_print (bpstat *bs, int kind)\n {\n   enum print_stop_action val;\n \n@@ -4744,7 +4744,7 @@ breakpoint_cond_eval (expression *exp)\n \n /* Allocate a new bpstat.  Link it to the FIFO list by BS_LINK_POINTER.  */\n \n-bpstats::bpstats (struct bp_location *bl, bpstat **bs_link_pointer)\n+bpstat::bpstat (struct bp_location *bl, bpstat ***bs_link_pointer)\n   : next (NULL),\n     bp_location_at (bp_location_ref_ptr::new_reference (bl)),\n     breakpoint_at (bl->owner),\n@@ -4757,7 +4757,7 @@ bpstats::bpstats (struct bp_location *bl, bpstat **bs_link_pointer)\n   *bs_link_pointer = &next;\n }\n \n-bpstats::bpstats ()\n+bpstat::bpstat ()\n   : next (NULL),\n     breakpoint_at (NULL),\n     commands (NULL),\n@@ -4866,7 +4866,7 @@ enum wp_check_result\n    changed.  */\n \n static wp_check_result\n-watchpoint_check (bpstat bs)\n+watchpoint_check (bpstat *bs)\n {\n   struct watchpoint *b;\n   struct frame_info *fr;\n@@ -5028,7 +5028,7 @@ bpstat_check_location (const struct bp_location *bl,\n    should stop.  If not, set BS->stop to 0.  */\n \n static void\n-bpstat_check_watchpoint (bpstat bs)\n+bpstat_check_watchpoint (bpstat *bs)\n {\n   const struct bp_location *bl;\n   struct watchpoint *b;\n@@ -5197,7 +5197,7 @@ bpstat_check_watchpoint (bpstat bs)\n    breakpoint, set BS->stop to 0.  */\n \n static void\n-bpstat_check_breakpoint_conditions (bpstat bs, thread_info *thread)\n+bpstat_check_breakpoint_conditions (bpstat *bs, thread_info *thread)\n {\n   const struct bp_location *bl;\n   struct breakpoint *b;\n@@ -5347,11 +5347,11 @@ need_moribund_for_location_type (struct bp_location *loc)\n \n /* See breakpoint.h.  */\n \n-bpstat\n+bpstat *\n build_bpstat_chain (const address_space *aspace, CORE_ADDR bp_addr,\n \t\t    const struct target_waitstatus *ws)\n {\n-  bpstat bs_head = NULL, *bs_link = &bs_head;\n+  bpstat *bs_head = nullptr, **bs_link = &bs_head;\n \n   for (breakpoint *b : all_breakpoints ())\n     {\n@@ -5377,7 +5377,7 @@ build_bpstat_chain (const address_space *aspace, CORE_ADDR bp_addr,\n \t  /* Come here if it's a watchpoint, or if the break address\n \t     matches.  */\n \n-\t  bpstat bs = new bpstats (bl, &bs_link);\t/* Alloc a bpstat to\n+\t  bpstat *bs = new bpstat (bl, &bs_link);\t/* Alloc a bpstat to\n \t\t\t\t\t\t\t   explain stop.  */\n \n \t  /* Assume we stop.  Should we find a watchpoint that is not\n@@ -5408,7 +5408,7 @@ build_bpstat_chain (const address_space *aspace, CORE_ADDR bp_addr,\n \t  if (breakpoint_location_address_match (loc, aspace, bp_addr)\n \t      && need_moribund_for_location_type (loc))\n \t    {\n-\t      bpstat bs = new bpstats (loc, &bs_link);\n+\t      bpstat *bs = new bpstat (loc, &bs_link);\n \t      /* For hits of moribund locations, we should just proceed.  */\n \t      bs->stop = 0;\n \t      bs->print = 0;\n@@ -5422,16 +5422,16 @@ build_bpstat_chain (const address_space *aspace, CORE_ADDR bp_addr,\n \n /* See breakpoint.h.  */\n \n-bpstat\n+bpstat *\n bpstat_stop_status (const address_space *aspace,\n \t\t    CORE_ADDR bp_addr, thread_info *thread,\n \t\t    const struct target_waitstatus *ws,\n-\t\t    bpstat stop_chain)\n+\t\t    bpstat *stop_chain)\n {\n   struct breakpoint *b = NULL;\n   /* First item of allocated bpstat's.  */\n-  bpstat bs_head = stop_chain;\n-  bpstat bs;\n+  bpstat *bs_head = stop_chain;\n+  bpstat *bs;\n   int need_remove_insert;\n   int removed_any;\n \n@@ -5559,10 +5559,10 @@ handle_jit_event (CORE_ADDR address)\n /* Decide what infrun needs to do with this bpstat.  */\n \n struct bpstat_what\n-bpstat_what (bpstat bs_head)\n+bpstat_what (bpstat *bs_head)\n {\n   struct bpstat_what retval;\n-  bpstat bs;\n+  bpstat *bs;\n \n   retval.main_action = BPSTAT_WHAT_KEEP_CHECKING;\n   retval.call_dummy = STOP_NONE;\n@@ -5737,9 +5737,9 @@ bpstat_what (bpstat bs_head)\n }\n \n void\n-bpstat_run_callbacks (bpstat bs_head)\n+bpstat_run_callbacks (bpstat *bs_head)\n {\n-  bpstat bs;\n+  bpstat *bs;\n \n   for (bs = bs_head; bs != NULL; bs = bs->next)\n     {\n@@ -5777,7 +5777,7 @@ bpstat_should_step ()\n /* See breakpoint.h.  */\n \n bool\n-bpstat_causes_stop (bpstat bs)\n+bpstat_causes_stop (bpstat *bs)\n {\n   for (; bs != NULL; bs = bs->next)\n     if (bs->stop)\n@@ -7775,7 +7775,7 @@ breakpoint_hit_catch_fork (const struct bp_location *bl,\n    catchpoints.  */\n \n static enum print_stop_action\n-print_it_catch_fork (bpstat bs)\n+print_it_catch_fork (bpstat *bs)\n {\n   struct ui_out *uiout = current_uiout;\n   struct breakpoint *b = bs->breakpoint_at;\n@@ -7891,7 +7891,7 @@ breakpoint_hit_catch_vfork (const struct bp_location *bl,\n    catchpoints.  */\n \n static enum print_stop_action\n-print_it_catch_vfork (bpstat bs)\n+print_it_catch_vfork (bpstat *bs)\n {\n   struct ui_out *uiout = current_uiout;\n   struct breakpoint *b = bs->breakpoint_at;\n@@ -8027,7 +8027,7 @@ breakpoint_hit_catch_solib (const struct bp_location *bl,\n }\n \n static void\n-check_status_catch_solib (struct bpstats *bs)\n+check_status_catch_solib (struct bpstat *bs)\n {\n   struct solib_catchpoint *self\n     = (struct solib_catchpoint *) bs->breakpoint_at;\n@@ -8056,7 +8056,7 @@ check_status_catch_solib (struct bpstats *bs)\n }\n \n static enum print_stop_action\n-print_it_catch_solib (bpstat bs)\n+print_it_catch_solib (bpstat *bs)\n {\n   struct breakpoint *b = bs->breakpoint_at;\n   struct ui_out *uiout = current_uiout;\n@@ -8286,7 +8286,7 @@ breakpoint_hit_catch_exec (const struct bp_location *bl,\n }\n \n static enum print_stop_action\n-print_it_catch_exec (bpstat bs)\n+print_it_catch_exec (bpstat *bs)\n {\n   struct ui_out *uiout = current_uiout;\n   struct breakpoint *b = bs->breakpoint_at;\n@@ -9804,7 +9804,7 @@ resources_needed_ranged_breakpoint (const struct bp_location *bl)\n    ranged breakpoints.  */\n \n static enum print_stop_action\n-print_it_ranged_breakpoint (bpstat bs)\n+print_it_ranged_breakpoint (bpstat *bs)\n {\n   struct breakpoint *b = bs->breakpoint_at;\n   struct bp_location *bl = b->loc;\n@@ -10144,7 +10144,7 @@ breakpoint_hit_watchpoint (const struct bp_location *bl,\n }\n \n static void\n-check_status_watchpoint (bpstat bs)\n+check_status_watchpoint (bpstat *bs)\n {\n   gdb_assert (is_watchpoint (bs->breakpoint_at));\n \n@@ -10174,7 +10174,7 @@ works_in_software_mode_watchpoint (const struct breakpoint *b)\n }\n \n static enum print_stop_action\n-print_it_watchpoint (bpstat bs)\n+print_it_watchpoint (bpstat *bs)\n {\n   struct breakpoint *b;\n   enum print_stop_action result;\n@@ -10395,7 +10395,7 @@ works_in_software_mode_masked_watchpoint (const struct breakpoint *b)\n    masked hardware watchpoints.  */\n \n static enum print_stop_action\n-print_it_masked_watchpoint (bpstat bs)\n+print_it_masked_watchpoint (bpstat *bs)\n {\n   struct breakpoint *b = bs->breakpoint_at;\n   struct ui_out *uiout = current_uiout;\n@@ -11544,7 +11544,7 @@ clear_command (const char *arg, int from_tty)\n    This is called after any breakpoint is hit, or after errors.  */\n \n void\n-breakpoint_auto_delete (bpstat bs)\n+breakpoint_auto_delete (bpstat *bs)\n {\n   for (; bs; bs = bs->next)\n     if (bs->breakpoint_at\n@@ -12145,9 +12145,9 @@ update_global_location_list_nothrow (enum ugll_insert_mode insert_mode)\n /* Clear BKP from a BPS.  */\n \n static void\n-bpstat_remove_bp_location (bpstat bps, struct breakpoint *bpt)\n+bpstat_remove_bp_location (bpstat *bps, struct breakpoint *bpt)\n {\n-  bpstat bs;\n+  bpstat *bs;\n \n   for (bs = bps; bs; bs = bs->next)\n     if (bs->breakpoint_at == bpt)\n@@ -12287,7 +12287,7 @@ base_breakpoint_breakpoint_hit (const struct bp_location *bl,\n }\n \n static void\n-base_breakpoint_check_status (bpstat bs)\n+base_breakpoint_check_status (bpstat *bs)\n {\n   /* Always stop.   */\n }\n@@ -12311,7 +12311,7 @@ base_breakpoint_resources_needed (const struct bp_location *bl)\n }\n \n static enum print_stop_action\n-base_breakpoint_print_it (bpstat bs)\n+base_breakpoint_print_it (bpstat *bs)\n {\n   internal_error_pure_virtual_called ();\n }\n@@ -12379,7 +12379,7 @@ base_breakpoint_explains_signal (struct breakpoint *b, enum gdb_signal sig)\n /* The default \"after_condition_true\" method.  */\n \n static void\n-base_breakpoint_after_condition_true (struct bpstats *bs)\n+base_breakpoint_after_condition_true (struct bpstat *bs)\n {\n   /* Nothing to do.   */\n }\n@@ -12492,7 +12492,7 @@ bkpt_resources_needed (const struct bp_location *bl)\n }\n \n static enum print_stop_action\n-bkpt_print_it (bpstat bs)\n+bkpt_print_it (bpstat *bs)\n {\n   struct breakpoint *b;\n   const struct bp_location *bl;\n@@ -12650,7 +12650,7 @@ internal_bkpt_re_set (struct breakpoint *b)\n }\n \n static void\n-internal_bkpt_check_status (bpstat bs)\n+internal_bkpt_check_status (bpstat *bs)\n {\n   if (bs->breakpoint_at->type == bp_shlib_event)\n     {\n@@ -12666,7 +12666,7 @@ internal_bkpt_check_status (bpstat bs)\n }\n \n static enum print_stop_action\n-internal_bkpt_print_it (bpstat bs)\n+internal_bkpt_print_it (bpstat *bs)\n {\n   struct breakpoint *b;\n \n@@ -12731,13 +12731,13 @@ momentary_bkpt_re_set (struct breakpoint *b)\n }\n \n static void\n-momentary_bkpt_check_status (bpstat bs)\n+momentary_bkpt_check_status (bpstat *bs)\n {\n   /* Nothing.  The point of these breakpoints is causing a stop.  */\n }\n \n static enum print_stop_action\n-momentary_bkpt_print_it (bpstat bs)\n+momentary_bkpt_print_it (bpstat *bs)\n {\n   return PRINT_UNKNOWN;\n }\n@@ -13002,10 +13002,10 @@ dprintf_print_recreate (struct breakpoint *tp, struct ui_file *fp)\n    address are all handled.  */\n \n static void\n-dprintf_after_condition_true (struct bpstats *bs)\n+dprintf_after_condition_true (struct bpstat *bs)\n {\n-  struct bpstats tmp_bs;\n-  struct bpstats *tmp_bs_p = &tmp_bs;\n+  struct bpstat tmp_bs;\n+  struct bpstat *tmp_bs_p = &tmp_bs;\n \n   /* dprintf's never cause a stop.  This wasn't set in the\n      check_status hook instead because that would make the dprintf's"
    },
    {
      "sha": "c9048d33816f65dff8ceda04e9100df4144e231c",
      "filename": "gdb/breakpoint.h",
      "status": "modified",
      "additions": 23,
      "deletions": 25,
      "changes": 48,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/313f3b21cbcd3475c2fc6030abb26e6c8346d03b/gdb/breakpoint.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/313f3b21cbcd3475c2fc6030abb26e6c8346d03b/gdb/breakpoint.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/breakpoint.h?ref=313f3b21cbcd3475c2fc6030abb26e6c8346d03b",
      "patch": "@@ -41,7 +41,7 @@ struct gdbpy_breakpoint_object;\n struct gdbscm_breakpoint_object;\n struct number_or_range_parser;\n struct thread_info;\n-struct bpstats;\n+struct bpstat;\n struct bp_location;\n struct linespec_result;\n struct linespec_sals;\n@@ -591,7 +591,7 @@ struct breakpoint_ops\n \n   /* Check internal conditions of the breakpoint referred to by BS.\n      If we should not stop for this breakpoint, set BS->stop to 0.  */\n-  void (*check_status) (struct bpstats *bs);\n+  void (*check_status) (struct bpstat *bs);\n \n   /* Tell how many hardware resources (debug registers) are needed\n      for this breakpoint.  If this function is not provided, then\n@@ -605,7 +605,7 @@ struct breakpoint_ops\n \n   /* The normal print routine for this breakpoint, called when we\n      hit it.  */\n-  enum print_stop_action (*print_it) (struct bpstats *bs);\n+  enum print_stop_action (*print_it) (struct bpstat *bs);\n \n   /* Display information about this breakpoint, for \"info\n      breakpoints\".  */\n@@ -674,7 +674,7 @@ struct breakpoint_ops\n \n   /* Called after evaluating the breakpoint's condition,\n      and only if it evaluated true.  */\n-  void (*after_condition_true) (struct bpstats *bs);\n+  void (*after_condition_true) (struct bpstat *bs);\n };\n \n /* Helper for breakpoint_ops->print_recreate implementations.  Prints\n@@ -935,20 +935,18 @@ struct tracepoint : public breakpoint\n    status\").  This provides the ability to determine whether we have\n    stopped at a breakpoint, and what we should do about it.  */\n \n-typedef struct bpstats *bpstat;\n-\n /* Clears a chain of bpstat, freeing storage\n    of each.  */\n-extern void bpstat_clear (bpstat *);\n+extern void bpstat_clear (bpstat **);\n \n /* Return a copy of a bpstat.  Like \"bs1 = bs2\" but all storage that\n    is part of the bpstat is copied as well.  */\n-extern bpstat bpstat_copy (bpstat);\n+extern bpstat *bpstat_copy (bpstat *);\n \n /* Build the (raw) bpstat chain for the stop information given by ASPACE,\n    BP_ADDR, and WS.  Returns the head of the bpstat chain.  */\n \n-extern bpstat build_bpstat_chain (const address_space *aspace,\n+extern bpstat *build_bpstat_chain (const address_space *aspace,\n \t\t\t\t  CORE_ADDR bp_addr,\n \t\t\t\t  const struct target_waitstatus *ws);\n \n@@ -972,10 +970,10 @@ extern bpstat build_bpstat_chain (const address_space *aspace,\n    Each element of the chain has valid next, breakpoint_at,\n    commands, FIXME??? fields.  */\n \n-extern bpstat bpstat_stop_status (const address_space *aspace,\n+extern bpstat *bpstat_stop_status (const address_space *aspace,\n \t\t\t\t  CORE_ADDR pc, thread_info *thread,\n \t\t\t\t  const struct target_waitstatus *ws,\n-\t\t\t\t  bpstat stop_chain = NULL);\n+\t\t\t\t  bpstat *stop_chain = nullptr);\n \f\n /* This bpstat_what stuff tells wait_for_inferior what to do with a\n    breakpoint (a challenging task).\n@@ -1073,22 +1071,22 @@ struct bpstat_what\n   };\n \n /* Tell what to do about this bpstat.  */\n-struct bpstat_what bpstat_what (bpstat);\n+struct bpstat_what bpstat_what (bpstat *);\n \n /* Run breakpoint event callbacks associated with the breakpoints that\n    triggered.  */\n-extern void bpstat_run_callbacks (bpstat bs_head);\n+extern void bpstat_run_callbacks (bpstat *bs_head);\n \n /* Find the bpstat associated with a breakpoint.  NULL otherwise.  */\n-bpstat bpstat_find_breakpoint (bpstat, struct breakpoint *);\n+bpstat *bpstat_find_breakpoint (bpstat *, struct breakpoint *);\n \n /* True if a signal that we got in target_wait() was due to\n    circumstances explained by the bpstat; the signal is therefore not\n    random.  */\n-extern bool bpstat_explains_signal (bpstat, enum gdb_signal);\n+extern bool bpstat_explains_signal (bpstat *, enum gdb_signal);\n \n /* True if this bpstat causes a stop.  */\n-extern bool bpstat_causes_stop (bpstat);\n+extern bool bpstat_causes_stop (bpstat *);\n \n /* True if we should step constantly (e.g. watchpoints on machines\n    without hardware support).  This isn't related to a specific bpstat,\n@@ -1098,7 +1096,7 @@ extern bool bpstat_should_step ();\n /* Print a message indicating what happened.  Returns nonzero to\n    say that only the source line should be printed after this (zero\n    return means print the frame as well as the source line).  */\n-extern enum print_stop_action bpstat_print (bpstat, int);\n+extern enum print_stop_action bpstat_print (bpstat *, int);\n \n /* Put in *NUM the breakpoint number of the first breakpoint we are\n    stopped at.  *BSP upon return is a bpstat which points to the\n@@ -1109,7 +1107,7 @@ extern enum print_stop_action bpstat_print (bpstat, int);\n    Return -1 if stopped at a breakpoint that has been deleted since\n    we set it.\n    Return 1 otherwise.  */\n-extern int bpstat_num (bpstat *, int *);\n+extern int bpstat_num (bpstat **, int *);\n \n /* Perform actions associated with the stopped inferior.  Actually, we\n    just use this for breakpoint commands.  Perhaps other actions will\n@@ -1140,18 +1138,18 @@ enum bp_print_how\n     print_it_done\n   };\n \n-struct bpstats\n+struct bpstat\n   {\n-    bpstats ();\n-    bpstats (struct bp_location *bl, bpstat **bs_link_pointer);\n+    bpstat ();\n+    bpstat (struct bp_location *bl, bpstat ***bs_link_pointer);\n \n-    bpstats (const bpstats &);\n-    bpstats &operator= (const bpstats &) = delete;\n+    bpstat (const bpstat &);\n+    bpstat &operator= (const bpstat &) = delete;\n \n     /* Linked list because there can be more than one breakpoint at\n        the same place, and a bpstat reflects the fact that all have\n        been hit.  */\n-    bpstat next;\n+    bpstat *next;\n \n     /* Location that caused the stop.  Locations are refcounted, so\n        this will never be NULL.  Note that this location may end up\n@@ -1297,7 +1295,7 @@ extern void set_ignore_count (int, int, int);\n \n extern void breakpoint_init_inferior (enum inf_context);\n \n-extern void breakpoint_auto_delete (bpstat);\n+extern void breakpoint_auto_delete (bpstat *);\n \n /* Return the chain of command lines to execute when this breakpoint\n    is hit.  */"
    },
    {
      "sha": "47d1eff0547834e46da8a8194a4cd6c249b051b1",
      "filename": "gdb/cli/cli-interp.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/313f3b21cbcd3475c2fc6030abb26e6c8346d03b/gdb/cli/cli-interp.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/313f3b21cbcd3475c2fc6030abb26e6c8346d03b/gdb/cli/cli-interp.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/cli/cli-interp.c?ref=313f3b21cbcd3475c2fc6030abb26e6c8346d03b",
      "patch": "@@ -125,7 +125,7 @@ should_print_stop_to_console (struct interp *console_interp,\n /* Observer for the normal_stop notification.  */\n \n static void\n-cli_on_normal_stop (struct bpstats *bs, int print_frame)\n+cli_on_normal_stop (struct bpstat *bs, int print_frame)\n {\n   if (!print_frame)\n     return;"
    },
    {
      "sha": "a4c1244a3e18fdbe444811cc913731fec6206fbb",
      "filename": "gdb/gdbthread.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/313f3b21cbcd3475c2fc6030abb26e6c8346d03b/gdb/gdbthread.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/313f3b21cbcd3475c2fc6030abb26e6c8346d03b/gdb/gdbthread.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbthread.h?ref=313f3b21cbcd3475c2fc6030abb26e6c8346d03b",
      "patch": "@@ -154,7 +154,7 @@ struct thread_control_state\n \n   /* Chain containing status of breakpoint(s) the thread stopped\n      at.  */\n-  bpstat stop_bpstat = nullptr;\n+  bpstat *stop_bpstat = nullptr;\n \n   /* Whether the command that started the thread was a stepping\n      command.  This is used to decide whether \"set scheduler-locking"
    },
    {
      "sha": "2c60be38055c58f92da797b613473007ba5e5295",
      "filename": "gdb/infcmd.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/313f3b21cbcd3475c2fc6030abb26e6c8346d03b/gdb/infcmd.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/313f3b21cbcd3475c2fc6030abb26e6c8346d03b/gdb/infcmd.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/infcmd.c?ref=313f3b21cbcd3475c2fc6030abb26e6c8346d03b",
      "patch": "@@ -669,7 +669,7 @@ continue_command (const char *args, int from_tty)\n      stopped at.  */\n   if (args != NULL)\n     {\n-      bpstat bs = NULL;\n+      bpstat *bs = nullptr;\n       int num, stat;\n       int stopped = 0;\n       struct thread_info *tp;\n@@ -1827,7 +1827,7 @@ finish_command (const char *arg, int from_tty)\n static void\n info_program_command (const char *args, int from_tty)\n {\n-  bpstat bs;\n+  bpstat *bs;\n   int num, stat;\n   ptid_t ptid;\n   process_stratum_target *proc_target;"
    },
    {
      "sha": "c6341272bbd50477be6e206170c7cd15716ee21c",
      "filename": "gdb/infrun.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/313f3b21cbcd3475c2fc6030abb26e6c8346d03b/gdb/infrun.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/313f3b21cbcd3475c2fc6030abb26e6c8346d03b/gdb/infrun.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/infrun.c?ref=313f3b21cbcd3475c2fc6030abb26e6c8346d03b",
      "patch": "@@ -6114,7 +6114,7 @@ handle_signal_stop (struct execution_control_state *ecs)\n   ecs->event_thread->control.stop_step = 0;\n   stop_print_frame = true;\n   stopped_by_random_signal = 0;\n-  bpstat stop_chain = NULL;\n+  bpstat *stop_chain = nullptr;\n \n   /* Hide inlined functions starting here, unless we just performed stepi or\n      nexti.  After stepi and nexti, always show the innermost frame (not any"
    },
    {
      "sha": "6c1ac2c6170ac906e29fbf12f3a77aeed3726b83",
      "filename": "gdb/inline-frame.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/313f3b21cbcd3475c2fc6030abb26e6c8346d03b/gdb/inline-frame.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/313f3b21cbcd3475c2fc6030abb26e6c8346d03b/gdb/inline-frame.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/inline-frame.c?ref=313f3b21cbcd3475c2fc6030abb26e6c8346d03b",
      "patch": "@@ -308,9 +308,9 @@ block_starting_point_at (CORE_ADDR pc, const struct block *block)\n    set at FRAME_BLOCK.  */\n \n static bool\n-stopped_by_user_bp_inline_frame (const block *frame_block, bpstat stop_chain)\n+stopped_by_user_bp_inline_frame (const block *frame_block, bpstat *stop_chain)\n {\n-  for (bpstat s = stop_chain; s != NULL; s = s->next)\n+  for (bpstat *s = stop_chain; s != nulltr; s = s->next)\n     {\n       struct breakpoint *bpt = s->breakpoint_at;\n \n@@ -341,7 +341,7 @@ stopped_by_user_bp_inline_frame (const block *frame_block, bpstat stop_chain)\n /* See inline-frame.h.  */\n \n void\n-skip_inline_frames (thread_info *thread, bpstat stop_chain)\n+skip_inline_frames (thread_info *thread, bpstat *stop_chain)\n {\n   const struct block *frame_block, *cur_block;\n   std::vector<struct symbol *> skipped_syms;"
    },
    {
      "sha": "aa5f0d81111c0072d509874b88c022acf7a013c5",
      "filename": "gdb/inline-frame.h",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/313f3b21cbcd3475c2fc6030abb26e6c8346d03b/gdb/inline-frame.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/313f3b21cbcd3475c2fc6030abb26e6c8346d03b/gdb/inline-frame.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/inline-frame.h?ref=313f3b21cbcd3475c2fc6030abb26e6c8346d03b",
      "patch": "@@ -22,7 +22,7 @@\n \n struct frame_info;\n struct frame_unwind;\n-struct bpstats;\n+struct bpstat;\n struct process_stratum_target;\n \n /* The inline frame unwinder.  */\n@@ -37,7 +37,7 @@ extern const struct frame_unwind inline_frame_unwind;\n    user's perspective.  GDB will stop \"in\" the inlined frame instead of\n    the caller.  */\n \n-void skip_inline_frames (thread_info *thread, struct bpstats *stop_chain);\n+void skip_inline_frames (thread_info *thread, struct bpstat *stop_chain);\n \n /* Forget about any hidden inlined functions in PTID, which is new or\n    about to be resumed.  PTID may be minus_one_ptid (all processes of"
    },
    {
      "sha": "ea08304459db883745f4e42ac8759c05b0cb14b2",
      "filename": "gdb/mi/mi-interp.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/313f3b21cbcd3475c2fc6030abb26e6c8346d03b/gdb/mi/mi-interp.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/313f3b21cbcd3475c2fc6030abb26e6c8346d03b/gdb/mi/mi-interp.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/mi/mi-interp.c?ref=313f3b21cbcd3475c2fc6030abb26e6c8346d03b",
      "patch": "@@ -64,7 +64,7 @@ static void mi_on_signal_received (enum gdb_signal siggnal);\n static void mi_on_end_stepping_range (void);\n static void mi_on_signal_exited (enum gdb_signal siggnal);\n static void mi_on_exited (int exitstatus);\n-static void mi_on_normal_stop (struct bpstats *bs, int print_frame);\n+static void mi_on_normal_stop (struct bpstat *bs, int print_frame);\n static void mi_on_no_history (void);\n \n static void mi_new_thread (struct thread_info *t);\n@@ -614,7 +614,7 @@ mi_on_no_history (void)\n }\n \n static void\n-mi_on_normal_stop_1 (struct bpstats *bs, int print_frame)\n+mi_on_normal_stop_1 (struct bpstat *bs, int print_frame)\n {\n   /* Since this can be called when CLI command is executing,\n      using cli interpreter, be sure to use MI uiout for output,\n@@ -673,7 +673,7 @@ mi_on_normal_stop_1 (struct bpstats *bs, int print_frame)\n }\n \n static void\n-mi_on_normal_stop (struct bpstats *bs, int print_frame)\n+mi_on_normal_stop (struct bpstat *bs, int print_frame)\n {\n   SWITCH_THRU_ALL_UIS ()\n     {"
    },
    {
      "sha": "1de746a691e9f82a613eb0b52e62a402b287ba84",
      "filename": "gdb/observable.h",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/313f3b21cbcd3475c2fc6030abb26e6c8346d03b/gdb/observable.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/313f3b21cbcd3475c2fc6030abb26e6c8346d03b/gdb/observable.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/observable.h?ref=313f3b21cbcd3475c2fc6030abb26e6c8346d03b",
      "patch": "@@ -22,7 +22,7 @@\n \n #include \"gdbsupport/observable.h\"\n \n-struct bpstats;\n+struct bpstat;\n struct so_list;\n struct objfile;\n struct thread_info;\n@@ -50,7 +50,7 @@ namespace observers\n    condition that is not met.  If the breakpoint has any associated\n    commands list, the commands are executed after the notification is\n    emitted.  */\n-extern observable<struct bpstats */* bs */, int /* print_frame */> normal_stop;\n+extern observable<struct bpstat */* bs */, int /* print_frame */> normal_stop;\n \n /* The inferior was stopped by a signal.  */\n extern observable<enum gdb_signal /* siggnal */> signal_received;"
    },
    {
      "sha": "fe5089c8d447b8d0a79c00d627de928602b78f86",
      "filename": "gdb/python/py-finishbreakpoint.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/313f3b21cbcd3475c2fc6030abb26e6c8346d03b/gdb/python/py-finishbreakpoint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/313f3b21cbcd3475c2fc6030abb26e6c8346d03b/gdb/python/py-finishbreakpoint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-finishbreakpoint.c?ref=313f3b21cbcd3475c2fc6030abb26e6c8346d03b",
      "patch": "@@ -378,7 +378,7 @@ bpfinishpy_detect_out_scope_cb (struct breakpoint *b,\n    out of the scope of any FinishBreakpoint before it has been hit.  */\n \n static void\n-bpfinishpy_handle_stop (struct bpstats *bs, int print_frame)\n+bpfinishpy_handle_stop (struct bpstat *bs, int print_frame)\n {\n   gdbpy_enter enter_py (get_current_arch (), current_language);\n "
    },
    {
      "sha": "222e4d9a3d3ee1e92ab360433f04df1a798ef470",
      "filename": "gdb/python/py-inferior.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/313f3b21cbcd3475c2fc6030abb26e6c8346d03b/gdb/python/py-inferior.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/313f3b21cbcd3475c2fc6030abb26e6c8346d03b/gdb/python/py-inferior.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-inferior.c?ref=313f3b21cbcd3475c2fc6030abb26e6c8346d03b",
      "patch": "@@ -74,7 +74,7 @@ static const struct inferior_data *infpy_inf_data_key;\n   } while (0)\n \n static void\n-python_on_normal_stop (struct bpstats *bs, int print_frame)\n+python_on_normal_stop (struct bpstat *bs, int print_frame)\n {\n   enum gdb_signal stop_signal;\n "
    },
    {
      "sha": "70cd1113dec051ea178552afe534de805bd56ddf",
      "filename": "gdb/python/py-stopevent.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/313f3b21cbcd3475c2fc6030abb26e6c8346d03b/gdb/python/py-stopevent.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/313f3b21cbcd3475c2fc6030abb26e6c8346d03b/gdb/python/py-stopevent.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-stopevent.c?ref=313f3b21cbcd3475c2fc6030abb26e6c8346d03b",
      "patch": "@@ -35,12 +35,12 @@ create_stop_event_object (PyTypeObject *py_type)\n    returns -1.  */\n \n int\n-emit_stop_event (struct bpstats *bs, enum gdb_signal stop_signal)\n+emit_stop_event (struct bpstat *bs, enum gdb_signal stop_signal)\n {\n   gdbpy_ref<> stop_event_obj;\n   gdbpy_ref<> list;\n   PyObject *first_bp = NULL;\n-  struct bpstats *current_bs;\n+  struct bpstat *current_bs;\n \n   if (evregpy_no_listeners_p (gdb_py_events.stop))\n     return 0;"
    },
    {
      "sha": "7622a79573129bf16e4266f2265b4236caf02de6",
      "filename": "gdb/python/py-stopevent.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/313f3b21cbcd3475c2fc6030abb26e6c8346d03b/gdb/python/py-stopevent.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/313f3b21cbcd3475c2fc6030abb26e6c8346d03b/gdb/python/py-stopevent.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-stopevent.h?ref=313f3b21cbcd3475c2fc6030abb26e6c8346d03b",
      "patch": "@@ -25,7 +25,7 @@\n extern gdbpy_ref<> create_stop_event_object (PyTypeObject *py_type);\n extern void stop_evpy_dealloc (PyObject *self);\n \n-extern int emit_stop_event (struct bpstats *bs,\n+extern int emit_stop_event (struct bpstat *bs,\n \t\t\t    enum gdb_signal stop_signal);\n \n extern gdbpy_ref<> create_breakpoint_event_object (PyObject *breakpoint_list,"
    },
    {
      "sha": "aece70800430ea4d63e4f2d301686a19734bbd35",
      "filename": "gdb/python/python-internal.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/313f3b21cbcd3475c2fc6030abb26e6c8346d03b/gdb/python/python-internal.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/313f3b21cbcd3475c2fc6030abb26e6c8346d03b/gdb/python/python-internal.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/python-internal.h?ref=313f3b21cbcd3475c2fc6030abb26e6c8346d03b",
      "patch": "@@ -295,7 +295,7 @@ struct block;\n struct value;\n struct language_defn;\n struct program_space;\n-struct bpstats;\n+struct bpstat;\n struct inferior;\n \n extern int gdb_python_initialized;"
    },
    {
      "sha": "41b92d2ec19ae916971cfa95b1c30f6e99f82c83",
      "filename": "gdb/solib-aix.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/313f3b21cbcd3475c2fc6030abb26e6c8346d03b/gdb/solib-aix.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/313f3b21cbcd3475c2fc6030abb26e6c8346d03b/gdb/solib-aix.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/solib-aix.c?ref=313f3b21cbcd3475c2fc6030abb26e6c8346d03b",
      "patch": "@@ -696,7 +696,7 @@ solib_aix_get_toc_value (CORE_ADDR pc)\n /* This module's normal_stop observer.  */\n \n static void\n-solib_aix_normal_stop_observer (struct bpstats *unused_1, int unused_2)\n+solib_aix_normal_stop_observer (struct bpstat *unused_1, int unused_2)\n {\n   struct solib_aix_inferior_data *data\n     = get_solib_aix_inferior_data (current_inferior ());"
    },
    {
      "sha": "9eb10a65c51d0c7427221995614f9057a227e7e4",
      "filename": "gdb/tui/tui-hooks.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/313f3b21cbcd3475c2fc6030abb26e6c8346d03b/gdb/tui/tui-hooks.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/313f3b21cbcd3475c2fc6030abb26e6c8346d03b/gdb/tui/tui-hooks.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-hooks.c?ref=313f3b21cbcd3475c2fc6030abb26e6c8346d03b",
      "patch": "@@ -190,7 +190,7 @@ tui_before_prompt (const char *current_gdb_prompt)\n /* Observer for the normal_stop notification.  */\n \n static void\n-tui_normal_stop (struct bpstats *bs, int print_frame)\n+tui_normal_stop (struct bpstat *bs, int print_frame)\n {\n   from_stack = true;\n }"
    },
    {
      "sha": "0cd5b1259192dfacbbff72fcfa950f7421ae70ad",
      "filename": "gdb/tui/tui-interp.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/313f3b21cbcd3475c2fc6030abb26e6c8346d03b/gdb/tui/tui-interp.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/313f3b21cbcd3475c2fc6030abb26e6c8346d03b/gdb/tui/tui-interp.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-interp.c?ref=313f3b21cbcd3475c2fc6030abb26e6c8346d03b",
      "patch": "@@ -79,7 +79,7 @@ tui_exit (void)\n /* Observer for the normal_stop notification.  */\n \n static void\n-tui_on_normal_stop (struct bpstats *bs, int print_frame)\n+tui_on_normal_stop (struct bpstat *bs, int print_frame)\n {\n   if (!print_frame)\n     return;"
    }
  ]
}