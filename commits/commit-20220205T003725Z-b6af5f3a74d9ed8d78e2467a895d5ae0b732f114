{
  "sha": "b6af5f3a74d9ed8d78e2467a895d5ae0b732f114",
  "node_id": "C_kwDOANOeidoAKGI2YWY1ZjNhNzRkOWVkOGQ3OGUyNDY3YTg5NWQ1YWUwYjczMmYxMTQ",
  "commit": {
    "author": {
      "name": "Faraz Shahbazker",
      "email": "fshahbazker@wavecomp.com",
      "date": "2022-02-02T10:17:23Z"
    },
    "committer": {
      "name": "Mike Frysinger",
      "email": "vapier@gentoo.org",
      "date": "2022-02-05T00:37:25Z"
    },
    "message": "sim: Factor out NaN handling in floating point operations\n\n2022-02-01  Faraz Shahbazker  <fshahbazker@wavecomp.com>\n\nsim/common/ChangeLog:\n\t* sim-fpu.c (sim_fpu_op_nan): New.\n\t(sim_fpu_add): Factor out NaN operand handling with\n\ta call to sim_fpu_op_nan.\n\t(sim_fpu_sub, sim_fpu_mul, sim_fpu_div): Likewise.\n\t(sim_fpu_rem, sim_fpu_max, sim_fpu_min): Likewise.\n\t* sim-fpu.h (sim_fpu_op_nan): New declaration.",
    "tree": {
      "sha": "59400b169106b1e869e46b9cf77d58b967ffc664",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/59400b169106b1e869e46b9cf77d58b967ffc664"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/b6af5f3a74d9ed8d78e2467a895d5ae0b732f114",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b6af5f3a74d9ed8d78e2467a895d5ae0b732f114",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/b6af5f3a74d9ed8d78e2467a895d5ae0b732f114",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b6af5f3a74d9ed8d78e2467a895d5ae0b732f114/comments",
  "author": {
    "login": "farazs-github",
    "id": 57776434,
    "node_id": "MDQ6VXNlcjU3Nzc2NDM0",
    "avatar_url": "https://avatars.githubusercontent.com/u/57776434?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/farazs-github",
    "html_url": "https://github.com/farazs-github",
    "followers_url": "https://api.github.com/users/farazs-github/followers",
    "following_url": "https://api.github.com/users/farazs-github/following{/other_user}",
    "gists_url": "https://api.github.com/users/farazs-github/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/farazs-github/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/farazs-github/subscriptions",
    "organizations_url": "https://api.github.com/users/farazs-github/orgs",
    "repos_url": "https://api.github.com/users/farazs-github/repos",
    "events_url": "https://api.github.com/users/farazs-github/events{/privacy}",
    "received_events_url": "https://api.github.com/users/farazs-github/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "vapier",
    "id": 176950,
    "node_id": "MDQ6VXNlcjE3Njk1MA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/176950?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vapier",
    "html_url": "https://github.com/vapier",
    "followers_url": "https://api.github.com/users/vapier/followers",
    "following_url": "https://api.github.com/users/vapier/following{/other_user}",
    "gists_url": "https://api.github.com/users/vapier/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vapier/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vapier/subscriptions",
    "organizations_url": "https://api.github.com/users/vapier/orgs",
    "repos_url": "https://api.github.com/users/vapier/repos",
    "events_url": "https://api.github.com/users/vapier/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vapier/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "bf484e93483776072291c5cad2e289567d74c818",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/bf484e93483776072291c5cad2e289567d74c818",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/bf484e93483776072291c5cad2e289567d74c818"
    }
  ],
  "stats": {
    "total": 199,
    "additions": 41,
    "deletions": 158
  },
  "files": [
    {
      "sha": "9174eaf17b48d13acd6327cf357409d614f835e5",
      "filename": "sim/common/sim-fpu.c",
      "status": "modified",
      "additions": 31,
      "deletions": 158,
      "changes": 189,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b6af5f3a74d9ed8d78e2467a895d5ae0b732f114/sim/common/sim-fpu.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b6af5f3a74d9ed8d78e2467a895d5ae0b732f114/sim/common/sim-fpu.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/common/sim-fpu.c?ref=b6af5f3a74d9ed8d78e2467a895d5ae0b732f114",
      "patch": "@@ -986,7 +986,24 @@ sim_fpu_round_64 (sim_fpu *f,\n   return do_round (f, 1, round, denorm);\n }\n \n+/* NaN handling for binary operations.  */\n \n+INLINE_SIM_FPU (int)\n+sim_fpu_op_nan (sim_fpu *f, const sim_fpu *l, const sim_fpu *r)\n+{\n+  if (sim_fpu_is_snan (l) || sim_fpu_is_snan (r))\n+    {\n+      *f = sim_fpu_is_snan (l) ? *l : *r;\n+      f->class = sim_fpu_class_qnan;\n+      return sim_fpu_status_invalid_snan;\n+    }\n+   ASSERT (sim_fpu_is_nan (l) || sim_fpu_is_nan (r));\n+   if (sim_fpu_is_qnan (l))\n+     *f = *l;\n+   else /* if (sim_fpu_is_qnan (r)) */\n+     *f = *r;\n+  return 0;\n+}\n \n /* Arithmetic ops */\n \n@@ -995,28 +1012,8 @@ sim_fpu_add (sim_fpu *f,\n \t     const sim_fpu *l,\n \t     const sim_fpu *r)\n {\n-  if (sim_fpu_is_snan (l))\n-    {\n-      *f = *l;\n-      f->class = sim_fpu_class_qnan;\n-      return sim_fpu_status_invalid_snan;\n-    }\n-  if (sim_fpu_is_snan (r))\n-    {\n-      *f = *r;\n-      f->class = sim_fpu_class_qnan;\n-      return sim_fpu_status_invalid_snan;\n-    }\n-  if (sim_fpu_is_qnan (l))\n-    {\n-      *f = *l;\n-      return 0;\n-    }\n-  if (sim_fpu_is_qnan (r))\n-    {\n-      *f = *r;\n-      return 0;\n-    }\n+  if (sim_fpu_is_nan (l) || sim_fpu_is_nan (r))\n+    return sim_fpu_op_nan (f, l, r);\n   if (sim_fpu_is_infinity (l))\n     {\n       if (sim_fpu_is_infinity (r)\n@@ -1144,28 +1141,8 @@ sim_fpu_sub (sim_fpu *f,\n \t     const sim_fpu *l,\n \t     const sim_fpu *r)\n {\n-  if (sim_fpu_is_snan (l))\n-    {\n-      *f = *l;\n-      f->class = sim_fpu_class_qnan;\n-      return sim_fpu_status_invalid_snan;\n-    }\n-  if (sim_fpu_is_snan (r))\n-    {\n-      *f = *r;\n-      f->class = sim_fpu_class_qnan;\n-      return sim_fpu_status_invalid_snan;\n-    }\n-  if (sim_fpu_is_qnan (l))\n-    {\n-      *f = *l;\n-      return 0;\n-    }\n-  if (sim_fpu_is_qnan (r))\n-    {\n-      *f = *r;\n-      return 0;\n-    }\n+  if (sim_fpu_is_nan (l) || sim_fpu_is_nan (r))\n+    return sim_fpu_op_nan (f, l, r);\n   if (sim_fpu_is_infinity (l))\n     {\n       if (sim_fpu_is_infinity (r)\n@@ -1298,28 +1275,8 @@ sim_fpu_mul (sim_fpu *f,\n \t     const sim_fpu *l,\n \t     const sim_fpu *r)\n {\n-  if (sim_fpu_is_snan (l))\n-    {\n-      *f = *l;\n-      f->class = sim_fpu_class_qnan;\n-      return sim_fpu_status_invalid_snan;\n-    }\n-  if (sim_fpu_is_snan (r))\n-    {\n-      *f = *r;\n-      f->class = sim_fpu_class_qnan;\n-      return sim_fpu_status_invalid_snan;\n-    }\n-  if (sim_fpu_is_qnan (l))\n-    {\n-      *f = *l;\n-      return 0;\n-    }\n-  if (sim_fpu_is_qnan (r))\n-    {\n-      *f = *r;\n-      return 0;\n-    }\n+  if (sim_fpu_is_nan (l) || sim_fpu_is_nan (r))\n+    return sim_fpu_op_nan (f, l, r);\n   if (sim_fpu_is_infinity (l))\n     {\n       if (sim_fpu_is_zero (r))\n@@ -1423,30 +1380,8 @@ sim_fpu_div (sim_fpu *f,\n \t     const sim_fpu *l,\n \t     const sim_fpu *r)\n {\n-  if (sim_fpu_is_snan (l))\n-    {\n-      *f = *l;\n-      f->class = sim_fpu_class_qnan;\n-      return sim_fpu_status_invalid_snan;\n-    }\n-  if (sim_fpu_is_snan (r))\n-    {\n-      *f = *r;\n-      f->class = sim_fpu_class_qnan;\n-      return sim_fpu_status_invalid_snan;\n-    }\n-  if (sim_fpu_is_qnan (l))\n-    {\n-      *f = *l;\n-      f->class = sim_fpu_class_qnan;\n-      return 0;\n-    }\n-  if (sim_fpu_is_qnan (r))\n-    {\n-      *f = *r;\n-      f->class = sim_fpu_class_qnan;\n-      return 0;\n-    }\n+  if (sim_fpu_is_nan (l) || sim_fpu_is_nan (r))\n+    return sim_fpu_op_nan (f, l, r);\n   if (sim_fpu_is_infinity (l))\n     {\n       if (sim_fpu_is_infinity (r))\n@@ -1556,30 +1491,8 @@ sim_fpu_rem (sim_fpu *f,\n \t     const sim_fpu *l,\n \t     const sim_fpu *r)\n {\n-  if (sim_fpu_is_snan (l))\n-    {\n-      *f = *l;\n-      f->class = sim_fpu_class_qnan;\n-      return sim_fpu_status_invalid_snan;\n-    }\n-  if (sim_fpu_is_snan (r))\n-    {\n-      *f = *r;\n-      f->class = sim_fpu_class_qnan;\n-      return sim_fpu_status_invalid_snan;\n-    }\n-  if (sim_fpu_is_qnan (l))\n-    {\n-      *f = *l;\n-      f->class = sim_fpu_class_qnan;\n-      return 0;\n-    }\n-  if (sim_fpu_is_qnan (r))\n-    {\n-      *f = *r;\n-      f->class = sim_fpu_class_qnan;\n-      return 0;\n-    }\n+  if (sim_fpu_is_nan (l) || sim_fpu_is_nan (r))\n+    return sim_fpu_op_nan (f, l, r);\n   if (sim_fpu_is_infinity (l))\n     {\n       *f = sim_fpu_qnan;\n@@ -1639,28 +1552,8 @@ sim_fpu_max (sim_fpu *f,\n \t     const sim_fpu *l,\n \t     const sim_fpu *r)\n {\n-  if (sim_fpu_is_snan (l))\n-    {\n-      *f = *l;\n-      f->class = sim_fpu_class_qnan;\n-      return sim_fpu_status_invalid_snan;\n-    }\n-  if (sim_fpu_is_snan (r))\n-    {\n-      *f = *r;\n-      f->class = sim_fpu_class_qnan;\n-      return sim_fpu_status_invalid_snan;\n-    }\n-  if (sim_fpu_is_qnan (l))\n-    {\n-      *f = *l;\n-      return 0;\n-    }\n-  if (sim_fpu_is_qnan (r))\n-    {\n-      *f = *r;\n-      return 0;\n-    }\n+  if (sim_fpu_is_nan (l) || sim_fpu_is_nan (r))\n+    return sim_fpu_op_nan (f, l, r);\n   if (sim_fpu_is_infinity (l))\n     {\n       if (sim_fpu_is_infinity (r)\n@@ -1722,28 +1615,8 @@ sim_fpu_min (sim_fpu *f,\n \t     const sim_fpu *l,\n \t     const sim_fpu *r)\n {\n-  if (sim_fpu_is_snan (l))\n-    {\n-      *f = *l;\n-      f->class = sim_fpu_class_qnan;\n-      return sim_fpu_status_invalid_snan;\n-    }\n-  if (sim_fpu_is_snan (r))\n-    {\n-      *f = *r;\n-      f->class = sim_fpu_class_qnan;\n-      return sim_fpu_status_invalid_snan;\n-    }\n-  if (sim_fpu_is_qnan (l))\n-    {\n-      *f = *l;\n-      return 0;\n-    }\n-  if (sim_fpu_is_qnan (r))\n-    {\n-      *f = *r;\n-      return 0;\n-    }\n+  if (sim_fpu_is_nan (l) || sim_fpu_is_nan (r))\n+    return sim_fpu_op_nan (f, l, r);\n   if (sim_fpu_is_infinity (l))\n     {\n       if (sim_fpu_is_infinity (r)"
    },
    {
      "sha": "2a141981687680909bbd3f58646a5374650767c3",
      "filename": "sim/common/sim-fpu.h",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/b6af5f3a74d9ed8d78e2467a895d5ae0b732f114/sim/common/sim-fpu.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/b6af5f3a74d9ed8d78e2467a895d5ae0b732f114/sim/common/sim-fpu.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/common/sim-fpu.h?ref=b6af5f3a74d9ed8d78e2467a895d5ae0b732f114",
      "patch": "@@ -261,6 +261,16 @@ INLINE_SIM_FPU (int) sim_fpu_sqrt (sim_fpu *f,\n \n \n \n+/* NaN handling.\n+\n+   Assuming that at least one of the inputs is NAN choose the correct\n+   NAN result for the binary operation.  */\n+\n+INLINE_SIM_FPU (int) sim_fpu_op_nan (sim_fpu *f,\n+\t\t\t\t     const sim_fpu *l, const sim_fpu *r);\n+\n+\n+\n /* Conversion of integer <-> floating point. */\n \n INLINE_SIM_FPU (int) sim_fpu_i32to (sim_fpu *f, int32_t i,"
    }
  ]
}