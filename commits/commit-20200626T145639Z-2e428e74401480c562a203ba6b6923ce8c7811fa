{
  "sha": "2e428e74401480c562a203ba6b6923ce8c7811fa",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MmU0MjhlNzQ0MDE0ODBjNTYyYTIwM2JhNmI2OTIzY2U4Yzc4MTFmYQ==",
  "commit": {
    "author": {
      "name": "Nick Alcock",
      "email": "nick.alcock@oracle.com",
      "date": "2019-12-13T14:48:07Z"
    },
    "committer": {
      "name": "Nick Alcock",
      "email": "nick.alcock@oracle.com",
      "date": "2020-06-26T14:56:39Z"
    },
    "message": "libctf: avoid nonportable __thread in CTF archive handling\n\nThis keeps archive searching threadsafe using the new bsearch_r that was\njust added to libiberty.\n\n\tPR25120\nlibctf/\n\t* ctf-archive.c (search_nametbl): No longer global: declare...\n\t(ctf_arc_open_by_name_internal): ... here. Use bsearch_r.\n\t(search_modent_by_name): Take and use ARG for the nametbl.",
    "tree": {
      "sha": "6b267631b666ead5ad4af1e8f1dfe30e961f7c8c",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/6b267631b666ead5ad4af1e8f1dfe30e961f7c8c"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/2e428e74401480c562a203ba6b6923ce8c7811fa",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2e428e74401480c562a203ba6b6923ce8c7811fa",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/2e428e74401480c562a203ba6b6923ce8c7811fa",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2e428e74401480c562a203ba6b6923ce8c7811fa/comments",
  "author": {
    "login": "nickalcock",
    "id": 6503005,
    "node_id": "MDQ6VXNlcjY1MDMwMDU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6503005?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickalcock",
    "html_url": "https://github.com/nickalcock",
    "followers_url": "https://api.github.com/users/nickalcock/followers",
    "following_url": "https://api.github.com/users/nickalcock/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickalcock/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickalcock/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickalcock/subscriptions",
    "organizations_url": "https://api.github.com/users/nickalcock/orgs",
    "repos_url": "https://api.github.com/users/nickalcock/repos",
    "events_url": "https://api.github.com/users/nickalcock/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickalcock/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "nickalcock",
    "id": 6503005,
    "node_id": "MDQ6VXNlcjY1MDMwMDU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6503005?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickalcock",
    "html_url": "https://github.com/nickalcock",
    "followers_url": "https://api.github.com/users/nickalcock/followers",
    "following_url": "https://api.github.com/users/nickalcock/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickalcock/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickalcock/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickalcock/subscriptions",
    "organizations_url": "https://api.github.com/users/nickalcock/orgs",
    "repos_url": "https://api.github.com/users/nickalcock/repos",
    "events_url": "https://api.github.com/users/nickalcock/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickalcock/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "2f6ecaed667d1597c67991224948e0a3da427cc9",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2f6ecaed667d1597c67991224948e0a3da427cc9",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/2f6ecaed667d1597c67991224948e0a3da427cc9"
    }
  ],
  "stats": {
    "total": 24,
    "additions": 15,
    "deletions": 9
  },
  "files": [
    {
      "sha": "62c2cc531ec32437e1019be968056b49dabcbd39",
      "filename": "libctf/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2e428e74401480c562a203ba6b6923ce8c7811fa/libctf/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2e428e74401480c562a203ba6b6923ce8c7811fa/libctf/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libctf/ChangeLog?ref=2e428e74401480c562a203ba6b6923ce8c7811fa",
      "patch": "@@ -1,3 +1,10 @@\n+2020-06-26  Nick Alcock  <nick.alcock@oracle.com>\n+\n+\tPR libctf/25120\n+\t* ctf-archive.c (search_nametbl): No longer global: declare...\n+\t(ctf_arc_open_by_name_internal): ... here. Use bsearch_r.\n+\t(search_modent_by_name): Take and use ARG for the nametbl.\n+\n 2020-06-26  Nick Alcock  <nick.alcock@oracle.com>\n \n \t* ctf-impl.h (ctf_new_archive_internal): Declare."
    },
    {
      "sha": "ac13d6dd5e9e7a632ffde80fa6dac1f67f619a3b",
      "filename": "libctf/ctf-archive.c",
      "status": "modified",
      "additions": 8,
      "deletions": 9,
      "changes": 17,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2e428e74401480c562a203ba6b6923ce8c7811fa/libctf/ctf-archive.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2e428e74401480c562a203ba6b6923ce8c7811fa/libctf/ctf-archive.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libctf/ctf-archive.c?ref=2e428e74401480c562a203ba6b6923ce8c7811fa",
      "patch": "@@ -44,9 +44,6 @@ static int arc_mmap_writeout (int fd, void *header, size_t headersz,\n \t\t\t      const char **errmsg);\n static int arc_mmap_unmap (void *header, size_t headersz, const char **errmsg);\n \n-/* bsearch() internal state.  */\n-static __thread char *search_nametbl;\n-\n /* Write out a CTF archive to the start of the file referenced by the passed-in\n    fd.  The entries in CTF_FILES are referenced by name: the names are passed in\n    the names array, which must have CTF_FILES entries.\n@@ -332,13 +329,14 @@ sort_modent_by_name (const void *one, const void *two, void *n)\n \t\t &nametbl[le64toh (b->name_offset)]);\n }\n \n-/* bsearch() function to search for a given name in the sorted array of struct\n+/* bsearch_r() function to search for a given name in the sorted array of struct\n    ctf_archive_modents.  */\n static int\n-search_modent_by_name (const void *key, const void *ent)\n+search_modent_by_name (const void *key, const void *ent, void *arg)\n {\n   const char *k = key;\n   const struct ctf_archive_modent *v = ent;\n+  const char *search_nametbl = arg;\n \n   return strcmp (k, &search_nametbl[le64toh (v->name_offset)]);\n }\n@@ -503,6 +501,7 @@ ctf_arc_open_by_name_internal (const struct ctf_archive *arc,\n \t\t\t       const char *name, int *errp)\n {\n   struct ctf_archive_modent *modent;\n+  const char *search_nametbl;\n \n   if (name == NULL)\n     name = _CTF_SECTION;\t\t /* The default name.  */\n@@ -512,10 +511,10 @@ ctf_arc_open_by_name_internal (const struct ctf_archive *arc,\n   modent = (ctf_archive_modent_t *) ((char *) arc\n \t\t\t\t     + sizeof (struct ctf_archive));\n \n-  search_nametbl = (char *) arc + le64toh (arc->ctfa_names);\n-  modent = bsearch (name, modent, le64toh (arc->ctfa_nfiles),\n-\t\t    sizeof (struct ctf_archive_modent),\n-\t\t    search_modent_by_name);\n+  search_nametbl = (const char *) arc + le64toh (arc->ctfa_names);\n+  modent = bsearch_r (name, modent, le64toh (arc->ctfa_nfiles),\n+\t\t      sizeof (struct ctf_archive_modent),\n+\t\t      search_modent_by_name, (void *) search_nametbl);\n \n   /* This is actually a common case and normal operation: no error\n      debug output.  */"
    }
  ]
}