{
  "sha": "cb2ce89305264543a4014d98bacb26800d92d394",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6Y2IyY2U4OTMwNTI2NDU0M2E0MDE0ZDk4YmFjYjI2ODAwZDkyZDM5NA==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-06-16T22:03:54Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-06-25T13:48:37Z"
    },
    "message": "Derive tui_win_info from tui_gen_win_info\n\nThis changes tui_win_info to derive from tui_gen_win_info, rather than\nhaving a tui_gen_win_info as a member.  This removes a layer of member\naccess from the entire TUI, which is why this patch is so large.  This\nchange will enable further removal of switches based on window type.\n\ngdb/ChangeLog\n2019-06-25  Tom Tromey  <tom@tromey.com>\n\n\t* tui/tui.c (tui_rl_other_window, tui_enable)\n\t(tui_is_window_visible, tui_get_command_dimension): Update.\n\t* tui/tui-winsource.c (tui_update_source_window_as_is)\n\t(tui_clear_source_content, tui_erase_source_content)\n\t(tui_show_source_line, tui_source_window_base::refill)\n\t(tui_source_window_base::do_scroll_horizontal)\n\t(tui_source_window_base::set_is_exec_point_at)\n\t(tui_update_breakpoint_info, tui_set_exec_info_content)\n\t(tui_alloc_source_buffer, tui_line_is_displayed)\n\t(tui_addr_is_displayed): Update.\n\t* tui/tui-wingeneral.c (tui_unhighlight_win, tui_highlight_win)\n\t(tui_check_and_display_highlight_if_needed)\n\t(tui_win_info::make_visible, tui_win_info::refresh)\n\t(tui_refresh_all): Update.\n\t* tui/tui-windata.c (tui_first_data_item_displayed)\n\t(tui_delete_data_content_windows, tui_erase_data_content)\n\t(tui_display_all_data, tui_data_window::refresh_all)\n\t(tui_check_data_values): Update.\n\t* tui/tui-win.c (window_name_completer, tui_update_gdb_sizes)\n\t(tui_set_win_focus_to, tui_win_info::forward_scroll)\n\t(tui_win_info::backward_scroll, tui_refresh_all_win)\n\t(tui_resize_all, tui_set_focus, tui_all_windows_info)\n\t(update_tab_width, tui_set_win_height, tui_adjust_win_heights)\n\t(tui_source_window_base::set_new_height)\n\t(tui_data_window::set_new_height)\n\t(make_invisible_and_set_new_height)\n\t(make_visible_with_new_height, new_height_ok)\n\t(parse_scrolling_args): Update.\n\t* tui/tui-stack.c (tui_show_frame_info): Update.\n\t* tui/tui-source.c (tui_set_source_content)\n\t(tui_set_source_content_nil, tui_source_is_displayed)\n\t(tui_source_window::do_scroll_vertical): Update.\n\t* tui/tui-regs.c (tui_show_registers, tui_show_register_group)\n\t(tui_display_registers_from, tui_display_reg_element_at_line)\n\t(tui_check_register_values, tui_reg_command): Update.\n\t* tui/tui-layout.c (tui_default_win_height)\n\t(show_source_disasm_command, show_data, init_and_make_win)\n\t(show_source_or_disasm_and_command): Update.\n\t* tui/tui-io.c (update_cmdwin_start_line, tui_putc, tui_puts)\n\t(tui_redisplay_readline, tui_mld_flush)\n\t(tui_mld_erase_entire_line, tui_mld_getc, tui_cont_sig)\n\t(tui_getc): Update.\n\t* tui/tui-disasm.c (tui_set_disassem_content)\n\t(tui_disasm_window::do_scroll_vertical): Update.\n\t* tui/tui-data.h (struct tui_gen_win_info) <~tui_gen_win_info>:\n\tNow virtual.\n\t(struct tui_win_info): Derive from tui_gen_win_info.\n\t<~tui_win_info>: Mark as override.\n\t<generic>: Remove member.\n\t* tui/tui-data.c (tui_cmd_window::clear_detail, tui_next_win)\n\t(tui_prev_win, tui_partial_win_by_name, tui_win_info)\n\t(~tui_data_window, ~tui_win_info)\n\t(tui_free_all_source_wins_content): Update.\n\t* tui/tui-command.c (tui_refresh_cmd_win): Update.",
    "tree": {
      "sha": "e86e884ade455bdd50ce3039924029caf588ad40",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/e86e884ade455bdd50ce3039924029caf588ad40"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/cb2ce89305264543a4014d98bacb26800d92d394",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/cb2ce89305264543a4014d98bacb26800d92d394",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/cb2ce89305264543a4014d98bacb26800d92d394",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/cb2ce89305264543a4014d98bacb26800d92d394/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "ab313b35e505ccab9c23acbe82087b6c22a2088d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ab313b35e505ccab9c23acbe82087b6c22a2088d",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/ab313b35e505ccab9c23acbe82087b6c22a2088d"
    }
  ],
  "stats": {
    "total": 683,
    "additions": 366,
    "deletions": 317
  },
  "files": [
    {
      "sha": "41b7de392d5b8da6945d712d59c5088cb263d8ef",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 57,
      "deletions": 0,
      "changes": 57,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cb2ce89305264543a4014d98bacb26800d92d394/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cb2ce89305264543a4014d98bacb26800d92d394/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=cb2ce89305264543a4014d98bacb26800d92d394",
      "patch": "@@ -1,3 +1,60 @@\n+2019-06-25  Tom Tromey  <tom@tromey.com>\n+\n+\t* tui/tui.c (tui_rl_other_window, tui_enable)\n+\t(tui_is_window_visible, tui_get_command_dimension): Update.\n+\t* tui/tui-winsource.c (tui_update_source_window_as_is)\n+\t(tui_clear_source_content, tui_erase_source_content)\n+\t(tui_show_source_line, tui_source_window_base::refill)\n+\t(tui_source_window_base::do_scroll_horizontal)\n+\t(tui_source_window_base::set_is_exec_point_at)\n+\t(tui_update_breakpoint_info, tui_set_exec_info_content)\n+\t(tui_alloc_source_buffer, tui_line_is_displayed)\n+\t(tui_addr_is_displayed): Update.\n+\t* tui/tui-wingeneral.c (tui_unhighlight_win, tui_highlight_win)\n+\t(tui_check_and_display_highlight_if_needed)\n+\t(tui_win_info::make_visible, tui_win_info::refresh)\n+\t(tui_refresh_all): Update.\n+\t* tui/tui-windata.c (tui_first_data_item_displayed)\n+\t(tui_delete_data_content_windows, tui_erase_data_content)\n+\t(tui_display_all_data, tui_data_window::refresh_all)\n+\t(tui_check_data_values): Update.\n+\t* tui/tui-win.c (window_name_completer, tui_update_gdb_sizes)\n+\t(tui_set_win_focus_to, tui_win_info::forward_scroll)\n+\t(tui_win_info::backward_scroll, tui_refresh_all_win)\n+\t(tui_resize_all, tui_set_focus, tui_all_windows_info)\n+\t(update_tab_width, tui_set_win_height, tui_adjust_win_heights)\n+\t(tui_source_window_base::set_new_height)\n+\t(tui_data_window::set_new_height)\n+\t(make_invisible_and_set_new_height)\n+\t(make_visible_with_new_height, new_height_ok)\n+\t(parse_scrolling_args): Update.\n+\t* tui/tui-stack.c (tui_show_frame_info): Update.\n+\t* tui/tui-source.c (tui_set_source_content)\n+\t(tui_set_source_content_nil, tui_source_is_displayed)\n+\t(tui_source_window::do_scroll_vertical): Update.\n+\t* tui/tui-regs.c (tui_show_registers, tui_show_register_group)\n+\t(tui_display_registers_from, tui_display_reg_element_at_line)\n+\t(tui_check_register_values, tui_reg_command): Update.\n+\t* tui/tui-layout.c (tui_default_win_height)\n+\t(show_source_disasm_command, show_data, init_and_make_win)\n+\t(show_source_or_disasm_and_command): Update.\n+\t* tui/tui-io.c (update_cmdwin_start_line, tui_putc, tui_puts)\n+\t(tui_redisplay_readline, tui_mld_flush)\n+\t(tui_mld_erase_entire_line, tui_mld_getc, tui_cont_sig)\n+\t(tui_getc): Update.\n+\t* tui/tui-disasm.c (tui_set_disassem_content)\n+\t(tui_disasm_window::do_scroll_vertical): Update.\n+\t* tui/tui-data.h (struct tui_gen_win_info) <~tui_gen_win_info>:\n+\tNow virtual.\n+\t(struct tui_win_info): Derive from tui_gen_win_info.\n+\t<~tui_win_info>: Mark as override.\n+\t<generic>: Remove member.\n+\t* tui/tui-data.c (tui_cmd_window::clear_detail, tui_next_win)\n+\t(tui_prev_win, tui_partial_win_by_name, tui_win_info)\n+\t(~tui_data_window, ~tui_win_info)\n+\t(tui_free_all_source_wins_content): Update.\n+\t* tui/tui-command.c (tui_refresh_cmd_win): Update.\n+\n 2019-06-25  Tom Tromey  <tom@tromey.com>\n \n \t* tui/tui-layout.c (init_and_make_win): Use new."
    },
    {
      "sha": "259620f7ce7a1f05f894c88a7453713a0da1a5dd",
      "filename": "gdb/tui/tui-command.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cb2ce89305264543a4014d98bacb26800d92d394/gdb/tui/tui-command.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cb2ce89305264543a4014d98bacb26800d92d394/gdb/tui/tui-command.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-command.c?ref=cb2ce89305264543a4014d98bacb26800d92d394",
      "patch": "@@ -94,7 +94,7 @@ tui_dispatch_ctrl_char (unsigned int ch)\n void\n tui_refresh_cmd_win (void)\n {\n-  WINDOW *w = TUI_CMD_WIN->generic.handle;\n+  WINDOW *w = TUI_CMD_WIN->handle;\n \n   wrefresh (w);\n "
    },
    {
      "sha": "c9f401f3912060bbb7362b6e24a41664fb93a3b9",
      "filename": "gdb/tui/tui-data.c",
      "status": "modified",
      "additions": 23,
      "deletions": 24,
      "changes": 47,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cb2ce89305264543a4014d98bacb26800d92d394/gdb/tui/tui-data.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cb2ce89305264543a4014d98bacb26800d92d394/gdb/tui/tui-data.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-data.c?ref=cb2ce89305264543a4014d98bacb26800d92d394",
      "patch": "@@ -169,7 +169,7 @@ tui_source_window_base::clear_detail ()\n void\n tui_cmd_window::clear_detail ()\n {\n-  wmove (generic.handle, 0, 0);\n+  wmove (handle, 0, 0);\n }\n \n /* See tui-data.h.  */\n@@ -268,17 +268,17 @@ tui_set_current_layout_to (enum tui_layout_type new_layout)\n struct tui_win_info *\n tui_next_win (struct tui_win_info *cur_win)\n {\n-  int type = cur_win->generic.type;\n+  int type = cur_win->type;\n   struct tui_win_info *next_win = NULL;\n \n-  if (cur_win->generic.type == CMD_WIN)\n+  if (cur_win->type == CMD_WIN)\n     type = SRC_WIN;\n   else\n-    type = cur_win->generic.type + 1;\n-  while (type != cur_win->generic.type && (next_win == NULL))\n+    type = cur_win->type + 1;\n+  while (type != cur_win->type && (next_win == NULL))\n     {\n       if (tui_win_list[type]\n-\t  && tui_win_list[type]->generic.is_visible)\n+\t  && tui_win_list[type]->is_visible)\n \tnext_win = tui_win_list[type];\n       else\n \t{\n@@ -298,17 +298,17 @@ tui_next_win (struct tui_win_info *cur_win)\n struct tui_win_info *\n tui_prev_win (struct tui_win_info *cur_win)\n {\n-  int type = cur_win->generic.type;\n+  int type = cur_win->type;\n   struct tui_win_info *prev = NULL;\n \n-  if (cur_win->generic.type == SRC_WIN)\n+  if (cur_win->type == SRC_WIN)\n     type = CMD_WIN;\n   else\n-    type = cur_win->generic.type - 1;\n-  while (type != cur_win->generic.type && (prev == NULL))\n+    type = cur_win->type - 1;\n+  while (type != cur_win->type && (prev == NULL))\n     {\n       if (tui_win_list[type]\n-\t  && tui_win_list[type]->generic.is_visible)\n+\t  && tui_win_list[type]->is_visible)\n \tprev = tui_win_list[type];\n       else\n \t{\n@@ -337,8 +337,7 @@ tui_partial_win_by_name (const char *name)\n \t{\n           if (tui_win_list[i] != 0)\n             {\n-              const char *cur_name =\n-\t\ttui_win_name (&tui_win_list[i]->generic);\n+              const char *cur_name = tui_win_name (tui_win_list[i]);\n \n               if (strlen (name) <= strlen (cur_name)\n \t\t  && startswith (cur_name, name))\n@@ -457,7 +456,7 @@ init_content_element (struct tui_win_element *element,\n }\n \n tui_win_info::tui_win_info (enum tui_win_type type)\n-  : generic (type)\n+  : tui_gen_win_info (type)\n {\n }\n \n@@ -569,7 +568,7 @@ tui_source_window_base::~tui_source_window_base ()\n \n tui_data_window::~tui_data_window ()\n {\n-  if (generic.content != NULL)\n+  if (content != NULL)\n     {\n       tui_free_data_content (regs_content, regs_content_count);\n       regs_content = NULL;\n@@ -579,21 +578,21 @@ tui_data_window::~tui_data_window ()\n       data_content_count = 0;\n       regs_column_count = 1;\n       display_regs = false;\n-      generic.content = NULL;\n-      generic.content_size = 0;\n+      content = NULL;\n+      content_size = 0;\n     }\n }  \n \n tui_win_info::~tui_win_info ()\n {\n-  if (generic.handle != NULL)\n+  if (handle != NULL)\n     {\n-      tui_delete_win (generic.handle);\n-      generic.handle = NULL;\n-      tui_free_win_content (&generic);\n+      tui_delete_win (handle);\n+      handle = NULL;\n+      tui_free_win_content (this);\n     }\n-  if (generic.title)\n-    xfree (generic.title);\n+  if (title)\n+    xfree (title);\n }\n \n \n@@ -602,7 +601,7 @@ tui_free_all_source_wins_content ()\n {\n   for (tui_source_window_base *win_info : tui_source_windows ())\n     {\n-      tui_free_win_content (&(win_info->generic));\n+      tui_free_win_content (win_info);\n       tui_free_win_content (win_info->execution_info);\n     }\n }"
    },
    {
      "sha": "08d388fb8c1c35fa2c5436771608ed3f0ab00d36",
      "filename": "gdb/tui/tui-data.h",
      "status": "modified",
      "additions": 3,
      "deletions": 5,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cb2ce89305264543a4014d98bacb26800d92d394/gdb/tui/tui-data.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cb2ce89305264543a4014d98bacb26800d92d394/gdb/tui/tui-data.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-data.h?ref=cb2ce89305264543a4014d98bacb26800d92d394",
      "patch": "@@ -44,7 +44,7 @@ struct tui_gen_win_info\n   {\n   }\n \n-  ~tui_gen_win_info ()\n+  virtual ~tui_gen_win_info ()\n   {\n   }\n \n@@ -246,7 +246,7 @@ struct tui_win_element\n };\n \n /* This defines information about each logical window.  */\n-struct tui_win_info\n+struct tui_win_info : public tui_gen_win_info\n {\n protected:\n \n@@ -265,7 +265,7 @@ struct tui_win_info\n \n public:\n \n-  virtual ~tui_win_info ();\n+  ~tui_win_info () override;\n \n   /* Clear the pertinent detail in the window.  */\n   virtual void clear_detail () = 0;\n@@ -311,8 +311,6 @@ struct tui_win_info\n   void left_scroll (int num_to_scroll);\n   void right_scroll (int num_to_scroll);\n \n-  struct tui_gen_win_info generic;\t/* General window information.  */\n-\n   /* Can this window ever be highlighted?  */\n   bool can_highlight = false;\n "
    },
    {
      "sha": "a9d827f5b7877b0c0a39b90c626d82e0d103f011",
      "filename": "gdb/tui/tui-disasm.c",
      "status": "modified",
      "additions": 5,
      "deletions": 8,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cb2ce89305264543a4014d98bacb26800d92d394/gdb/tui/tui-disasm.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cb2ce89305264543a4014d98bacb26800d92d394/gdb/tui/tui-disasm.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-disasm.c?ref=cb2ce89305264543a4014d98bacb26800d92d394",
      "patch": "@@ -191,8 +191,8 @@ tui_set_disassem_content (struct gdbarch *gdbarch, CORE_ADDR pc)\n   cur_pc = locator->content[0]->which_element.locator.addr;\n \n   /* Window size, excluding highlight box.  */\n-  max_lines = TUI_DISASM_WIN->generic.height - 2;\n-  line_width = TUI_DISASM_WIN->generic.width - 2;\n+  max_lines = TUI_DISASM_WIN->height - 2;\n+  line_width = TUI_DISASM_WIN->width - 2;\n \n   /* Get temporary table that will hold all strings (addr & insn).  */\n   asm_lines = XALLOCAVEC (struct tui_asm_line, max_lines);\n@@ -228,7 +228,7 @@ tui_set_disassem_content (struct gdbarch *gdbarch, CORE_ADDR pc)\n       struct tui_source_element *src;\n       int cur_len;\n \n-      element = TUI_DISASM_WIN->generic.content[i];\n+      element = TUI_DISASM_WIN->content[i];\n       src = &element->which_element.source;\n       strcpy (line, asm_lines[i].addr_string);\n       cur_len = strlen (line);\n@@ -257,7 +257,7 @@ tui_set_disassem_content (struct gdbarch *gdbarch, CORE_ADDR pc)\n       xfree (asm_lines[i].addr_string);\n       xfree (asm_lines[i].insn);\n     }\n-  TUI_DISASM_WIN->generic.content_size = i;\n+  TUI_DISASM_WIN->content_size = i;\n   return TUI_SUCCESS;\n }\n \n@@ -377,15 +377,12 @@ void\n tui_disasm_window::do_scroll_vertical\n   (enum tui_scroll_direction scroll_direction, int num_to_scroll)\n {\n-  if (generic.content != NULL)\n+  if (content != NULL)\n     {\n       CORE_ADDR pc;\n-      tui_win_content content;\n       struct tui_line_or_address val;\n       int dir;\n \n-      content = generic.content;\n-\n       pc = content[0]->which_element.source.line_or_addr.u.addr;\n       num_to_scroll++;\n       dir = (scroll_direction == FORWARD_SCROLL)"
    },
    {
      "sha": "56d5974cb35774e8314ef51abd91ecade28fc12a",
      "filename": "gdb/tui/tui-io.c",
      "status": "modified",
      "additions": 12,
      "deletions": 12,
      "changes": 24,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cb2ce89305264543a4014d98bacb26800d92d394/gdb/tui/tui-io.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cb2ce89305264543a4014d98bacb26800d92d394/gdb/tui/tui-io.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-io.c?ref=cb2ce89305264543a4014d98bacb26800d92d394",
      "patch": "@@ -180,7 +180,7 @@ static void\n update_cmdwin_start_line ()\n {\n   TUI_CMD_WIN->start_line\n-    = getcury (TUI_CMD_WIN->generic.handle);\n+    = getcury (TUI_CMD_WIN->handle);\n }\n \n /* Print a character in the curses command window.  The output is\n@@ -190,7 +190,7 @@ update_cmdwin_start_line ()\n static void\n tui_putc (char c)\n {\n-  WINDOW *w = TUI_CMD_WIN->generic.handle;\n+  WINDOW *w = TUI_CMD_WIN->handle;\n \n   do_tui_putc (w, c);\n   update_cmdwin_start_line ();\n@@ -502,7 +502,7 @@ void\n tui_puts (const char *string, WINDOW *w)\n {\n   if (w == nullptr)\n-    w = TUI_CMD_WIN->generic.handle;\n+    w = TUI_CMD_WIN->handle;\n   tui_puts_internal (w, string, nullptr);\n }\n \n@@ -538,13 +538,13 @@ tui_redisplay_readline (void)\n   \n   c_pos = -1;\n   c_line = -1;\n-  w = TUI_CMD_WIN->generic.handle;\n+  w = TUI_CMD_WIN->handle;\n   start_line = TUI_CMD_WIN->start_line;\n   wmove (w, start_line, 0);\n   prev_col = 0;\n   height = 1;\n   if (prompt != nullptr)\n-    tui_puts_internal (TUI_CMD_WIN->generic.handle, prompt, &height);\n+    tui_puts_internal (TUI_CMD_WIN->handle, prompt, &height);\n \n   prev_col = getcurx (w);\n   for (in = 0; in <= rl_end; in++)\n@@ -663,15 +663,15 @@ tui_mld_puts (const struct match_list_displayer *displayer, const char *s)\n static void\n tui_mld_flush (const struct match_list_displayer *displayer)\n {\n-  wrefresh (TUI_CMD_WIN->generic.handle);\n+  wrefresh (TUI_CMD_WIN->handle);\n }\n \n /* TUI version of displayer.erase_entire_line.  */\n \n static void\n tui_mld_erase_entire_line (const struct match_list_displayer *displayer)\n {\n-  WINDOW *w = TUI_CMD_WIN->generic.handle;\n+  WINDOW *w = TUI_CMD_WIN->handle;\n   int cur_y = getcury (w);\n \n   wmove (w, cur_y, 0);\n@@ -709,7 +709,7 @@ gdb_wgetch (WINDOW *win)\n static int\n tui_mld_getc (FILE *fp)\n {\n-  WINDOW *w = TUI_CMD_WIN->generic.handle;\n+  WINDOW *w = TUI_CMD_WIN->handle;\n   int c = gdb_wgetch (w);\n \n   return c;\n@@ -845,7 +845,7 @@ tui_cont_sig (int sig)\n       /* Force a refresh of the screen.  */\n       tui_refresh_all_win ();\n \n-      wrefresh (TUI_CMD_WIN->generic.handle);\n+      wrefresh (TUI_CMD_WIN->handle);\n     }\n   signal (sig, tui_cont_sig);\n }\n@@ -914,7 +914,7 @@ tui_getc (FILE *fp)\n   int ch;\n   WINDOW *w;\n \n-  w = TUI_CMD_WIN->generic.handle;\n+  w = TUI_CMD_WIN->handle;\n \n #ifdef TUI_USE_PIPE_FOR_READLINE\n   /* Flush readline output.  */\n@@ -950,8 +950,8 @@ tui_getc (FILE *fp)\n \t  int px, py;\n \t  getyx (w, py, px);\n \t  px += rl_end - rl_point;\n-\t  py += px / TUI_CMD_WIN->generic.width;\n-\t  px %= TUI_CMD_WIN->generic.width;\n+\t  py += px / TUI_CMD_WIN->width;\n+\t  px %= TUI_CMD_WIN->width;\n \t  wmove (w, py, px);\n \t  tui_putc ('\\n');\n         }"
    },
    {
      "sha": "9685d7fc4e5f824c989857892206cb6248c4140e",
      "filename": "gdb/tui/tui-layout.c",
      "status": "modified",
      "additions": 38,
      "deletions": 38,
      "changes": 76,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cb2ce89305264543a4014d98bacb26800d92d394/gdb/tui/tui-layout.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cb2ce89305264543a4014d98bacb26800d92d394/gdb/tui/tui-layout.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-layout.c?ref=cb2ce89305264543a4014d98bacb26800d92d394",
      "patch": "@@ -296,7 +296,7 @@ tui_default_win_height (enum tui_win_type type,\n   int h;\n \n   if (tui_win_list[type] != NULL)\n-    h = tui_win_list[type]->generic.height;\n+    h = tui_win_list[type]->height;\n   else\n     {\n       switch (layout)\n@@ -306,15 +306,15 @@ tui_default_win_height (enum tui_win_type type,\n \t  if (TUI_CMD_WIN == NULL)\n \t    h = tui_term_height () / 2;\n \t  else\n-\t    h = tui_term_height () - TUI_CMD_WIN->generic.height;\n+\t    h = tui_term_height () - TUI_CMD_WIN->height;\n \t  break;\n \tcase SRC_DISASSEM_COMMAND:\n \tcase SRC_DATA_COMMAND:\n \tcase DISASSEM_DATA_COMMAND:\n \t  if (TUI_CMD_WIN == NULL)\n \t    h = tui_term_height () / 3;\n \t  else\n-\t    h = (tui_term_height () - TUI_CMD_WIN->generic.height) / 2;\n+\t    h = (tui_term_height () - TUI_CMD_WIN->height) / 2;\n \t  break;\n \tdefault:\n \t  h = 0;\n@@ -610,7 +610,7 @@ show_source_disasm_command (void)\n       int cmd_height, src_height, asm_height;\n \n       if (TUI_CMD_WIN != NULL)\n-\tcmd_height = TUI_CMD_WIN->generic.height;\n+\tcmd_height = TUI_CMD_WIN->height;\n       else\n \tcmd_height = tui_term_height () / 3;\n \n@@ -621,10 +621,10 @@ show_source_disasm_command (void)\n \ttui_win_list[SRC_WIN] = make_source_window (src_height, 0);\n       else\n \t{\n-\t  init_gen_win_info (&TUI_SRC_WIN->generic,\n-\t\t\t     TUI_SRC_WIN->generic.type,\n+\t  init_gen_win_info (TUI_SRC_WIN,\n+\t\t\t     TUI_SRC_WIN->type,\n \t\t\t     src_height,\n-\t\t\t     TUI_SRC_WIN->generic.width,\n+\t\t\t     TUI_SRC_WIN->width,\n \t\t\t     TUI_SRC_WIN->execution_info->width,\n \t\t\t     0);\n \t  TUI_SRC_WIN->can_highlight = true;\n@@ -634,7 +634,7 @@ show_source_disasm_command (void)\n \t\t\t     3,\n \t\t\t     0,\n \t\t\t     0);\n-\t  tui_make_visible (&TUI_SRC_WIN->generic);\n+\t  tui_make_visible (TUI_SRC_WIN);\n \t  tui_make_visible (TUI_SRC_WIN->execution_info);\n \t  TUI_SRC_WIN->m_has_locator = false;\n \t}\n@@ -665,10 +665,10 @@ show_source_disasm_command (void)\n \t\t\t     0,\n \t\t\t     (src_height + asm_height) - 1);\n \t  TUI_DISASM_WIN->m_has_locator = true;\n-\t  init_gen_win_info (&TUI_DISASM_WIN->generic,\n-\t\t\t     TUI_DISASM_WIN->generic.type,\n+\t  init_gen_win_info (TUI_DISASM_WIN,\n+\t\t\t     TUI_DISASM_WIN->type,\n \t\t\t     asm_height,\n-\t\t\t     TUI_DISASM_WIN->generic.width,\n+\t\t\t     TUI_DISASM_WIN->width,\n \t\t\t     TUI_DISASM_WIN->execution_info->width,\n \t\t\t     src_height - 1);\n \t  init_gen_win_info (TUI_DISASM_WIN->execution_info,\n@@ -678,7 +678,7 @@ show_source_disasm_command (void)\n \t\t\t     0,\n \t\t\t     src_height - 1);\n \t  TUI_DISASM_WIN->can_highlight = true;\n-\t  tui_make_visible (&TUI_DISASM_WIN->generic);\n+\t  tui_make_visible (TUI_DISASM_WIN);\n \t  tui_make_visible (TUI_DISASM_WIN->execution_info);\n \t}\n       TUI_SRC_WIN->m_has_locator = false;\n@@ -692,16 +692,16 @@ show_source_disasm_command (void)\n \t  = make_command_window (cmd_height, tui_term_height () - cmd_height);\n       else\n \t{\n-\t  init_gen_win_info (&TUI_CMD_WIN->generic,\n-\t\t\t     TUI_CMD_WIN->generic.type,\n-\t\t\t     TUI_CMD_WIN->generic.height,\n-\t\t\t     TUI_CMD_WIN->generic.width,\n+\t  init_gen_win_info (TUI_CMD_WIN,\n+\t\t\t     TUI_CMD_WIN->type,\n+\t\t\t     TUI_CMD_WIN->height,\n+\t\t\t     TUI_CMD_WIN->width,\n \t\t\t     0,\n-\t\t\t     TUI_CMD_WIN->generic.origin.y);\n+\t\t\t     TUI_CMD_WIN->origin.y);\n \t  TUI_CMD_WIN->can_highlight = false;\n-\t  tui_make_visible (&TUI_CMD_WIN->generic);\n+\t  tui_make_visible (TUI_CMD_WIN);\n \t}\n-      tui_refresh_win (&TUI_CMD_WIN->generic);\n+      tui_refresh_win (TUI_CMD_WIN);\n       tui_set_current_layout_to (SRC_DISASSEM_COMMAND);\n     }\n }\n@@ -712,7 +712,7 @@ show_source_disasm_command (void)\n static void\n show_data (enum tui_layout_type new_layout)\n {\n-  int total_height = (tui_term_height () - TUI_CMD_WIN->generic.height);\n+  int total_height = (tui_term_height () - TUI_CMD_WIN->height);\n   int src_height, data_height;\n   enum tui_win_type win_type;\n   struct tui_gen_win_info *locator = tui_locator_win_info_ptr ();\n@@ -752,10 +752,10 @@ show_data (enum tui_layout_type new_layout)\n   else\n     {\n       base = (tui_source_window_base *) tui_win_list[win_type];\n-      init_gen_win_info (&tui_win_list[win_type]->generic,\n-\t\t\t tui_win_list[win_type]->generic.type,\n+      init_gen_win_info (tui_win_list[win_type],\n+\t\t\t tui_win_list[win_type]->type,\n \t\t\t src_height,\n-\t\t\t tui_win_list[win_type]->generic.width,\n+\t\t\t tui_win_list[win_type]->width,\n \t\t\t base->execution_info->width,\n \t\t\t data_height - 1);\n       init_gen_win_info (base->execution_info,\n@@ -764,7 +764,7 @@ show_data (enum tui_layout_type new_layout)\n \t\t\t 3,\n \t\t\t 0,\n \t\t\t data_height - 1);\n-      tui_make_visible (&tui_win_list[win_type]->generic);\n+      tui_make_visible (tui_win_list[win_type]);\n       tui_make_visible (base->execution_info);\n       init_gen_win_info (locator,\n \t\t\t LOCATOR_WIN,\n@@ -829,7 +829,7 @@ init_and_make_win (void *opaque_win_info,\n   if (tui_win_is_auxillary (win_type))\n     generic = (struct tui_gen_win_info *) opaque_win_info;\n   else\n-    generic = &((struct tui_win_info *) opaque_win_info)->generic;\n+    generic = (struct tui_win_info *) opaque_win_info;\n \n   init_gen_win_info (generic, win_type, height, width, origin_x, origin_y);\n   if (!tui_win_is_auxillary (win_type))\n@@ -892,7 +892,7 @@ show_source_or_disasm_and_command (enum tui_layout_type layout_type)\n       struct tui_gen_win_info *locator = tui_locator_win_info_ptr ();\n \n       if (TUI_CMD_WIN != NULL)\n-\tcmd_height = TUI_CMD_WIN->generic.height;\n+\tcmd_height = TUI_CMD_WIN->height;\n       else\n \tcmd_height = tui_term_height () / 3;\n       src_height = tui_term_height () - cmd_height;\n@@ -930,10 +930,10 @@ show_source_or_disasm_and_command (enum tui_layout_type layout_type)\n \t\t\t     0,\n \t\t\t     src_height - 1);\n \t  base->m_has_locator = true;\n-\t  init_gen_win_info (&(*win_info_ptr)->generic,\n-\t\t\t     (*win_info_ptr)->generic.type,\n+\t  init_gen_win_info (*win_info_ptr,\n+\t\t\t     (*win_info_ptr)->type,\n \t\t\t     src_height - 1,\n-\t\t\t     (*win_info_ptr)->generic.width,\n+\t\t\t     (*win_info_ptr)->width,\n \t\t\t     base->execution_info->width,\n \t\t\t     0);\n \t  init_gen_win_info (base->execution_info,\n@@ -943,7 +943,7 @@ show_source_or_disasm_and_command (enum tui_layout_type layout_type)\n \t\t\t     0,\n \t\t\t     0);\n \t  base->can_highlight = true;\n-\t  tui_make_visible (&(*win_info_ptr)->generic);\n+\t  tui_make_visible (*win_info_ptr);\n \t  tui_make_visible (base->execution_info);\n \t}\n \n@@ -956,18 +956,18 @@ show_source_or_disasm_and_command (enum tui_layout_type layout_type)\n \t{\n \t  tui_win_list[CMD_WIN] = make_command_window (cmd_height,\n \t\t\t\t\t\t       src_height);\n-\t  tui_refresh_win (&TUI_CMD_WIN->generic);\n+\t  tui_refresh_win (TUI_CMD_WIN);\n \t}\n       else\n \t{\n-\t  init_gen_win_info (&TUI_CMD_WIN->generic,\n-\t\t\t     TUI_CMD_WIN->generic.type,\n-\t\t\t     TUI_CMD_WIN->generic.height,\n-\t\t\t     TUI_CMD_WIN->generic.width,\n-\t\t\t     TUI_CMD_WIN->generic.origin.x,\n-\t\t\t     TUI_CMD_WIN->generic.origin.y);\n+\t  init_gen_win_info (TUI_CMD_WIN,\n+\t\t\t     TUI_CMD_WIN->type,\n+\t\t\t     TUI_CMD_WIN->height,\n+\t\t\t     TUI_CMD_WIN->width,\n+\t\t\t     TUI_CMD_WIN->origin.x,\n+\t\t\t     TUI_CMD_WIN->origin.y);\n \t  TUI_CMD_WIN->can_highlight = false;\n-\t  tui_make_visible (&TUI_CMD_WIN->generic);\n+\t  tui_make_visible (TUI_CMD_WIN);\n \t}\n       tui_set_current_layout_to (layout_type);\n     }"
    },
    {
      "sha": "cfb735c81d5071ce367c9d45cb6278be655a8b2d",
      "filename": "gdb/tui/tui-regs.c",
      "status": "modified",
      "additions": 14,
      "deletions": 14,
      "changes": 28,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cb2ce89305264543a4014d98bacb26800d92d394/gdb/tui/tui-regs.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cb2ce89305264543a4014d98bacb26800d92d394/gdb/tui/tui-regs.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-regs.c?ref=cb2ce89305264543a4014d98bacb26800d92d394",
      "patch": "@@ -135,7 +135,7 @@ tui_show_registers (struct reggroup *group)\n \n   /* Make sure the register window is visible.  If not, select an\n      appropriate layout.  */\n-  if (TUI_DATA_WIN == NULL || !TUI_DATA_WIN->generic.is_visible)\n+  if (TUI_DATA_WIN == NULL || !TUI_DATA_WIN->is_visible)\n     tui_set_layout_by_name (DATA_NAME);\n \n   if (group == 0)\n@@ -195,8 +195,8 @@ tui_show_register_group (struct reggroup *group,\n   /* Make a new title showing which group we display.  */\n   snprintf (title, sizeof (title) - 1, \"Register group: %s\",\n             reggroup_name (group));\n-  xfree (TUI_DATA_WIN->generic.title);\n-  TUI_DATA_WIN->generic.title = xstrdup (title);\n+  xfree (TUI_DATA_WIN->title);\n+  TUI_DATA_WIN->title = xstrdup (title);\n \n   /* See how many registers must be displayed.  */\n   nr_regs = 0;\n@@ -235,10 +235,10 @@ tui_show_register_group (struct reggroup *group,\n     {\n       if (!refresh_values_only || allocated_here)\n \t{\n-\t  TUI_DATA_WIN->generic.content = NULL;\n-\t  TUI_DATA_WIN->generic.content_size = 0;\n-\t  tui_add_content_elements (&TUI_DATA_WIN->generic, nr_regs);\n-\t  TUI_DATA_WIN->regs_content = TUI_DATA_WIN->generic.content;\n+\t  TUI_DATA_WIN->content = NULL;\n+\t  TUI_DATA_WIN->content_size = 0;\n+\t  tui_add_content_elements (TUI_DATA_WIN, nr_regs);\n+\t  TUI_DATA_WIN->regs_content = TUI_DATA_WIN->content;\n \t  TUI_DATA_WIN->regs_content_count = nr_regs;\n \t}\n \n@@ -276,7 +276,7 @@ tui_show_register_group (struct reggroup *group,\n           pos++;\n \t}\n \n-      TUI_DATA_WIN->generic.content_size =\n+      TUI_DATA_WIN->content_size =\n \tTUI_DATA_WIN->regs_content_count + TUI_DATA_WIN->data_content_count;\n       ret = TUI_SUCCESS;\n     }\n@@ -326,17 +326,17 @@ tui_display_registers_from (int start_element_no)\n       i = start_element_no;\n \n       TUI_DATA_WIN->regs_column_count =\n-        (TUI_DATA_WIN->generic.width - 2) / item_win_width;\n+        (TUI_DATA_WIN->width - 2) / item_win_width;\n       if (TUI_DATA_WIN->regs_column_count == 0)\n         TUI_DATA_WIN->regs_column_count = 1;\n       item_win_width =\n-        (TUI_DATA_WIN->generic.width - 2) / TUI_DATA_WIN->regs_column_count;\n+        (TUI_DATA_WIN->width - 2) / TUI_DATA_WIN->regs_column_count;\n \n       /* Now create each data \"sub\" window, and write the display into\n \t it.  */\n       cur_y = 1;\n       while (i < TUI_DATA_WIN->regs_content_count \n-\t     && cur_y <= TUI_DATA_WIN->generic.viewport_height)\n+\t     && cur_y <= TUI_DATA_WIN->viewport_height)\n \t{\n \t  for (j = 0;\n \t       j < TUI_DATA_WIN->regs_column_count\n@@ -401,7 +401,7 @@ tui_display_reg_element_at_line (int start_element_no,\n \n \t  last_line_no = tui_last_regs_line_no ();\n \t  first_line_on_last_page\n-\t    = last_line_no - (TUI_DATA_WIN->generic.height - 2);\n+\t    = last_line_no - (TUI_DATA_WIN->height - 2);\n \t  if (first_line_on_last_page < 0)\n \t    first_line_on_last_page = 0;\n \n@@ -470,7 +470,7 @@ void\n tui_check_register_values (struct frame_info *frame)\n {\n   if (TUI_DATA_WIN != NULL\n-      && TUI_DATA_WIN->generic.is_visible)\n+      && TUI_DATA_WIN->is_visible)\n     {\n       if (TUI_DATA_WIN->regs_content_count <= 0 \n \t  && TUI_DATA_WIN->display_regs)\n@@ -596,7 +596,7 @@ tui_reg_command (const char *args, int from_tty)\n       /* Make sure the register window is visible.  If not, select an\n \t appropriate layout.  We need to do this before trying to run the\n \t 'next' or 'prev' commands.  */\n-      if (TUI_DATA_WIN == NULL || !TUI_DATA_WIN->generic.is_visible)\n+      if (TUI_DATA_WIN == NULL || !TUI_DATA_WIN->is_visible)\n \ttui_set_layout_by_name (DATA_NAME);\n \n       if (strncmp (args, \"next\", len) == 0)"
    },
    {
      "sha": "c6367765d6786b15f75e379fdd656ed7af788349",
      "filename": "gdb/tui/tui-source.c",
      "status": "modified",
      "additions": 16,
      "deletions": 17,
      "changes": 33,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cb2ce89305264543a4014d98bacb26800d92d394/gdb/tui/tui-source.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cb2ce89305264543a4014d98bacb26800d92d394/gdb/tui/tui-source.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-source.c?ref=cb2ce89305264543a4014d98bacb26800d92d394",
      "patch": "@@ -135,10 +135,10 @@ tui_set_source_content (struct symtab *s,\n \n       if ((ret = tui_alloc_source_buffer (TUI_SRC_WIN)) == TUI_SUCCESS)\n \t{\n-\t  line_width = TUI_SRC_WIN->generic.width - 1;\n+\t  line_width = TUI_SRC_WIN->width - 1;\n \t  /* Take hilite (window border) into account, when\n \t     calculating the number of lines.  */\n-\t  nlines = (line_no + (TUI_SRC_WIN->generic.height - 2)) - line_no;\n+\t  nlines = (line_no + (TUI_SRC_WIN->height - 2)) - line_no;\n \n \t  std::string srclines;\n \t  if (!g_source_cache.get_source_lines (s, line_no, line_no + nlines,\n@@ -163,9 +163,9 @@ tui_set_source_content (struct symtab *s,\n \t\t= (struct tui_source_window_base *) TUI_SRC_WIN;\n \t      const char *s_filename = symtab_to_filename_for_display (s);\n \n-\t      if (TUI_SRC_WIN->generic.title)\n-\t\txfree (TUI_SRC_WIN->generic.title);\n-\t      TUI_SRC_WIN->generic.title = xstrdup (s_filename);\n+\t      if (TUI_SRC_WIN->title)\n+\t\txfree (TUI_SRC_WIN->title);\n+\t      TUI_SRC_WIN->title = xstrdup (s_filename);\n \n \t      xfree (src->fullname);\n \t      src->fullname = xstrdup (symtab_to_fullname (s));\n@@ -179,7 +179,7 @@ tui_set_source_content (struct symtab *s,\n \t      while (cur_line < nlines)\n \t\t{\n \t\t  struct tui_win_element *element\n-\t\t    = TUI_SRC_WIN->generic.content[cur_line];\n+\t\t    = TUI_SRC_WIN->content[cur_line];\n \n \t\t  std::string text;\n \t\t  if (*iter != '\\0')\n@@ -201,16 +201,16 @@ tui_set_source_content (struct symtab *s,\n \t\t     == locator->content[0]\n \t\t     ->which_element.locator.line_no);\n \n-\t\t  xfree (TUI_SRC_WIN->generic.content[cur_line]\n+\t\t  xfree (TUI_SRC_WIN->content[cur_line]\n \t\t\t ->which_element.source.line);\n-\t\t  TUI_SRC_WIN->generic.content[cur_line]\n+\t\t  TUI_SRC_WIN->content[cur_line]\n \t\t    ->which_element.source.line\n \t\t    = xstrdup (text.c_str ());\n \n \t\t  cur_line++;\n \t\t  cur_line_no++;\n \t\t}\n-\t      TUI_SRC_WIN->generic.content_size = nlines;\n+\t      TUI_SRC_WIN->content_size = nlines;\n \t      ret = TUI_SUCCESS;\n \t    }\n \t}\n@@ -233,18 +233,18 @@ tui_set_source_content_nil (struct tui_win_info *win_info,\n   int n_lines;\n   int curr_line = 0;\n \n-  line_width = win_info->generic.width - 1;\n-  n_lines = win_info->generic.height - 2;\n+  line_width = win_info->width - 1;\n+  n_lines = win_info->height - 2;\n \n   /* Set to empty each line in the window, except for the one which\n      contains the message.  */\n-  while (curr_line < win_info->generic.content_size)\n+  while (curr_line < win_info->content_size)\n     {\n       /* Set the information related to each displayed line to null:\n          i.e. the line number is 0, there is no bp, it is not where\n          the program is stopped.  */\n \n-      struct tui_win_element *element = win_info->generic.content[curr_line];\n+      struct tui_win_element *element = win_info->content[curr_line];\n \n       element->which_element.source.line_or_addr.loa = LOA_LINE;\n       element->which_element.source.line_or_addr.u.line_no = 0;\n@@ -300,7 +300,7 @@ int\n tui_source_is_displayed (const char *fullname)\n {\n   return (TUI_SRC_WIN != NULL\n-\t  && TUI_SRC_WIN->generic.content_in_use \n+\t  && TUI_SRC_WIN->content_in_use \n \t  && (filename_cmp (tui_locator_win_info_ptr ()->content[0]\n \t\t\t      ->which_element.locator.full_name,\n \t\t\t    fullname) == 0));\n@@ -312,11 +312,10 @@ void\n tui_source_window::do_scroll_vertical\n   (enum tui_scroll_direction scroll_direction, int num_to_scroll)\n {\n-  if (generic.content != NULL)\n+  if (content != NULL)\n     {\n       struct tui_line_or_address l;\n       struct symtab *s;\n-      tui_win_content content = generic.content;\n       struct symtab_and_line cursal = get_current_source_symtab_and_line ();\n \n       if (cursal.symtab == NULL)\n@@ -330,7 +329,7 @@ tui_source_window::do_scroll_vertical\n \t  l.u.line_no = content[0]->which_element.source.line_or_addr.u.line_no\n \t    + num_to_scroll;\n \t  if (l.u.line_no > s->nlines)\n-\t    /* line = s->nlines - win_info->generic.content_size + 1; */\n+\t    /* line = s->nlines - win_info->content_size + 1; */\n \t    /* elz: fix for dts 23398.  */\n \t    l.u.line_no\n \t      = content[0]->which_element.source.line_or_addr.u.line_no;"
    },
    {
      "sha": "a38971542eb473d2a7a8ccc0cd3750dd970af71a",
      "filename": "gdb/tui/tui-stack.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cb2ce89305264543a4014d98bacb26800d92d394/gdb/tui/tui-stack.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cb2ce89305264543a4014d98bacb26800d92d394/gdb/tui/tui-stack.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-stack.c?ref=cb2ce89305264543a4014d98bacb26800d92d394",
      "patch": "@@ -404,7 +404,7 @@ tui_show_frame_info (struct frame_info *fi)\n \t  if (win_info == TUI_SRC_WIN)\n \t    {\n \t      start_line = (item->locator.line_no -\n-\t\t\t   (win_info->generic.viewport_height / 2)) + 1;\n+\t\t\t   (win_info->viewport_height / 2)) + 1;\n \t      if (start_line <= 0)\n \t\tstart_line = 1;\n \t    }"
    },
    {
      "sha": "a40e6c5206b075b9c95dcea21574a556257c3dcf",
      "filename": "gdb/tui/tui-win.c",
      "status": "modified",
      "additions": 119,
      "deletions": 119,
      "changes": 238,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cb2ce89305264543a4014d98bacb26800d92d394/gdb/tui/tui-win.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cb2ce89305264543a4014d98bacb26800d92d394/gdb/tui/tui-win.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-win.c?ref=cb2ce89305264543a4014d98bacb26800d92d394",
      "patch": "@@ -373,10 +373,10 @@ window_name_completer (completion_tracker &tracker,\n \n       /* We can't focus on an invisible window.  */\n       if (tui_win_list[win_type] == NULL\n-\t  || !tui_win_list[win_type]->generic.is_visible)\n+\t  || !tui_win_list[win_type]->is_visible)\n \tcontinue;\n \n-      completion_name = tui_win_name (&tui_win_list [win_type]->generic);\n+      completion_name = tui_win_name (tui_win_list [win_type]);\n       gdb_assert (completion_name != NULL);\n       completion_name_vec.push_back (completion_name);\n     }\n@@ -438,8 +438,8 @@ tui_update_gdb_sizes (void)\n \n   if (tui_active)\n     {\n-      width = TUI_CMD_WIN->generic.width;\n-      height = TUI_CMD_WIN->generic.height;\n+      width = TUI_CMD_WIN->width;\n+      height = TUI_CMD_WIN->height;\n     }\n   else\n     {\n@@ -460,10 +460,10 @@ tui_set_win_focus_to (struct tui_win_info *win_info)\n       struct tui_win_info *win_with_focus = tui_win_with_focus ();\n \n       if (win_with_focus != NULL\n-\t  && win_with_focus->generic.type != CMD_WIN)\n+\t  && win_with_focus->type != CMD_WIN)\n \ttui_unhighlight_win (win_with_focus);\n       tui_set_win_with_focus (win_info);\n-      if (win_info->generic.type != CMD_WIN)\n+      if (win_info->type != CMD_WIN)\n \ttui_highlight_win (win_info);\n     }\n }\n@@ -473,7 +473,7 @@ void\n tui_win_info::forward_scroll (int num_to_scroll)\n {\n   if (num_to_scroll == 0)\n-    num_to_scroll = generic.height - 3;\n+    num_to_scroll = height - 3;\n \n   do_scroll_vertical (FORWARD_SCROLL, num_to_scroll);\n }\n@@ -482,7 +482,7 @@ void\n tui_win_info::backward_scroll (int num_to_scroll)\n {\n   if (num_to_scroll == 0)\n-    num_to_scroll = generic.height - 3;\n+    num_to_scroll = height - 3;\n \n   do_scroll_vertical (BACKWARD_SCROLL, num_to_scroll);\n }\n@@ -528,7 +528,7 @@ tui_refresh_all_win (void)\n   tui_refresh_all (tui_win_list);\n   for (type = SRC_WIN; type < MAX_MAJOR_WINDOWS; type++)\n     {\n-      if (tui_win_list[type] && tui_win_list[type]->generic.is_visible)\n+      if (tui_win_list[type] && tui_win_list[type]->is_visible)\n \ttui_win_list[type]->refresh_all ();\n     }\n   tui_show_locator_content ();\n@@ -569,7 +569,7 @@ tui_resize_all (void)\n #endif      \n       /* Turn keypad off while we resize.  */\n       if (win_with_focus != TUI_CMD_WIN)\n-\tkeypad (TUI_CMD_WIN->generic.handle, FALSE);\n+\tkeypad (TUI_CMD_WIN->handle, FALSE);\n       tui_update_gdb_sizes ();\n       tui_set_term_height_to (screenheight);\n       tui_set_term_width_to (screenwidth);\n@@ -597,67 +597,67 @@ tui_resize_all (void)\n \tcase SRC_COMMAND:\n \tcase DISASSEM_COMMAND:\n \t  first_win = tui_source_windows ()[0];\n-\t  first_win->generic.width += width_diff;\n+\t  first_win->width += width_diff;\n \t  locator->width += width_diff;\n \t  /* Check for invalid heights.  */\n \t  if (height_diff == 0)\n-\t    new_height = first_win->generic.height;\n-\t  else if ((first_win->generic.height + split_diff) >=\n+\t    new_height = first_win->height;\n+\t  else if ((first_win->height + split_diff) >=\n \t\t   (screenheight - MIN_CMD_WIN_HEIGHT - 1))\n \t    new_height = screenheight - MIN_CMD_WIN_HEIGHT - 1;\n-\t  else if ((first_win->generic.height + split_diff) <= 0)\n+\t  else if ((first_win->height + split_diff) <= 0)\n \t    new_height = MIN_WIN_HEIGHT;\n \t  else\n-\t    new_height = first_win->generic.height + split_diff;\n+\t    new_height = first_win->height + split_diff;\n \n \t  locator->origin.y = new_height + 1;\n \t  make_invisible_and_set_new_height (first_win, new_height);\n-\t  TUI_CMD_WIN->generic.origin.y = locator->origin.y + 1;\n-\t  TUI_CMD_WIN->generic.width += width_diff;\n-\t  new_height = screenheight - TUI_CMD_WIN->generic.origin.y;\n+\t  TUI_CMD_WIN->origin.y = locator->origin.y + 1;\n+\t  TUI_CMD_WIN->width += width_diff;\n+\t  new_height = screenheight - TUI_CMD_WIN->origin.y;\n \t  make_invisible_and_set_new_height (TUI_CMD_WIN, new_height);\n \t  make_visible_with_new_height (first_win);\n \t  make_visible_with_new_height (TUI_CMD_WIN);\n-\t  if (first_win->generic.content_size <= 0)\n+\t  if (first_win->content_size <= 0)\n \t    tui_erase_source_content (first_win, EMPTY_SOURCE_PROMPT);\n \t  break;\n \tdefault:\n \t  if (cur_layout == SRC_DISASSEM_COMMAND)\n \t    {\n \t      first_win = TUI_SRC_WIN;\n-\t      first_win->generic.width += width_diff;\n+\t      first_win->width += width_diff;\n \t      second_win = TUI_DISASM_WIN;\n-\t      second_win->generic.width += width_diff;\n+\t      second_win->width += width_diff;\n \t    }\n \t  else\n \t    {\n \t      first_win = TUI_DATA_WIN;\n-\t      first_win->generic.width += width_diff;\n+\t      first_win->width += width_diff;\n \t      second_win = tui_source_windows ()[0];\n-\t      second_win->generic.width += width_diff;\n+\t      second_win->width += width_diff;\n \t    }\n \t  /* Change the first window's height/width.  */\n \t  /* Check for invalid heights.  */\n \t  if (height_diff == 0)\n-\t    new_height = first_win->generic.height;\n-\t  else if ((first_win->generic.height +\n-\t\t    second_win->generic.height + (split_diff * 2)) >=\n+\t    new_height = first_win->height;\n+\t  else if ((first_win->height +\n+\t\t    second_win->height + (split_diff * 2)) >=\n \t\t   (screenheight - MIN_CMD_WIN_HEIGHT - 1))\n \t    new_height = (screenheight - MIN_CMD_WIN_HEIGHT - 1) / 2;\n-\t  else if ((first_win->generic.height + split_diff) <= 0)\n+\t  else if ((first_win->height + split_diff) <= 0)\n \t    new_height = MIN_WIN_HEIGHT;\n \t  else\n-\t    new_height = first_win->generic.height + split_diff;\n+\t    new_height = first_win->height + split_diff;\n \t  make_invisible_and_set_new_height (first_win, new_height);\n \n \t  locator->width += width_diff;\n \n \t  /* Change the second window's height/width.  */\n \t  /* Check for invalid heights.  */\n \t  if (height_diff == 0)\n-\t    new_height = second_win->generic.height;\n-\t  else if ((first_win->generic.height +\n-\t\t    second_win->generic.height + (split_diff * 2)) >=\n+\t    new_height = second_win->height;\n+\t  else if ((first_win->height +\n+\t\t    second_win->height + (split_diff * 2)) >=\n \t\t   (screenheight - MIN_CMD_WIN_HEIGHT - 1))\n \t    {\n \t      new_height = screenheight - MIN_CMD_WIN_HEIGHT - 1;\n@@ -666,24 +666,24 @@ tui_resize_all (void)\n \t      else\n \t\tnew_height /= 2;\n \t    }\n-\t  else if ((second_win->generic.height + split_diff) <= 0)\n+\t  else if ((second_win->height + split_diff) <= 0)\n \t    new_height = MIN_WIN_HEIGHT;\n \t  else\n-\t    new_height = second_win->generic.height + split_diff;\n-\t  second_win->generic.origin.y = first_win->generic.height - 1;\n+\t    new_height = second_win->height + split_diff;\n+\t  second_win->origin.y = first_win->height - 1;\n \t  make_invisible_and_set_new_height (second_win, new_height);\n \n \t  /* Change the command window's height/width.  */\n-\t  TUI_CMD_WIN->generic.origin.y = locator->origin.y + 1;\n+\t  TUI_CMD_WIN->origin.y = locator->origin.y + 1;\n \t  make_invisible_and_set_new_height (TUI_CMD_WIN,\n-\t\t\t\t\t     TUI_CMD_WIN->generic.height\n+\t\t\t\t\t     TUI_CMD_WIN->height\n \t\t\t\t\t     + cmd_split_diff);\n \t  make_visible_with_new_height (first_win);\n \t  make_visible_with_new_height (second_win);\n \t  make_visible_with_new_height (TUI_CMD_WIN);\n-\t  if (first_win->generic.content_size <= 0)\n+\t  if (first_win->content_size <= 0)\n \t    tui_erase_source_content (first_win, EMPTY_SOURCE_PROMPT);\n-\t  if (second_win->generic.content_size <= 0)\n+\t  if (second_win->content_size <= 0)\n \t    tui_erase_source_content (second_win, EMPTY_SOURCE_PROMPT);\n \t  break;\n \t}\n@@ -693,7 +693,7 @@ tui_resize_all (void)\n \t{\n \t  if (win_type != CMD_WIN \n \t      && (tui_win_list[win_type] != NULL)\n-\t      && !tui_win_list[win_type]->generic.is_visible)\n+\t      && !tui_win_list[win_type]->is_visible)\n \t    {\n \t      delete tui_win_list[win_type];\n \t      tui_win_list[win_type] = NULL;\n@@ -702,7 +702,7 @@ tui_resize_all (void)\n       /* Turn keypad back on, unless focus is in the command\n \t window.  */\n       if (win_with_focus != TUI_CMD_WIN)\n-\tkeypad (TUI_CMD_WIN->generic.handle, TRUE);\n+\tkeypad (TUI_CMD_WIN->handle, TRUE);\n     }\n }\n \n@@ -856,20 +856,20 @@ tui_set_focus (const char *arg, int from_tty)\n       else\n \twin_info = tui_partial_win_by_name (buf_ptr);\n \n-      if (win_info == NULL || !win_info->generic.is_visible)\n+      if (win_info == NULL || !win_info->is_visible)\n \twarning (_(\"Invalid window specified. \\n\\\n The window name specified must be valid and visible.\\n\"));\n       else\n \t{\n \t  tui_set_win_focus_to (win_info);\n-\t  keypad (TUI_CMD_WIN->generic.handle, (win_info != TUI_CMD_WIN));\n+\t  keypad (TUI_CMD_WIN->handle, (win_info != TUI_CMD_WIN));\n \t}\n \n-      if (TUI_DATA_WIN && TUI_DATA_WIN->generic.is_visible)\n+      if (TUI_DATA_WIN && TUI_DATA_WIN->is_visible)\n \tTUI_DATA_WIN->refresh_all ();\n       xfree (buf_ptr);\n       printf_filtered (_(\"Focus set to %s window.\\n\"),\n-\t\t       tui_win_name (&tui_win_with_focus ()->generic));\n+\t\t       tui_win_name (tui_win_with_focus ()));\n     }\n   else\n     warning (_(\"Incorrect Number of Arguments.\\n%s\"), FOCUS_USAGE);\n@@ -892,16 +892,16 @@ tui_all_windows_info (const char *arg, int from_tty)\n \n   for (type = SRC_WIN; (type < MAX_MAJOR_WINDOWS); type++)\n     if (tui_win_list[type] \n-\t&& tui_win_list[type]->generic.is_visible)\n+\t&& tui_win_list[type]->is_visible)\n       {\n \tif (win_with_focus == tui_win_list[type])\n \t  printf_filtered (\"        %s\\t(%d lines)  <has focus>\\n\",\n-\t\t\t   tui_win_name (&tui_win_list[type]->generic),\n-\t\t\t   tui_win_list[type]->generic.height);\n+\t\t\t   tui_win_name (tui_win_list[type]),\n+\t\t\t   tui_win_list[type]->height);\n \telse\n \t  printf_filtered (\"        %s\\t(%d lines)\\n\",\n-\t\t\t   tui_win_name (&tui_win_list[type]->generic),\n-\t\t\t   tui_win_list[type]->generic.height);\n+\t\t\t   tui_win_name (tui_win_list[type]),\n+\t\t\t   tui_win_list[type]->height);\n       }\n }\n \n@@ -934,17 +934,17 @@ update_tab_width ()\n      and redisplay of the window's contents, which will take\n      the new tab width into account.  */\n   if (tui_win_list[SRC_WIN]\n-      && tui_win_list[SRC_WIN]->generic.is_visible)\n+      && tui_win_list[SRC_WIN]->is_visible)\n     {\n       make_invisible_and_set_new_height (TUI_SRC_WIN,\n-\t\t\t\t\t TUI_SRC_WIN->generic.height);\n+\t\t\t\t\t TUI_SRC_WIN->height);\n       make_visible_with_new_height (TUI_SRC_WIN);\n     }\n   if (tui_win_list[DISASSEM_WIN]\n-      && tui_win_list[DISASSEM_WIN]->generic.is_visible)\n+      && tui_win_list[DISASSEM_WIN]->is_visible)\n     {\n       make_invisible_and_set_new_height (TUI_DISASM_WIN,\n-\t\t\t\t\t TUI_DISASM_WIN->generic.height);\n+\t\t\t\t\t TUI_DISASM_WIN->height);\n       make_visible_with_new_height (TUI_DISASM_WIN);\n     }\n }\n@@ -1025,7 +1025,7 @@ tui_set_win_height (const char *arg, int from_tty)\n \t    wname[i] = tolower (wname[i]);\n \t  win_info = tui_partial_win_by_name (wname);\n \n-\t  if (win_info == NULL || !win_info->generic.is_visible)\n+\t  if (win_info == NULL || !win_info->is_visible)\n \t    warning (_(\"Invalid window specified. \\n\\\n The window name specified must be valid and visible.\\n\"));\n \t  else\n@@ -1055,7 +1055,7 @@ The window name specified must be valid and visible.\\n\"));\n \t\t      if (fixed_size)\n \t\t\tnew_height = input_no;\n \t\t      else\n-\t\t\tnew_height = win_info->generic.height + input_no;\n+\t\t\tnew_height = win_info->height + input_no;\n \n \t\t      /* Now change the window's height, and adjust\n \t\t         all other windows around it.  */\n@@ -1098,21 +1098,21 @@ tui_adjust_win_heights (struct tui_win_info *primary_win_info,\n   if (new_height_ok (primary_win_info, new_height))\n     {\n       status = TUI_SUCCESS;\n-      if (new_height != primary_win_info->generic.height)\n+      if (new_height != primary_win_info->height)\n \t{\n \t  int diff;\n \t  struct tui_win_info *win_info;\n \t  struct tui_gen_win_info *locator = tui_locator_win_info_ptr ();\n \t  enum tui_layout_type cur_layout = tui_current_layout ();\n \n-\t  diff = (new_height - primary_win_info->generic.height) * (-1);\n+\t  diff = (new_height - primary_win_info->height) * (-1);\n \t  if (cur_layout == SRC_COMMAND \n \t      || cur_layout == DISASSEM_COMMAND)\n \t    {\n \t      struct tui_win_info *src_win_info;\n \n \t      make_invisible_and_set_new_height (primary_win_info, new_height);\n-\t      if (primary_win_info->generic.type == CMD_WIN)\n+\t      if (primary_win_info->type == CMD_WIN)\n \t\t{\n \t\t  win_info = tui_source_windows ()[0];\n \t\t  src_win_info = win_info;\n@@ -1123,11 +1123,11 @@ tui_adjust_win_heights (struct tui_win_info *primary_win_info,\n \t\t  src_win_info = primary_win_info;\n \t\t}\n \t      make_invisible_and_set_new_height (win_info,\n-\t\t\t\t\t     win_info->generic.height + diff);\n-\t      TUI_CMD_WIN->generic.origin.y = locator->origin.y + 1;\n+\t\t\t\t\t     win_info->height + diff);\n+\t      TUI_CMD_WIN->origin.y = locator->origin.y + 1;\n \t      make_visible_with_new_height (win_info);\n \t      make_visible_with_new_height (primary_win_info);\n-\t      if (src_win_info->generic.content_size <= 0)\n+\t      if (src_win_info->content_size <= 0)\n \t\ttui_erase_source_content (src_win_info, EMPTY_SOURCE_PROMPT);\n \t    }\n \t  else\n@@ -1154,8 +1154,8 @@ tui_adjust_win_heights (struct tui_win_info *primary_win_info,\n \n \t\t  if (diff % 2)\n \t\t    {\n-\t\t      if (first_win->generic.height >\n-\t\t\t  second_win->generic.height)\n+\t\t      if (first_win->height >\n+\t\t\t  second_win->height)\n \t\t\tif (diff < 0)\n \t\t\t  first_split_diff--;\n \t\t\telse\n@@ -1170,69 +1170,69 @@ tui_adjust_win_heights (struct tui_win_info *primary_win_info,\n \t\t    }\n \t\t  /* Make sure that the minimum hieghts are\n \t\t     honored.  */\n-\t\t  while ((first_win->generic.height + first_split_diff) < 3)\n+\t\t  while ((first_win->height + first_split_diff) < 3)\n \t\t    {\n \t\t      first_split_diff++;\n \t\t      second_split_diff--;\n \t\t    }\n-\t\t  while ((second_win->generic.height + second_split_diff) < 3)\n+\t\t  while ((second_win->height + second_split_diff) < 3)\n \t\t    {\n \t\t      second_split_diff++;\n \t\t      first_split_diff--;\n \t\t    }\n \t\t  make_invisible_and_set_new_height (\n \t\t\t\t\t\t  first_win,\n-\t\t\t\t first_win->generic.height + first_split_diff);\n-\t\t  second_win->generic.origin.y = first_win->generic.height - 1;\n+\t\t\t\t first_win->height + first_split_diff);\n+\t\t  second_win->origin.y = first_win->height - 1;\n \t\t  make_invisible_and_set_new_height (second_win,\n-\t\t\t\t\t\t     second_win->generic.height\n+\t\t\t\t\t\t     second_win->height\n \t\t\t\t\t\t     + second_split_diff);\n-\t\t  TUI_CMD_WIN->generic.origin.y = locator->origin.y + 1;\n+\t\t  TUI_CMD_WIN->origin.y = locator->origin.y + 1;\n \t\t  make_invisible_and_set_new_height (TUI_CMD_WIN, new_height);\n \t\t}\n \t      else\n \t\t{\n-\t\t  if ((TUI_CMD_WIN->generic.height + diff) < 1)\n+\t\t  if ((TUI_CMD_WIN->height + diff) < 1)\n \t\t    { /* If there is no way to increase the command\n \t\t\t window take real estate from the 1st or 2nd\n \t\t\t window.  */\n-\t\t      if ((TUI_CMD_WIN->generic.height + diff) < 1)\n+\t\t      if ((TUI_CMD_WIN->height + diff) < 1)\n \t\t\t{\n \t\t\t  int i;\n \n-\t\t\t  for (i = TUI_CMD_WIN->generic.height + diff;\n+\t\t\t  for (i = TUI_CMD_WIN->height + diff;\n \t\t\t       (i < 1); i++)\n \t\t\t    if (primary_win_info == first_win)\n-\t\t\t      second_win->generic.height--;\n+\t\t\t      second_win->height--;\n \t\t\t    else\n-\t\t\t      first_win->generic.height--;\n+\t\t\t      first_win->height--;\n \t\t\t}\n \t\t    }\n \t\t  if (primary_win_info == first_win)\n \t\t    make_invisible_and_set_new_height (first_win, new_height);\n \t\t  else\n \t\t    make_invisible_and_set_new_height (\n \t\t\t\t\t\t    first_win,\n-\t\t\t\t\t\t  first_win->generic.height);\n-\t\t  second_win->generic.origin.y = first_win->generic.height - 1;\n+\t\t\t\t\t\t  first_win->height);\n+\t\t  second_win->origin.y = first_win->height - 1;\n \t\t  if (primary_win_info == second_win)\n \t\t    make_invisible_and_set_new_height (second_win, new_height);\n \t\t  else\n \t\t    make_invisible_and_set_new_height (\n-\t\t\t\t      second_win, second_win->generic.height);\n-\t\t  TUI_CMD_WIN->generic.origin.y = locator->origin.y + 1;\n-\t\t  if ((TUI_CMD_WIN->generic.height + diff) < 1)\n+\t\t\t\t      second_win, second_win->height);\n+\t\t  TUI_CMD_WIN->origin.y = locator->origin.y + 1;\n+\t\t  if ((TUI_CMD_WIN->height + diff) < 1)\n \t\t    make_invisible_and_set_new_height (TUI_CMD_WIN, 1);\n \t\t  else\n \t\t    make_invisible_and_set_new_height (TUI_CMD_WIN,\n-\t\t\t\t\t\t       TUI_CMD_WIN->generic.height + diff);\n+\t\t\t\t\t\t       TUI_CMD_WIN->height + diff);\n \t\t}\n \t      make_visible_with_new_height (TUI_CMD_WIN);\n \t      make_visible_with_new_height (second_win);\n \t      make_visible_with_new_height (first_win);\n-\t      if (first_win->generic.content_size <= 0)\n+\t      if (first_win->content_size <= 0)\n \t\ttui_erase_source_content (first_win, EMPTY_SOURCE_PROMPT);\n-\t      if (second_win->generic.content_size <= 0)\n+\t      if (second_win->content_size <= 0)\n \t\ttui_erase_source_content (second_win, EMPTY_SOURCE_PROMPT);\n \t    }\n \t}\n@@ -1249,7 +1249,7 @@ tui_source_window_base::set_new_height (int height)\n {\n   tui_make_invisible (execution_info);\n   execution_info->height = height;\n-  execution_info->origin.y = generic.origin.y;\n+  execution_info->origin.y = origin.y;\n   if (height > 1)\n     execution_info->viewport_height = height - 1;\n   else\n@@ -1260,7 +1260,7 @@ tui_source_window_base::set_new_height (int height)\n     {\n       tui_gen_win_info *gen_win_info = tui_locator_win_info_ptr ();\n       tui_make_invisible (gen_win_info);\n-      gen_win_info->origin.y = generic.origin.y + height;\n+      gen_win_info->origin.y = origin.y + height;\n     }\n }\n \n@@ -1270,10 +1270,10 @@ void\n tui_data_window::set_new_height (int height)\n {\n   /* Delete all data item windows.  */\n-  for (int i = 0; i < generic.content_size; i++)\n+  for (int i = 0; i < content_size; i++)\n     {\n       struct tui_gen_win_info *gen_win_info\n-\t= generic.content[i]->which_element.data_window;\n+\t= content[i]->which_element.data_window;\n       tui_delete_win (gen_win_info->handle);\n       gen_win_info->handle = NULL;\n     }\n@@ -1286,14 +1286,14 @@ static void\n make_invisible_and_set_new_height (struct tui_win_info *win_info, \n \t\t\t\t   int height)\n {\n-  tui_make_invisible (&win_info->generic);\n-  win_info->generic.height = height;\n+  tui_make_invisible (win_info);\n+  win_info->height = height;\n   if (height > 1)\n-    win_info->generic.viewport_height = height - 1;\n+    win_info->viewport_height = height - 1;\n   else\n-    win_info->generic.viewport_height = height;\n+    win_info->viewport_height = height;\n   if (win_info != TUI_CMD_WIN)\n-    win_info->generic.viewport_height--;\n+    win_info->viewport_height--;\n \n   /* Now deal with the auxillary windows associated with win_info.  */\n   win_info->set_new_height (height);\n@@ -1308,25 +1308,25 @@ make_visible_with_new_height (struct tui_win_info *win_info)\n {\n   struct symtab *s;\n \n-  tui_make_visible (&win_info->generic);\n+  tui_make_visible (win_info);\n   tui_check_and_display_highlight_if_needed (win_info);\n   tui_source_window_base *base;\n-  switch (win_info->generic.type)\n+  switch (win_info->type)\n     {\n     case SRC_WIN:\n     case DISASSEM_WIN:\n       base = (tui_source_window_base *) win_info;\n       tui_free_win_content (base->execution_info);\n       tui_make_visible (base->execution_info);\n-      if (win_info->generic.content != NULL)\n+      if (win_info->content != NULL)\n \t{\n \t  struct gdbarch *gdbarch = base->gdbarch;\n \t  struct tui_line_or_address line_or_addr;\n \t  struct symtab_and_line cursal\n \t    = get_current_source_symtab_and_line ();\n \n \t  line_or_addr = base->start_line_or_addr;\n-\t  tui_free_win_content (&win_info->generic);\n+\t  tui_free_win_content (win_info);\n \t  tui_update_source_window (win_info, gdbarch,\n \t\t\t\t    cursal.symtab, line_or_addr, TRUE);\n \t}\n@@ -1339,7 +1339,7 @@ make_visible_with_new_height (struct tui_win_info *win_info)\n \t  struct gdbarch *gdbarch = get_frame_arch (frame);\n \n \t  s = find_pc_line_symtab (get_frame_pc (frame));\n-\t  if (win_info->generic.type == SRC_WIN)\n+\t  if (win_info->type == SRC_WIN)\n \t    {\n \t      line.loa = LOA_LINE;\n \t      line.u.line_no = cursal.line;\n@@ -1362,14 +1362,14 @@ make_visible_with_new_height (struct tui_win_info *win_info)\n       break;\n     case CMD_WIN:\n #ifdef HAVE_WRESIZE\n-      wresize (TUI_CMD_WIN->generic.handle,\n-\t       TUI_CMD_WIN->generic.height,\n-\t       TUI_CMD_WIN->generic.width);\n+      wresize (TUI_CMD_WIN->handle,\n+\t       TUI_CMD_WIN->height,\n+\t       TUI_CMD_WIN->width);\n #endif\n-      mvwin (TUI_CMD_WIN->generic.handle,\n-\t     TUI_CMD_WIN->generic.origin.y,\n-\t     TUI_CMD_WIN->generic.origin.x);\n-      wmove (win_info->generic.handle, 0, 0);\n+      mvwin (TUI_CMD_WIN->handle,\n+\t     TUI_CMD_WIN->origin.y,\n+\t     TUI_CMD_WIN->origin.x);\n+      wmove (win_info->handle, 0, 0);\n       break;\n     default:\n       break;\n@@ -1404,7 +1404,7 @@ new_height_ok (struct tui_win_info *primary_win_info,\n       int diff;\n       enum tui_layout_type cur_layout = tui_current_layout ();\n \n-      diff = (new_height - primary_win_info->generic.height) * (-1);\n+      diff = (new_height - primary_win_info->height) * (-1);\n       if (cur_layout == SRC_COMMAND || cur_layout == DISASSEM_COMMAND)\n \t{\n \t  ok = (new_height <= primary_win_info->max_height ()\n@@ -1418,7 +1418,7 @@ new_height_ok (struct tui_win_info *primary_win_info,\n \t      else\n \t\twin_info = TUI_CMD_WIN;\n \t      ok = ((new_height +\n-\t\t     (win_info->generic.height + diff)) <= tui_term_height ());\n+\t\t     (win_info->height + diff)) <= tui_term_height ());\n \t    }\n \t}\n       else\n@@ -1442,20 +1442,20 @@ new_height_ok (struct tui_win_info *primary_win_info,\n \t     the line that the first and second windows share, and add\n \t     one for the locator.  */\n \t  total_height = cur_total_height =\n-\t    (first_win->generic.height + second_win->generic.height - 1)\n-\t    + TUI_CMD_WIN->generic.height + 1;\t/* Locator. */\n+\t    (first_win->height + second_win->height - 1)\n+\t    + TUI_CMD_WIN->height + 1;\t/* Locator. */\n \t  if (primary_win_info == TUI_CMD_WIN)\n \t    {\n \t      /* Locator included since first & second win share a line.  */\n-\t      ok = ((first_win->generic.height +\n-\t\t     second_win->generic.height + diff) >=\n+\t      ok = ((first_win->height +\n+\t\t     second_win->height + diff) >=\n \t\t    (MIN_WIN_HEIGHT * 2) \n \t\t    && new_height >= MIN_CMD_WIN_HEIGHT);\n \t      if (ok)\n \t\t{\n \t\t  total_height = new_height + \n-\t\t    (first_win->generic.height +\n-\t\t     second_win->generic.height + diff);\n+\t\t    (first_win->height +\n+\t\t     second_win->height + diff);\n \t\t  min_height = MIN_CMD_WIN_HEIGHT;\n \t\t}\n \t    }\n@@ -1466,25 +1466,25 @@ new_height_ok (struct tui_win_info *primary_win_info,\n \t      /* First see if we can increase/decrease the command\n \t         window.  And make sure that the command window is at\n \t         least 1 line.  */\n-\t      ok = ((TUI_CMD_WIN->generic.height + diff) > 0);\n+\t      ok = ((TUI_CMD_WIN->height + diff) > 0);\n \t      if (!ok)\n \t\t{ /* Looks like we have to increase/decrease one of\n \t\t     the other windows.  */\n \t\t  if (primary_win_info == first_win)\n-\t\t    ok = (second_win->generic.height + diff) >= min_height;\n+\t\t    ok = (second_win->height + diff) >= min_height;\n \t\t  else\n-\t\t    ok = (first_win->generic.height + diff) >= min_height;\n+\t\t    ok = (first_win->height + diff) >= min_height;\n \t\t}\n \t      if (ok)\n \t\t{\n \t\t  if (primary_win_info == first_win)\n \t\t    total_height = new_height +\n-\t\t      second_win->generic.height +\n-\t\t      TUI_CMD_WIN->generic.height + diff;\n+\t\t      second_win->height +\n+\t\t      TUI_CMD_WIN->height + diff;\n \t\t  else\n \t\t    total_height = new_height +\n-\t\t      first_win->generic.height +\n-\t\t      TUI_CMD_WIN->generic.height + diff;\n+\t\t      first_win->height +\n+\t\t      TUI_CMD_WIN->height + diff;\n \t\t}\n \t    }\n \t  /* Now make sure that the proposed total height doesn't\n@@ -1557,7 +1557,7 @@ parse_scrolling_args (const char *arg,\n \t  *win_to_scroll = tui_partial_win_by_name (wname);\n \n \t  if (*win_to_scroll == NULL\n-\t      || !(*win_to_scroll)->generic.is_visible)\n+\t      || !(*win_to_scroll)->is_visible)\n \t    error (_(\"Invalid window specified. \\n\\\n The window name specified must be valid and visible.\\n\"));\n \t  else if (*win_to_scroll == TUI_CMD_WIN)"
    },
    {
      "sha": "739272a5d032d6839e4570a394448e8c351bf9ba",
      "filename": "gdb/tui/tui-windata.c",
      "status": "modified",
      "additions": 12,
      "deletions": 12,
      "changes": 24,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cb2ce89305264543a4014d98bacb26800d92d394/gdb/tui/tui-windata.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cb2ce89305264543a4014d98bacb26800d92d394/gdb/tui/tui-windata.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-windata.c?ref=cb2ce89305264543a4014d98bacb26800d92d394",
      "patch": "@@ -48,13 +48,13 @@ tui_first_data_item_displayed (void)\n   int i;\n \n   for (i = 0; \n-       i < TUI_DATA_WIN->generic.content_size && element_no < 0;\n+       i < TUI_DATA_WIN->content_size && element_no < 0;\n        i++)\n     {\n       struct tui_gen_win_info *data_item_win;\n \n       data_item_win\n-\t= TUI_DATA_WIN->generic.content[i]->which_element.data_window;\n+\t= TUI_DATA_WIN->content[i]->which_element.data_window;\n       if (data_item_win->handle != NULL\n \t  && data_item_win->is_visible)\n \telement_no = i;\n@@ -72,10 +72,10 @@ tui_delete_data_content_windows (void)\n   int i;\n   struct tui_gen_win_info *data_item_win_ptr;\n \n-  for (i = 0; (i < TUI_DATA_WIN->generic.content_size); i++)\n+  for (i = 0; (i < TUI_DATA_WIN->content_size); i++)\n     {\n       data_item_win_ptr\n-\t= TUI_DATA_WIN->generic.content[i]->which_element.data_window;\n+\t= TUI_DATA_WIN->content[i]->which_element.data_window;\n       tui_delete_win (data_item_win_ptr->handle);\n       data_item_win_ptr->handle = NULL;\n       data_item_win_ptr->is_visible = false;\n@@ -86,23 +86,23 @@ tui_delete_data_content_windows (void)\n void\n tui_erase_data_content (const char *prompt)\n {\n-  werase (TUI_DATA_WIN->generic.handle);\n+  werase (TUI_DATA_WIN->handle);\n   tui_check_and_display_highlight_if_needed (TUI_DATA_WIN);\n   if (prompt != NULL)\n     {\n-      int half_width = (TUI_DATA_WIN->generic.width - 2) / 2;\n+      int half_width = (TUI_DATA_WIN->width - 2) / 2;\n       int x_pos;\n \n       if (strlen (prompt) >= half_width)\n \tx_pos = 1;\n       else\n \tx_pos = half_width - strlen (prompt);\n-      mvwaddstr (TUI_DATA_WIN->generic.handle,\n-\t\t (TUI_DATA_WIN->generic.height / 2),\n+      mvwaddstr (TUI_DATA_WIN->handle,\n+\t\t (TUI_DATA_WIN->height / 2),\n \t\t x_pos,\n \t\t (char *) prompt);\n     }\n-  wrefresh (TUI_DATA_WIN->generic.handle);\n+  wrefresh (TUI_DATA_WIN->handle);\n }\n \n \n@@ -111,7 +111,7 @@ tui_erase_data_content (const char *prompt)\n void\n tui_display_all_data (void)\n {\n-  if (TUI_DATA_WIN->generic.content_size <= 0)\n+  if (TUI_DATA_WIN->content_size <= 0)\n     tui_erase_data_content (NO_DATA_STRING);\n   else\n     {\n@@ -196,7 +196,7 @@ void\n tui_data_window::refresh_all ()\n {\n   tui_erase_data_content (NULL);\n-  if (generic.content_size > 0)\n+  if (content_size > 0)\n     {\n       int first_element = tui_first_data_item_displayed ();\n \n@@ -214,7 +214,7 @@ tui_check_data_values (struct frame_info *frame)\n   tui_check_register_values (frame);\n \n   /* Now check any other data values that there are.  */\n-  if (TUI_DATA_WIN != NULL && TUI_DATA_WIN->generic.is_visible)\n+  if (TUI_DATA_WIN != NULL && TUI_DATA_WIN->is_visible)\n     {\n       int i;\n "
    },
    {
      "sha": "06d7ad5a030b881d9cf67fc06eaa03c5b9ff1763",
      "filename": "gdb/tui/tui-wingeneral.c",
      "status": "modified",
      "additions": 11,
      "deletions": 11,
      "changes": 22,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cb2ce89305264543a4014d98bacb26800d92d394/gdb/tui/tui-wingeneral.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cb2ce89305264543a4014d98bacb26800d92d394/gdb/tui/tui-wingeneral.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-wingeneral.c?ref=cb2ce89305264543a4014d98bacb26800d92d394",
      "patch": "@@ -110,10 +110,10 @@ void\n tui_unhighlight_win (struct tui_win_info *win_info)\n {\n   if (win_info != NULL \n-      && win_info->generic.handle != NULL)\n+      && win_info->handle != NULL)\n     {\n-      box_win (&win_info->generic, NO_HILITE);\n-      wrefresh (win_info->generic.handle);\n+      box_win (win_info, NO_HILITE);\n+      wrefresh (win_info->handle);\n       win_info->set_highlight (false);\n     }\n }\n@@ -124,18 +124,18 @@ tui_highlight_win (struct tui_win_info *win_info)\n {\n   if (win_info != NULL\n       && win_info->can_highlight\n-      && win_info->generic.handle != NULL)\n+      && win_info->handle != NULL)\n     {\n-      box_win (&win_info->generic, HILITE);\n-      wrefresh (win_info->generic.handle);\n+      box_win (win_info, HILITE);\n+      wrefresh (win_info->handle);\n       win_info->set_highlight (true);\n     }\n }\n \n void\n tui_check_and_display_highlight_if_needed (struct tui_win_info *win_info)\n {\n-  if (win_info != NULL && win_info->generic.type != CMD_WIN)\n+  if (win_info != NULL && win_info->type != CMD_WIN)\n     {\n       if (win_info->is_highlighted)\n \ttui_highlight_win (win_info);\n@@ -214,7 +214,7 @@ tui_make_invisible (struct tui_gen_win_info *win_info)\n void\n tui_win_info::make_visible (bool visible)\n {\n-  ::make_visible (&generic, visible);\n+  ::make_visible (this, visible);\n }\n \n /* See tui-data.h.  */\n@@ -259,8 +259,8 @@ tui_make_all_invisible (void)\n void\n tui_win_info::refresh ()\n {\n-  touchwin (generic.handle);\n-  tui_refresh_win (&generic);\n+  touchwin (handle);\n+  tui_refresh_win (this);\n }\n \n /* See tui-data.h.  */\n@@ -283,7 +283,7 @@ tui_refresh_all (struct tui_win_info **list)\n \n   for (type = SRC_WIN; (type < MAX_MAJOR_WINDOWS); type++)\n     {\n-      if (list[type] && list[type]->generic.is_visible)\n+      if (list[type] && list[type]->is_visible)\n \tlist[type]->refresh ();\n     }\n   if (locator->is_visible)"
    },
    {
      "sha": "f63526bb446850228a4375bbba5e56637fcf7904",
      "filename": "gdb/tui/tui-winsource.c",
      "status": "modified",
      "additions": 47,
      "deletions": 48,
      "changes": 95,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cb2ce89305264543a4014d98bacb26800d92d394/gdb/tui/tui-winsource.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cb2ce89305264543a4014d98bacb26800d92d394/gdb/tui/tui-winsource.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-winsource.c?ref=cb2ce89305264543a4014d98bacb26800d92d394",
      "patch": "@@ -94,7 +94,7 @@ tui_update_source_window_as_is (struct tui_win_info *win_info,\n {\n   enum tui_status ret;\n \n-  if (win_info->generic.type == SRC_WIN)\n+  if (win_info->type == SRC_WIN)\n     ret = tui_set_source_content (s, line_or_addr.u.line_no, noerror);\n   else\n     ret = tui_set_disassem_content (gdbarch, line_or_addr.u.addr);\n@@ -109,12 +109,12 @@ tui_update_source_window_as_is (struct tui_win_info *win_info,\n       tui_update_breakpoint_info (win_info, 0);\n       tui_show_source_content (win_info);\n       tui_update_exec_info (win_info);\n-      if (win_info->generic.type == SRC_WIN)\n+      if (win_info->type == SRC_WIN)\n \t{\n \t  symtab_and_line sal;\n \n \t  sal.line = line_or_addr.u.line_no +\n-\t    (win_info->generic.content_size - 2);\n+\t    (win_info->content_size - 2);\n \t  sal.symtab = s;\n \t  sal.pspace = SYMTAB_PSPACE (s);\n \t  set_current_source_symtab_and_line (sal);\n@@ -212,11 +212,11 @@ tui_clear_source_content (struct tui_win_info *win_info,\n     {\n       int i;\n \n-      win_info->generic.content_in_use = FALSE;\n+      win_info->content_in_use = FALSE;\n       tui_erase_source_content (win_info, display_prompt);\n-      for (i = 0; i < win_info->generic.content_size; i++)\n+      for (i = 0; i < win_info->content_size; i++)\n \t{\n-\t  struct tui_win_element *element = win_info->generic.content[i];\n+\t  struct tui_win_element *element = win_info->content[i];\n \n \t  element->which_element.source.has_break = FALSE;\n \t  element->which_element.source.is_exec_point = FALSE;\n@@ -230,26 +230,26 @@ tui_erase_source_content (struct tui_win_info *win_info,\n \t\t\t  int display_prompt)\n {\n   int x_pos;\n-  int half_width = (win_info->generic.width - 2) / 2;\n+  int half_width = (win_info->width - 2) / 2;\n \n-  if (win_info->generic.handle != NULL)\n+  if (win_info->handle != NULL)\n     {\n-      werase (win_info->generic.handle);\n+      werase (win_info->handle);\n       tui_check_and_display_highlight_if_needed (win_info);\n       if (display_prompt == EMPTY_SOURCE_PROMPT)\n \t{\n \t  const char *no_src_str;\n \n-\t  if (win_info->generic.type == SRC_WIN)\n+\t  if (win_info->type == SRC_WIN)\n \t    no_src_str = NO_SRC_STRING;\n \t  else\n \t    no_src_str = NO_DISASSEM_STRING;\n \t  if (strlen (no_src_str) >= half_width)\n \t    x_pos = 1;\n \t  else\n \t    x_pos = half_width - strlen (no_src_str);\n-\t  mvwaddstr (win_info->generic.handle,\n-\t\t     (win_info->generic.height / 2),\n+\t  mvwaddstr (win_info->handle,\n+\t\t     (win_info->height / 2),\n \t\t     x_pos,\n \t\t     (char *) no_src_str);\n \n@@ -260,7 +260,7 @@ tui_erase_source_content (struct tui_win_info *win_info,\n \n \t  tui_set_source_content_nil (win_info, no_src_str);\n \t}\n-      tui_refresh_win (&win_info->generic);\n+      tui_refresh_win (win_info);\n     }\n }\n \n@@ -272,41 +272,41 @@ tui_show_source_line (struct tui_win_info *win_info, int lineno)\n   struct tui_win_element *line;\n   int x;\n \n-  line = win_info->generic.content[lineno - 1];\n+  line = win_info->content[lineno - 1];\n   if (line->which_element.source.is_exec_point)\n-    tui_set_reverse_mode (win_info->generic.handle, true);\n+    tui_set_reverse_mode (win_info->handle, true);\n \n-  wmove (win_info->generic.handle, lineno, 1);\n+  wmove (win_info->handle, lineno, 1);\n   tui_puts (line->which_element.source.line,\n-\t    win_info->generic.handle);\n+\t    win_info->handle);\n   if (line->which_element.source.is_exec_point)\n-    tui_set_reverse_mode (win_info->generic.handle, false);\n+    tui_set_reverse_mode (win_info->handle, false);\n \n   /* Clear to end of line but stop before the border.  */\n-  x = getcurx (win_info->generic.handle);\n-  while (x + 1 < win_info->generic.width)\n+  x = getcurx (win_info->handle);\n+  while (x + 1 < win_info->width)\n     {\n-      waddch (win_info->generic.handle, ' ');\n-      x = getcurx (win_info->generic.handle);\n+      waddch (win_info->handle, ' ');\n+      x = getcurx (win_info->handle);\n     }\n }\n \n void\n tui_show_source_content (struct tui_win_info *win_info)\n {\n-  if (win_info->generic.content_size > 0)\n+  if (win_info->content_size > 0)\n     {\n       int lineno;\n \n-      for (lineno = 1; lineno <= win_info->generic.content_size; lineno++)\n+      for (lineno = 1; lineno <= win_info->content_size; lineno++)\n         tui_show_source_line (win_info, lineno);\n     }\n   else\n     tui_erase_source_content (win_info, TRUE);\n \n   tui_check_and_display_highlight_if_needed (win_info);\n-  tui_refresh_win (&win_info->generic);\n-  win_info->generic.content_in_use = TRUE;\n+  tui_refresh_win (win_info);\n+  win_info->content_in_use = TRUE;\n }\n \n /* See tui-data.h.  */\n@@ -316,7 +316,7 @@ tui_source_window_base::refill ()\n {\n   symtab *s = nullptr;\n \n-  if (generic.type == SRC_WIN)\n+  if (type == SRC_WIN)\n     {\n       symtab_and_line cursal = get_current_source_symtab_and_line ();\n       s = (cursal.symtab == NULL\n@@ -325,7 +325,7 @@ tui_source_window_base::refill ()\n     }\n \n   tui_update_source_window_as_is (this, gdbarch, s,\n-\t\t\t\t  generic.content[0]\n+\t\t\t\t  content[0]\n \t\t\t\t    ->which_element.source.line_or_addr,\n \t\t\t\t  FALSE);\n }\n@@ -336,7 +336,7 @@ void\n tui_source_window_base::do_scroll_horizontal\n   (enum tui_scroll_direction direction, int num_to_scroll)\n {\n-  if (generic.content != NULL)\n+  if (content != NULL)\n     {\n       int offset;\n \n@@ -362,10 +362,9 @@ tui_source_window_base::set_is_exec_point_at (struct tui_line_or_address l)\n {\n   int changed = 0;\n   int i;\n-  tui_win_content content = generic.content;\n \n   i = 0;\n-  while (i < generic.content_size)\n+  while (i < content_size)\n     {\n       int new_state;\n       struct tui_line_or_address content_loa =\n@@ -422,14 +421,14 @@ tui_update_breakpoint_info (struct tui_win_info *win,\n   int need_refresh = 0;\n   tui_source_window_base *src = (tui_source_window_base *) win;\n \n-  for (i = 0; i < win->generic.content_size; i++)\n+  for (i = 0; i < win->content_size; i++)\n     {\n       struct breakpoint *bp;\n       extern struct breakpoint *breakpoint_chain;\n       int mode;\n       struct tui_source_element *line;\n \n-      line = &win->generic.content[i]->which_element.source;\n+      line = &win->content[i]->which_element.source;\n       if (current_only && !line->is_exec_point)\n          continue;\n \n@@ -496,20 +495,20 @@ tui_set_exec_info_content (struct tui_win_info *win_info)\n \n       if (exec_info_ptr->content == NULL)\n \texec_info_ptr->content =\n-\t  tui_alloc_content (win_info->generic.height, exec_info_ptr->type);\n+\t  tui_alloc_content (win_info->height, exec_info_ptr->type);\n       if (exec_info_ptr->content != NULL)\n \t{\n \t  int i;\n \n           tui_update_breakpoint_info (win_info, 1);\n-\t  for (i = 0; i < win_info->generic.content_size; i++)\n+\t  for (i = 0; i < win_info->content_size; i++)\n \t    {\n \t      struct tui_win_element *element;\n \t      struct tui_win_element *src_element;\n               int mode;\n \n \t      element = exec_info_ptr->content[i];\n-\t      src_element = win_info->generic.content[i];\n+\t      src_element = win_info->content[i];\n \n               memset(element->which_element.simple_string, ' ',\n                      sizeof(element->which_element.simple_string));\n@@ -533,7 +532,7 @@ tui_set_exec_info_content (struct tui_win_info *win_info)\n               if (src_element->which_element.source.is_exec_point)\n                 element->which_element.simple_string[TUI_EXEC_POS] = '>';\n \t    }\n-\t  exec_info_ptr->content_size = win_info->generic.content_size;\n+\t  exec_info_ptr->content_size = win_info->content_size;\n \t}\n       else\n \tret = TUI_FAILURE;\n@@ -598,16 +597,16 @@ tui_alloc_source_buffer (struct tui_win_info *win_info)\n \n   /* The window width/height includes the highlight box.  Determine actual\n      content dimensions, including string null-terminators.  */\n-  max_lines = win_info->generic.height - 2;\n-  line_width = win_info->generic.width - 2 + 1;\n+  max_lines = win_info->height - 2;\n+  line_width = win_info->width - 2 + 1;\n \n   /* Allocate the buffer for the source lines.  */\n-  if (win_info->generic.content == NULL)\n+  if (win_info->content == NULL)\n     {\n       /* Allocate the content list.  */\n-      win_info->generic.content = tui_alloc_content (max_lines, SRC_WIN);\n+      win_info->content = tui_alloc_content (max_lines, SRC_WIN);\n       for (i = 0; i < max_lines; i++)\n-\twin_info->generic.content[i]->which_element.source.line\n+\twin_info->content[i]->which_element.source.line\n \t  = (char *) xmalloc (line_width);\n     }\n \n@@ -630,13 +629,13 @@ tui_line_is_displayed (int line,\n   else\n     threshold = 0;\n   i = 0;\n-  while (i < win_info->generic.content_size - threshold\n+  while (i < win_info->content_size - threshold\n \t && !is_displayed)\n     {\n       is_displayed\n-\t= win_info->generic.content[i]\n+\t= win_info->content[i]\n \t    ->which_element.source.line_or_addr.loa == LOA_LINE\n-\t  && win_info->generic.content[i]\n+\t  && win_info->content[i]\n \t       ->which_element.source.line_or_addr.u.line_no == line;\n       i++;\n     }\n@@ -660,13 +659,13 @@ tui_addr_is_displayed (CORE_ADDR addr,\n   else\n     threshold = 0;\n   i = 0;\n-  while (i < win_info->generic.content_size - threshold\n+  while (i < win_info->content_size - threshold\n \t && !is_displayed)\n     {\n       is_displayed\n-\t= win_info->generic.content[i]\n+\t= win_info->content[i]\n \t    ->which_element.source.line_or_addr.loa == LOA_ADDRESS\n-\t  && win_info->generic.content[i]\n+\t  && win_info->content[i]\n \t       ->which_element.source.line_or_addr.u.addr == addr;\n       i++;\n     }"
    },
    {
      "sha": "693c2ff4a03ead9c5e82460b09d84d1094d3d7af",
      "filename": "gdb/tui/tui.c",
      "status": "modified",
      "additions": 7,
      "deletions": 7,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cb2ce89305264543a4014d98bacb26800d92d394/gdb/tui/tui.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cb2ce89305264543a4014d98bacb26800d92d394/gdb/tui/tui.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui.c?ref=cb2ce89305264543a4014d98bacb26800d92d394",
      "patch": "@@ -236,9 +236,9 @@ tui_rl_other_window (int count, int key)\n   if (win_info)\n     {\n       tui_set_win_focus_to (win_info);\n-      if (TUI_DATA_WIN && TUI_DATA_WIN->generic.is_visible)\n+      if (TUI_DATA_WIN && TUI_DATA_WIN->is_visible)\n \tTUI_DATA_WIN->refresh_all ();\n-      keypad (TUI_CMD_WIN->generic.handle, (win_info != TUI_CMD_WIN));\n+      keypad (TUI_CMD_WIN->handle, (win_info != TUI_CMD_WIN));\n     }\n   return 0;\n }\n@@ -476,8 +476,8 @@ tui_enable (void)\n       tui_show_frame_info (0);\n       tui_set_layout (SRC_COMMAND);\n       tui_set_win_focus_to (TUI_SRC_WIN);\n-      keypad (TUI_CMD_WIN->generic.handle, TRUE);\n-      wrefresh (TUI_CMD_WIN->generic.handle);\n+      keypad (TUI_CMD_WIN->handle, TRUE);\n+      wrefresh (TUI_CMD_WIN->handle);\n       tui_finish_init = 0;\n     }\n   else\n@@ -664,7 +664,7 @@ tui_is_window_visible (enum tui_win_type type)\n   if (tui_win_list[type] == 0)\n     return false;\n   \n-  return tui_win_list[type]->generic.is_visible;\n+  return tui_win_list[type]->is_visible;\n }\n \n int\n@@ -676,8 +676,8 @@ tui_get_command_dimension (unsigned int *width,\n       return 0;\n     }\n   \n-  *width = TUI_CMD_WIN->generic.width;\n-  *height = TUI_CMD_WIN->generic.height;\n+  *width = TUI_CMD_WIN->width;\n+  *height = TUI_CMD_WIN->height;\n   return 1;\n }\n "
    }
  ]
}