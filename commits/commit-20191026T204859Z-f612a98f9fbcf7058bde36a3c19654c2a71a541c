{
  "sha": "f612a98f9fbcf7058bde36a3c19654c2a71a541c",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZjYxMmE5OGY5ZmJjZjcwNThiZGUzNmEzYzE5NjU0YzJhNzFhNTQxYw==",
  "commit": {
    "author": {
      "name": "John David Anglin",
      "email": "danglin@gcc.gnu.org",
      "date": "2019-10-26T20:48:59Z"
    },
    "committer": {
      "name": "John David Anglin",
      "email": "danglin@gcc.gnu.org",
      "date": "2019-10-26T20:48:59Z"
    },
    "message": "Add some missing casts to suppress implicit cast warnings\n\n\tPR gas/25121\n\t* config/tc-hppa.c (tc_gen_reloc): Cast some enums to int.\n\t(md_assemble): Likewise.",
    "tree": {
      "sha": "ca2a5cfed596b70139a96de4b3b331492b65e377",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/ca2a5cfed596b70139a96de4b3b331492b65e377"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/f612a98f9fbcf7058bde36a3c19654c2a71a541c",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f612a98f9fbcf7058bde36a3c19654c2a71a541c",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/f612a98f9fbcf7058bde36a3c19654c2a71a541c",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f612a98f9fbcf7058bde36a3c19654c2a71a541c/comments",
  "author": null,
  "committer": null,
  "parents": [
    {
      "sha": "6f69abb0498286297936a178ba81c7e445aa4437",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6f69abb0498286297936a178ba81c7e445aa4437",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/6f69abb0498286297936a178ba81c7e445aa4437"
    }
  ],
  "stats": {
    "total": 17,
    "additions": 12,
    "deletions": 5
  },
  "files": [
    {
      "sha": "53c90eae888c2a471bd678390c006a29d6b42595",
      "filename": "gas/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f612a98f9fbcf7058bde36a3c19654c2a71a541c/gas/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f612a98f9fbcf7058bde36a3c19654c2a71a541c/gas/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ChangeLog?ref=f612a98f9fbcf7058bde36a3c19654c2a71a541c",
      "patch": "@@ -1,3 +1,9 @@\n+2019-10-26  John David Anglin  <danglin@gcc.gnu.org>\n+\n+\tPR gas/25121\n+\t* config/tc-hppa.c (tc_gen_reloc): Cast some enums to int.\n+\t(md_assemble): Likewise.\n+\n 2019-10-26  Alan Modra  <amodra@gmail.com>\n \n \tPR 25125"
    },
    {
      "sha": "12279f2c6f572a137be092b45e7aba54b49db6c4",
      "filename": "gas/config/tc-hppa.c",
      "status": "modified",
      "additions": 6,
      "deletions": 5,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f612a98f9fbcf7058bde36a3c19654c2a71a541c/gas/config/tc-hppa.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f612a98f9fbcf7058bde36a3c19654c2a71a541c/gas/config/tc-hppa.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-hppa.c?ref=f612a98f9fbcf7058bde36a3c19654c2a71a541c",
      "patch": "@@ -1365,15 +1365,15 @@ tc_gen_reloc (asection *section, fixS *fixp)\n   /* ??? It might be better to hide this +8 stuff in tc_cfi_emit_pcrel_expr,\n      undefine DIFF_EXPR_OK, and let these sorts of complex expressions fail\n      when R_HPPA_COMPLEX == R_PARISC_UNIMPLEMENTED.  */\n-  if (fixp->fx_r_type == (bfd_reloc_code_real_type) R_HPPA_COMPLEX\n+  if (fixp->fx_r_type == (int) R_HPPA_COMPLEX\n       && fixp->fx_pcrel)\n     {\n-      fixp->fx_r_type = R_HPPA_PCREL_CALL;\n+      fixp->fx_r_type = (int) R_HPPA_PCREL_CALL;\n       fixp->fx_offset += 8;\n     }\n \n   codes = hppa_gen_reloc_type (stdoutput,\n-\t\t\t       fixp->fx_r_type,\n+\t\t\t       (int) fixp->fx_r_type,\n \t\t\t       hppa_fixp->fx_r_format,\n \t\t\t       hppa_fixp->fx_r_field,\n \t\t\t       fixp->fx_subsy != NULL,\n@@ -5787,7 +5787,7 @@ md_assemble (char *str)\n   if (the_insn.reloc != R_HPPA_NONE)\n     fix_new_hppa (frag_now, (to - frag_now->fr_literal), 4, NULL,\n \t\t  (offsetT) 0, &the_insn.exp, the_insn.pcrel,\n-\t\t  the_insn.reloc, the_insn.field_selector,\n+\t\t  (int) the_insn.reloc, the_insn.field_selector,\n \t\t  the_insn.format, the_insn.arg_reloc, 0);\n \n #ifdef OBJ_ELF\n@@ -8317,7 +8317,8 @@ hppa_fix_adjustable (fixS *fixp)\n   /* LR/RR selectors are implicitly used for a number of different relocation\n      types.  We must ensure that none of these types are adjusted (see below)\n      even if they occur with a different selector.  */\n-  code = elf_hppa_reloc_final_type (stdoutput, fixp->fx_r_type,\n+  code = elf_hppa_reloc_final_type (stdoutput,\n+\t\t\t\t    (int) fixp->fx_r_type,\n \t\t  \t\t    hppa_fix->fx_r_format,\n \t\t\t\t    hppa_fix->fx_r_field);\n "
    }
  ]
}