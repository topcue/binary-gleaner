{
  "sha": "96acf8844a655e34de3f3b014a7f64f26266dee1",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OTZhY2Y4ODQ0YTY1NWUzNGRlM2YzYjAxNGE3ZjY0ZjI2MjY2ZGVlMQ==",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2019-01-10T18:55:23Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2019-04-23T21:50:26Z"
    },
    "message": "gdb/nios2: Use default gdbarch methods where possible\n\nMake use of the default gdbarch methods for gdbarch_dummy_id, and\ngdbarch_unwind_sp where possible.\n\nI have not tested this change but, by inspecting the code, I believe\nthe default methods are equivalent to the code being deleted.\n\ngdb/ChangeLog:\n\n\t* nios2-tdep.c (nios2_dummy_id): Delete.\n\t(nios2_unwind_sp): Delete.\n\t(nios2_gdbarch_init): Don't register deleted functions with\n\tgdbarch.",
    "tree": {
      "sha": "98a6f7f85bff364e00a054fabd869c0b57aa41a2",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/98a6f7f85bff364e00a054fabd869c0b57aa41a2"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/96acf8844a655e34de3f3b014a7f64f26266dee1",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/96acf8844a655e34de3f3b014a7f64f26266dee1",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/96acf8844a655e34de3f3b014a7f64f26266dee1",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/96acf8844a655e34de3f3b014a7f64f26266dee1/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "ca0ab0aa8194eda711cf52efe6c26cb821218476",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ca0ab0aa8194eda711cf52efe6c26cb821218476",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/ca0ab0aa8194eda711cf52efe6c26cb821218476"
    }
  ],
  "stats": {
    "total": 27,
    "additions": 7,
    "deletions": 20
  },
  "files": [
    {
      "sha": "a730d5f7117618b2d61b03a6029eec738638aff0",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/96acf8844a655e34de3f3b014a7f64f26266dee1/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/96acf8844a655e34de3f3b014a7f64f26266dee1/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=96acf8844a655e34de3f3b014a7f64f26266dee1",
      "patch": "@@ -1,3 +1,10 @@\n+2019-04-23  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* nios2-tdep.c (nios2_dummy_id): Delete.\n+\t(nios2_unwind_sp): Delete.\n+\t(nios2_gdbarch_init): Don't register deleted functions with\n+\tgdbarch.\n+\n 2019-04-23  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* nds32-tdep.c (nds32_dummy_id): Delete."
    },
    {
      "sha": "2a21c33b83f7a29ef082044be252da376f038bef",
      "filename": "gdb/nios2-tdep.c",
      "status": "modified",
      "additions": 0,
      "deletions": 20,
      "changes": 20,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/96acf8844a655e34de3f3b014a7f64f26266dee1/gdb/nios2-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/96acf8844a655e34de3f3b014a7f64f26266dee1/gdb/nios2-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/nios2-tdep.c?ref=96acf8844a655e34de3f3b014a7f64f26266dee1",
      "patch": "@@ -1795,16 +1795,6 @@ nios2_return_value (struct gdbarch *gdbarch, struct value *function,\n   return RETURN_VALUE_REGISTER_CONVENTION;\n }\n \n-/* Implement the dummy_id gdbarch method.  */\n-\n-static struct frame_id\n-nios2_dummy_id (struct gdbarch *gdbarch, struct frame_info *this_frame)\n-{\n-  return frame_id_build\n-    (get_frame_register_unsigned (this_frame, NIOS2_SP_REGNUM),\n-     get_frame_pc (this_frame));\n-}\n-\n /* Implement the push_dummy_call gdbarch method.  */\n \n static CORE_ADDR\n@@ -1896,14 +1886,6 @@ nios2_unwind_pc (struct gdbarch *gdbarch, struct frame_info *next_frame)\n   return extract_typed_address (buf, builtin_type (gdbarch)->builtin_func_ptr);\n }\n \n-/* Implement the unwind_sp gdbarch method.  */\n-\n-static CORE_ADDR\n-nios2_unwind_sp (struct gdbarch *gdbarch, struct frame_info *this_frame)\n-{\n-  return frame_unwind_register_unsigned (this_frame, NIOS2_SP_REGNUM);\n-}\n-\n /* Use prologue analysis to fill in the register cache\n    *THIS_PROLOGUE_CACHE for THIS_FRAME.  This function initializes\n    *THIS_PROLOGUE_CACHE first.  */\n@@ -2375,9 +2357,7 @@ nios2_gdbarch_init (struct gdbarch_info info, struct gdbarch_list *arches)\n   set_gdbarch_breakpoint_kind_from_pc (gdbarch, nios2_breakpoint_kind_from_pc);\n   set_gdbarch_sw_breakpoint_from_kind (gdbarch, nios2_sw_breakpoint_from_kind);\n \n-  set_gdbarch_dummy_id (gdbarch, nios2_dummy_id);\n   set_gdbarch_unwind_pc (gdbarch, nios2_unwind_pc);\n-  set_gdbarch_unwind_sp (gdbarch, nios2_unwind_sp);\n \n   /* The dwarf2 unwinder will normally produce the best results if\n      the debug information is available, so register it first.  */"
    }
  ]
}