{
  "sha": "bd920864f3dc2cad376989a642ab774aef6b2fce",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YmQ5MjA4NjRmM2RjMmNhZDM3Njk4OWE2NDJhYjc3NGFlZjZiMmZjZQ==",
  "commit": {
    "author": {
      "name": "Tankut Baris Aktemur",
      "email": "tankut.baris.aktemur@intel.com",
      "date": "2020-06-22T12:03:33Z"
    },
    "committer": {
      "name": "Tankut Baris Aktemur",
      "email": "tankut.baris.aktemur@intel.com",
      "date": "2020-06-22T12:03:33Z"
    },
    "message": "gdb/jit: return bool in jit_breakpoint_re_set_internal and jit_read_descriptor\n\nThis is a minor refactoring that converts the return type of\njit_read_descriptor and jit_breakpoint_re_set_internal functions\nfrom 'int' to 'bool'.\n\nThe return value logic of jit_breakpoint_re_set_internal has been\nreversed.  With this patch it now returns true if the jit breakpoint\nhas been successfully initialized.\n\ngdb/ChangeLog:\n2020-06-22  Tankut Baris Aktemur  <tankut.baris.aktemur@intel.com>\n\n\t* jit.c (jit_read_descriptor): Use bool as the return type.\n\t(jit_breakpoint_re_set_internal): Use bool as the return type.\n\tInvert the return value logic; return true if the jit breakpoint\n\thas been successfully initialized.\n\t(jit_inferior_init): Update the call to\n\tjit_breakpoint_re_set_internal.",
    "tree": {
      "sha": "fea54fdfbc5e526b872df010b34b96b386d2246a",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/fea54fdfbc5e526b872df010b34b96b386d2246a"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/bd920864f3dc2cad376989a642ab774aef6b2fce",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/bd920864f3dc2cad376989a642ab774aef6b2fce",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/bd920864f3dc2cad376989a642ab774aef6b2fce",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/bd920864f3dc2cad376989a642ab774aef6b2fce/comments",
  "author": {
    "login": "barisaktemur",
    "id": 55686642,
    "node_id": "MDQ6VXNlcjU1Njg2NjQy",
    "avatar_url": "https://avatars.githubusercontent.com/u/55686642?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/barisaktemur",
    "html_url": "https://github.com/barisaktemur",
    "followers_url": "https://api.github.com/users/barisaktemur/followers",
    "following_url": "https://api.github.com/users/barisaktemur/following{/other_user}",
    "gists_url": "https://api.github.com/users/barisaktemur/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/barisaktemur/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/barisaktemur/subscriptions",
    "organizations_url": "https://api.github.com/users/barisaktemur/orgs",
    "repos_url": "https://api.github.com/users/barisaktemur/repos",
    "events_url": "https://api.github.com/users/barisaktemur/events{/privacy}",
    "received_events_url": "https://api.github.com/users/barisaktemur/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "barisaktemur",
    "id": 55686642,
    "node_id": "MDQ6VXNlcjU1Njg2NjQy",
    "avatar_url": "https://avatars.githubusercontent.com/u/55686642?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/barisaktemur",
    "html_url": "https://github.com/barisaktemur",
    "followers_url": "https://api.github.com/users/barisaktemur/followers",
    "following_url": "https://api.github.com/users/barisaktemur/following{/other_user}",
    "gists_url": "https://api.github.com/users/barisaktemur/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/barisaktemur/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/barisaktemur/subscriptions",
    "organizations_url": "https://api.github.com/users/barisaktemur/orgs",
    "repos_url": "https://api.github.com/users/barisaktemur/repos",
    "events_url": "https://api.github.com/users/barisaktemur/events{/privacy}",
    "received_events_url": "https://api.github.com/users/barisaktemur/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "f809832224cc45eb58812f6d4bb03cbf52fad980",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f809832224cc45eb58812f6d4bb03cbf52fad980",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/f809832224cc45eb58812f6d4bb03cbf52fad980"
    }
  ],
  "stats": {
    "total": 35,
    "additions": 22,
    "deletions": 13
  },
  "files": [
    {
      "sha": "022b797d47b687606131f07457ba1bcbdc056b23",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bd920864f3dc2cad376989a642ab774aef6b2fce/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bd920864f3dc2cad376989a642ab774aef6b2fce/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=bd920864f3dc2cad376989a642ab774aef6b2fce",
      "patch": "@@ -1,3 +1,12 @@\n+2020-06-22  Tankut Baris Aktemur  <tankut.baris.aktemur@intel.com>\n+\n+\t* jit.c (jit_read_descriptor): Use bool as the return type.\n+\t(jit_breakpoint_re_set_internal): Use bool as the return type.\n+\tInvert the return value logic; return true if the jit breakpoint\n+\thas been successfully initialized.\n+\t(jit_inferior_init): Update the call to\n+\tjit_breakpoint_re_set_internal.\n+\n 2020-06-22  Pedro Alves  <palves@redhat.com>\n \n \tPR gdb/25939"
    },
    {
      "sha": "e8a843de3909313ab06f5b3f2a001c0fc6c530e4",
      "filename": "gdb/jit.c",
      "status": "modified",
      "additions": 13,
      "deletions": 13,
      "changes": 26,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bd920864f3dc2cad376989a642ab774aef6b2fce/gdb/jit.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bd920864f3dc2cad376989a642ab774aef6b2fce/gdb/jit.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/jit.c?ref=bd920864f3dc2cad376989a642ab774aef6b2fce",
      "patch": "@@ -329,9 +329,9 @@ get_jit_program_space_data ()\n }\n \n /* Helper function for reading the global JIT descriptor from remote\n-   memory.  Returns 1 if all went well, 0 otherwise.  */\n+   memory.  Returns true if all went well, false otherwise.  */\n \n-static int\n+static bool\n jit_read_descriptor (struct gdbarch *gdbarch,\n \t\t     struct jit_descriptor *descriptor,\n \t\t     struct jit_program_space_data *ps_data)\n@@ -345,10 +345,10 @@ jit_read_descriptor (struct gdbarch *gdbarch,\n   struct jit_objfile_data *objf_data;\n \n   if (ps_data->objfile == NULL)\n-    return 0;\n+    return false;\n   objf_data = get_jit_objfile_data (ps_data->objfile);\n   if (objf_data->descriptor == NULL)\n-    return 0;\n+    return false;\n \n   if (jit_debug)\n     fprintf_unfiltered (gdb_stdlog,\n@@ -370,7 +370,7 @@ jit_read_descriptor (struct gdbarch *gdbarch,\n     {\n       printf_unfiltered (_(\"Unable to read JIT descriptor from \"\n \t\t\t   \"remote memory\\n\"));\n-      return 0;\n+      return false;\n     }\n \n   /* Fix the endianness to match the host.  */\n@@ -381,7 +381,7 @@ jit_read_descriptor (struct gdbarch *gdbarch,\n   descriptor->first_entry =\n       extract_typed_address (&desc_buf[8 + ptr_size], ptr_type);\n \n-  return 1;\n+  return true;\n }\n \n /* Helper function for reading a JITed code entry from remote memory.  */\n@@ -950,9 +950,9 @@ jit_breakpoint_deleted (struct breakpoint *b)\n }\n \n /* (Re-)Initialize the jit breakpoint if necessary.\n-   Return 0 if the jit breakpoint has been successfully initialized.  */\n+   Return true if the jit breakpoint has been successfully initialized.  */\n \n-static int\n+static bool\n jit_breakpoint_re_set_internal (struct gdbarch *gdbarch,\n \t\t\t\tstruct jit_program_space_data *ps_data)\n {\n@@ -968,13 +968,13 @@ jit_breakpoint_re_set_internal (struct gdbarch *gdbarch,\n       reg_symbol = lookup_bound_minimal_symbol (jit_break_name);\n       if (reg_symbol.minsym == NULL\n \t  || BMSYMBOL_VALUE_ADDRESS (reg_symbol) == 0)\n-\treturn 1;\n+\treturn false;\n \n       desc_symbol = lookup_minimal_symbol (jit_descriptor_name, NULL,\n \t\t\t\t\t   reg_symbol.objfile);\n       if (desc_symbol.minsym == NULL\n \t  || BMSYMBOL_VALUE_ADDRESS (desc_symbol) == 0)\n-\treturn 1;\n+\treturn false;\n \n       objf_data = get_jit_objfile_data (reg_symbol.objfile);\n       objf_data->register_code = reg_symbol.minsym;\n@@ -994,7 +994,7 @@ jit_breakpoint_re_set_internal (struct gdbarch *gdbarch,\n \t\t\tpaddress (gdbarch, addr));\n \n   if (ps_data->cached_code_address == addr)\n-    return 0;\n+    return true;\n \n   /* Delete the old breakpoint.  */\n   if (ps_data->jit_breakpoint != NULL)\n@@ -1004,7 +1004,7 @@ jit_breakpoint_re_set_internal (struct gdbarch *gdbarch,\n   ps_data->cached_code_address = addr;\n   ps_data->jit_breakpoint = create_jit_event_breakpoint (gdbarch, addr);\n \n-  return 0;\n+  return true;\n }\n \n /* The private data passed around in the frame unwind callback\n@@ -1252,7 +1252,7 @@ jit_inferior_init (struct gdbarch *gdbarch)\n   jit_prepend_unwinder (gdbarch);\n \n   ps_data = get_jit_program_space_data ();\n-  if (jit_breakpoint_re_set_internal (gdbarch, ps_data) != 0)\n+  if (!jit_breakpoint_re_set_internal (gdbarch, ps_data))\n     return;\n \n   /* Read the descriptor so we can check the version number and load"
    }
  ]
}