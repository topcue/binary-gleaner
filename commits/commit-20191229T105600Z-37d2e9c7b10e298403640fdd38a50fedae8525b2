{
  "sha": "37d2e9c7b10e298403640fdd38a50fedae8525b2",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MzdkMmU5YzdiMTBlMjk4NDAzNjQwZmRkMzhhNTBmZWRhZTg1MjViMg==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-12-29T02:25:34Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-12-29T10:56:00Z"
    },
    "message": "asan: alpha-vms: memory leaks\n\n\t* vms-misc.c (_bfd_vms_save_sized_string): Add abfd param, make\n\tsize a size_t.  Use bfd_alloc rather than bfd_malloc.\n\t(_bfd_vms_save_counted_string): Similarly.\n\t* vms.h (_bfd_vms_save_sized_string): Update prototype.\n\t(_bfd_vms_save_counted_string): Likewise.\n\t* vms-alpha.c (_bfd_vms_slurp_ehdr): Adjust\n\t_bfd_vms_save_counted_string and bfd_vms_save_sized_string calls.\n\t(_bfd_vms_slurp_egsd, parse_module): Likewise.\n\t(_bfd_vms_slurp_eisd): Likewise.  Check return status.\n\t(alpha_vms_bfd_link_hash_table_free): New function.\n\t(alpha_vms_bfd_link_hash_table_create): Arrange to call it.\n\t(vms_close_and_cleanup): Free more memory.  Don't release tdata.",
    "tree": {
      "sha": "44a8f091400c523623a87c15d1373dcdae51619a",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/44a8f091400c523623a87c15d1373dcdae51619a"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/37d2e9c7b10e298403640fdd38a50fedae8525b2",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/37d2e9c7b10e298403640fdd38a50fedae8525b2",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/37d2e9c7b10e298403640fdd38a50fedae8525b2",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/37d2e9c7b10e298403640fdd38a50fedae8525b2/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "f5d35bb7a5789950efd5f03b270d4c5f774eaba9",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f5d35bb7a5789950efd5f03b270d4c5f774eaba9",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/f5d35bb7a5789950efd5f03b270d4c5f774eaba9"
    }
  ],
  "stats": {
    "total": 149,
    "additions": 99,
    "deletions": 50
  },
  "files": [
    {
      "sha": "807dc07ca0576fb2b01d9c58173320f90456ba55",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 15,
      "deletions": 0,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/37d2e9c7b10e298403640fdd38a50fedae8525b2/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/37d2e9c7b10e298403640fdd38a50fedae8525b2/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=37d2e9c7b10e298403640fdd38a50fedae8525b2",
      "patch": "@@ -1,3 +1,18 @@\n+2019-12-29  Alan Modra  <amodra@gmail.com>\n+\n+\t* vms-misc.c (_bfd_vms_save_sized_string): Add abfd param, make\n+\tsize a size_t.  Use bfd_alloc rather than bfd_malloc.\n+\t(_bfd_vms_save_counted_string): Similarly.\n+\t* vms.h (_bfd_vms_save_sized_string): Update prototype.\n+\t(_bfd_vms_save_counted_string): Likewise.\n+\t* vms-alpha.c (_bfd_vms_slurp_ehdr): Adjust\n+\t_bfd_vms_save_counted_string and bfd_vms_save_sized_string calls.\n+\t(_bfd_vms_slurp_egsd, parse_module): Likewise.\n+\t(_bfd_vms_slurp_eisd): Likewise.  Check return status.\n+\t(alpha_vms_bfd_link_hash_table_free): New function.\n+\t(alpha_vms_bfd_link_hash_table_create): Arrange to call it.\n+\t(vms_close_and_cleanup): Free more memory.  Don't release tdata.\n+\n 2019-12-29  Alan Modra  <amodra@gmail.com>\n \n \t* coffcode.h (coff_close_and_cleanup): Redefine to.."
    },
    {
      "sha": "5d2ff527aa3a27e70a95905072fc6d1bff8c7cbe",
      "filename": "bfd/vms-alpha.c",
      "status": "modified",
      "additions": 71,
      "deletions": 43,
      "changes": 114,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/37d2e9c7b10e298403640fdd38a50fedae8525b2/bfd/vms-alpha.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/37d2e9c7b10e298403640fdd38a50fedae8525b2/bfd/vms-alpha.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/vms-alpha.c?ref=37d2e9c7b10e298403640fdd38a50fedae8525b2",
      "patch": "@@ -595,10 +595,13 @@ _bfd_vms_slurp_eisd (bfd *abfd, unsigned int offset)\n \t  if (rec_size < offsetof (struct vms_eisd, gblnam))\n \t    return FALSE;\n \t  else if (rec_size < sizeof (struct vms_eisd))\n-\t    name = _bfd_vms_save_counted_string (eisd->gblnam,\n+\t    name = _bfd_vms_save_counted_string (abfd, eisd->gblnam,\n \t\t\t\t\t\t rec_size - offsetof (struct vms_eisd, gblnam));\n \t  else\n-\t    name = _bfd_vms_save_counted_string (eisd->gblnam, EISD__K_GBLNAMLEN);\n+\t    name = _bfd_vms_save_counted_string (abfd, eisd->gblnam,\n+\t\t\t\t\t\t EISD__K_GBLNAMLEN);\n+\t  if (name == NULL)\n+\t    return FALSE;\n \t  bfd_flags |= SEC_COFF_SHARED_LIBRARY;\n \t  bfd_flags &= ~(SEC_ALLOC | SEC_LOAD);\n \t}\n@@ -610,7 +613,9 @@ _bfd_vms_slurp_eisd (bfd *abfd, unsigned int offset)\n \t{\n \t  const char *pfx;\n \n-\t  name = (char*) bfd_alloc (abfd, 32);\n+\t  name = (char *) bfd_alloc (abfd, 32);\n+\t  if (name == NULL)\n+\t    return FALSE;\n \t  if (flags & EISD__M_DZRO)\n \t    pfx = \"BSS\";\n \t  else if (flags & EISD__M_EXE)\n@@ -924,36 +929,39 @@ _bfd_vms_slurp_ehdr (bfd *abfd)\n       PRIV (hdr_data).hdr_l_recsiz = bfd_getl32 (vms_rec + 16);\n       if ((vms_rec + 20 + vms_rec[20] + 1) >= end)\n \tgoto fail;\n-      PRIV (hdr_data).hdr_t_name   = _bfd_vms_save_counted_string (vms_rec + 20, vms_rec[20]);\n+      PRIV (hdr_data).hdr_t_name\n+\t= _bfd_vms_save_counted_string (abfd, vms_rec + 20, vms_rec[20]);\n       ptr = vms_rec + 20 + vms_rec[20] + 1;\n       if ((ptr + *ptr + 1) >= end)\n \tgoto fail;\n-      PRIV (hdr_data).hdr_t_version =_bfd_vms_save_counted_string (ptr, *ptr);\n+      PRIV (hdr_data).hdr_t_version\n+\t= _bfd_vms_save_counted_string (abfd, ptr, *ptr);\n       ptr += *ptr + 1;\n       if (ptr + 17 >= end)\n \tgoto fail;\n-      PRIV (hdr_data).hdr_t_date = _bfd_vms_save_sized_string (ptr, 17);\n+      PRIV (hdr_data).hdr_t_date\n+\t= _bfd_vms_save_sized_string (abfd, ptr, 17);\n       break;\n \n     case EMH__C_LNM:\n       if (vms_rec + PRIV (recrd.rec_size - 6) > end)\n \tgoto fail;\n-      PRIV (hdr_data).hdr_c_lnm =\n-\t_bfd_vms_save_sized_string (vms_rec, PRIV (recrd.rec_size - 6));\n+      PRIV (hdr_data).hdr_c_lnm\n+\t= _bfd_vms_save_sized_string (abfd, vms_rec, PRIV (recrd.rec_size - 6));\n       break;\n \n     case EMH__C_SRC:\n       if (vms_rec + PRIV (recrd.rec_size - 6) > end)\n \tgoto fail;\n-      PRIV (hdr_data).hdr_c_src =\n-\t_bfd_vms_save_sized_string (vms_rec, PRIV (recrd.rec_size - 6));\n+      PRIV (hdr_data).hdr_c_src\n+\t= _bfd_vms_save_sized_string (abfd, vms_rec, PRIV (recrd.rec_size - 6));\n       break;\n \n     case EMH__C_TTL:\n       if (vms_rec + PRIV (recrd.rec_size - 6) > end)\n \tgoto fail;\n-      PRIV (hdr_data).hdr_c_ttl =\n-\t_bfd_vms_save_sized_string (vms_rec, PRIV (recrd.rec_size - 6));\n+      PRIV (hdr_data).hdr_c_ttl\n+\t= _bfd_vms_save_sized_string (abfd, vms_rec, PRIV (recrd.rec_size - 6));\n       break;\n \n     case EMH__C_CPR:\n@@ -1238,7 +1246,8 @@ _bfd_vms_slurp_egsd (bfd *abfd)\n \t\tchar *name;\n \t\tunsigned long align_addr;\n \n-\t\tname = _bfd_vms_save_counted_string (&egps->namlng, gsd_size - 4);\n+\t\tname = _bfd_vms_save_counted_string (abfd, &egps->namlng,\n+\t\t\t\t\t\t     gsd_size - 4);\n \n \t\tsection = bfd_make_section (abfd, name);\n \t\tif (!section)\n@@ -1251,7 +1260,8 @@ _bfd_vms_slurp_egsd (bfd *abfd)\n \t\tvms_section_data (section)->flags = vms_flags;\n \t\tvms_section_data (section)->no_flags = 0;\n \n-\t\tnew_flags = vms_secflag_by_name (evax_section_flags, name,\n+\t\tnew_flags = vms_secflag_by_name (evax_section_flags,\n+\t\t\t\t\t\t section->name,\n \t\t\t\t\t\t section->size > 0);\n \t\tif (section->size > 0)\n \t\t  new_flags |= SEC_LOAD;\n@@ -4228,7 +4238,7 @@ parse_module (bfd *abfd, struct module *module, unsigned char *ptr,\n \t{\n \tcase DST__K_MODBEG:\n \t  module->name\n-\t    = _bfd_vms_save_counted_string (ptr + DST_S_B_MODBEG_NAME,\n+\t    = _bfd_vms_save_counted_string (abfd, ptr + DST_S_B_MODBEG_NAME,\n \t\t\t\t\t    maxptr - (ptr + DST_S_B_MODBEG_NAME));\n \n \t  curr_pc = 0;\n@@ -4246,7 +4256,7 @@ parse_module (bfd *abfd, struct module *module, unsigned char *ptr,\n \t  funcinfo = (struct funcinfo *)\n \t    bfd_zalloc (abfd, sizeof (struct funcinfo));\n \t  funcinfo->name\n-\t    = _bfd_vms_save_counted_string (ptr + DST_S_B_RTNBEG_NAME,\n+\t    = _bfd_vms_save_counted_string (abfd, ptr + DST_S_B_RTNBEG_NAME,\n \t\t\t\t\t    maxptr - (ptr + DST_S_B_RTNBEG_NAME));\n \t  funcinfo->low = bfd_getl32 (ptr + DST_S_L_RTNBEG_ADDRESS);\n \t  funcinfo->next = module->func_table;\n@@ -4297,11 +4307,10 @@ parse_module (bfd *abfd, struct module *module, unsigned char *ptr,\n \t\t  {\n \t\t    unsigned int fileid\n \t\t      = bfd_getl16 (src_ptr + DST_S_W_SRC_DF_FILEID);\n-\t\t    char *filename\n-\t\t      = _bfd_vms_save_counted_string (src_ptr + DST_S_B_SRC_DF_FILENAME,\n-\t\t\t\t\t\t      (ptr + rec_length) -\n-\t\t\t\t\t\t      (src_ptr + DST_S_B_SRC_DF_FILENAME)\n-\t\t\t\t\t\t      );\n+\t\t    char *filename = _bfd_vms_save_counted_string\n+\t\t      (abfd,\n+\t\t       src_ptr + DST_S_B_SRC_DF_FILENAME,\n+\t\t       ptr + rec_length - (src_ptr + DST_S_B_SRC_DF_FILENAME));\n \n \t\t    while (fileid >= module->file_table_count)\n \t\t      {\n@@ -8360,6 +8369,27 @@ alpha_vms_link_hash_newfunc (struct bfd_hash_entry *entry,\n   return (struct bfd_hash_entry *) ret;\n }\n \n+static void\n+alpha_vms_bfd_link_hash_table_free (bfd *abfd)\n+{\n+  struct alpha_vms_link_hash_table *t;\n+  unsigned i;\n+\n+  t = (struct alpha_vms_link_hash_table *) abfd->link.hash;\n+  for (i = 0; i < VEC_COUNT (t->shrlibs); i++)\n+    {\n+      struct alpha_vms_shlib_el *shlib;\n+\n+      shlib = &VEC_EL (t->shrlibs, struct alpha_vms_shlib_el, i);\n+      free (&VEC_EL (shlib->ca, bfd_vma, 0));\n+      free (&VEC_EL (shlib->lp, bfd_vma, 0));\n+      free (&VEC_EL (shlib->qr, struct alpha_vms_vma_ref, 0));\n+    }\n+  free (&VEC_EL (t->shrlibs, struct alpha_vms_shlib_el, 0));\n+\n+  _bfd_generic_link_hash_table_free (abfd);\n+}\n+\n /* Create an Alpha/VMS link hash table.  */\n \n static struct bfd_link_hash_table *\n@@ -8381,6 +8411,7 @@ alpha_vms_bfd_link_hash_table_create (bfd *abfd)\n \n   VEC_INIT (ret->shrlibs);\n   ret->fixup = NULL;\n+  ret->root.hash_table_free = alpha_vms_bfd_link_hash_table_free;\n \n   return &ret->root;\n }\n@@ -9307,35 +9338,32 @@ vms_close_and_cleanup (bfd * abfd)\n   if (abfd == NULL || abfd->tdata.any == NULL)\n     return TRUE;\n \n-  if (abfd->format == bfd_archive)\n+  if (abfd->format == bfd_object)\n     {\n-      bfd_release (abfd, abfd->tdata.any);\n-      abfd->tdata.any = NULL;\n-      return TRUE;\n-    }\n-\n-  if (PRIV (recrd.buf) != NULL)\n-    free (PRIV (recrd.buf));\n+      struct module *module;\n \n-  if (PRIV (sections) != NULL)\n-    free (PRIV (sections));\n+      free (PRIV (recrd.buf));\n+      free (PRIV (sections));\n+      free (PRIV (syms));\n+      free (PRIV (dst_ptr_offsets));\n \n-  bfd_release (abfd, abfd->tdata.any);\n-  abfd->tdata.any = NULL;\n+      for (module = PRIV (modules); module; module = module->next)\n+\tfree (module->file_table);\n \n #ifdef VMS\n-  if (abfd->direction == write_direction)\n-    {\n-      /* Last step on VMS is to convert the file to variable record length\n-\t format.  */\n-      if (!bfd_cache_close (abfd))\n-\treturn FALSE;\n-      if (!_bfd_vms_convert_to_var_unix_filename (abfd->filename))\n-\treturn FALSE;\n-    }\n+      if (abfd->direction == write_direction)\n+\t{\n+\t  /* Last step on VMS is to convert the file to variable record length\n+\t     format.  */\n+\t  if (!bfd_cache_close (abfd))\n+\t    return FALSE;\n+\t  if (!_bfd_vms_convert_to_var_unix_filename (abfd->filename))\n+\t    return FALSE;\n+\t}\n #endif\n+    }\n \n-  return TRUE;\n+  return _bfd_generic_close_and_cleanup (abfd);\n }\n \n /* Called when a new section is created.  */"
    },
    {
      "sha": "c94f1c3ecfe1a369011d21b8078153826ce09ff3",
      "filename": "bfd/vms-misc.c",
      "status": "modified",
      "additions": 11,
      "deletions": 5,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/37d2e9c7b10e298403640fdd38a50fedae8525b2/bfd/vms-misc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/37d2e9c7b10e298403640fdd38a50fedae8525b2/bfd/vms-misc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/vms-misc.c?ref=37d2e9c7b10e298403640fdd38a50fedae8525b2",
      "patch": "@@ -139,13 +139,19 @@ _bfd_hexdump (int level, unsigned char *ptr, int size, int offset)\n    Size is string size (size of record).  */\n \n char *\n-_bfd_vms_save_sized_string (unsigned char *str, unsigned int size)\n+_bfd_vms_save_sized_string (bfd *abfd, unsigned char *str, size_t size)\n {\n-  char *newstr = bfd_malloc ((bfd_size_type) size + 1);\n+  char *newstr;\n \n+  if (size == (size_t) -1)\n+    {\n+      bfd_set_error (bfd_error_no_memory);\n+      return NULL;\n+    }\n+  newstr = bfd_alloc (abfd, size + 1);\n   if (newstr == NULL)\n     return NULL;\n-  memcpy (newstr, (char *) str, (size_t) size);\n+  memcpy (newstr, str, size);\n   newstr[size] = 0;\n \n   return newstr;\n@@ -155,13 +161,13 @@ _bfd_vms_save_sized_string (unsigned char *str, unsigned int size)\n    PTR points to size byte on entry.  */\n \n char *\n-_bfd_vms_save_counted_string (unsigned char *ptr, unsigned int maxlen)\n+_bfd_vms_save_counted_string (bfd *abfd, unsigned char *ptr, size_t maxlen)\n {\n   unsigned int len = *ptr++;\n \n   if (len > maxlen)\n     return NULL;\n-  return _bfd_vms_save_sized_string (ptr, len);\n+  return _bfd_vms_save_sized_string (abfd, ptr, len);\n }\n \f\n /* Object output routines.   */"
    },
    {
      "sha": "8df75b74cb8b5b305aab365c472ccf9ead403a85",
      "filename": "bfd/vms.h",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/37d2e9c7b10e298403640fdd38a50fedae8525b2/bfd/vms.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/37d2e9c7b10e298403640fdd38a50fedae8525b2/bfd/vms.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/vms.h?ref=37d2e9c7b10e298403640fdd38a50fedae8525b2",
      "patch": "@@ -118,8 +118,8 @@ extern void vms_time_t_to_vms_time (time_t ut, unsigned int *hi, unsigned int *l\n extern void vms_get_time (unsigned int *hi, unsigned int *lo);\n extern void vms_raw_get_time (unsigned char *buf);\n \n-extern char * _bfd_vms_save_sized_string (unsigned char *, unsigned);\n-extern char * _bfd_vms_save_counted_string (unsigned char *, unsigned);\n+extern char * _bfd_vms_save_sized_string (bfd *, unsigned char *, size_t);\n+extern char * _bfd_vms_save_counted_string (bfd *, unsigned char *, size_t);\n extern void   _bfd_vms_output_begin (struct vms_rec_wr *, int);\n extern void   _bfd_vms_output_alignment (struct vms_rec_wr *, int);\n extern void   _bfd_vms_output_begin_subrec (struct vms_rec_wr *, int);"
    }
  ]
}