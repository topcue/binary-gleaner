{
  "sha": "adfb981595c1ea12736b6d3c4686973040f171ff",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YWRmYjk4MTU5NWMxZWExMjczNmI2ZDNjNDY4Njk3MzA0MGYxNzFmZg==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2020-04-24T19:40:31Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2020-04-24T19:40:33Z"
    },
    "message": "Add tests for Ada changes\n\nThe previous patches largely came without test cases.  This was done\nto make the patches easier to review; as most of the patches were\nneeded before existing tests could be updated.\n\nThis patch adds a new test and updates some existing tests to test all\nthe settings of -fgnat-encodings.  This ensures that tests are run\nboth with the old-style \"magic symbol name\" encoding, and the\nnew-style DWARF encoding.\n\nNote that in one case, a test is modified to be more lax.  See the\ncomment in mi_var_array.exp.  I didn't want to fix this in this\nseries, as it's already complicated enough.  However, I think it could\nbe fixed; I will file a bug for it.\n\ngdb/testsuite/ChangeLog\n2020-04-24  Tom Tromey  <tromey@adacore.com>\n\n\t* gdb.ada/mi_var_array.exp: Try all -fgnat-encodings settings.\n\tMake array type matching more lax.\n\t* gdb.ada/mi_var_union.exp: Try all -fgnat-encodings settings.\n\t* gdb.ada/mi_variant.exp: New file.\n\t* gdb.ada/mi_variant/pck.ads: New file.\n\t* gdb.ada/mi_variant/pkg.adb: New file.\n\t* gdb.ada/packed_tagged.exp: Try all -fgnat-encodings settings.\n\t* gdb.ada/unchecked_union.exp: Try all -fgnat-encodings settings.",
    "tree": {
      "sha": "a008a9b892732f5ca28604778faf5e11fcafb1af",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/a008a9b892732f5ca28604778faf5e11fcafb1af"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/adfb981595c1ea12736b6d3c4686973040f171ff",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/adfb981595c1ea12736b6d3c4686973040f171ff",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/adfb981595c1ea12736b6d3c4686973040f171ff",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/adfb981595c1ea12736b6d3c4686973040f171ff/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "d656f129ebc7b96db96244d0206fc7fb9af85a65",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d656f129ebc7b96db96244d0206fc7fb9af85a65",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/d656f129ebc7b96db96244d0206fc7fb9af85a65"
    }
  ],
  "stats": {
    "total": 362,
    "additions": 276,
    "deletions": 86
  },
  "files": [
    {
      "sha": "daeed54886d9091a4d0da39ee3b5a1e34eab8dde",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 11,
      "deletions": 0,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/adfb981595c1ea12736b6d3c4686973040f171ff/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/adfb981595c1ea12736b6d3c4686973040f171ff/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=adfb981595c1ea12736b6d3c4686973040f171ff",
      "patch": "@@ -1,3 +1,14 @@\n+2020-04-24  Tom Tromey  <tromey@adacore.com>\n+\n+\t* gdb.ada/mi_var_array.exp: Try all -fgnat-encodings settings.\n+\tMake array type matching more lax.\n+\t* gdb.ada/mi_var_union.exp: Try all -fgnat-encodings settings.\n+\t* gdb.ada/mi_variant.exp: New file.\n+\t* gdb.ada/mi_variant/pck.ads: New file.\n+\t* gdb.ada/mi_variant/pkg.adb: New file.\n+\t* gdb.ada/packed_tagged.exp: Try all -fgnat-encodings settings.\n+\t* gdb.ada/unchecked_union.exp: Try all -fgnat-encodings settings.\n+\n 2020-04-24  Tom Tromey  <tromey@adacore.com>\n \n \t* gdb.ada/variant.exp: Add dynamic field offset tests."
    },
    {
      "sha": "646ebd196f671f7058b4df509f9e50000f97a531",
      "filename": "gdb/testsuite/gdb.ada/mi_var_array.exp",
      "status": "modified",
      "additions": 40,
      "deletions": 29,
      "changes": 69,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/adfb981595c1ea12736b6d3c4686973040f171ff/gdb/testsuite/gdb.ada/mi_var_array.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/adfb981595c1ea12736b6d3c4686973040f171ff/gdb/testsuite/gdb.ada/mi_var_array.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.ada/mi_var_array.exp?ref=adfb981595c1ea12736b6d3c4686973040f171ff",
      "patch": "@@ -17,36 +17,47 @@ load_lib \"ada.exp\"\n \n standard_ada_testfile bar\n \n-if {[gdb_compile_ada \"${srcfile}\" \"${binfile}\" executable [list debug]] != \"\" } {\n-  return -1\n-}\n-\n load_lib mi-support.exp\n set MIFLAGS \"-i=mi\"\n \n-gdb_exit\n-if [mi_gdb_start] {\n-    continue\n-}\n-\n-mi_delete_breakpoints\n-mi_gdb_reinitialize_dir $srcdir/$subdir\n-mi_gdb_load ${binfile}\n-\n-if ![mi_run_to_main] then {\n-   fail \"cannot run to main, testcase aborted\"\n-   return 0\n+foreach_with_prefix scenario {none all minimal} {\n+    set flags {debug}\n+    if {$scenario != \"none\"} {\n+\tlappend flags additional_flags=-fgnat-encodings=$scenario\n+    }\n+\n+    if {[gdb_compile_ada \"${srcfile}\" \"${binfile}\" executable $flags] != \"\" } {\n+\treturn -1\n+    }\n+\n+    gdb_exit\n+    if [mi_gdb_start] {\n+\tcontinue\n+    }\n+\n+    mi_delete_breakpoints\n+    mi_gdb_reinitialize_dir $srcdir/$subdir\n+    mi_gdb_load ${binfile}\n+\n+    if ![mi_run_to_main] then {\n+\tfail \"cannot run to main, testcase aborted\"\n+\treturn 0\n+    }\n+\n+    set bp_location [gdb_get_line_number \"STOP\" ${testdir}/bar.adb]\n+    mi_continue_to_line \\\n+\t\"bar.adb:$bp_location\" \\\n+\t\"stop at start of main Ada procedure\"\n+\n+    mi_gdb_test \"-var-create vta * vta\" \\\n+\t\"\\\\^done,name=\\\"vta\\\",numchild=\\\"2\\\",.*\" \\\n+\t\"create bt varobj\"\n+\n+    # In the \"minimal\" mode, we don't currently have the ability to\n+    # print the subrange type properly.  So, we just allow anything\n+    # for the array range here.  The correct result would be to fix\n+    # this to read \"(1 .. n)\".\n+    mi_gdb_test \"-var-list-children vta\" \\\n+\t\"\\\\^done,numchild=\\\"2\\\",children=\\\\\\[child={name=\\\"vta.n\\\",exp=\\\"n\\\",numchild=\\\"0\\\",type=\\\"bar\\\\.int\\\",thread-id=\\\"$decimal\\\"},child={name=\\\"vta.f\\\",exp=\\\"f\\\",numchild=\\\"0\\\",type=\\\"array .* of character\\\",thread-id=\\\"$decimal\\\"}\\\\\\],.*\" \\\n+\t\"list vta's children\"\n }\n-\n-set bp_location [gdb_get_line_number \"STOP\" ${testdir}/bar.adb]\n-mi_continue_to_line \\\n-    \"bar.adb:$bp_location\" \\\n-    \"stop at start of main Ada procedure\"\n-\n-mi_gdb_test \"-var-create vta * vta\" \\\n-    \"\\\\^done,name=\\\"vta\\\",numchild=\\\"2\\\",.*\" \\\n-    \"create bt varobj\"\n-\n-mi_gdb_test \"-var-list-children vta\" \\\n-    \"\\\\^done,numchild=\\\"2\\\",children=\\\\\\[child={name=\\\"vta.n\\\",exp=\\\"n\\\",numchild=\\\"0\\\",type=\\\"bar\\\\.int\\\",thread-id=\\\"$decimal\\\"},child={name=\\\"vta.f\\\",exp=\\\"f\\\",numchild=\\\"0\\\",type=\\\"array \\\\(1 .. n\\\\) of character\\\",thread-id=\\\"$decimal\\\"}\\\\\\],.*\" \\\n-    \"list vta's children\""
    },
    {
      "sha": "7619d86d273403766916ebcc9c1b76044a5c8802",
      "filename": "gdb/testsuite/gdb.ada/mi_var_union.exp",
      "status": "modified",
      "additions": 36,
      "deletions": 29,
      "changes": 65,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/adfb981595c1ea12736b6d3c4686973040f171ff/gdb/testsuite/gdb.ada/mi_var_union.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/adfb981595c1ea12736b6d3c4686973040f171ff/gdb/testsuite/gdb.ada/mi_var_union.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.ada/mi_var_union.exp?ref=adfb981595c1ea12736b6d3c4686973040f171ff",
      "patch": "@@ -17,38 +17,45 @@ load_lib \"ada.exp\"\n \n standard_ada_testfile bar\n \n-if {[gdb_compile_ada \"${srcfile}\" \"${binfile}\" executable [list debug]] != \"\" } {\n-  return -1\n-}\n-\n load_lib mi-support.exp\n set MIFLAGS \"-i=mi\"\n \n-gdb_exit\n-if [mi_gdb_start] {\n-    continue\n-}\n-\n set float \"\\\\-?((\\[0-9\\]+(\\\\.\\[0-9\\]+)?(e\\[-+\\]\\[0-9\\]+)?)|(nan\\\\($hex\\\\)))\"\n \n-mi_delete_breakpoints\n-mi_gdb_reinitialize_dir $srcdir/$subdir\n-mi_gdb_load ${binfile}\n-\n-if ![mi_run_to_main] then {\n-   fail \"cannot run to main, testcase aborted\"\n-   return 0\n+foreach_with_prefix scenario {none all minimal} {\n+    set flags {debug}\n+    if {$scenario != \"none\"} {\n+\tlappend flags additional_flags=-fgnat-encodings=$scenario\n+    }\n+\n+    if {[gdb_compile_ada \"${srcfile}\" \"${binfile}\" executable $flags] != \"\" } {\n+\treturn -1\n+    }\n+\n+    gdb_exit\n+    if [mi_gdb_start] {\n+\tcontinue\n+    }\n+\n+    mi_delete_breakpoints\n+    mi_gdb_reinitialize_dir $srcdir/$subdir\n+    mi_gdb_load ${binfile}\n+\n+    if ![mi_run_to_main] then {\n+\tfail \"cannot run to main, testcase aborted\"\n+\treturn 0\n+    }\n+\n+    set bp_location [gdb_get_line_number \"STOP\" ${testdir}/bar.adb]\n+    mi_continue_to_line \\\n+\t\"bar.adb:$bp_location\" \\\n+\t\"stop at start of main Ada procedure\"\n+\n+    mi_gdb_test \"-var-create var1 * Ut\" \\\n+\t\"\\\\^done,name=\\\"var1\\\",numchild=\\\"2\\\",.*\" \\\n+\t\"Create var1 varobj\"\n+\n+    mi_gdb_test \"-var-list-children 1 var1\" \\\n+\t\"\\\\^done,numchild=\\\"2\\\",children=\\\\\\[child={name=\\\"var1.b\\\",exp=\\\"b\\\",numchild=\\\"0\\\",value=\\\"3\\\",type=\\\"integer\\\",thread-id=\\\"$decimal\\\"},child={name=\\\"var1.c\\\",exp=\\\"c\\\",numchild=\\\"0\\\",value=\\\"$float\\\",type=\\\"float\\\",thread-id=\\\"$decimal\\\"}\\\\\\],has_more=\\\"0\\\"\" \\\n+\t\"list var1's children\"\n }\n-\n-set bp_location [gdb_get_line_number \"STOP\" ${testdir}/bar.adb]\n-mi_continue_to_line \\\n-    \"bar.adb:$bp_location\" \\\n-    \"stop at start of main Ada procedure\"\n-\n-mi_gdb_test \"-var-create var1 * Ut\" \\\n-    \"\\\\^done,name=\\\"var1\\\",numchild=\\\"2\\\",.*\" \\\n-    \"Create var1 varobj\"\n-\n-mi_gdb_test \"-var-list-children 1 var1\" \\\n-    \"\\\\^done,numchild=\\\"2\\\",children=\\\\\\[child={name=\\\"var1.b\\\",exp=\\\"b\\\",numchild=\\\"0\\\",value=\\\"3\\\",type=\\\"integer\\\",thread-id=\\\"$decimal\\\"},child={name=\\\"var1.c\\\",exp=\\\"c\\\",numchild=\\\"0\\\",value=\\\"$float\\\",type=\\\"float\\\",thread-id=\\\"$decimal\\\"}\\\\\\],has_more=\\\"0\\\"\" \\\n-    \"list var1's children\""
    },
    {
      "sha": "ac9ece7303c9347c86fe90fc34bfbbe31eeb3b89",
      "filename": "gdb/testsuite/gdb.ada/mi_variant.exp",
      "status": "added",
      "additions": 65,
      "deletions": 0,
      "changes": 65,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/adfb981595c1ea12736b6d3c4686973040f171ff/gdb/testsuite/gdb.ada/mi_variant.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/adfb981595c1ea12736b6d3c4686973040f171ff/gdb/testsuite/gdb.ada/mi_variant.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.ada/mi_variant.exp?ref=adfb981595c1ea12736b6d3c4686973040f171ff",
      "patch": "@@ -0,0 +1,65 @@\n+# Copyright 2020 Free Software Foundation, Inc.\n+#\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+load_lib \"ada.exp\"\n+load_lib \"gdb-python.exp\"\n+\n+standard_ada_testfile pkg\n+\n+load_lib mi-support.exp\n+set MIFLAGS \"-i=mi\"\n+\n+foreach_with_prefix scenario {none all minimal} {\n+    set flags {debug}\n+    if {$scenario != \"none\"} {\n+\tlappend flags additional_flags=-fgnat-encodings=$scenario\n+    }\n+\n+    if {[gdb_compile_ada \"${srcfile}\" \"${binfile}\" executable $flags] != \"\"} {\n+\treturn -1\n+    }\n+\n+    gdb_exit\n+    if [mi_gdb_start] {\n+\tcontinue\n+    }\n+\n+    mi_delete_breakpoints\n+    mi_gdb_reinitialize_dir $srcdir/$subdir\n+    mi_gdb_load ${binfile}\n+\n+    if ![mi_run_to_main] then {\n+\tfail \"cannot run to main, testcase aborted\"\n+\treturn 0\n+    }\n+\n+    set bp_location [gdb_get_line_number \"STOP\" ${testdir}/pkg.adb]\n+    mi_continue_to_line \\\n+\t\"pkg.adb:$bp_location\" \\\n+\t\"stop at start of main Ada procedure\"\n+\n+    mi_gdb_test \"-var-create r * r\" \\\n+\t\"\\\\^done,name=\\\"r\\\",numchild=\\\"1\\\",.*\" \\\n+\t\"create r varobj\"\n+\n+    set bp_location [gdb_get_line_number \"STOP2\" ${testdir}/pkg.adb]\n+    mi_continue_to_line \\\n+\t\"pkg.adb:$bp_location\" \\\n+\t\"stop at second breakpoint\"\n+\n+    mi_gdb_test \"-var-update 1 r\" \\\n+\t\"\\\\^done.*name=\\\"r\\\",.*new_num_children=\\\"2\\\",.*\" \\\n+\t\"update r varobj\"\n+}"
    },
    {
      "sha": "3895b9c48eb6596643c2c5e4cff0d1c3693f058f",
      "filename": "gdb/testsuite/gdb.ada/mi_variant/pck.ads",
      "status": "added",
      "additions": 54,
      "deletions": 0,
      "changes": 54,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/adfb981595c1ea12736b6d3c4686973040f171ff/gdb/testsuite/gdb.ada/mi_variant/pck.ads",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/adfb981595c1ea12736b6d3c4686973040f171ff/gdb/testsuite/gdb.ada/mi_variant/pck.ads",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.ada/mi_variant/pck.ads?ref=adfb981595c1ea12736b6d3c4686973040f171ff",
      "patch": "@@ -0,0 +1,54 @@\n+--  Copyright 2020 Free Software Foundation, Inc.\n+--\n+--  This program is free software; you can redistribute it and/or modify\n+--  it under the terms of the GNU General Public License as published by\n+--  the Free Software Foundation; either version 3 of the License, or\n+--  (at your option) any later version.\n+--\n+--  This program is distributed in the hope that it will be useful,\n+--  but WITHOUT ANY WARRANTY; without even the implied warranty of\n+--  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+--  GNU General Public License for more details.\n+--\n+--  You should have received a copy of the GNU General Public License\n+--  along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+package Pck is\n+\n+   type Rec_Type (C : Character := 'd') is record\n+      case C is\n+         when Character'First     => X_First : Integer;\n+         when Character'Val (127) => X_127   : Integer;\n+         when Character'Val (128) => X_128   : Integer;\n+         when Character'Last      => X_Last  : Integer;\n+         when others              => null;\n+      end case;\n+   end record;\n+\n+   type Second_Type (I : Integer) is record\n+      One: Integer;\n+      case I is\n+         when -5 .. 5 =>\n+\t   X : Integer;\n+         when others =>\n+\t   Y : Integer;\n+      end case;\n+   end record;\n+\n+   type Nested_And_Variable (One, Two: Integer) is record\n+       Str : String (1 .. One);\n+       case One is\n+          when 0 =>\n+\t     null;\n+          when others =>\n+\t     OneValue : Integer;\n+             Str2 : String (1 .. Two);\n+             case Two is\n+\t        when 0 =>\n+\t\t   null;\n+\t\twhen others =>\n+\t\t   TwoValue : Integer;\n+             end case;\n+       end case;\n+   end record;\n+end Pck;"
    },
    {
      "sha": "ffa8e5e070bf7d72397a45018dbd9e70c2363d26",
      "filename": "gdb/testsuite/gdb.ada/mi_variant/pkg.adb",
      "status": "added",
      "additions": 28,
      "deletions": 0,
      "changes": 28,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/adfb981595c1ea12736b6d3c4686973040f171ff/gdb/testsuite/gdb.ada/mi_variant/pkg.adb",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/adfb981595c1ea12736b6d3c4686973040f171ff/gdb/testsuite/gdb.ada/mi_variant/pkg.adb",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.ada/mi_variant/pkg.adb?ref=adfb981595c1ea12736b6d3c4686973040f171ff",
      "patch": "@@ -0,0 +1,28 @@\n+--  Copyright 2020 Free Software Foundation, Inc.\n+--\n+--  This program is free software; you can redistribute it and/or modify\n+--  it under the terms of the GNU General Public License as published by\n+--  the Free Software Foundation; either version 3 of the License, or\n+--  (at your option) any later version.\n+--\n+--  This program is distributed in the hope that it will be useful,\n+--  but WITHOUT ANY WARRANTY; without even the implied warranty of\n+--  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+--  GNU General Public License for more details.\n+--\n+--  You should have received a copy of the GNU General Public License\n+--  along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+with Pck; use Pck;\n+\n+procedure Pkg is\n+\n+   R : Rec_Type;\n+\n+begin\n+   R := (C => 'd');\n+   null; -- STOP\n+\n+   R := (C => Character'First, X_First => 27);\n+   null; -- STOP2\n+end Pkg;"
    },
    {
      "sha": "72ae29c08d4efa1646ff209974aa026a66f5f160",
      "filename": "gdb/testsuite/gdb.ada/packed_tagged.exp",
      "status": "modified",
      "additions": 24,
      "deletions": 17,
      "changes": 41,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/adfb981595c1ea12736b6d3c4686973040f171ff/gdb/testsuite/gdb.ada/packed_tagged.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/adfb981595c1ea12736b6d3c4686973040f171ff/gdb/testsuite/gdb.ada/packed_tagged.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.ada/packed_tagged.exp?ref=adfb981595c1ea12736b6d3c4686973040f171ff",
      "patch": "@@ -17,24 +17,31 @@ load_lib \"ada.exp\"\n \n standard_ada_testfile comp_bug\n \n-if {[gdb_compile_ada \"${srcfile}\" \"${binfile}\" executable [list debug]] != \"\" } {\n-  return -1\n-}\n+foreach_with_prefix scenario {none all minimal} {\n+    set flags {debug}\n+    if {$scenario != \"none\"} {\n+\tlappend flags additional_flags=-fgnat-encodings=$scenario\n+    }\n+\n+    if {[gdb_compile_ada \"${srcfile}\" \"${binfile}\" executable $flags] != \"\"} {\n+\treturn -1\n+    }\n \n-clean_restart ${testfile}\n+    clean_restart ${testfile}\n \n-set bp_location [gdb_get_line_number \"STOP\" ${testdir}/comp_bug.adb]\n-runto \"comp_bug.adb:$bp_location\"\n+    set bp_location [gdb_get_line_number \"STOP\" ${testdir}/comp_bug.adb]\n+    runto \"comp_bug.adb:$bp_location\"\n \n-gdb_test \"print x\" \\\n-         \"= \\\\(exists => true, value => 10\\\\)\"\n+    gdb_test \"print x\" \\\n+\t\"= \\\\(exists => true, value => 10\\\\)\"\n \n-gdb_test \"ptype x\" \\\n-         [multi_line \"type = record\" \\\n-                     \"    exists: (boolean|range false \\\\.\\\\. true);\" \\\n-                     \"    case exists is\" \\\n-                     \"        when true =>\" \\\n-                     \"            value: range 0 \\\\.\\\\. 255;\" \\\n-                     \"        when others => null;\" \\\n-                     \"    end case;\" \\\n-                     \"end record\" ]\n+    gdb_test \"ptype x\" \\\n+\t[multi_line \"type = record\" \\\n+\t     \"    exists: (boolean|range false \\\\.\\\\. true);\" \\\n+\t     \"    case exists is\" \\\n+\t     \"        when true =>\" \\\n+\t     \"            value: range 0 \\\\.\\\\. 255;\" \\\n+\t     \"        when others => null;\" \\\n+\t     \"    end case;\" \\\n+\t     \"end record\" ]\n+}"
    },
    {
      "sha": "c85d7c331531d878ca5710113b759803d6178e85",
      "filename": "gdb/testsuite/gdb.ada/unchecked_union.exp",
      "status": "modified",
      "additions": 18,
      "deletions": 11,
      "changes": 29,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/adfb981595c1ea12736b6d3c4686973040f171ff/gdb/testsuite/gdb.ada/unchecked_union.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/adfb981595c1ea12736b6d3c4686973040f171ff/gdb/testsuite/gdb.ada/unchecked_union.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.ada/unchecked_union.exp?ref=adfb981595c1ea12736b6d3c4686973040f171ff",
      "patch": "@@ -19,15 +19,6 @@ load_lib \"ada.exp\"\n \n standard_ada_testfile unchecked_union\n \n-if {[gdb_compile_ada \"${srcfile}\" \"${binfile}\" executable {debug}] != \"\"} {\n-  return -1\n-}\n-\n-clean_restart ${testfile}\n-\n-set bp_location [gdb_get_line_number \"BREAK\" ${testdir}/unchecked_union.adb]\n-runto \"unchecked_union.adb:$bp_location\"\n-\n proc multi_line_string {str} {\n     set result {}\n     foreach line [split $str \\n] {\n@@ -54,5 +45,21 @@ set pair_string {    case ? is\n }\n set pair_full \"type = record\\n${inner_string}${pair_string}end record\"\n \n-gdb_test \"ptype Pair\" [multi_line_string $pair_full]\n-gdb_test \"ptype Inner\" [multi_line_string $inner_full]\n+foreach_with_prefix scenario {none all minimal} {\n+    set flags {debug}\n+    if {$scenario != \"none\"} {\n+\tlappend flags additional_flags=-fgnat-encodings=$scenario\n+    }\n+\n+    if {[gdb_compile_ada \"${srcfile}\" \"${binfile}\" executable $flags] != \"\"} {\n+\treturn -1\n+    }\n+\n+    clean_restart ${testfile}\n+\n+    set bp_location [gdb_get_line_number \"BREAK\" ${testdir}/unchecked_union.adb]\n+    runto \"unchecked_union.adb:$bp_location\"\n+\n+    gdb_test \"ptype Pair\" [multi_line_string $pair_full]\n+    gdb_test \"ptype Inner\" [multi_line_string $inner_full]\n+}"
    }
  ]
}