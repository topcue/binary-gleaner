{
  "sha": "3b606f384df54adb8e70dd678cd9a4c9759e4122",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6M2I2MDZmMzg0ZGY1NGFkYjhlNzBkZDY3OGNkOWE0Yzk3NTllNDEyMg==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-07-13T02:58:52Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2020-07-13T02:58:52Z"
    },
    "message": "gdb: remove TYPE_LOW_BOUND_KIND and TYPE_HIGH_BOUND_KIND\n\nRemove the macros, use the getters of `struct dynamic_prop` instead.\n\ngdb/ChangeLog:\n\n\t* gdbtypes.h (TYPE_LOW_BOUND_KIND,\n\tTYPE_HIGH_BOUND_KIND): Remove.  Update all callers\n\tto use dynamic_prop::kind.\n\nChange-Id: Icb1fc761f675bfac934209f8102392504d905c44",
    "tree": {
      "sha": "25ee94fcbb938ba8eae31ba258398335d32a9e18",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/25ee94fcbb938ba8eae31ba258398335d32a9e18"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/3b606f384df54adb8e70dd678cd9a4c9759e4122",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3b606f384df54adb8e70dd678cd9a4c9759e4122",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/3b606f384df54adb8e70dd678cd9a4c9759e4122",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3b606f384df54adb8e70dd678cd9a4c9759e4122/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "064d9cb9e765b0a064a2e442df0e7bcc79f98c18",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/064d9cb9e765b0a064a2e442df0e7bcc79f98c18",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/064d9cb9e765b0a064a2e442df0e7bcc79f98c18"
    }
  ],
  "stats": {
    "total": 34,
    "additions": 18,
    "deletions": 16
  },
  "files": [
    {
      "sha": "f257a8f10a94c95bbac6ea9d1305680e1f1d3f43",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3b606f384df54adb8e70dd678cd9a4c9759e4122/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3b606f384df54adb8e70dd678cd9a4c9759e4122/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=3b606f384df54adb8e70dd678cd9a4c9759e4122",
      "patch": "@@ -1,3 +1,9 @@\n+2020-07-12  Simon Marchi  <simon.marchi@efficios.com>\n+\n+\t* gdbtypes.h (TYPE_LOW_BOUND_KIND,\n+\tTYPE_HIGH_BOUND_KIND): Remove.  Update all callers\n+\tto use dynamic_prop::kind.\n+\n 2020-07-12  Simon Marchi  <simon.marchi@efficios.com>\n \n \t* gdbtypes.h (TYPE_LOW_BOUND_UNDEFINED,"
    },
    {
      "sha": "9e408e15a1e2315148d8766ab4b1ad1aa89c027e",
      "filename": "gdb/c-typeprint.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3b606f384df54adb8e70dd678cd9a4c9759e4122/gdb/c-typeprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3b606f384df54adb8e70dd678cd9a4c9759e4122/gdb/c-typeprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/c-typeprint.c?ref=3b606f384df54adb8e70dd678cd9a4c9759e4122",
      "patch": "@@ -780,8 +780,8 @@ c_type_print_varspec_suffix (struct type *type,\n \tfprintf_filtered (stream, (is_vector ?\n \t\t\t\t   \" __attribute__ ((vector_size(\" : \"[\"));\n \t/* Bounds are not yet resolved, print a bounds placeholder instead.  */\n-\tif (TYPE_HIGH_BOUND_KIND (type->index_type ()) == PROP_LOCEXPR\n-\t    || TYPE_HIGH_BOUND_KIND (type->index_type ()) == PROP_LOCLIST)\n+\tif (type->index_type ()->bounds ()->high.kind () == PROP_LOCEXPR\n+\t    || type->index_type ()->bounds ()->high.kind () == PROP_LOCLIST)\n \t  fprintf_filtered (stream, \"variable length\");\n \telse if (get_array_bounds (type, &low_bound, &high_bound))\n \t  fprintf_filtered (stream, \"%s\", "
    },
    {
      "sha": "f4e0783d4b89c9cb2838de9372c86a68427f78ac",
      "filename": "gdb/compile/compile-c-symbols.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3b606f384df54adb8e70dd678cd9a4c9759e4122/gdb/compile/compile-c-symbols.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3b606f384df54adb8e70dd678cd9a4c9759e4122/gdb/compile/compile-c-symbols.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/compile/compile-c-symbols.c?ref=3b606f384df54adb8e70dd678cd9a4c9759e4122",
      "patch": "@@ -501,8 +501,8 @@ generate_vla_size (compile_instance *compiler,\n     {\n     case TYPE_CODE_RANGE:\n       {\n-\tif (TYPE_HIGH_BOUND_KIND (type) == PROP_LOCEXPR\n-\t    || TYPE_HIGH_BOUND_KIND (type) == PROP_LOCLIST)\n+\tif (type->bounds ()->high.kind () == PROP_LOCEXPR\n+\t    || type->bounds ()->high.kind () == PROP_LOCLIST)\n \t  {\n \t    const struct dynamic_prop *prop = &type->bounds ()->high;\n \t    std::string name = c_get_range_decl_name (prop);"
    },
    {
      "sha": "2b25783bb00ca0c9e693bd5168cf162d9ba1ec19",
      "filename": "gdb/compile/compile-c-types.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3b606f384df54adb8e70dd678cd9a4c9759e4122/gdb/compile/compile-c-types.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3b606f384df54adb8e70dd678cd9a4c9759e4122/gdb/compile/compile-c-types.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/compile/compile-c-types.c?ref=3b606f384df54adb8e70dd678cd9a4c9759e4122",
      "patch": "@@ -44,15 +44,15 @@ convert_array (compile_c_instance *context, struct type *type)\n \n   element_type = context->convert_type (TYPE_TARGET_TYPE (type));\n \n-  if (TYPE_LOW_BOUND_KIND (range) != PROP_CONST)\n+  if (range->bounds ()->low.kind () != PROP_CONST)\n     return context->plugin ().error (_(\"array type with non-constant\"\n \t\t\t\t       \" lower bound is not supported\"));\n   if (range->bounds ()->low.const_val () != 0)\n     return context->plugin ().error (_(\"cannot convert array type with \"\n \t\t\t\t       \"non-zero lower bound to C\"));\n \n-  if (TYPE_HIGH_BOUND_KIND (range) == PROP_LOCEXPR\n-      || TYPE_HIGH_BOUND_KIND (range) == PROP_LOCLIST)\n+  if (range->bounds ()->high.kind () == PROP_LOCEXPR\n+      || range->bounds ()->high.kind () == PROP_LOCLIST)\n     {\n       gcc_type result;\n "
    },
    {
      "sha": "02df7ab90e6e4103103c8c9807b7a691393532e4",
      "filename": "gdb/compile/compile-cplus-types.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3b606f384df54adb8e70dd678cd9a4c9759e4122/gdb/compile/compile-cplus-types.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3b606f384df54adb8e70dd678cd9a4c9759e4122/gdb/compile/compile-cplus-types.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/compile/compile-cplus-types.c?ref=3b606f384df54adb8e70dd678cd9a4c9759e4122",
      "patch": "@@ -456,7 +456,7 @@ compile_cplus_convert_array (compile_cplus_instance *instance,\n   struct type *range = type->index_type ();\n   gcc_type element_type = instance->convert_type (TYPE_TARGET_TYPE (type));\n \n-  if (TYPE_LOW_BOUND_KIND (range) != PROP_CONST)\n+  if (range->bounds ()->low.kind () != PROP_CONST)\n     {\n       const char *s = _(\"array type with non-constant\"\n \t\t\t\" lower bound is not supported\");\n@@ -472,8 +472,8 @@ compile_cplus_convert_array (compile_cplus_instance *instance,\n       return instance->plugin ().error (s);\n     }\n \n-  if (TYPE_HIGH_BOUND_KIND (range) == PROP_LOCEXPR\n-      || TYPE_HIGH_BOUND_KIND (range) == PROP_LOCLIST)\n+  if (range->bounds ()->high.kind () == PROP_LOCEXPR\n+      || range->bounds ()->high.kind () == PROP_LOCLIST)\n     {\n       if (TYPE_VECTOR (type))\n \t{"
    },
    {
      "sha": "9be97054cfa59255c143993734d1442d4333472a",
      "filename": "gdb/gdbtypes.h",
      "status": "modified",
      "additions": 0,
      "deletions": 4,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3b606f384df54adb8e70dd678cd9a4c9759e4122/gdb/gdbtypes.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3b606f384df54adb8e70dd678cd9a4c9759e4122/gdb/gdbtypes.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbtypes.h?ref=3b606f384df54adb8e70dd678cd9a4c9759e4122",
      "patch": "@@ -1594,10 +1594,6 @@ extern unsigned type_align (struct type *);\n    space in struct type.  */\n extern bool set_type_align (struct type *, ULONGEST);\n \n-#define TYPE_HIGH_BOUND_KIND(range_type) \\\n-  ((range_type)->bounds ()->high.kind ())\n-#define TYPE_LOW_BOUND_KIND(range_type) \\\n-  ((range_type)->bounds ()->low.kind ())\n #define TYPE_BIT_STRIDE(range_type) \\\n   ((range_type)->bounds ()->stride.const_val () \\\n    * ((range_type)->bounds ()->flag_is_byte_stride ? 8 : 1))"
    },
    {
      "sha": "cedb15f555d3d64a8ef02c2b133dd6c7f4a3a4a0",
      "filename": "gdb/rust-lang.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3b606f384df54adb8e70dd678cd9a4c9759e4122/gdb/rust-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3b606f384df54adb8e70dd678cd9a4c9759e4122/gdb/rust-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/rust-lang.c?ref=3b606f384df54adb8e70dd678cd9a4c9759e4122",
      "patch": "@@ -813,8 +813,8 @@ rust_internal_print_type (struct type *type, const char *varstring,\n \t\t\t\t  stream, show - 1, level, flags, false,\n \t\t\t\t  podata);\n \n-\tif (TYPE_HIGH_BOUND_KIND (type->index_type ()) == PROP_LOCEXPR\n-\t    || TYPE_HIGH_BOUND_KIND (type->index_type ()) == PROP_LOCLIST)\n+\tif (type->index_type ()->bounds ()->high.kind () == PROP_LOCEXPR\n+\t    || type->index_type ()->bounds ()->high.kind () == PROP_LOCLIST)\n \t  fprintf_filtered (stream, \"; variable length\");\n \telse if (get_array_bounds (type, &low_bound, &high_bound))\n \t  fprintf_filtered (stream, \"; %s\","
    }
  ]
}