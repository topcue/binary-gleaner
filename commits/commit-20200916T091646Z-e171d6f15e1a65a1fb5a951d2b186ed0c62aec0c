{
  "sha": "e171d6f15e1a65a1fb5a951d2b186ed0c62aec0c",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZTE3MWQ2ZjE1ZTFhNjVhMWZiNWE5NTFkMmIxODZlZDBjNjJhZWMwYw==",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2020-07-03T17:46:16Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2020-09-16T09:16:46Z"
    },
    "message": "gdb: Convert la_filename_extensions to a method\n\nConvert language_data::la_filename_extensions member variable to a\nvirtual method language_defn::filename_extensions.\n\nThe new method returns a vector of filename extensions, which means\nthat where previously we needed a NULL marker on the end of the list,\nwe can now discard this.\n\nAll of the old arrays that contained the extensions now become static\ndata within each languages filename_extensions method.\n\nI've updated the single use of the filename_extensions method to make\nuse of this method returning a vector.  And, just in case anyone\naccidentally adds a NULL marked into a languages extensions list, I've\nadded a new assert in add_filename_language (symtab.c) to catch this.\n\ngdb/ChangeLog:\n\n\t* ada-lang.c (ada_extensions): Delete, moved into\n\tada_language::filename_extensions.\n\t(ada_language_data): Remove la_filename_extensions initializer.\n\t(ada_language::filename_extensions): New member function.\n\t* c-lang.c (c_extensions): Delete, moved into\n\tc_language::filename_extensions.\n\t(c_language_data): Remove la_filename_extensions initializer.\n\t(c_language::filename_extensions): New member function.\n\t(cplus_extensions): Delete, moved into\n\tcplus_language::filename_extensions.\n\t(cplus_language_data): Remove la_filename_extensions initializer.\n\t(cplus_language::filename_extensions): New member function.\n\t(asm_extensions): Delete, moved into\n\tasm_language::filename_extensions.\n\t(asm_language_data): Remove la_filename_extensions initializer.\n\t(asm_language::filename_extensions): New member function.\n\t(minimal_language_data): Remove la_filename_extensions\n\tinitializer.\n\t* d-lang.c (d_extensions): Delete, moved into\n\td_language::filename_extensions.\n\t(d_language_data): Remove la_filename_extensions initializer.\n\t(d_language::filename_extensions): New member function.\n\t* f-lang.c (f_extensions): Delete, moved into\n\tf_language::filename_extensions.\n\t(f_language_data): Remove la_filename_extensions initializer.\n\t(f_language::filename_extensions): New member function.\n\t* go-lang.c (go_language_data): Remove la_filename_extensions\n\tinitializer.\n\t* language.c (add_set_language_command): Update now that\n\tfilename_extensions returns a vector.\n\t(unknown_language_data): Remove la_filename_extensions\n\tinitializer.\n\t(auto_language_data): Likewise.\n\t* language.h (language_data): Remove la_filename_extensions field.\n\t(language_defn::filename_extensions): New member function.\n\t* m2-lang.c (m2_language_data): Remove la_filename_extensions\n\tinitializer.\n\t* objc-lang.c (objc_extensions): Delete, moved into\n\tobjc_language::filename_extensions.\n\t(objc_language_data): Remove la_filename_extensions initializer.\n\t(objc_language::filename_extensions): New member function.\n\t* opencl-lang.c (opencl_language_data): Remove\n\tla_filename_extensions initializer.\n\t* p-lang.c (pascal_extensions): Delete, moved into\n\tpascal_language::filename_extensions.\n\t(pascal_language_data): Remove la_filename_extensions initializer.\n\t(pascal_language::filename_extensions): New member function.\n\t* rust-lang.c (rust_extensions): Delete, moved into\n\trust_language::filename_extensions.\n\t(rust_language_data): Remove la_filename_extensions initializer.\n\t(rust_language::filename_extensions): New member function.\n\t* symfile.c (add_filename_language): Add new assert.",
    "tree": {
      "sha": "5d5fe46ff2eb9ff81ab28abb90126198fc9bf3b5",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/5d5fe46ff2eb9ff81ab28abb90126198fc9bf3b5"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/e171d6f15e1a65a1fb5a951d2b186ed0c62aec0c",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e171d6f15e1a65a1fb5a951d2b186ed0c62aec0c",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/e171d6f15e1a65a1fb5a951d2b186ed0c62aec0c",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e171d6f15e1a65a1fb5a951d2b186ed0c62aec0c/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "6f7664a9c33b110248d0fb68bcc41fdb48396c51",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6f7664a9c33b110248d0fb68bcc41fdb48396c51",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/6f7664a9c33b110248d0fb68bcc41fdb48396c51"
    }
  ],
  "stats": {
    "total": 222,
    "additions": 147,
    "deletions": 75
  },
  "files": [
    {
      "sha": "82a621de60e2a139e5b87f54154ec2d23cc404e9",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 55,
      "deletions": 0,
      "changes": 55,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e171d6f15e1a65a1fb5a951d2b186ed0c62aec0c/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e171d6f15e1a65a1fb5a951d2b186ed0c62aec0c/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=e171d6f15e1a65a1fb5a951d2b186ed0c62aec0c",
      "patch": "@@ -1,3 +1,58 @@\n+2020-09-16  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* ada-lang.c (ada_extensions): Delete, moved into\n+\tada_language::filename_extensions.\n+\t(ada_language_data): Remove la_filename_extensions initializer.\n+\t(ada_language::filename_extensions): New member function.\n+\t* c-lang.c (c_extensions): Delete, moved into\n+\tc_language::filename_extensions.\n+\t(c_language_data): Remove la_filename_extensions initializer.\n+\t(c_language::filename_extensions): New member function.\n+\t(cplus_extensions): Delete, moved into\n+\tcplus_language::filename_extensions.\n+\t(cplus_language_data): Remove la_filename_extensions initializer.\n+\t(cplus_language::filename_extensions): New member function.\n+\t(asm_extensions): Delete, moved into\n+\tasm_language::filename_extensions.\n+\t(asm_language_data): Remove la_filename_extensions initializer.\n+\t(asm_language::filename_extensions): New member function.\n+\t(minimal_language_data): Remove la_filename_extensions\n+\tinitializer.\n+\t* d-lang.c (d_extensions): Delete, moved into\n+\td_language::filename_extensions.\n+\t(d_language_data): Remove la_filename_extensions initializer.\n+\t(d_language::filename_extensions): New member function.\n+\t* f-lang.c (f_extensions): Delete, moved into\n+\tf_language::filename_extensions.\n+\t(f_language_data): Remove la_filename_extensions initializer.\n+\t(f_language::filename_extensions): New member function.\n+\t* go-lang.c (go_language_data): Remove la_filename_extensions\n+\tinitializer.\n+\t* language.c (add_set_language_command): Update now that\n+\tfilename_extensions returns a vector.\n+\t(unknown_language_data): Remove la_filename_extensions\n+\tinitializer.\n+\t(auto_language_data): Likewise.\n+\t* language.h (language_data): Remove la_filename_extensions field.\n+\t(language_defn::filename_extensions): New member function.\n+\t* m2-lang.c (m2_language_data): Remove la_filename_extensions\n+\tinitializer.\n+\t* objc-lang.c (objc_extensions): Delete, moved into\n+\tobjc_language::filename_extensions.\n+\t(objc_language_data): Remove la_filename_extensions initializer.\n+\t(objc_language::filename_extensions): New member function.\n+\t* opencl-lang.c (opencl_language_data): Remove\n+\tla_filename_extensions initializer.\n+\t* p-lang.c (pascal_extensions): Delete, moved into\n+\tpascal_language::filename_extensions.\n+\t(pascal_language_data): Remove la_filename_extensions initializer.\n+\t(pascal_language::filename_extensions): New member function.\n+\t* rust-lang.c (rust_extensions): Delete, moved into\n+\trust_language::filename_extensions.\n+\t(rust_language_data): Remove la_filename_extensions initializer.\n+\t(rust_language::filename_extensions): New member function.\n+\t* symfile.c (add_filename_language): Add new assert.\n+\n 2020-09-16  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* ada-lang.c (ada_language_data): Remove la_name and"
    },
    {
      "sha": "b9cd9a3cdcbcd7bdd075c53a8d5d00c8aa773e53",
      "filename": "gdb/ada-lang.c",
      "status": "modified",
      "additions": 9,
      "deletions": 6,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e171d6f15e1a65a1fb5a951d2b186ed0c62aec0c/gdb/ada-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e171d6f15e1a65a1fb5a951d2b186ed0c62aec0c/gdb/ada-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-lang.c?ref=e171d6f15e1a65a1fb5a951d2b186ed0c62aec0c",
      "patch": "@@ -13704,11 +13704,6 @@ ada_get_symbol_name_matcher (const lookup_name_info &lookup_name)\n     }\n }\n \n-static const char * const ada_extensions[] =\n-{\n-  \".adb\", \".ads\", \".a\", \".ada\", \".dg\", NULL\n-};\n-\n /* Constant data that describes the Ada language.  */\n \n extern const struct language_data ada_language_data =\n@@ -13719,7 +13714,6 @@ extern const struct language_data ada_language_data =\n                                    that's not quite what this means.  */\n   array_row_major,\n   macro_expansion_no,\n-  ada_extensions,\n   &ada_exp_descriptor,\n   true,                         /* la_store_sym_names_in_linkage_form_p */\n   ada_op_print_tab,             /* expression operators for printing */\n@@ -13747,6 +13741,15 @@ class ada_language : public language_defn\n   const char *natural_name () const override\n   { return \"Ada\"; }\n \n+  /* See language.h.  */\n+\n+  const std::vector<const char *> &filename_extensions () const override\n+  {\n+    static const std::vector<const char *> extensions\n+      = { \".adb\", \".ads\", \".a\", \".ada\", \".dg\" };\n+    return extensions;\n+  }\n+\n   /* Print an array element index using the Ada syntax.  */\n \n   void print_array_index (struct type *index_type,"
    },
    {
      "sha": "ce4620a136cb9ce75b1adb388f5ee6e7327b4d6b",
      "filename": "gdb/c-lang.c",
      "status": "modified",
      "additions": 26,
      "deletions": 19,
      "changes": 45,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e171d6f15e1a65a1fb5a951d2b186ed0c62aec0c/gdb/c-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e171d6f15e1a65a1fb5a951d2b186ed0c62aec0c/gdb/c-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/c-lang.c?ref=e171d6f15e1a65a1fb5a951d2b186ed0c62aec0c",
      "patch": "@@ -871,11 +871,6 @@ const struct exp_descriptor exp_descriptor_c =\n   evaluate_subexp_c\n };\n \n-static const char * const c_extensions[] =\n-{\n-  \".c\", NULL\n-};\n-\n /* Constant data that describes the C language.  */\n \n extern const struct language_data c_language_data =\n@@ -885,7 +880,6 @@ extern const struct language_data c_language_data =\n   case_sensitive_on,\n   array_row_major,\n   macro_expansion_c,\n-  c_extensions,\n   &exp_descriptor_c,\n   true,\t\t\t\t/* la_store_sym_names_in_linkage_form_p */\n   c_op_print_tab,\t\t/* expression operators for printing */\n@@ -913,6 +907,14 @@ class c_language : public language_defn\n   const char *natural_name () const override\n   { return \"C\"; }\n \n+  /* See language.h.  */\n+\n+  const std::vector<const char *> &filename_extensions () const override\n+  {\n+    static const std::vector<const char *> extensions = { \".c\" };\n+    return extensions;\n+  }\n+\n   /* See language.h.  */\n   void language_arch_info (struct gdbarch *gdbarch,\n \t\t\t   struct language_arch_info *lai) const override\n@@ -978,11 +980,6 @@ enum cplus_primitive_types {\n   nr_cplus_primitive_types\n };\n \n-static const char * const cplus_extensions[] =\n-{\n-  \".C\", \".cc\", \".cp\", \".cpp\", \".cxx\", \".c++\", NULL\n-};\n-\n /* Constant data that describes the C++ language.  */\n \n extern const struct language_data cplus_language_data =\n@@ -992,7 +989,6 @@ extern const struct language_data cplus_language_data =\n   case_sensitive_on,\n   array_row_major,\n   macro_expansion_c,\n-  cplus_extensions,\n   &exp_descriptor_c,\n   false,\t\t\t/* la_store_sym_names_in_linkage_form_p */\n   c_op_print_tab,\t\t/* expression operators for printing */\n@@ -1022,6 +1018,15 @@ class cplus_language : public language_defn\n \n   /* See language.h.  */\n \n+  const std::vector<const char *> &filename_extensions () const override\n+  {\n+    static const std::vector<const char *> extensions\n+      = { \".C\", \".cc\", \".cp\", \".cpp\", \".cxx\", \".c++\" };\n+    return extensions;\n+  }\n+\n+  /* See language.h.  */\n+\n   struct language_pass_by_ref_info pass_by_reference_info\n \t(struct type *type) const override\n   {\n@@ -1187,11 +1192,6 @@ class cplus_language : public language_defn\n \n static cplus_language cplus_language_defn;\n \n-static const char * const asm_extensions[] =\n-{\n-  \".s\", \".sx\", \".S\", NULL\n-};\n-\n /* Constant data that describes the ASM language.  */\n \n extern const struct language_data asm_language_data =\n@@ -1201,7 +1201,6 @@ extern const struct language_data asm_language_data =\n   case_sensitive_on,\n   array_row_major,\n   macro_expansion_c,\n-  asm_extensions,\n   &exp_descriptor_c,\n   true,\t\t\t\t/* la_store_sym_names_in_linkage_form_p */\n   c_op_print_tab,\t\t/* expression operators for printing */\n@@ -1229,6 +1228,15 @@ class asm_language : public language_defn\n   const char *natural_name () const override\n   { return \"Assembly\"; }\n \n+  /* See language.h.  */\n+\n+  const std::vector<const char *> &filename_extensions () const override\n+  {\n+    static const std::vector<const char *> extensions\n+      = { \".s\", \".sx\", \".S\" };\n+    return extensions;\n+  }\n+\n   /* See language.h.\n \n      FIXME: Should this have its own arch info method?  */\n@@ -1263,7 +1271,6 @@ extern const struct language_data minimal_language_data =\n   case_sensitive_on,\n   array_row_major,\n   macro_expansion_c,\n-  NULL,\n   &exp_descriptor_c,\n   true,\t\t\t\t/* la_store_sym_names_in_linkage_form_p */\n   c_op_print_tab,\t\t/* expression operators for printing */"
    },
    {
      "sha": "2c0ea3865cd95ee4bc3ea27477ddbe1aea027b87",
      "filename": "gdb/d-lang.c",
      "status": "modified",
      "additions": 8,
      "deletions": 6,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e171d6f15e1a65a1fb5a951d2b186ed0c62aec0c/gdb/d-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e171d6f15e1a65a1fb5a951d2b186ed0c62aec0c/gdb/d-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/d-lang.c?ref=e171d6f15e1a65a1fb5a951d2b186ed0c62aec0c",
      "patch": "@@ -124,11 +124,6 @@ enum d_primitive_types {\n   nr_d_primitive_types\n };\n \n-static const char * const d_extensions[] =\n-{\n-  \".d\", NULL\n-};\n-\n /* Constant data that describes the D language.  */\n \n extern const struct language_data d_language_data =\n@@ -138,7 +133,6 @@ extern const struct language_data d_language_data =\n   case_sensitive_on,\n   array_row_major,\n   macro_expansion_no,\n-  d_extensions,\n   &exp_descriptor_c,\n   false,\t\t\t/* la_store_sym_names_in_linkage_form_p */\n   d_op_print_tab,\t\t/* Expression operators for printing.  */\n@@ -166,6 +160,14 @@ class d_language : public language_defn\n   const char *natural_name () const override\n   { return \"D\"; }\n \n+  /* See language.h.  */\n+\n+  const std::vector<const char *> &filename_extensions () const override\n+  {\n+    static const std::vector<const char *> extensions = { \".d\" };\n+    return extensions;\n+  }\n+\n   /* See language.h.  */\n   void language_arch_info (struct gdbarch *gdbarch,\n \t\t\t   struct language_arch_info *lai) const override"
    },
    {
      "sha": "2c4d5231c62ffd9b18e3c85b68f59c2ff742b9c3",
      "filename": "gdb/f-lang.c",
      "status": "modified",
      "additions": 11,
      "deletions": 8,
      "changes": 19,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e171d6f15e1a65a1fb5a951d2b186ed0c62aec0c/gdb/f-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e171d6f15e1a65a1fb5a951d2b186ed0c62aec0c/gdb/f-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/f-lang.c?ref=e171d6f15e1a65a1fb5a951d2b186ed0c62aec0c",
      "patch": "@@ -471,13 +471,6 @@ operator_check_f (struct expression *exp, int pos,\n   return 0;\n }\n \n-static const char * const f_extensions[] =\n-{\n-  \".f\", \".F\", \".for\", \".FOR\", \".ftn\", \".FTN\", \".fpp\", \".FPP\",\n-  \".f90\", \".F90\", \".f95\", \".F95\", \".f03\", \".F03\", \".f08\", \".F08\",\n-  NULL\n-};\n-\n /* Expression processing for Fortran.  */\n static const struct exp_descriptor exp_descriptor_f =\n {\n@@ -498,7 +491,6 @@ extern const struct language_data f_language_data =\n   case_sensitive_off,\n   array_column_major,\n   macro_expansion_no,\n-  f_extensions,\n   &exp_descriptor_f,\n   false,\t\t\t/* la_store_sym_names_in_linkage_form_p */\n   f_op_print_tab,\t\t/* expression operators for printing */\n@@ -526,6 +518,17 @@ class f_language : public language_defn\n   const char *natural_name () const override\n   { return \"Fortran\"; }\n \n+  /* See language.h.  */\n+\n+  const std::vector<const char *> &filename_extensions () const override\n+  {\n+    static const std::vector<const char *> extensions = {\n+      \".f\", \".F\", \".for\", \".FOR\", \".ftn\", \".FTN\", \".fpp\", \".FPP\",\n+      \".f90\", \".F90\", \".f95\", \".F95\", \".f03\", \".F03\", \".f08\", \".F08\"\n+    };\n+    return extensions;\n+  }\n+\n   /* See language.h.  */\n   void language_arch_info (struct gdbarch *gdbarch,\n \t\t\t   struct language_arch_info *lai) const override"
    },
    {
      "sha": "13fa0edb9a118eb81becc1f1b7627043c880f8f1",
      "filename": "gdb/go-lang.c",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e171d6f15e1a65a1fb5a951d2b186ed0c62aec0c/gdb/go-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e171d6f15e1a65a1fb5a951d2b186ed0c62aec0c/gdb/go-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/go-lang.c?ref=e171d6f15e1a65a1fb5a951d2b186ed0c62aec0c",
      "patch": "@@ -513,7 +513,6 @@ extern const struct language_data go_language_data =\n   case_sensitive_on,\n   array_row_major,\n   macro_expansion_no,\n-  NULL,\n   &exp_descriptor_c,\n   false,\t\t\t/* la_store_sym_names_in_linkage_form_p */\n   go_op_print_tab,\t\t/* Expression operators for printing.  */"
    },
    {
      "sha": "cc4076253a5bc396cf7dacc814f2ea433384eb31",
      "filename": "gdb/language.c",
      "status": "modified",
      "additions": 2,
      "deletions": 8,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e171d6f15e1a65a1fb5a951d2b186ed0c62aec0c/gdb/language.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e171d6f15e1a65a1fb5a951d2b186ed0c62aec0c/gdb/language.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/language.c?ref=e171d6f15e1a65a1fb5a951d2b186ed0c62aec0c",
      "patch": "@@ -503,12 +503,8 @@ add_set_language_command ()\n \n   /* Add the filename extensions.  */\n   for (const auto &lang : language_defn::languages)\n-    if (lang->la_filename_extensions != NULL)\n-      {\n-\tfor (size_t i = 0; lang->la_filename_extensions[i] != NULL; ++i)\n-\t  add_filename_language (lang->la_filename_extensions[i],\n-\t\t\t\t lang->la_language);\n-      }\n+    for (const char * const &ext : lang->filename_extensions ())\n+      add_filename_language (ext, lang->la_language);\n \n   /* Build the \"help set language\" docs.  */\n   string_file doc;\n@@ -784,7 +780,6 @@ extern const struct language_data unknown_language_data =\n   case_sensitive_on,\n   array_row_major,\n   macro_expansion_no,\n-  NULL,\n   &exp_descriptor_standard,\n   true,\t\t\t\t/* store_sym_names_in_linkage_form_p */\n   unk_op_print_tab,\t\t/* expression operators for printing */\n@@ -921,7 +916,6 @@ extern const struct language_data auto_language_data =\n   case_sensitive_on,\n   array_row_major,\n   macro_expansion_no,\n-  NULL,\n   &exp_descriptor_standard,\n   false,\t\t\t/* store_sym_names_in_linkage_form_p */\n   unk_op_print_tab,\t\t/* expression operators for printing */"
    },
    {
      "sha": "9a7ad214d88ee0407734f7d53a7624a0c5ce9c56",
      "filename": "gdb/language.h",
      "status": "modified",
      "additions": 11,
      "deletions": 7,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e171d6f15e1a65a1fb5a951d2b186ed0c62aec0c/gdb/language.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e171d6f15e1a65a1fb5a951d2b186ed0c62aec0c/gdb/language.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/language.h?ref=e171d6f15e1a65a1fb5a951d2b186ed0c62aec0c",
      "patch": "@@ -205,13 +205,6 @@ struct language_data\n     /* Style of macro expansion, if any, supported by this language.  */\n     enum macro_expansion la_macro_expansion;\n \n-    /* A NULL-terminated array of file extensions for this language.\n-       The extension must include the \".\", like \".c\".  If this\n-       language doesn't need to provide any filename extensions, this\n-       may be NULL.  */\n-\n-    const char *const *la_filename_extensions;\n-\n     /* Definitions related to expression printing, prefixifying, and\n        dumping.  */\n \n@@ -275,6 +268,17 @@ struct language_defn : language_data\n \n   virtual const char *natural_name () const = 0;\n \n+  /* Return a vector of file extensions for this language.  The extension\n+     must include the \".\", like \".c\".  If this language doesn't need to\n+     provide any filename extensions, this may be an empty vector (which is\n+     the default).  */\n+\n+  virtual const std::vector<const char *> &filename_extensions () const\n+  {\n+    static const std::vector<const char *> no_extensions;\n+    return no_extensions;\n+  }\n+\n   /* Print the index of an element of an array.  This default\n      implementation prints using C99 syntax.  */\n "
    },
    {
      "sha": "ef4153811698c62cd31d599bda28cd8c982e64e2",
      "filename": "gdb/m2-lang.c",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e171d6f15e1a65a1fb5a951d2b186ed0c62aec0c/gdb/m2-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e171d6f15e1a65a1fb5a951d2b186ed0c62aec0c/gdb/m2-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/m2-lang.c?ref=e171d6f15e1a65a1fb5a951d2b186ed0c62aec0c",
      "patch": "@@ -204,7 +204,6 @@ extern const struct language_data m2_language_data =\n   case_sensitive_on,\n   array_row_major,\n   macro_expansion_no,\n-  NULL,\n   &exp_descriptor_modula2,\n   false,\t\t\t/* la_store_sym_names_in_linkage_form_p */\n   m2_op_print_tab,\t\t/* expression operators for printing */"
    },
    {
      "sha": "ff9735e59d9be41e3880acb96576f95b0c3537d7",
      "filename": "gdb/objc-lang.c",
      "status": "modified",
      "additions": 8,
      "deletions": 6,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e171d6f15e1a65a1fb5a951d2b186ed0c62aec0c/gdb/objc-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e171d6f15e1a65a1fb5a951d2b186ed0c62aec0c/gdb/objc-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/objc-lang.c?ref=e171d6f15e1a65a1fb5a951d2b186ed0c62aec0c",
      "patch": "@@ -319,11 +319,6 @@ static const struct op_print objc_op_print_tab[] =\n     {NULL, OP_NULL, PREC_NULL, 0}\n };\n \n-static const char * const objc_extensions[] =\n-{\n-  \".m\", NULL\n-};\n-\n /* Constant data representing the Objective-C language.  */\n \n extern const struct language_data objc_language_data =\n@@ -333,7 +328,6 @@ extern const struct language_data objc_language_data =\n   case_sensitive_on,\n   array_row_major,\n   macro_expansion_c,\n-  objc_extensions,\n   &exp_descriptor_standard,\n   false,\t\t\t/* la_store_sym_names_in_linkage_form_p */\n   objc_op_print_tab,\t\t/* Expression operators for printing */\n@@ -361,6 +355,14 @@ class objc_language : public language_defn\n   const char *natural_name () const override\n   { return \"Objective-C\"; }\n \n+  /* See language.h.  */\n+\n+  const std::vector<const char *> &filename_extensions () const override\n+  {\n+    static const std::vector<const char *> extensions = { \".m\" };\n+    return extensions;\n+  }\n+\n   /* See language.h.  */\n   void language_arch_info (struct gdbarch *gdbarch,\n \t\t\t   struct language_arch_info *lai) const override"
    },
    {
      "sha": "a8d485777523a6c07941ca717fa2ec4bb8a24714",
      "filename": "gdb/opencl-lang.c",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e171d6f15e1a65a1fb5a951d2b186ed0c62aec0c/gdb/opencl-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e171d6f15e1a65a1fb5a951d2b186ed0c62aec0c/gdb/opencl-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/opencl-lang.c?ref=e171d6f15e1a65a1fb5a951d2b186ed0c62aec0c",
      "patch": "@@ -1011,7 +1011,6 @@ extern const struct language_data opencl_language_data =\n   case_sensitive_on,\n   array_row_major,\n   macro_expansion_c,\n-  NULL,\n   &exp_descriptor_opencl,\n   false,\t\t\t/* la_store_sym_names_in_linkage_form_p */\n   c_op_print_tab,\t\t/* expression operators for printing */"
    },
    {
      "sha": "da48a52a9abc65094762448898e6880d06cf4e83",
      "filename": "gdb/p-lang.c",
      "status": "modified",
      "additions": 8,
      "deletions": 6,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e171d6f15e1a65a1fb5a951d2b186ed0c62aec0c/gdb/p-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e171d6f15e1a65a1fb5a951d2b186ed0c62aec0c/gdb/p-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/p-lang.c?ref=e171d6f15e1a65a1fb5a951d2b186ed0c62aec0c",
      "patch": "@@ -248,11 +248,6 @@ enum pascal_primitive_types {\n   nr_pascal_primitive_types\n };\n \n-static const char * const p_extensions[] =\n-{\n-  \".pas\", \".p\", \".pp\", NULL\n-};\n-\n /* Constant data representing the Pascal language.  */\n \n extern const struct language_data pascal_language_data =\n@@ -262,7 +257,6 @@ extern const struct language_data pascal_language_data =\n   case_sensitive_on,\n   array_row_major,\n   macro_expansion_no,\n-  p_extensions,\n   &exp_descriptor_standard,\n   false,\t\t\t/* la_store_sym_names_in_linkage_form_p */\n   pascal_op_print_tab,\t\t/* expression operators for printing */\n@@ -290,6 +284,14 @@ class pascal_language : public language_defn\n   const char *natural_name () const override\n   { return \"Pascal\"; }\n \n+  /* See language.h.  */\n+\n+  const std::vector<const char *> &filename_extensions () const override\n+  {\n+    static const std::vector<const char *> extensions\n+      = { \".pas\", \".p\", \".pp\" };\n+    return extensions;\n+  }\n \n   /* See language.h.  */\n   void language_arch_info (struct gdbarch *gdbarch,"
    },
    {
      "sha": "a7b58351839ad7c066cfffcde0e21a428c465907",
      "filename": "gdb/rust-lang.c",
      "status": "modified",
      "additions": 8,
      "deletions": 6,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e171d6f15e1a65a1fb5a951d2b186ed0c62aec0c/gdb/rust-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e171d6f15e1a65a1fb5a951d2b186ed0c62aec0c/gdb/rust-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/rust-lang.c?ref=e171d6f15e1a65a1fb5a951d2b186ed0c62aec0c",
      "patch": "@@ -1897,11 +1897,6 @@ static const struct exp_descriptor exp_descriptor_rust =\n   rust_evaluate_subexp\n };\n \n-static const char * const rust_extensions[] =\n-{\n-  \".rs\", NULL\n-};\n-\n /* Constant data representing the Rust language.  */\n \n extern const struct language_data rust_language_data =\n@@ -1911,7 +1906,6 @@ extern const struct language_data rust_language_data =\n   case_sensitive_on,\n   array_row_major,\n   macro_expansion_no,\n-  rust_extensions,\n   &exp_descriptor_rust,\n   false,\t\t\t/* la_store_sym_names_in_linkage_form_p */\n   c_op_print_tab,\t\t/* expression operators for printing */\n@@ -1939,6 +1933,14 @@ class rust_language : public language_defn\n   const char *natural_name () const override\n   { return \"Rust\"; }\n \n+  /* See language.h.  */\n+\n+  const std::vector<const char *> &filename_extensions () const override\n+  {\n+    static const std::vector<const char *> extensions = { \".rs\" };\n+    return extensions;\n+  }\n+\n   /* See language.h.  */\n   void language_arch_info (struct gdbarch *gdbarch,\n \t\t\t   struct language_arch_info *lai) const override"
    },
    {
      "sha": "d5aa11fef9e07204f7ec971a7f9c6f08a09119b5",
      "filename": "gdb/symfile.c",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e171d6f15e1a65a1fb5a951d2b186ed0c62aec0c/gdb/symfile.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e171d6f15e1a65a1fb5a951d2b186ed0c62aec0c/gdb/symfile.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symfile.c?ref=e171d6f15e1a65a1fb5a951d2b186ed0c62aec0c",
      "patch": "@@ -2672,6 +2672,7 @@ static std::vector<filename_language> filename_language_table;\n void\n add_filename_language (const char *ext, enum language lang)\n {\n+  gdb_assert (ext != nullptr);\n   filename_language_table.emplace_back (ext, lang);\n }\n "
    }
  ]
}