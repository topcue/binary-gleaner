{
  "sha": "27e69b7aedcfee8af8fc6ee4f2e99aca2d41daca",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MjdlNjliN2FlZGNmZWU4YWY4ZmM2ZWU0ZjJlOTlhY2EyZDQxZGFjYQ==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-09-14T15:08:00Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-09-14T15:08:00Z"
    },
    "message": "gdb: add type::is_prototyped / type::set_is_prototyped\n\nAdd the `is_prototyped` and `set_is_prototyped` methods on `struct\ntype`, in order to remove the `TYPE_PROTOTYPED` macro.  In this patch,\nthe macro is changed to use the getter, so all the call sites of the\nmacro that are used as a setter are changed to use the setter method\ndirectly.  The next patch will remove the macro completely.\n\ngdb/ChangeLog:\n\n\t* gdbtypes.h (struct type) <is_prototyped, set_is_prototyped>:\n\tNew methods.\n\t(TYPE_PROTOTYPED): Use type::is_prototyped, change all write\n\tcall sites to use type::set_is_prototyped.\n\nChange-Id: I6ba285250fae413f7c1bf2ffcb5a2cedc8e743da",
    "tree": {
      "sha": "d092d44a3e9cba662112047179bb295e5c5b3154",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/d092d44a3e9cba662112047179bb295e5c5b3154"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/27e69b7aedcfee8af8fc6ee4f2e99aca2d41daca",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/27e69b7aedcfee8af8fc6ee4f2e99aca2d41daca",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/27e69b7aedcfee8af8fc6ee4f2e99aca2d41daca",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/27e69b7aedcfee8af8fc6ee4f2e99aca2d41daca/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "d21839680655c071a811de1d7b41f8d7de4fc462",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d21839680655c071a811de1d7b41f8d7de4fc462",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/d21839680655c071a811de1d7b41f8d7de4fc462"
    }
  ],
  "stats": {
    "total": 37,
    "additions": 27,
    "deletions": 10
  },
  "files": [
    {
      "sha": "05cb60a3787583f34764f7a04383f719c8360e24",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/27e69b7aedcfee8af8fc6ee4f2e99aca2d41daca/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/27e69b7aedcfee8af8fc6ee4f2e99aca2d41daca/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=27e69b7aedcfee8af8fc6ee4f2e99aca2d41daca",
      "patch": "@@ -1,3 +1,10 @@\n+2020-09-14  Simon Marchi  <simon.marchi@efficios.com>\n+\n+\t* gdbtypes.h (struct type) <is_prototyped, set_is_prototyped>:\n+\tNew methods.\n+\t(TYPE_PROTOTYPED): Use type::is_prototyped, change all write\n+\tcall sites to use type::set_is_prototyped.\n+\n 2020-09-14  Simon Marchi  <simon.marchi@efficios.com>\n \n \t* gdbtypes.h (TYPE_TARGET_STUB): Remove, replace all"
    },
    {
      "sha": "f4f3a029a769474459106e320e02a7ebba9e4414",
      "filename": "gdb/dwarf2/read.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/27e69b7aedcfee8af8fc6ee4f2e99aca2d41daca/gdb/dwarf2/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/27e69b7aedcfee8af8fc6ee4f2e99aca2d41daca/gdb/dwarf2/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.c?ref=27e69b7aedcfee8af8fc6ee4f2e99aca2d41daca",
      "patch": "@@ -17665,7 +17665,7 @@ read_subroutine_type (struct die_info *die, struct dwarf2_cu *cu)\n   ftype = lookup_function_type (type);\n \n   if (prototyped_function_p (die, cu))\n-    TYPE_PROTOTYPED (ftype) = 1;\n+    ftype->set_is_prototyped (true);\n \n   /* Store the calling convention in the type if it's available in\n      the subroutine die.  Otherwise set the calling convention to"
    },
    {
      "sha": "7f9515b2c1105195d6afdcc3e011d492ccee7c44",
      "filename": "gdb/eval.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/27e69b7aedcfee8af8fc6ee4f2e99aca2d41daca/gdb/eval.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/27e69b7aedcfee8af8fc6ee4f2e99aca2d41daca/gdb/eval.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/eval.c?ref=27e69b7aedcfee8af8fc6ee4f2e99aca2d41daca",
      "patch": "@@ -673,7 +673,7 @@ fake_method::fake_method (type_instance_flags flags,\n \t  --num_types;\n \t  /* Caller should have ensured this.  */\n \t  gdb_assert (num_types == 0);\n-\t  TYPE_PROTOTYPED (type) = 1;\n+\t  type->set_is_prototyped (true);\n \t}\n     }\n "
    },
    {
      "sha": "075363000b4fb8091717b7bd174cc8f3178233f9",
      "filename": "gdb/gdbtypes.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/27e69b7aedcfee8af8fc6ee4f2e99aca2d41daca/gdb/gdbtypes.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/27e69b7aedcfee8af8fc6ee4f2e99aca2d41daca/gdb/gdbtypes.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbtypes.c?ref=27e69b7aedcfee8af8fc6ee4f2e99aca2d41daca",
      "patch": "@@ -560,10 +560,10 @@ lookup_function_type_with_arguments (struct type *type,\n \t  --nparams;\n \t  /* Caller should have ensured this.  */\n \t  gdb_assert (nparams == 0);\n-\t  TYPE_PROTOTYPED (fn) = 1;\n+\t  fn->set_is_prototyped (true);\n \t}\n       else\n-\tTYPE_PROTOTYPED (fn) = 1;\n+\tfn->set_is_prototyped (true);\n     }\n \n   fn->set_num_fields (nparams);"
    },
    {
      "sha": "b41e91f6ee6d2439d2e5b8fa156f7981a27b2b41",
      "filename": "gdb/gdbtypes.h",
      "status": "modified",
      "additions": 12,
      "deletions": 2,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/27e69b7aedcfee8af8fc6ee4f2e99aca2d41daca/gdb/gdbtypes.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/27e69b7aedcfee8af8fc6ee4f2e99aca2d41daca/gdb/gdbtypes.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbtypes.h?ref=27e69b7aedcfee8af8fc6ee4f2e99aca2d41daca",
      "patch": "@@ -221,7 +221,7 @@ DEF_ENUM_FLAGS_TYPE (enum type_instance_flag_value, type_instance_flags);\n    to coerce the args, or to just do the standard conversions.  This\n    is used with a short field.  */\n \n-#define TYPE_PROTOTYPED(t)\t(TYPE_MAIN_TYPE (t)->flag_prototyped)\n+#define TYPE_PROTOTYPED(t)\t((t)->is_prototyped ())\n \n /* * FIXME drow/2002-06-03:  Only used for methods, but applies as well\n    to functions.  */\n@@ -834,7 +834,7 @@ struct main_type\n   unsigned int m_flag_nosign : 1;\n   unsigned int m_flag_stub : 1;\n   unsigned int m_flag_target_stub : 1;\n-  unsigned int flag_prototyped : 1;\n+  unsigned int m_flag_prototyped : 1;\n   unsigned int flag_varargs : 1;\n   unsigned int flag_vector : 1;\n   unsigned int flag_stub_supported : 1;\n@@ -1100,6 +1100,16 @@ struct type\n     this->main_type->m_flag_target_stub = target_is_stub;\n   }\n \n+  bool is_prototyped () const\n+  {\n+    return this->main_type->m_flag_prototyped;\n+  }\n+\n+  void set_is_prototyped (bool is_prototyped)\n+  {\n+    this->main_type->m_flag_prototyped = is_prototyped;\n+  }\n+\n   /* * Return the dynamic property of the requested KIND from this type's\n      list of dynamic properties.  */\n   dynamic_prop *dyn_prop (dynamic_prop_node_kind kind) const;"
    },
    {
      "sha": "480b67b0e86ff64ded3ab6cf574e587ff184c2f1",
      "filename": "gdb/mdebugread.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/27e69b7aedcfee8af8fc6ee4f2e99aca2d41daca/gdb/mdebugread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/27e69b7aedcfee8af8fc6ee4f2e99aca2d41daca/gdb/mdebugread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/mdebugread.c?ref=27e69b7aedcfee8af8fc6ee4f2e99aca2d41daca",
      "patch": "@@ -786,7 +786,7 @@ parse_symbol (SYMR *sh, union aux_ext *ax, char *ext_sh, int bigend,\n       /* All functions in C++ have prototypes.  For C we don't have enough\n          information in the debug info.  */\n       if (s->language () == language_cplus)\n-\tTYPE_PROTOTYPED (SYMBOL_TYPE (s)) = 1;\n+\tSYMBOL_TYPE (s)->set_is_prototyped (true);\n \n       /* Create and enter a new lexical context.  */\n       b = new_block (FUNCTION_BLOCK, s->language ());"
    },
    {
      "sha": "2f9458ce186490a42458ce1e2187e3ffde04e1ca",
      "filename": "gdb/stabsread.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/27e69b7aedcfee8af8fc6ee4f2e99aca2d41daca/gdb/stabsread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/27e69b7aedcfee8af8fc6ee4f2e99aca2d41daca/gdb/stabsread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/stabsread.c?ref=27e69b7aedcfee8af8fc6ee4f2e99aca2d41daca",
      "patch": "@@ -958,7 +958,7 @@ define_symbol (CORE_ADDR valu, const char *string, int desc, int type,\n          than the \"declared-as\" type for unprototyped functions, so\n          we treat all functions as if they were prototyped.  This is used\n          primarily for promotion when calling the function from GDB.  */\n-      TYPE_PROTOTYPED (SYMBOL_TYPE (sym)) = 1;\n+      SYMBOL_TYPE (sym)->set_is_prototyped (true);\n \n       /* fall into process_prototype_types.  */\n \n@@ -1005,7 +1005,7 @@ define_symbol (CORE_ADDR valu, const char *string, int desc, int type,\n \t      TYPE_FIELD_ARTIFICIAL (ftype, nparams++) = 0;\n \t    }\n \t  ftype->set_num_fields (nparams);\n-\t  TYPE_PROTOTYPED (ftype) = 1;\n+\t  ftype->set_is_prototyped (true);\n \t}\n       break;\n \n@@ -1813,7 +1813,7 @@ read_type (const char **pp, struct objfile *objfile)\n             func_type->field (i).set_type (t->type);\n         }\n         func_type->set_num_fields (num_args);\n-        TYPE_PROTOTYPED (func_type) = 1;\n+\tfunc_type->set_is_prototyped (true);\n \n         type = func_type;\n         break;"
    }
  ]
}