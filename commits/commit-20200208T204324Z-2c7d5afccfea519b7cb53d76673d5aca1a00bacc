{
  "sha": "2c7d5afccfea519b7cb53d76673d5aca1a00bacc",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MmM3ZDVhZmNjZmVhNTE5YjdjYjUzZDc2NjczZDVhY2ExYTAwYmFjYw==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-02-08T20:40:54Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-02-08T20:43:24Z"
    },
    "message": "Convert dwarf2_section_size to a method\n\nThis changes dwarf2_section_size to be a method on\ndwarf2_section_info.\n\n2020-02-08  Tom Tromey  <tom@tromey.com>\n\n\t* dwarf2/read.c (dwarf2_section_size): Remove.\n\t(error_check_comp_unit_head, dwarf2_symbol_mark_computed):\n\tUpdate.\n\t* dwarf2/section.h (struct dwarf2_section_info) <get_size>: New method.\n\nChange-Id: I12928fee5c84350ce98883e329357b86888d639b",
    "tree": {
      "sha": "eceda2f1e3d22ca4ba21c72475baf1d05f4ec1cc",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/eceda2f1e3d22ca4ba21c72475baf1d05f4ec1cc"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/2c7d5afccfea519b7cb53d76673d5aca1a00bacc",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2c7d5afccfea519b7cb53d76673d5aca1a00bacc",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/2c7d5afccfea519b7cb53d76673d5aca1a00bacc",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/2c7d5afccfea519b7cb53d76673d5aca1a00bacc/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "4075cb26687ec6bbd5bab31b6b33f692a3ed3108",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4075cb26687ec6bbd5bab31b6b33f692a3ed3108",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/4075cb26687ec6bbd5bab31b6b33f692a3ed3108"
    }
  ],
  "stats": {
    "total": 40,
    "additions": 22,
    "deletions": 18
  },
  "files": [
    {
      "sha": "10c8bf5baf082e8c16cfea6791d790d529bc22c5",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2c7d5afccfea519b7cb53d76673d5aca1a00bacc/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2c7d5afccfea519b7cb53d76673d5aca1a00bacc/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=2c7d5afccfea519b7cb53d76673d5aca1a00bacc",
      "patch": "@@ -1,3 +1,10 @@\n+2020-02-08  Tom Tromey  <tom@tromey.com>\n+\n+\t* dwarf2/read.c (dwarf2_section_size): Remove.\n+\t(error_check_comp_unit_head, dwarf2_symbol_mark_computed):\n+\tUpdate.\n+\t* dwarf2/section.h (struct dwarf2_section_info) <get_size>: New method.\n+\n 2020-02-08  Tom Tromey  <tom@tromey.com>\n \n \t* dwarf2/read.c (read_initial_length): Move to leb.c."
    },
    {
      "sha": "2ba53a14ef8dc33f9e35e7dc4e7258147dfc6923",
      "filename": "gdb/dwarf2/read.c",
      "status": "modified",
      "additions": 2,
      "deletions": 18,
      "changes": 20,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2c7d5afccfea519b7cb53d76673d5aca1a00bacc/gdb/dwarf2/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2c7d5afccfea519b7cb53d76673d5aca1a00bacc/gdb/dwarf2/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.c?ref=2c7d5afccfea519b7cb53d76673d5aca1a00bacc",
      "patch": "@@ -2073,22 +2073,6 @@ dwarf2_per_objfile::locate_sections (bfd *abfd, asection *sectp,\n     this->has_section_at_zero = true;\n }\n \n-/* A helper function that returns the size of a section in a safe way.\n-   If you are positive that the section has been read before using the\n-   size, then it is safe to refer to the dwarf2_section_info object's\n-   \"size\" field directly.  In other cases, you must call this\n-   function, because for compressed sections the size field is not set\n-   correctly until the section has been read.  */\n-\n-static bfd_size_type\n-dwarf2_section_size (struct objfile *objfile,\n-\t\t     struct dwarf2_section_info *info)\n-{\n-  if (!info->readin)\n-    info->read (objfile);\n-  return info->size;\n-}\n-\n /* Fill in SECTP, BUFP and SIZEP with section info, given OBJFILE and\n    SECTION_NAME.  */\n \n@@ -6092,7 +6076,7 @@ error_check_comp_unit_head (struct dwarf2_per_objfile *dwarf2_per_objfile,\n   const char *filename = section->get_file_name ();\n \n   if (to_underlying (header->abbrev_sect_off)\n-      >= dwarf2_section_size (dwarf2_per_objfile->objfile, abbrev_section))\n+      >= abbrev_section->get_size (dwarf2_per_objfile->objfile))\n     error (_(\"Dwarf Error: bad offset (%s) in compilation unit header \"\n \t   \"(offset %s + 6) [in module %s]\"),\n \t   sect_offset_str (header->abbrev_sect_off),\n@@ -24395,7 +24379,7 @@ dwarf2_symbol_mark_computed (const struct attribute *attr, struct symbol *sym,\n       /* .debug_loc{,.dwo} may not exist at all, or the offset may be outside\n \t the section.  If so, fall through to the complaint in the\n \t other branch.  */\n-      && DW_UNSND (attr) < dwarf2_section_size (objfile, section))\n+      && DW_UNSND (attr) < section->get_size (objfile))\n     {\n       struct dwarf2_loclist_baton *baton;\n "
    },
    {
      "sha": "8ddedcaf76171b384d4235da81ba10b04678ed2e",
      "filename": "gdb/dwarf2/section.h",
      "status": "modified",
      "additions": 13,
      "deletions": 0,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/2c7d5afccfea519b7cb53d76673d5aca1a00bacc/gdb/dwarf2/section.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/2c7d5afccfea519b7cb53d76673d5aca1a00bacc/gdb/dwarf2/section.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/section.h?ref=2c7d5afccfea519b7cb53d76673d5aca1a00bacc",
      "patch": "@@ -81,6 +81,19 @@ struct dwarf2_section_info\n      If the section is compressed, uncompress it before returning.  */\n   void read (struct objfile *objfile);\n \n+  /* A helper function that returns the size of a section in a safe way.\n+     If you are positive that the section has been read before using the\n+     size, then it is safe to refer to the dwarf2_section_info object's\n+     \"size\" field directly.  In other cases, you must call this\n+     function, because for compressed sections the size field is not set\n+     correctly until the section has been read.  */\n+  bfd_size_type get_size (struct objfile *objfile)\n+  {\n+    if (!readin)\n+      read (objfile);\n+    return size;\n+  }\n+\n   union\n   {\n     /* If this is a real section, the bfd section.  */"
    }
  ]
}