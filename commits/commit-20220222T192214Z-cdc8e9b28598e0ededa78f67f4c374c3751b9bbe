{
  "sha": "cdc8e9b28598e0ededa78f67f4c374c3751b9bbe",
  "node_id": "C_kwDOANOeidoAKGNkYzhlOWIyODU5OGUwZWRlZGE3OGY2N2Y0YzM3NGMzNzUxYjliYmU",
  "commit": {
    "author": {
      "name": "John Baldwin",
      "email": "jhb@FreeBSD.org",
      "date": "2022-02-22T19:22:14Z"
    },
    "committer": {
      "name": "John Baldwin",
      "email": "jhb@FreeBSD.org",
      "date": "2022-02-22T19:22:14Z"
    },
    "message": "gdbserver linux-low: Convert linux_event_pipe to the event_pipe class.\n\nUse event_pipe from gdbsupport in place of the existing file\ndescriptor array.",
    "tree": {
      "sha": "a34d6a4348cef53575b4db630d7ed9a4efae5251",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/a34d6a4348cef53575b4db630d7ed9a4efae5251"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/cdc8e9b28598e0ededa78f67f4c374c3751b9bbe",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/cdc8e9b28598e0ededa78f67f4c374c3751b9bbe",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/cdc8e9b28598e0ededa78f67f4c374c3751b9bbe",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/cdc8e9b28598e0ededa78f67f4c374c3751b9bbe/comments",
  "author": {
    "login": "bsdjhb",
    "id": 8976613,
    "node_id": "MDQ6VXNlcjg5NzY2MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/8976613?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/bsdjhb",
    "html_url": "https://github.com/bsdjhb",
    "followers_url": "https://api.github.com/users/bsdjhb/followers",
    "following_url": "https://api.github.com/users/bsdjhb/following{/other_user}",
    "gists_url": "https://api.github.com/users/bsdjhb/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/bsdjhb/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/bsdjhb/subscriptions",
    "organizations_url": "https://api.github.com/users/bsdjhb/orgs",
    "repos_url": "https://api.github.com/users/bsdjhb/repos",
    "events_url": "https://api.github.com/users/bsdjhb/events{/privacy}",
    "received_events_url": "https://api.github.com/users/bsdjhb/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "bsdjhb",
    "id": 8976613,
    "node_id": "MDQ6VXNlcjg5NzY2MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/8976613?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/bsdjhb",
    "html_url": "https://github.com/bsdjhb",
    "followers_url": "https://api.github.com/users/bsdjhb/followers",
    "following_url": "https://api.github.com/users/bsdjhb/following{/other_user}",
    "gists_url": "https://api.github.com/users/bsdjhb/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/bsdjhb/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/bsdjhb/subscriptions",
    "organizations_url": "https://api.github.com/users/bsdjhb/orgs",
    "repos_url": "https://api.github.com/users/bsdjhb/repos",
    "events_url": "https://api.github.com/users/bsdjhb/events{/privacy}",
    "received_events_url": "https://api.github.com/users/bsdjhb/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "c150bdf0e0977086532487c5244b5da4a1535b93",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c150bdf0e0977086532487c5244b5da4a1535b93",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/c150bdf0e0977086532487c5244b5da4a1535b93"
    }
  ],
  "stats": {
    "total": 43,
    "additions": 11,
    "deletions": 32
  },
  "files": [
    {
      "sha": "301e42a36f36daf59501b4d7e998b2479ed3a9ba",
      "filename": "gdbserver/linux-low.cc",
      "status": "modified",
      "additions": 11,
      "deletions": 32,
      "changes": 43,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/cdc8e9b28598e0ededa78f67f4c374c3751b9bbe/gdbserver/linux-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/cdc8e9b28598e0ededa78f67f4c374c3751b9bbe/gdbserver/linux-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-low.cc?ref=cdc8e9b28598e0ededa78f67f4c374c3751b9bbe",
      "patch": "@@ -21,6 +21,8 @@\n #include \"nat/linux-osdata.h\"\n #include \"gdbsupport/agent.h\"\n #include \"tdesc.h\"\n+#include \"gdbsupport/event-loop.h\"\n+#include \"gdbsupport/event-pipe.h\"\n #include \"gdbsupport/rsp-low.h\"\n #include \"gdbsupport/signals-state-save-restore.h\"\n #include \"nat/linux-nat.h\"\n@@ -308,12 +310,11 @@ lwp_in_step_range (struct lwp_info *lwp)\n   return (pc >= lwp->step_range_start && pc < lwp->step_range_end);\n }\n \n-/* The read/write ends of the pipe registered as waitable file in the\n-   event loop.  */\n-static int linux_event_pipe[2] = { -1, -1 };\n+/* The event pipe registered as a waitable file in the event loop.  */\n+static event_pipe linux_event_pipe;\n \n /* True if we're currently in async mode.  */\n-#define target_is_async_p() (linux_event_pipe[0] != -1)\n+#define target_is_async_p() (linux_event_pipe.is_open ())\n \n static void send_sigstop (struct lwp_info *lwp);\n \n@@ -3506,28 +3507,14 @@ linux_process_target::wait_1 (ptid_t ptid, target_waitstatus *ourstatus,\n static void\n async_file_flush (void)\n {\n-  int ret;\n-  char buf;\n-\n-  do\n-    ret = read (linux_event_pipe[0], &buf, 1);\n-  while (ret >= 0 || (ret == -1 && errno == EINTR));\n+  linux_event_pipe.flush ();\n }\n \n /* Put something in the pipe, so the event loop wakes up.  */\n static void\n async_file_mark (void)\n {\n-  int ret;\n-\n-  async_file_flush ();\n-\n-  do\n-    ret = write (linux_event_pipe[1], \"+\", 1);\n-  while (ret == 0 || (ret == -1 && errno == EINTR));\n-\n-  /* Ignore EAGAIN.  If the pipe is full, the event loop will already\n-     be awakened anyway.  */\n+  linux_event_pipe.mark ();\n }\n \n ptid_t\n@@ -5823,21 +5810,16 @@ linux_process_target::async (bool enable)\n \n       if (enable)\n \t{\n-\t  if (pipe (linux_event_pipe) == -1)\n+\t  if (!linux_event_pipe.open ())\n \t    {\n-\t      linux_event_pipe[0] = -1;\n-\t      linux_event_pipe[1] = -1;\n \t      gdb_sigmask (SIG_UNBLOCK, &mask, NULL);\n \n \t      warning (\"creating event pipe failed.\");\n \t      return previous;\n \t    }\n \n-\t  fcntl (linux_event_pipe[0], F_SETFL, O_NONBLOCK);\n-\t  fcntl (linux_event_pipe[1], F_SETFL, O_NONBLOCK);\n-\n \t  /* Register the event loop handler.  */\n-\t  add_file_handler (linux_event_pipe[0],\n+\t  add_file_handler (linux_event_pipe.event_fd (),\n \t\t\t    handle_target_event, NULL,\n \t\t\t    \"linux-low\");\n \n@@ -5846,12 +5828,9 @@ linux_process_target::async (bool enable)\n \t}\n       else\n \t{\n-\t  delete_file_handler (linux_event_pipe[0]);\n+\t  delete_file_handler (linux_event_pipe.event_fd ());\n \n-\t  close (linux_event_pipe[0]);\n-\t  close (linux_event_pipe[1]);\n-\t  linux_event_pipe[0] = -1;\n-\t  linux_event_pipe[1] = -1;\n+\t  linux_event_pipe.close ();\n \t}\n \n       gdb_sigmask (SIG_UNBLOCK, &mask, NULL);"
    }
  ]
}