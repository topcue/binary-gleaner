{
  "sha": "a00b7254fb614af557de7ae7cc0eb39a0ce0e408",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YTAwYjcyNTRmYjYxNGFmNTU3ZGU3YWU3Y2MwZWIzOWEwY2UwZTQwOA==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-03-08T14:27:57Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-03-08T14:28:29Z"
    },
    "message": "Implement function call operations\n\nThis implement function call operations.\n\nThe current function call code relies on some very lengthy code\n(evaluate_funcall is 398 lines...) to distinguish between the\ndifferent opcodes that might appear in the callee position.\n\nRather than try to replicate this, and have a function that tried to\ndissect many different kinds of operation subclass, this patch instead\nputs the work into the callee.  A new operation::evaluate_funcall\nmethod is added, and then this is overridden in the classes that\nrequire special treatment.\n\ngdb/ChangeLog\n2021-03-08  Tom Tromey  <tom@tromey.com>\n\n\t* expression.h (class operation) <evaluate_funcall>: New methods.\n\t* expop.h (class scope_operation) <evaluate_funcall>: New method.\n\t(class var_value_operation) <evaluate_funcall>: New method.\n\t(class structop_base_operation) <evaluate_funcall>: New method.\n\t(class var_msym_value_operation) <evaluate_funcall>: New method.\n\t(class structop_member_base): New class.\n\t(class structop_member_operation): Derive from\n\tstructop_member_base.\n\t(class structop_mptr_operation): Derive from\n\tstructop_member_base.\n\t(class funcall_operation): New class.\n\t* eval.c (operation::evaluate_funcall)\n\t(var_value_operation::evaluate_funcall)\n\t(scope_operation::evaluate_funcall)\n\t(structop_member_base::evaluate_funcall)\n\t(structop_base_operation::evaluate_funcall): New methods.",
    "tree": {
      "sha": "8a3d68f79a485f7c2d45ab3b0f3c1074ea793d34",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/8a3d68f79a485f7c2d45ab3b0f3c1074ea793d34"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/a00b7254fb614af557de7ae7cc0eb39a0ce0e408",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a00b7254fb614af557de7ae7cc0eb39a0ce0e408",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/a00b7254fb614af557de7ae7cc0eb39a0ce0e408",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a00b7254fb614af557de7ae7cc0eb39a0ce0e408/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "1c02eb30358a1d31918830b800cf1ff7c817439a",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1c02eb30358a1d31918830b800cf1ff7c817439a",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/1c02eb30358a1d31918830b800cf1ff7c817439a"
    }
  ],
  "stats": {
    "total": 383,
    "additions": 380,
    "deletions": 3
  },
  "files": [
    {
      "sha": "cbd7c5fb98824eba51fb5eabd03eefff57a11389",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 19,
      "deletions": 0,
      "changes": 19,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a00b7254fb614af557de7ae7cc0eb39a0ce0e408/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a00b7254fb614af557de7ae7cc0eb39a0ce0e408/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=a00b7254fb614af557de7ae7cc0eb39a0ce0e408",
      "patch": "@@ -1,3 +1,22 @@\n+2021-03-08  Tom Tromey  <tom@tromey.com>\n+\n+\t* expression.h (class operation) <evaluate_funcall>: New methods.\n+\t* expop.h (class scope_operation) <evaluate_funcall>: New method.\n+\t(class var_value_operation) <evaluate_funcall>: New method.\n+\t(class structop_base_operation) <evaluate_funcall>: New method.\n+\t(class var_msym_value_operation) <evaluate_funcall>: New method.\n+\t(class structop_member_base): New class.\n+\t(class structop_member_operation): Derive from\n+\tstructop_member_base.\n+\t(class structop_mptr_operation): Derive from\n+\tstructop_member_base.\n+\t(class funcall_operation): New class.\n+\t* eval.c (operation::evaluate_funcall)\n+\t(var_value_operation::evaluate_funcall)\n+\t(scope_operation::evaluate_funcall)\n+\t(structop_member_base::evaluate_funcall)\n+\t(structop_base_operation::evaluate_funcall): New methods.\n+\n 2021-03-08  Tom Tromey  <tom@tromey.com>\n \n \t* expop.h (class array_operation): New."
    },
    {
      "sha": "f1302ef6f54b42523721dc23f6651ddc11bd9f39",
      "filename": "gdb/eval.c",
      "status": "modified",
      "additions": 280,
      "deletions": 0,
      "changes": 280,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a00b7254fb614af557de7ae7cc0eb39a0ce0e408/gdb/eval.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a00b7254fb614af557de7ae7cc0eb39a0ce0e408/gdb/eval.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/eval.c?ref=a00b7254fb614af557de7ae7cc0eb39a0ce0e408",
      "patch": "@@ -1205,6 +1205,286 @@ evaluate_funcall (type *expect_type, expression *exp, int *pos,\n \t\t\t\t  var_func_name, expect_type);\n }\n \n+namespace expr\n+{\n+\n+value *\n+operation::evaluate_funcall (struct type *expect_type,\n+\t\t\t     struct expression *exp,\n+\t\t\t     enum noside noside,\n+\t\t\t     const char *function_name,\n+\t\t\t     const std::vector<operation_up> &args)\n+{\n+  std::vector<value *> vals (args.size ());\n+\n+  value *callee = evaluate_with_coercion (exp, noside);\n+  for (int i = 0; i < args.size (); ++i)\n+    vals[i] = args[i]->evaluate_with_coercion (exp, noside);\n+\n+  return evaluate_subexp_do_call (exp, noside, callee, vals,\n+\t\t\t\t  function_name, expect_type);\n+}\n+\n+value *\n+var_value_operation::evaluate_funcall (struct type *expect_type,\n+\t\t\t\t       struct expression *exp,\n+\t\t\t\t       enum noside noside,\n+\t\t\t\t       const std::vector<operation_up> &args)\n+{\n+  if (!overload_resolution\n+      || exp->language_defn->la_language != language_cplus)\n+    return operation::evaluate_funcall (expect_type, exp, noside, args);\n+\n+  std::vector<value *> argvec (args.size ());\n+  for (int i = 0; i < args.size (); ++i)\n+    argvec[i] = args[i]->evaluate_with_coercion (exp, noside);\n+\n+  struct symbol *symp;\n+  find_overload_match (argvec, NULL, NON_METHOD,\n+\t\t       NULL, std::get<0> (m_storage),\n+\t\t       NULL, &symp, NULL, 0, noside);\n+\n+  if (SYMBOL_TYPE (symp)->code () == TYPE_CODE_ERROR)\n+    error_unknown_type (symp->print_name ());\n+  value *callee = evaluate_var_value (noside, std::get<1> (m_storage), symp);\n+\n+  return evaluate_subexp_do_call (exp, noside, callee, argvec,\n+\t\t\t\t  nullptr, expect_type);\n+}\n+\n+value *\n+scope_operation::evaluate_funcall (struct type *expect_type,\n+\t\t\t\t   struct expression *exp,\n+\t\t\t\t   enum noside noside,\n+\t\t\t\t   const std::vector<operation_up> &args)\n+{\n+  if (!overload_resolution\n+      || exp->language_defn->la_language != language_cplus)\n+    return operation::evaluate_funcall (expect_type, exp, noside, args);\n+\n+  /* Unpack it locally so we can properly handle overload\n+     resolution.  */\n+  const std::string &name = std::get<1> (m_storage);\n+  struct type *type = std::get<0> (m_storage);\n+\n+  symbol *function = NULL;\n+  const char *function_name = NULL;\n+  std::vector<value *> argvec (1 + args.size ());\n+  if (type->code () == TYPE_CODE_NAMESPACE)\n+    {\n+      function = cp_lookup_symbol_namespace (type->name (),\n+\t\t\t\t\t     name.c_str (),\n+\t\t\t\t\t     get_selected_block (0),\n+\t\t\t\t\t     VAR_DOMAIN).symbol;\n+      if (function == NULL)\n+\terror (_(\"No symbol \\\"%s\\\" in namespace \\\"%s\\\".\"),\n+\t       name.c_str (), type->name ());\n+    }\n+  else\n+    {\n+      gdb_assert (type->code () == TYPE_CODE_STRUCT\n+\t\t  || type->code () == TYPE_CODE_UNION);\n+      function_name = name.c_str ();\n+\n+      /* We need a properly typed value for method lookup.  */\n+      argvec[0] = value_zero (type, lval_memory);\n+    }\n+\n+  for (int i = 0; i < args.size (); ++i)\n+    argvec[i + 1] = args[i]->evaluate_with_coercion (exp, noside);\n+  gdb::array_view<value *> arg_view = argvec;\n+\n+  value *callee = nullptr;\n+  if (function_name != nullptr)\n+    {\n+      int static_memfuncp;\n+\n+      find_overload_match (arg_view, function_name, METHOD,\n+\t\t\t   &argvec[0], nullptr, &callee, nullptr,\n+\t\t\t   &static_memfuncp, 0, noside);\n+      if (!static_memfuncp)\n+\t{\n+\t  /* For the time being, we don't handle this.  */\n+\t  error (_(\"Call to overloaded function %s requires \"\n+\t\t   \"`this' pointer\"),\n+\t\t function_name);\n+\t}\n+\n+      arg_view = arg_view.slice (1);\n+    }\n+  else\n+    {\n+      symbol *symp;\n+      arg_view = arg_view.slice (1);\n+      find_overload_match (arg_view, nullptr,\n+\t\t\t   NON_METHOD, nullptr, function,\n+\t\t\t   nullptr, &symp, nullptr, 1, noside);\n+      callee = value_of_variable (symp, get_selected_block (0));\n+    }\n+\n+  return evaluate_subexp_do_call (exp, noside, callee, arg_view,\n+\t\t\t\t  nullptr, expect_type);\n+}\n+\n+value *\n+structop_member_base::evaluate_funcall (struct type *expect_type,\n+\t\t\t\t\tstruct expression *exp,\n+\t\t\t\t\tenum noside noside,\n+\t\t\t\t\tconst std::vector<operation_up> &args)\n+{\n+  /* First, evaluate the structure into lhs.  */\n+  value *lhs;\n+  if (opcode () == STRUCTOP_MEMBER)\n+    lhs = std::get<0> (m_storage)->evaluate_for_address (exp, noside);\n+  else\n+    lhs = std::get<0> (m_storage)->evaluate (nullptr, exp, noside);\n+\n+  std::vector<value *> vals (args.size () + 1);\n+  gdb::array_view<value *> val_view = vals;\n+  /* If the function is a virtual function, then the aggregate\n+     value (providing the structure) plays its part by providing\n+     the vtable.  Otherwise, it is just along for the ride: call\n+     the function directly.  */\n+  value *rhs = std::get<1> (m_storage)->evaluate (nullptr, exp, noside);\n+  value *callee;\n+\n+  type *a1_type = check_typedef (value_type (rhs));\n+  if (a1_type->code () == TYPE_CODE_METHODPTR)\n+    {\n+      if (noside == EVAL_AVOID_SIDE_EFFECTS)\n+\tcallee = value_zero (TYPE_TARGET_TYPE (a1_type), not_lval);\n+      else\n+\tcallee = cplus_method_ptr_to_value (&lhs, rhs);\n+\n+      vals[0] = lhs;\n+    }\n+  else if (a1_type->code () == TYPE_CODE_MEMBERPTR)\n+    {\n+      struct type *type_ptr\n+\t= lookup_pointer_type (TYPE_SELF_TYPE (a1_type));\n+      struct type *target_type_ptr\n+\t= lookup_pointer_type (TYPE_TARGET_TYPE (a1_type));\n+\n+      /* Now, convert this value to an address.  */\n+      lhs = value_cast (type_ptr, lhs);\n+\n+      long mem_offset = value_as_long (rhs);\n+\n+      callee = value_from_pointer (target_type_ptr,\n+\t\t\t\t   value_as_long (lhs) + mem_offset);\n+      callee = value_ind (callee);\n+\n+      val_view = val_view.slice (1);\n+    }\n+  else\n+    error (_(\"Non-pointer-to-member value used in pointer-to-member \"\n+\t     \"construct\"));\n+\n+  for (int i = 0; i < args.size (); ++i)\n+    vals[i + 1] = args[i]->evaluate_with_coercion (exp, noside);\n+\n+  return evaluate_subexp_do_call (exp, noside, callee, val_view,\n+\t\t\t\t  nullptr, expect_type);\n+\n+}\n+\n+value *\n+structop_base_operation::evaluate_funcall\n+     (struct type *expect_type, struct expression *exp, enum noside noside,\n+      const std::vector<operation_up> &args)\n+{\n+  std::vector<value *> vals (args.size () + 1);\n+  /* First, evaluate the structure into vals[0].  */\n+  enum exp_opcode op = opcode ();\n+  if (op == STRUCTOP_STRUCT)\n+    {\n+      /* If v is a variable in a register, and the user types\n+\t v.method (), this will produce an error, because v has no\n+\t address.\n+\n+\t A possible way around this would be to allocate a copy of\n+\t the variable on the stack, copy in the contents, call the\n+\t function, and copy out the contents.  I.e. convert this\n+\t from call by reference to call by copy-return (or\n+\t whatever it's called).  However, this does not work\n+\t because it is not the same: the method being called could\n+\t stash a copy of the address, and then future uses through\n+\t that address (after the method returns) would be expected\n+\t to use the variable itself, not some copy of it.  */\n+      vals[0] = std::get<0> (m_storage)->evaluate_for_address (exp, noside);\n+    }\n+  else\n+    {\n+      vals[0] = std::get<0> (m_storage)->evaluate (nullptr, exp, noside);\n+      /* Check to see if the operator '->' has been overloaded.\n+\t If the operator has been overloaded replace vals[0] with the\n+\t value returned by the custom operator and continue\n+\t evaluation.  */\n+      while (unop_user_defined_p (op, vals[0]))\n+\t{\n+\t  struct value *value = nullptr;\n+\t  try\n+\t    {\n+\t      value = value_x_unop (vals[0], op, noside);\n+\t    }\n+\t  catch (const gdb_exception_error &except)\n+\t    {\n+\t      if (except.error == NOT_FOUND_ERROR)\n+\t\tbreak;\n+\t      else\n+\t\tthrow;\n+\t    }\n+\n+\t  vals[0] = value;\n+\t}\n+    }\n+\n+  for (int i = 0; i < args.size (); ++i)\n+    vals[i + 1] = args[i]->evaluate_with_coercion (exp, noside);\n+  gdb::array_view<value *> arg_view = vals;\n+\n+  int static_memfuncp;\n+  value *callee;\n+  const char *tstr = std::get<1> (m_storage).c_str ();\n+  if (overload_resolution\n+      && exp->language_defn->la_language == language_cplus)\n+    {\n+      /* Language is C++, do some overload resolution before\n+\t evaluation.  */\n+      value *val0 = vals[0];\n+      find_overload_match (arg_view, tstr, METHOD,\n+\t\t\t   &val0, nullptr, &callee, nullptr,\n+\t\t\t   &static_memfuncp, 0, noside);\n+      vals[0] = val0;\n+    }\n+  else\n+    /* Non-C++ case -- or no overload resolution.  */\n+    {\n+      struct value *temp = vals[0];\n+\n+      callee = value_struct_elt (&temp, &vals[1], tstr,\n+\t\t\t\t &static_memfuncp,\n+\t\t\t\t op == STRUCTOP_STRUCT\n+\t\t\t\t ? \"structure\" : \"structure pointer\");\n+      /* value_struct_elt updates temp with the correct value of the\n+\t ``this'' pointer if necessary, so modify it to reflect any\n+\t ``this'' changes.  */\n+      vals[0] = value_from_longest (lookup_pointer_type (value_type (temp)),\n+\t\t\t\t    value_address (temp)\n+\t\t\t\t    + value_embedded_offset (temp));\n+    }\n+\n+  /* Take out `this' if needed.  */\n+  if (static_memfuncp)\n+    arg_view = arg_view.slice (1);\n+\n+  return evaluate_subexp_do_call (exp, noside, callee, arg_view,\n+\t\t\t\t  nullptr, expect_type);\n+}\n+\n+\n+} /* namespace expr */\n+\n /* Return true if type is integral or reference to integral */\n \n static bool"
    },
    {
      "sha": "8ac7947a68c6113957c2fa6efff0857145514b44",
      "filename": "gdb/expop.h",
      "status": "modified",
      "additions": 61,
      "deletions": 3,
      "changes": 64,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a00b7254fb614af557de7ae7cc0eb39a0ce0e408/gdb/expop.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a00b7254fb614af557de7ae7cc0eb39a0ce0e408/gdb/expop.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/expop.h?ref=a00b7254fb614af557de7ae7cc0eb39a0ce0e408",
      "patch": "@@ -597,6 +597,11 @@ class scope_operation\n   value *evaluate_for_address (struct expression *exp,\n \t\t\t       enum noside noside) override;\n \n+  value *evaluate_funcall (struct type *expect_type,\n+\t\t\t   struct expression *exp,\n+\t\t\t   enum noside noside,\n+\t\t\t   const std::vector<operation_up> &args) override;\n+\n   enum exp_opcode opcode () const override\n   { return OP_SCOPE; }\n \n@@ -634,6 +639,11 @@ class var_value_operation\n   value *evaluate_for_address (struct expression *exp, enum noside noside)\n     override;\n \n+  value *evaluate_funcall (struct type *expect_type,\n+\t\t\t   struct expression *exp,\n+\t\t\t   enum noside noside,\n+\t\t\t   const std::vector<operation_up> &args) override;\n+\n   enum exp_opcode opcode () const override\n   { return OP_VAR_VALUE; }\n \n@@ -702,6 +712,15 @@ class var_msym_value_operation\n \t\t\t    struct expression *exp,\n \t\t\t    enum noside noside) override;\n \n+  value *evaluate_funcall (struct type *expect_type,\n+\t\t\t   struct expression *exp,\n+\t\t\t   enum noside noside,\n+\t\t\t   const std::vector<operation_up> &args) override\n+  {\n+    const char *name = std::get<0> (m_storage)->print_name ();\n+    return operation::evaluate_funcall (expect_type, exp, noside, name, args);\n+  }\n+\n   enum exp_opcode opcode () const override\n   { return OP_VAR_MSYM_VALUE; }\n \n@@ -974,6 +993,11 @@ class structop_base_operation\n \t\t\t\t\t      EVAL_AVOID_SIDE_EFFECTS);\n   }\n \n+  value *evaluate_funcall (struct type *expect_type,\n+\t\t\t   struct expression *exp,\n+\t\t\t   enum noside noside,\n+\t\t\t   const std::vector<operation_up> &args) override;\n+\n protected:\n \n   using tuple_holding_operation::tuple_holding_operation;\n@@ -1047,13 +1071,26 @@ class structop_ptr_operation\n   }\n };\n \n-class structop_member_operation\n+class structop_member_base\n   : public tuple_holding_operation<operation_up, operation_up>\n {\n public:\n \n   using tuple_holding_operation::tuple_holding_operation;\n \n+  value *evaluate_funcall (struct type *expect_type,\n+\t\t\t   struct expression *exp,\n+\t\t\t   enum noside noside,\n+\t\t\t   const std::vector<operation_up> &args) override;\n+};\n+\n+class structop_member_operation\n+  : public structop_member_base\n+{\n+public:\n+\n+  using structop_member_base::structop_member_base;\n+\n   value *evaluate (struct type *expect_type,\n \t\t   struct expression *exp,\n \t\t   enum noside noside) override\n@@ -1070,11 +1107,11 @@ class structop_member_operation\n };\n \n class structop_mptr_operation\n-  : public tuple_holding_operation<operation_up, operation_up>\n+  : public structop_member_base\n {\n public:\n \n-  using tuple_holding_operation::tuple_holding_operation;\n+  using structop_member_base::structop_member_base;\n \n   value *evaluate (struct type *expect_type,\n \t\t   struct expression *exp,\n@@ -2071,6 +2108,27 @@ class array_operation\n \t\t\t\t       enum noside noside, int nargs);\n };\n \n+/* A function call.  This holds the callee operation and the\n+   arguments.  */\n+class funcall_operation\n+  : public tuple_holding_operation<operation_up, std::vector<operation_up>>\n+{\n+public:\n+\n+  using tuple_holding_operation::tuple_holding_operation;\n+\n+  value *evaluate (struct type *expect_type,\n+\t\t   struct expression *exp,\n+\t\t   enum noside noside) override\n+  {\n+    return std::get<0> (m_storage)->evaluate_funcall (expect_type, exp, noside,\n+\t\t\t\t\t\t      std::get<1> (m_storage));\n+  }\n+\n+  enum exp_opcode opcode () const override\n+  { return OP_FUNCALL; }\n+};\n+\n } /* namespace expr */\n \n #endif /* EXPOP_H */"
    },
    {
      "sha": "d20857bf268b99ee9eb06a51970796e77051e386",
      "filename": "gdb/expression.h",
      "status": "modified",
      "additions": 20,
      "deletions": 0,
      "changes": 20,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a00b7254fb614af557de7ae7cc0eb39a0ce0e408/gdb/expression.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a00b7254fb614af557de7ae7cc0eb39a0ce0e408/gdb/expression.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/expression.h?ref=a00b7254fb614af557de7ae7cc0eb39a0ce0e408",
      "patch": "@@ -144,6 +144,19 @@ class operation\n   virtual value *evaluate_for_address (struct expression *exp,\n \t\t\t\t       enum noside noside);\n \n+  /* Evaluate a function call, with this object as the callee.\n+     EXPECT_TYPE, EXP, and NOSIDE have the same meaning as in\n+     'evaluate'.  ARGS holds the operations that should be evaluated\n+     to get the arguments to the call.  */\n+  virtual value *evaluate_funcall (struct type *expect_type,\n+\t\t\t\t   struct expression *exp,\n+\t\t\t\t   enum noside noside,\n+\t\t\t\t   const std::vector<operation_up> &args)\n+  {\n+    /* Defer to the helper overload.  */\n+    return evaluate_funcall (expect_type, exp, noside, nullptr, args);\n+  }\n+\n   /* True if this is a constant expression.  */\n   virtual bool constant_p () const\n   { return false; }\n@@ -171,6 +184,13 @@ class operation\n \n protected:\n \n+  /* A helper overload that wraps evaluate_subexp_do_call.  */\n+  value *evaluate_funcall (struct type *expect_type,\n+\t\t\t   struct expression *exp,\n+\t\t\t   enum noside noside,\n+\t\t\t   const char *function_name,\n+\t\t\t   const std::vector<operation_up> &args);\n+\n   /* Called by generate_ax to do the work for this particular\n      operation.  */\n   virtual void do_generate_ax (struct expression *exp,"
    }
  ]
}