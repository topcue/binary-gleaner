{
  "sha": "c0e70c624fc7d89f5cf281350692de89a063786f",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YzBlNzBjNjI0ZmM3ZDg5ZjVjZjI4MTM1MDY5MmRlODlhMDYzNzg2Zg==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2019-05-23T14:40:27Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2019-05-28T16:39:01Z"
    },
    "message": "Remove find_old_style_renaming_symbol\n\nWe found a case where a \"bt\" was very slow with Ada code.  Profiling\nwith callgrind showed this to be primarily due to calls to\nfind_old_style_renaming_symbol.  Because new-style renaming symbols\nwere implemented in 2007, it seems safe enough to remove this old\ncode.\n\nA \"-batch -ex bt\" test on a large Ada program improves from:\n\n    13.23user 0.57system 0:13.82elapsed 99%CPU (0avgtext+0avgdata 571408maxresident)k\n\nto\n\n    4.25user 0.48system 0:04.74elapsed 99%CPU (0avgtext+0avgdata 559844maxresident)k\n\nwith this patch.\n\nTested on x86-64 Fedora 29.  Joel reviewed this internally; and as it\nis Ada-specific, I am checking it in.\n\ngdb/ChangeLog\n2019-05-28  Tom Tromey  <tromey@adacore.com>\n\n\t* ada-lang.c (ada_remove_Xbn_suffix)\n\t(find_old_style_renaming_symbol)\n\t(parse_old_style_renaming): Remove.\n\t(ada_find_renaming_symbol): Don't call\n\tfind_old_style_renaming_symbol.\n\t(ada_is_renaming_symbol): Rename from\n\tada_find_renaming_symbol.  Remove \"block\" parameter.  Return\n\tbool.  Now static.\n\t(ada_read_var_value): Update and simplify.\n\t* ada-exp.y (write_var_or_type): Remove old code.",
    "tree": {
      "sha": "bf07b9788c154747e92ff75565261c391f77f1bb",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/bf07b9788c154747e92ff75565261c391f77f1bb"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/c0e70c624fc7d89f5cf281350692de89a063786f",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c0e70c624fc7d89f5cf281350692de89a063786f",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/c0e70c624fc7d89f5cf281350692de89a063786f",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c0e70c624fc7d89f5cf281350692de89a063786f/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "88981b157b08f2e9a404a2f86d4ee131f17ce3d4",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/88981b157b08f2e9a404a2f86d4ee131f17ce3d4",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/88981b157b08f2e9a404a2f86d4ee131f17ce3d4"
    }
  ],
  "stats": {
    "total": 209,
    "additions": 22,
    "deletions": 187
  },
  "files": [
    {
      "sha": "f122f5b21f56a643fea6dddbe0f6d95167b1ec3e",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 13,
      "deletions": 0,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c0e70c624fc7d89f5cf281350692de89a063786f/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c0e70c624fc7d89f5cf281350692de89a063786f/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=c0e70c624fc7d89f5cf281350692de89a063786f",
      "patch": "@@ -1,3 +1,16 @@\n+2019-05-28  Tom Tromey  <tromey@adacore.com>\n+\n+\t* ada-lang.c (ada_remove_Xbn_suffix)\n+\t(find_old_style_renaming_symbol)\n+\t(parse_old_style_renaming): Remove.\n+\t(ada_find_renaming_symbol): Don't call\n+\tfind_old_style_renaming_symbol.\n+\t(ada_is_renaming_symbol): Rename from\n+\tada_find_renaming_symbol.  Remove \"block\" parameter.  Return\n+\tbool.  Now static.\n+\t(ada_read_var_value): Update and simplify.\n+\t* ada-exp.y (write_var_or_type): Remove old code.\n+\n 2019-05-28  Alan Hayward  <alan.hayward@arm.com>\n \n \t* event-top.c: Remove include comment."
    },
    {
      "sha": "f7ce27aca3526d6e9669d4f816ea7539739f480c",
      "filename": "gdb/ada-exp.y",
      "status": "modified",
      "additions": 0,
      "deletions": 13,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c0e70c624fc7d89f5cf281350692de89a063786f/gdb/ada-exp.y",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c0e70c624fc7d89f5cf281350692de89a063786f/gdb/ada-exp.y",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-exp.y?ref=c0e70c624fc7d89f5cf281350692de89a063786f",
      "patch": "@@ -1229,19 +1229,6 @@ write_var_or_type (struct parser_state *par_state,\n \t\t\t\t\t  VAR_DOMAIN, &syms);\n \t  encoded_name[tail_index] = terminator;\n \n-\t  /* A single symbol may rename a package or object. */\n-\n-\t  /* This should go away when we move entirely to new version.\n-\t     FIXME pnh 7/20/2007. */\n-\t  if (nsyms == 1)\n-\t    {\n-\t      struct symbol *ren_sym =\n-\t\tada_find_renaming_symbol (syms[0].symbol, syms[0].block);\n-\n-\t      if (ren_sym != NULL)\n-\t\tsyms[0].symbol = ren_sym;\n-\t    }\n-\n \t  type_sym = select_possible_type_sym (syms);\n \n \t  if (type_sym != NULL)"
    },
    {
      "sha": "99c099aa07d79292ab1c042e8d46e1c237050f04",
      "filename": "gdb/ada-lang.c",
      "status": "modified",
      "additions": 9,
      "deletions": 171,
      "changes": 180,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c0e70c624fc7d89f5cf281350692de89a063786f/gdb/ada-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c0e70c624fc7d89f5cf281350692de89a063786f/gdb/ada-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-lang.c?ref=c0e70c624fc7d89f5cf281350692de89a063786f",
      "patch": "@@ -146,14 +146,6 @@ static int scalar_type_p (struct type *);\n \n static int discrete_type_p (struct type *);\n \n-static enum ada_renaming_category parse_old_style_renaming (struct type *,\n-\t\t\t\t\t\t\t    const char **,\n-\t\t\t\t\t\t\t    int *,\n-\t\t\t\t\t\t\t    const char **);\n-\n-static struct symbol *find_old_style_renaming_symbol (const char *,\n-\t\t\t\t\t\t      const struct block *);\n-\n static struct type *ada_lookup_struct_elt_type (struct type *, const char *,\n                                                 int, int);\n \n@@ -1112,26 +1104,6 @@ ada_remove_po_subprogram_suffix (const char *encoded, int *len)\n     *len = *len - 1;\n }\n \n-/* Remove trailing X[bn]* suffixes (indicating names in package bodies).  */\n-\n-static void\n-ada_remove_Xbn_suffix (const char *encoded, int *len)\n-{\n-  int i = *len - 1;\n-\n-  while (i > 0 && (encoded[i] == 'b' || encoded[i] == 'n'))\n-    i--;\n-\n-  if (encoded[i] != 'X')\n-    return;\n-\n-  if (i == 0)\n-    return;\n-\n-  if (isalnum (encoded[i-1]))\n-    *len = i;\n-}\n-\n /* If ENCODED follows the GNAT entity encoding conventions, then return\n    the decoded form of ENCODED.  Otherwise, return \"<%s>\" where \"%s\" is\n    replaced by ENCODED.\n@@ -4301,9 +4273,6 @@ ada_parse_renaming (struct symbol *sym,\n     {\n     default:\n       return ADA_NOT_RENAMING;\n-    case LOC_TYPEDEF:\n-      return parse_old_style_renaming (SYMBOL_TYPE (sym), \n-\t\t\t\t       renamed_entity, len, renaming_expr);\n     case LOC_LOCAL:\n     case LOC_STATIC:\n     case LOC_COMPUTED:\n@@ -4347,65 +4316,6 @@ ada_parse_renaming (struct symbol *sym,\n   return kind;\n }\n \n-/* Assuming TYPE encodes a renaming according to the old encoding in\n-   exp_dbug.ads, returns details of that renaming in *RENAMED_ENTITY,\n-   *LEN, and *RENAMING_EXPR, as for ada_parse_renaming, above.  Returns\n-   ADA_NOT_RENAMING otherwise.  */\n-static enum ada_renaming_category\n-parse_old_style_renaming (struct type *type,\n-\t\t\t  const char **renamed_entity, int *len, \n-\t\t\t  const char **renaming_expr)\n-{\n-  enum ada_renaming_category kind;\n-  const char *name;\n-  const char *info;\n-  const char *suffix;\n-\n-  if (type == NULL || TYPE_CODE (type) != TYPE_CODE_ENUM \n-      || TYPE_NFIELDS (type) != 1)\n-    return ADA_NOT_RENAMING;\n-\n-  name = TYPE_NAME (type);\n-  if (name == NULL)\n-    return ADA_NOT_RENAMING;\n-  \n-  name = strstr (name, \"___XR\");\n-  if (name == NULL)\n-    return ADA_NOT_RENAMING;\n-  switch (name[5])\n-    {\n-    case '\\0':\n-    case '_':\n-      kind = ADA_OBJECT_RENAMING;\n-      break;\n-    case 'E':\n-      kind = ADA_EXCEPTION_RENAMING;\n-      break;\n-    case 'P':\n-      kind = ADA_PACKAGE_RENAMING;\n-      break;\n-    case 'S':\n-      kind = ADA_SUBPROGRAM_RENAMING;\n-      break;\n-    default:\n-      return ADA_NOT_RENAMING;\n-    }\n-\n-  info = TYPE_FIELD_NAME (type, 0);\n-  if (info == NULL)\n-    return ADA_NOT_RENAMING;\n-  if (renamed_entity != NULL)\n-    *renamed_entity = info;\n-  suffix = strstr (info, \"___XE\");\n-  if (renaming_expr != NULL)\n-    *renaming_expr = suffix + 5;\n-  if (suffix == NULL || suffix == info)\n-    return ADA_NOT_RENAMING;\n-  if (len != NULL)\n-    *len = suffix - info;\n-  return kind;\n-}\n-\n /* Compute the value of the given RENAMING_SYM, which is expected to\n    be a symbol encoding a renaming expression.  BLOCK is the block\n    used to evaluate the renaming.  */\n@@ -7986,80 +7896,11 @@ ada_find_any_type (const char *name)\n    symbols whose name is that of NAME_SYM suffixed with  \"___XR\".\n    Return symbol if found, and NULL otherwise.  */\n \n-struct symbol *\n-ada_find_renaming_symbol (struct symbol *name_sym, const struct block *block)\n+static bool\n+ada_is_renaming_symbol (struct symbol *name_sym)\n {\n   const char *name = SYMBOL_LINKAGE_NAME (name_sym);\n-  struct symbol *sym;\n-\n-  if (strstr (name, \"___XR\") != NULL)\n-     return name_sym;\n-\n-  sym = find_old_style_renaming_symbol (name, block);\n-\n-  if (sym != NULL)\n-    return sym;\n-\n-  /* Not right yet.  FIXME pnh 7/20/2007.  */\n-  sym = ada_find_any_type_symbol (name);\n-  if (sym != NULL && strstr (SYMBOL_LINKAGE_NAME (sym), \"___XR\") != NULL)\n-    return sym;\n-  else\n-    return NULL;\n-}\n-\n-static struct symbol *\n-find_old_style_renaming_symbol (const char *name, const struct block *block)\n-{\n-  const struct symbol *function_sym = block_linkage_function (block);\n-  char *rename;\n-\n-  if (function_sym != NULL)\n-    {\n-      /* If the symbol is defined inside a function, NAME is not fully\n-         qualified.  This means we need to prepend the function name\n-         as well as adding the ``___XR'' suffix to build the name of\n-         the associated renaming symbol.  */\n-      const char *function_name = SYMBOL_LINKAGE_NAME (function_sym);\n-      /* Function names sometimes contain suffixes used\n-         for instance to qualify nested subprograms.  When building\n-         the XR type name, we need to make sure that this suffix is\n-         not included.  So do not include any suffix in the function\n-         name length below.  */\n-      int function_name_len = ada_name_prefix_len (function_name);\n-      const int rename_len = function_name_len + 2      /*  \"__\" */\n-        + strlen (name) + 6 /* \"___XR\\0\" */ ;\n-\n-      /* Strip the suffix if necessary.  */\n-      ada_remove_trailing_digits (function_name, &function_name_len);\n-      ada_remove_po_subprogram_suffix (function_name, &function_name_len);\n-      ada_remove_Xbn_suffix (function_name, &function_name_len);\n-\n-      /* Library-level functions are a special case, as GNAT adds\n-         a ``_ada_'' prefix to the function name to avoid namespace\n-         pollution.  However, the renaming symbols themselves do not\n-         have this prefix, so we need to skip this prefix if present.  */\n-      if (function_name_len > 5 /* \"_ada_\" */\n-          && strstr (function_name, \"_ada_\") == function_name)\n-        {\n-\t  function_name += 5;\n-\t  function_name_len -= 5;\n-        }\n-\n-      rename = (char *) alloca (rename_len * sizeof (char));\n-      strncpy (rename, function_name, function_name_len);\n-      xsnprintf (rename + function_name_len, rename_len - function_name_len,\n-\t\t \"__%s___XR\", name);\n-    }\n-  else\n-    {\n-      const int rename_len = strlen (name) + 6;\n-\n-      rename = (char *) alloca (rename_len * sizeof (char));\n-      xsnprintf (rename, rename_len * sizeof (char), \"%s___XR\", name);\n-    }\n-\n-  return ada_find_any_type_symbol (rename);\n+  return strstr (name, \"___XR\") != NULL;\n }\n \n /* Because of GNAT encoding conventions, several GDB symbols may match a\n@@ -14375,17 +14216,14 @@ static struct value *\n ada_read_var_value (struct symbol *var, const struct block *var_block,\n \t\t    struct frame_info *frame)\n {\n-  const struct block *frame_block = NULL;\n-  struct symbol *renaming_sym = NULL;\n-\n   /* The only case where default_read_var_value is not sufficient\n      is when VAR is a renaming...  */\n-  if (frame)\n-    frame_block = get_frame_block (frame, NULL);\n-  if (frame_block)\n-    renaming_sym = ada_find_renaming_symbol (var, frame_block);\n-  if (renaming_sym != NULL)\n-    return ada_read_renaming_var_value (renaming_sym, frame_block);\n+  if (frame != nullptr)\n+    {\n+      const struct block *frame_block = get_frame_block (frame, NULL);\n+      if (frame_block != nullptr && ada_is_renaming_symbol (var))\n+\treturn ada_read_renaming_var_value (var, frame_block);\n+    }\n \n   /* This is a typical case where we expect the default_read_var_value\n      function to work.  */"
    },
    {
      "sha": "ff6c3399eafc6e2bfb7e26be1ca996c6f120f90b",
      "filename": "gdb/ada-lang.h",
      "status": "modified",
      "additions": 0,
      "deletions": 3,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c0e70c624fc7d89f5cf281350692de89a063786f/gdb/ada-lang.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c0e70c624fc7d89f5cf281350692de89a063786f/gdb/ada-lang.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-lang.h?ref=c0e70c624fc7d89f5cf281350692de89a063786f",
      "patch": "@@ -343,9 +343,6 @@ extern struct type *ada_find_parallel_type (struct type *,\n \n extern bool get_int_var_value (const char *, LONGEST &value);\n \n-extern struct symbol *ada_find_renaming_symbol (struct symbol *name_sym,\n-                                                const struct block *block);\n-\n extern int ada_prefer_type (struct type *, struct type *);\n \n extern struct type *ada_get_base_type (struct type *);"
    }
  ]
}