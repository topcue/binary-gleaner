{
  "sha": "54b8cbd0e4063846349634aefa8ed1a3c0ac62ca",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NTRiOGNiZDBlNDA2Mzg0NjM0OTYzNGFlZmE4ZWQxYTNjMGFjNjJjYQ==",
  "commit": {
    "author": {
      "name": "Kamil Rytarowski",
      "email": "n54@gmx.com",
      "date": "2020-04-12T00:00:14Z"
    },
    "committer": {
      "name": "Kamil Rytarowski",
      "email": "n54@gmx.com",
      "date": "2020-04-12T11:06:08Z"
    },
    "message": "Implement \"info proc mappings\" for NetBSD\n\nDefine nbsd_nat_target::find_memory_regions and\nnbsd_nat_target::info_proc. info_proc handles as of now only\nthe \"mappings\" command.\n\nDefine a local static function kinfo_get_vmmap() that reads\nthe process memory layout of a specified process.\nkinfo_get_vmmap() wraps the sysctl(3) call.\n\nnbsd-tdep.c defines now utility functions for printing the\nprocess memory layout:\n * nbsd_info_proc_mappings_header()\n * nbsd_vm_map_entry_flags()\n * nbsd_info_proc_mappings_entry()\n\ngdb/ChangeLog:\n\n\t* nbsd-nat.c; Include \"nbsd-tdep.h\" and \"gdbarch.h\".\n\t* nbsd-nat.c (nbsd_nat_target::find_memory_regions)\n\t(nbsd_nat_target::info_proc): New functions.\n\t* nbsd-nat.c (kinfo_get_vmmap): New function.\n\t* nbsd-nat.c (nbsd_nat_target::info_proc) Use\n\tnbsd_info_proc_mappings_header and nbsd_info_proc_mappings_entry.\n\t* nbsd-tdep.c (nbsd_info_proc_mappings_header)\n\t(nbsd_info_proc_mappings_entry, nbsd_vm_map_entry_flags): New\n\tfunctions.\n\t* nbsd-tdep.c (KINFO_VME_PROT_READ, KINFO_VME_PROT_WRITE)\n\t(KINFO_VME_PROT_EXEC, KINFO_VME_FLAG_COW)\n\t(KINFO_VME_FLAG_NEEDS_COPY, KINFO_VME_FLAG_NOCOREDUMP)\n\t(KINFO_VME_FLAG_PAGEABLE, KINFO_VME_FLAG_GROWS_UP)\n\t(KINFO_VME_FLAG_GROWS_DOWN): New.",
    "tree": {
      "sha": "3deec11e19aac2982654f8c2550d10680527ca7f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/3deec11e19aac2982654f8c2550d10680527ca7f"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/54b8cbd0e4063846349634aefa8ed1a3c0ac62ca",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/54b8cbd0e4063846349634aefa8ed1a3c0ac62ca",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/54b8cbd0e4063846349634aefa8ed1a3c0ac62ca",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/54b8cbd0e4063846349634aefa8ed1a3c0ac62ca/comments",
  "author": {
    "login": "krytarowski",
    "id": 6665730,
    "node_id": "MDQ6VXNlcjY2NjU3MzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6665730?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/krytarowski",
    "html_url": "https://github.com/krytarowski",
    "followers_url": "https://api.github.com/users/krytarowski/followers",
    "following_url": "https://api.github.com/users/krytarowski/following{/other_user}",
    "gists_url": "https://api.github.com/users/krytarowski/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/krytarowski/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/krytarowski/subscriptions",
    "organizations_url": "https://api.github.com/users/krytarowski/orgs",
    "repos_url": "https://api.github.com/users/krytarowski/repos",
    "events_url": "https://api.github.com/users/krytarowski/events{/privacy}",
    "received_events_url": "https://api.github.com/users/krytarowski/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "krytarowski",
    "id": 6665730,
    "node_id": "MDQ6VXNlcjY2NjU3MzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6665730?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/krytarowski",
    "html_url": "https://github.com/krytarowski",
    "followers_url": "https://api.github.com/users/krytarowski/followers",
    "following_url": "https://api.github.com/users/krytarowski/following{/other_user}",
    "gists_url": "https://api.github.com/users/krytarowski/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/krytarowski/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/krytarowski/subscriptions",
    "organizations_url": "https://api.github.com/users/krytarowski/orgs",
    "repos_url": "https://api.github.com/users/krytarowski/repos",
    "events_url": "https://api.github.com/users/krytarowski/events{/privacy}",
    "received_events_url": "https://api.github.com/users/krytarowski/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "0b07a199018c928f12ddfb8d5f75baf466de389d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0b07a199018c928f12ddfb8d5f75baf466de389d",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/0b07a199018c928f12ddfb8d5f75baf466de389d"
    }
  ],
  "stats": {
    "total": 276,
    "additions": 276,
    "deletions": 0
  },
  "files": [
    {
      "sha": "336bd497413046513227eb55c47d817e9a6d3a55",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 17,
      "deletions": 0,
      "changes": 17,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/54b8cbd0e4063846349634aefa8ed1a3c0ac62ca/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/54b8cbd0e4063846349634aefa8ed1a3c0ac62ca/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=54b8cbd0e4063846349634aefa8ed1a3c0ac62ca",
      "patch": "@@ -1,3 +1,20 @@\n+2020-04-11  Kamil Rytarowski  <n54@gmx.com>\n+\n+\t* nbsd-nat.c; Include \"nbsd-tdep.h\" and \"gdbarch.h\".\n+\t* nbsd-nat.c (nbsd_nat_target::find_memory_regions)\n+\t(nbsd_nat_target::info_proc): New functions.\n+\t* nbsd-nat.c (kinfo_get_vmmap): New function.\n+\t* nbsd-nat.c (nbsd_nat_target::info_proc) Use\n+\tnbsd_info_proc_mappings_header and nbsd_info_proc_mappings_entry.\n+\t* nbsd-tdep.c (nbsd_info_proc_mappings_header)\n+\t(nbsd_info_proc_mappings_entry, nbsd_vm_map_entry_flags): New\n+\tfunctions.\n+\t* nbsd-tdep.c (KINFO_VME_PROT_READ, KINFO_VME_PROT_WRITE)\n+\t(KINFO_VME_PROT_EXEC, KINFO_VME_FLAG_COW)\n+\t(KINFO_VME_FLAG_NEEDS_COPY, KINFO_VME_FLAG_NOCOREDUMP)\n+\t(KINFO_VME_FLAG_PAGEABLE, KINFO_VME_FLAG_GROWS_UP)\n+\t(KINFO_VME_FLAG_GROWS_DOWN): New.\n+\n 2020-04-10  Artur Shepilko  <nomadbyte@gmail.com>\n \n \t* utils.c (copy_bitwise): Use unsigned 0 constant as operand of"
    },
    {
      "sha": "2420153c7bc5cfd8fbf9830d57c475ed13284ba2",
      "filename": "gdb/nbsd-nat.c",
      "status": "modified",
      "additions": 149,
      "deletions": 0,
      "changes": 149,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/54b8cbd0e4063846349634aefa8ed1a3c0ac62ca/gdb/nbsd-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/54b8cbd0e4063846349634aefa8ed1a3c0ac62ca/gdb/nbsd-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/nbsd-nat.c?ref=54b8cbd0e4063846349634aefa8ed1a3c0ac62ca",
      "patch": "@@ -21,7 +21,9 @@\n \n #include \"nbsd-nat.h\"\n #include \"gdbthread.h\"\n+#include \"nbsd-tdep.h\"\n #include \"inferior.h\"\n+#include \"gdbarch.h\"\n \n #include <sys/types.h>\n #include <sys/ptrace.h>\n@@ -199,3 +201,150 @@ nbsd_nat_target::pid_to_str (ptid_t ptid)\n \n   return normal_pid_to_str (ptid);\n }\n+\n+/* Retrieve all the memory regions in the specified process.  */\n+\n+static gdb::unique_xmalloc_ptr<struct kinfo_vmentry[]>\n+nbsd_kinfo_get_vmmap (pid_t pid, size_t *size)\n+{\n+  int mib[5] = {CTL_VM, VM_PROC, VM_PROC_MAP, pid,\n+\t\tsizeof (struct kinfo_vmentry)};\n+\n+  size_t length = 0;\n+  if (sysctl (mib, ARRAY_SIZE (mib), NULL, &length, NULL, 0))\n+    {\n+      *size = 0;\n+      return NULL;\n+    }\n+\n+  /* Prereserve more space.  The length argument is volatile and can change\n+     between the sysctl(3) calls as this function can be called against a\n+     running process.  */\n+  length = length * 5 / 3;\n+\n+  gdb::unique_xmalloc_ptr<struct kinfo_vmentry[]> kiv\n+    (XNEWVAR (kinfo_vmentry, length));\n+\n+  if (sysctl (mib, ARRAY_SIZE (mib), kiv.get (), &length, NULL, 0))\n+    {\n+      *size = 0;\n+      return NULL;\n+    }\n+\n+  *size = length / sizeof (struct kinfo_vmentry);\n+  return kiv;\n+}\n+\n+/* Iterate over all the memory regions in the current inferior,\n+   calling FUNC for each memory region.  OBFD is passed as the last\n+   argument to FUNC.  */\n+\n+int\n+nbsd_nat_target::find_memory_regions (find_memory_region_ftype func,\n+\t\t\t\t      void *data)\n+{\n+  pid_t pid = inferior_ptid.pid ();\n+\n+  size_t nitems;\n+  gdb::unique_xmalloc_ptr<struct kinfo_vmentry[]> vmentl\n+    = nbsd_kinfo_get_vmmap (pid, &nitems);\n+  if (vmentl == NULL)\n+    perror_with_name (_(\"Couldn't fetch VM map entries.\"));\n+\n+  for (size_t i = 0; i < nitems; i++)\n+    {\n+      struct kinfo_vmentry *kve = &vmentl[i];\n+\n+      /* Skip unreadable segments and those where MAP_NOCORE has been set.  */\n+      if (!(kve->kve_protection & KVME_PROT_READ)\n+\t  || kve->kve_flags & KVME_FLAG_NOCOREDUMP)\n+\tcontinue;\n+\n+      /* Skip segments with an invalid type.  */\n+      switch (kve->kve_type)\n+\t{\n+\tcase KVME_TYPE_VNODE:\n+\tcase KVME_TYPE_ANON:\n+\tcase KVME_TYPE_SUBMAP:\n+\tcase KVME_TYPE_OBJECT:\n+\t  break;\n+\tdefault:\n+\t  continue;\n+\t}\n+\n+      size_t size = kve->kve_end - kve->kve_start;\n+      if (info_verbose)\n+\t{\n+\t  fprintf_filtered (gdb_stdout,\n+\t\t\t    \"Save segment, %ld bytes at %s (%c%c%c)\\n\",\n+\t\t\t    (long) size,\n+\t\t\t    paddress (target_gdbarch (), kve->kve_start),\n+\t\t\t    kve->kve_protection & KVME_PROT_READ ? 'r' : '-',\n+\t\t\t    kve->kve_protection & KVME_PROT_WRITE ? 'w' : '-',\n+\t\t\t    kve->kve_protection & KVME_PROT_EXEC ? 'x' : '-');\n+\t}\n+\n+      /* Invoke the callback function to create the corefile segment.\n+\t Pass MODIFIED as true, we do not know the real modification state.  */\n+      func (kve->kve_start, size, kve->kve_protection & KVME_PROT_READ,\n+\t    kve->kve_protection & KVME_PROT_WRITE,\n+\t    kve->kve_protection & KVME_PROT_EXEC, 1, data);\n+    }\n+  return 0;\n+}\n+\n+/* Implement the \"info_proc\" target_ops method.  */\n+\n+bool\n+nbsd_nat_target::info_proc (const char *args, enum info_proc_what what)\n+{\n+  pid_t pid;\n+  bool do_mappings = false;\n+\n+  switch (what)\n+    {\n+    case IP_MAPPINGS:\n+      do_mappings = true;\n+      break;\n+    default:\n+      error (_(\"Not supported on this target.\"));\n+    }\n+\n+  gdb_argv built_argv (args);\n+  if (built_argv.count () == 0)\n+    {\n+      pid = inferior_ptid.pid ();\n+      if (pid == 0)\n+        error (_(\"No current process: you must name one.\"));\n+    }\n+  else if (built_argv.count () == 1 && isdigit (built_argv[0][0]))\n+    pid = strtol (built_argv[0], NULL, 10);\n+  else\n+    error (_(\"Invalid arguments.\"));\n+\n+  printf_filtered (_(\"process %d\\n\"), pid);\n+\n+  if (do_mappings)\n+    {\n+      size_t nvment;\n+      gdb::unique_xmalloc_ptr<struct kinfo_vmentry[]> vmentl\n+\t= nbsd_kinfo_get_vmmap (pid, &nvment);\n+\n+      if (vmentl != nullptr)\n+\t{\n+\t  int addr_bit = TARGET_CHAR_BIT * sizeof (void *);\n+\t  nbsd_info_proc_mappings_header (addr_bit);\n+\n+\t  struct kinfo_vmentry *kve = vmentl.get ();\n+\t  for (int i = 0; i < nvment; i++, kve++)\n+\t    nbsd_info_proc_mappings_entry (addr_bit, kve->kve_start,\n+\t\t\t\t\t   kve->kve_end, kve->kve_offset,\n+\t\t\t\t\t   kve->kve_flags, kve->kve_protection,\n+\t\t\t\t\t   kve->kve_path);\n+\t}\n+      else\n+\twarning (_(\"unable to fetch virtual memory map\"));\n+    }\n+\n+  return true;\n+}"
    },
    {
      "sha": "256db4b9017fb78d2265bcfc61969e72cafb4a33",
      "filename": "gdb/nbsd-nat.h",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/54b8cbd0e4063846349634aefa8ed1a3c0ac62ca/gdb/nbsd-nat.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/54b8cbd0e4063846349634aefa8ed1a3c0ac62ca/gdb/nbsd-nat.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/nbsd-nat.h?ref=54b8cbd0e4063846349634aefa8ed1a3c0ac62ca",
      "patch": "@@ -35,6 +35,9 @@ struct nbsd_nat_target : public inf_ptrace_target\n   void post_attach (int pid) override;\n   void update_thread_list () override;\n   std::string pid_to_str (ptid_t ptid) override;\n+\n+  int find_memory_regions (find_memory_region_ftype func, void *data) override;\n+  bool info_proc (const char *, enum info_proc_what) override;\n };\n \n #endif /* nbsd-nat.h */"
    },
    {
      "sha": "52e0640e35cad506e1eb31d075d97206b8bbc3eb",
      "filename": "gdb/nbsd-tdep.c",
      "status": "modified",
      "additions": 89,
      "deletions": 0,
      "changes": 89,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/54b8cbd0e4063846349634aefa8ed1a3c0ac62ca/gdb/nbsd-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/54b8cbd0e4063846349634aefa8ed1a3c0ac62ca/gdb/nbsd-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/nbsd-tdep.c?ref=54b8cbd0e4063846349634aefa8ed1a3c0ac62ca",
      "patch": "@@ -26,6 +26,23 @@\n #include \"gdbarch.h\"\n #include \"objfiles.h\"\n \n+/* Flags in the 'kve_protection' field in struct kinfo_vmentry.  These\n+   match the KVME_PROT_* constants in <sys/sysctl.h>.  */\n+\n+#define\tKINFO_VME_PROT_READ\t0x00000001\n+#define\tKINFO_VME_PROT_WRITE\t0x00000002\n+#define\tKINFO_VME_PROT_EXEC\t0x00000004\n+\n+/* Flags in the 'kve_flags' field in struct kinfo_vmentry.  These\n+   match the KVME_FLAG_* constants in <sys/sysctl.h>.  */\n+\n+#define\tKINFO_VME_FLAG_COW\t\t0x00000001\n+#define\tKINFO_VME_FLAG_NEEDS_COPY\t0x00000002\n+#define\tKINFO_VME_FLAG_NOCOREDUMP\t0x00000004\n+#define\tKINFO_VME_FLAG_PAGEABLE\t\t0x00000008\n+#define\tKINFO_VME_FLAG_GROWS_UP\t\t0x00000010\n+#define\tKINFO_VME_FLAG_GROWS_DOWN\t0x00000020\n+\n /* FIXME: kettenis/20060115: We should really eliminate the next two\n    functions completely.  */\n \n@@ -357,6 +374,78 @@ nbsd_skip_solib_resolver (struct gdbarch *gdbarch, CORE_ADDR pc)\n \n /* See nbsd-tdep.h.  */\n \n+void\n+nbsd_info_proc_mappings_header (int addr_bit)\n+{\n+  printf_filtered (_(\"Mapped address spaces:\\n\\n\"));\n+  if (addr_bit == 64)\n+    {\n+      printf_filtered (\"  %18s %18s %10s %10s %9s %s\\n\",\n+\t\t       \"Start Addr\",\n+\t\t       \"  End Addr\",\n+\t\t       \"      Size\", \"    Offset\", \"Flags  \", \"File\");\n+    }\n+  else\n+    {\n+      printf_filtered (\"\\t%10s %10s %10s %10s %9s %s\\n\",\n+\t\t       \"Start Addr\",\n+\t\t       \"  End Addr\",\n+\t\t       \"      Size\", \"    Offset\", \"Flags  \", \"File\");\n+    }\n+}\n+\n+/* Helper function to generate mappings flags for a single VM map\n+   entry in 'info proc mappings'.  */\n+\n+static const char *\n+nbsd_vm_map_entry_flags (int kve_flags, int kve_protection)\n+{\n+  static char vm_flags[9];\n+\n+  vm_flags[0] = (kve_protection & KINFO_VME_PROT_READ) ? 'r' : '-';\n+  vm_flags[1] = (kve_protection & KINFO_VME_PROT_WRITE) ? 'w' : '-';\n+  vm_flags[2] = (kve_protection & KINFO_VME_PROT_EXEC) ? 'x' : '-';\n+  vm_flags[3] = ' ';\n+  vm_flags[4] = (kve_flags & KINFO_VME_FLAG_COW) ? 'C' : '-';\n+  vm_flags[5] = (kve_flags & KINFO_VME_FLAG_NEEDS_COPY) ? 'N' : '-';\n+  vm_flags[6] = (kve_flags & KINFO_VME_FLAG_PAGEABLE) ? 'P' : '-';\n+  vm_flags[7] = (kve_flags & KINFO_VME_FLAG_GROWS_UP) ? 'U'\n+    : (kve_flags & KINFO_VME_FLAG_GROWS_DOWN) ? 'D' : '-';\n+  vm_flags[8] = '\\0';\n+\n+  return vm_flags;\n+}\n+\n+void\n+nbsd_info_proc_mappings_entry (int addr_bit, ULONGEST kve_start,\n+\t\t\t       ULONGEST kve_end, ULONGEST kve_offset,\n+\t\t\t       int kve_flags, int kve_protection,\n+\t\t\t       const char *kve_path)\n+{\n+  if (addr_bit == 64)\n+    {\n+      printf_filtered (\"  %18s %18s %10s %10s %9s %s\\n\",\n+\t\t       hex_string (kve_start),\n+\t\t       hex_string (kve_end),\n+\t\t       hex_string (kve_end - kve_start),\n+\t\t       hex_string (kve_offset),\n+\t\t       nbsd_vm_map_entry_flags (kve_flags, kve_protection),\n+\t\t       kve_path);\n+    }\n+  else\n+    {\n+      printf_filtered (\"\\t%10s %10s %10s %10s %9s %s\\n\",\n+\t\t       hex_string (kve_start),\n+\t\t       hex_string (kve_end),\n+\t\t       hex_string (kve_end - kve_start),\n+\t\t       hex_string (kve_offset),\n+\t\t       nbsd_vm_map_entry_flags (kve_flags, kve_protection),\n+\t\t       kve_path);\n+    }\n+}\n+\n+/* See nbsd-tdep.h.  */\n+\n void\n nbsd_init_abi (struct gdbarch_info info, struct gdbarch *gdbarch)\n {"
    },
    {
      "sha": "a6e3a8f0f3f182d78829f0e56fc3556f384d19ce",
      "filename": "gdb/nbsd-tdep.h",
      "status": "modified",
      "additions": 18,
      "deletions": 0,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/54b8cbd0e4063846349634aefa8ed1a3c0ac62ca/gdb/nbsd-tdep.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/54b8cbd0e4063846349634aefa8ed1a3c0ac62ca/gdb/nbsd-tdep.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/nbsd-tdep.h?ref=54b8cbd0e4063846349634aefa8ed1a3c0ac62ca",
      "patch": "@@ -29,4 +29,22 @@ int nbsd_pc_in_sigtramp (CORE_ADDR, const char *);\n \n void nbsd_init_abi (struct gdbarch_info, struct gdbarch *);\n \n+/* Output the header for \"info proc mappings\".  ADDR_BIT is the size\n+   of a virtual address in bits.  */\n+\n+extern void nbsd_info_proc_mappings_header (int addr_bit);\n+\n+/* Output description of a single memory range for \"info proc\n+   mappings\".  ADDR_BIT is the size of a virtual address in bits.  The\n+   KVE_START, KVE_END, KVE_OFFSET, KVE_FLAGS, and KVE_PROTECTION\n+   parameters should contain the value of the corresponding fields in\n+   a 'struct kinfo_vmentry'.  The KVE_PATH parameter should contain a\n+   pointer to the 'kve_path' field in a 'struct kinfo_vmentry'. */\n+\n+extern void nbsd_info_proc_mappings_entry (int addr_bit, ULONGEST kve_start,\n+\t\t\t\t\t   ULONGEST kve_end,\n+\t\t\t\t\t   ULONGEST kve_offset,\n+\t\t\t\t\t   int kve_flags, int kve_protection,\n+\t\t\t\t\t   const char *kve_path);\n+\n #endif /* NBSD_TDEP_H */"
    }
  ]
}