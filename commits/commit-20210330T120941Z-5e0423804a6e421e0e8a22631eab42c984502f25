{
  "sha": "5e0423804a6e421e0e8a22631eab42c984502f25",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NWUwNDIzODA0YTZlNDIxZTBlOGEyMjYzMWVhYjQyYzk4NDUwMmYyNQ==",
  "commit": {
    "author": {
      "name": "Jan Beulich",
      "email": "jbeulich@suse.com",
      "date": "2021-03-30T12:09:41Z"
    },
    "committer": {
      "name": "Jan Beulich",
      "email": "jbeulich@suse.com",
      "date": "2021-03-30T12:09:41Z"
    },
    "message": "x86: drop seg_entry\n\nUse struct reg_entry instead for most purposes, with a separate array\nholding just the respective opcode prefix bytes.",
    "tree": {
      "sha": "8c4af9a6fd049ff6140fd7ca66160cb1ed273e5f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/8c4af9a6fd049ff6140fd7ca66160cb1ed273e5f"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/5e0423804a6e421e0e8a22631eab42c984502f25",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5e0423804a6e421e0e8a22631eab42c984502f25",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/5e0423804a6e421e0e8a22631eab42c984502f25",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5e0423804a6e421e0e8a22631eab42c984502f25/comments",
  "author": {
    "login": "jbeulich",
    "id": 5610135,
    "node_id": "MDQ6VXNlcjU2MTAxMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5610135?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jbeulich",
    "html_url": "https://github.com/jbeulich",
    "followers_url": "https://api.github.com/users/jbeulich/followers",
    "following_url": "https://api.github.com/users/jbeulich/following{/other_user}",
    "gists_url": "https://api.github.com/users/jbeulich/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jbeulich/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jbeulich/subscriptions",
    "organizations_url": "https://api.github.com/users/jbeulich/orgs",
    "repos_url": "https://api.github.com/users/jbeulich/repos",
    "events_url": "https://api.github.com/users/jbeulich/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jbeulich/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "jbeulich",
    "id": 5610135,
    "node_id": "MDQ6VXNlcjU2MTAxMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/5610135?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jbeulich",
    "html_url": "https://github.com/jbeulich",
    "followers_url": "https://api.github.com/users/jbeulich/followers",
    "following_url": "https://api.github.com/users/jbeulich/following{/other_user}",
    "gists_url": "https://api.github.com/users/jbeulich/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jbeulich/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jbeulich/subscriptions",
    "organizations_url": "https://api.github.com/users/jbeulich/orgs",
    "repos_url": "https://api.github.com/users/jbeulich/repos",
    "events_url": "https://api.github.com/users/jbeulich/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jbeulich/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "346848622660e06b352613d425fe6ad67194ed14",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/346848622660e06b352613d425fe6ad67194ed14",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/346848622660e06b352613d425fe6ad67194ed14"
    }
  ],
  "stats": {
    "total": 129,
    "additions": 63,
    "deletions": 66
  },
  "files": [
    {
      "sha": "354a14be15d7c521cb77671e68e4c6009d01b9fb",
      "filename": "gas/ChangeLog",
      "status": "modified",
      "additions": 15,
      "deletions": 0,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5e0423804a6e421e0e8a22631eab42c984502f25/gas/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5e0423804a6e421e0e8a22631eab42c984502f25/gas/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ChangeLog?ref=5e0423804a6e421e0e8a22631eab42c984502f25",
      "patch": "@@ -1,3 +1,18 @@\n+2021-03-30  Jan Beulich  <jbeulich@suse.com>\n+\n+\t* config/tc-i386.c (build_modrm_byte): Change return type.\n+\tChange type of \"default_seg\". Use NULL. Adjust setting of\n+\t\"default_seg\".\n+\t(reg_ds, reg_es, reg_ss): New.\n+\t(struct _i386_insn): Change type of seg[].\n+\t(md_begin): Initialize reg_ds, reg_es, and reg_ss.\n+\t(swap_operands): Change type of \"temp_seg\".\n+\t(check_string): Adjust %es check.\n+\t(process_operands): Change type of \"default_seg\". Use NULL.\n+\tAdjust segment override processing..\n+\t(i386_att_operand): Adjust segment override handling.\n+\t* config/tc-i386-intel.c (i386_intel_operand): Likewise.\n+\n 2021-03-30  Jan Beulich  <jbeulich@suse.com>\n \n \t* config/tc-i386.c (reg_eax): New."
    },
    {
      "sha": "f9b44a46842ccc6c477281a0bb0acc074edab845",
      "filename": "gas/config/tc-i386-intel.c",
      "status": "modified",
      "additions": 4,
      "deletions": 10,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5e0423804a6e421e0e8a22631eab42c984502f25/gas/config/tc-i386-intel.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5e0423804a6e421e0e8a22631eab42c984502f25/gas/config/tc-i386-intel.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-i386-intel.c?ref=5e0423804a6e421e0e8a22631eab42c984502f25",
      "patch": "@@ -1028,16 +1028,10 @@ i386_intel_operand (char *operand_string, int got_a_float)\n \t      as_warn (_(\"redundant segment overrides\"));\n \t      break;\n \t    }\n-\t  switch (i386_regtab[expP->X_add_number].reg_num)\n-\t    {\n-\t    case 0: i.seg[i.mem_operands] = &es; break;\n-\t    case 1: i.seg[i.mem_operands] = &cs; break;\n-\t    case 2: i.seg[i.mem_operands] = &ss; break;\n-\t    case 3: i.seg[i.mem_operands] = &ds; break;\n-\t    case 4: i.seg[i.mem_operands] = &fs; break;\n-\t    case 5: i.seg[i.mem_operands] = &gs; break;\n-\t    case RegFlat: i.seg[i.mem_operands] = NULL; break;\n-\t    }\n+\t  if (i386_regtab[expP->X_add_number].reg_num == RegFlat)\n+\t    i.seg[i.mem_operands] = NULL;\n+\t  else\n+\t    i.seg[i.mem_operands] = &i386_regtab[expP->X_add_number];\n \t}\n \n       if (!i386_index_check (operand_string))"
    },
    {
      "sha": "9c3d97850343428baffcfd48ba7233038b41100f",
      "filename": "gas/config/tc-i386.c",
      "status": "modified",
      "additions": 27,
      "deletions": 35,
      "changes": 62,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5e0423804a6e421e0e8a22631eab42c984502f25/gas/config/tc-i386.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5e0423804a6e421e0e8a22631eab42c984502f25/gas/config/tc-i386.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-i386.c?ref=5e0423804a6e421e0e8a22631eab42c984502f25",
      "patch": "@@ -190,7 +190,7 @@ static int check_qword_reg (void);\n static int check_word_reg (void);\n static int finalize_imm (void);\n static int process_operands (void);\n-static const seg_entry *build_modrm_byte (void);\n+static const reg_entry *build_modrm_byte (void);\n static void output_insn (void);\n static void output_imm (fragS *, offsetT);\n static void output_disp (fragS *, offsetT);\n@@ -215,6 +215,9 @@ static const reg_entry bad_reg = { \"<bad>\", OPERAND_TYPE_NONE, 0, 0,\n \t\t\t\t   { Dw2Inval, Dw2Inval } };\n \n static const reg_entry *reg_eax;\n+static const reg_entry *reg_ds;\n+static const reg_entry *reg_es;\n+static const reg_entry *reg_ss;\n static const reg_entry *reg_st0;\n static const reg_entry *reg_k0;\n \n@@ -308,7 +311,7 @@ struct _i386_insn\n \n     /* SEG gives the seg_entries of this insn.  They are zero unless\n        explicit segment overrides are given.  */\n-    const seg_entry *seg[2];\n+    const reg_entry *seg[2];\n \n     /* Copied first memory operand string, for re-checking.  */\n     char *memop1_string;\n@@ -3107,6 +3110,15 @@ md_begin (void)\n \t      }\n \t    break;\n \n+\t  case SReg:\n+\t    switch (regtab->reg_num)\n+\t      {\n+\t      case 0: reg_es = regtab; break;\n+\t      case 2: reg_ss = regtab; break;\n+\t      case 3: reg_ds = regtab; break;\n+\t      }\n+\t    break;\n+\n \t  case RegMask:\n \t    if (!regtab->reg_num)\n \t      reg_k0 = regtab;\n@@ -5522,7 +5534,7 @@ swap_operands (void)\n \n   if (i.mem_operands == 2)\n     {\n-      const seg_entry *temp_seg;\n+      const reg_entry *temp_seg;\n       temp_seg = i.seg[0];\n       i.seg[0] = i.seg[1];\n       i.seg[1] = temp_seg;\n@@ -6752,7 +6764,7 @@ check_string (void)\n   unsigned int es_op = i.tm.opcode_modifier.isstring - IS_STRING_ES_OP0;\n   unsigned int op = i.tm.operand_types[0].bitfield.baseindex ? es_op : 0;\n \n-  if (i.seg[op] != NULL && i.seg[op] != &es)\n+  if (i.seg[op] != NULL && i.seg[op] != reg_es)\n     {\n       as_bad (_(\"`%s' operand %u must use `%ses' segment\"),\n \t      i.tm.name,\n@@ -7543,7 +7555,7 @@ process_operands (void)\n   /* Default segment register this instruction will use for memory\n      accesses.  0 means unknown.  This is only for optimizing out\n      unnecessary segment overrides.  */\n-  const seg_entry *default_seg = 0;\n+  const reg_entry *default_seg = NULL;\n \n   if (i.tm.opcode_modifier.sse2avx)\n     {\n@@ -7730,13 +7742,13 @@ process_operands (void)\n   else if (i.tm.opcode_modifier.opcodespace == SPACE_BASE\n \t   && (i.tm.base_opcode & ~3) == MOV_AX_DISP32)\n     {\n-      default_seg = &ds;\n+      default_seg = reg_ds;\n     }\n   else if (i.tm.opcode_modifier.isstring)\n     {\n       /* For the string instructions that allow a segment override\n \t on one of their operands, the default segment is ds.  */\n-      default_seg = &ds;\n+      default_seg = reg_ds;\n     }\n   else if (i.short_form)\n     {\n@@ -7789,9 +7801,9 @@ process_operands (void)\n      point, and the specified segment prefix will always be used.  */\n   if (i.seg[0]\n       && i.seg[0] != default_seg\n-      && i.seg[0]->seg_prefix != i.prefix[SEG_PREFIX])\n+      && i386_seg_prefixes[i.seg[0]->reg_num] != i.prefix[SEG_PREFIX])\n     {\n-      if (!add_prefix (i.seg[0]->seg_prefix))\n+      if (!add_prefix (i386_seg_prefixes[i.seg[0]->reg_num]))\n \treturn 0;\n     }\n   return 1;\n@@ -7816,10 +7828,10 @@ static INLINE void set_rex_vrex (const reg_entry *r, unsigned int rex_bit,\n     i.vrex |= rex_bit;\n }\n \n-static const seg_entry *\n+static const reg_entry *\n build_modrm_byte (void)\n {\n-  const seg_entry *default_seg = 0;\n+  const reg_entry *default_seg = NULL;\n   unsigned int source, dest;\n   int vex_3_sources;\n \n@@ -8103,7 +8115,7 @@ build_modrm_byte (void)\n \t\t}\n \t    }\n \n-\t  default_seg = &ds;\n+\t  default_seg = reg_ds;\n \n \t  if (i.base_reg == 0)\n \t    {\n@@ -8197,7 +8209,7 @@ build_modrm_byte (void)\n \t\t    i.rm.regmem = i.index_reg->reg_num - 6;\n \t\t  break;\n \t\tcase 5: /* (%bp)  */\n-\t\t  default_seg = &ss;\n+\t\t  default_seg = reg_ss;\n \t\t  if (i.index_reg == 0)\n \t\t    {\n \t\t      i.rm.regmem = 6;\n@@ -8258,7 +8270,7 @@ build_modrm_byte (void)\n \t      if (!(i.base_reg->reg_flags & RegRex)\n \t\t  && (i.base_reg->reg_num == EBP_REG_NUM\n \t\t   || i.base_reg->reg_num == ESP_REG_NUM))\n-\t\t  default_seg = &ss;\n+\t\t  default_seg = reg_ss;\n \t      if (i.base_reg->reg_num == 5 && i.disp_operands == 0)\n \t\t{\n \t\t  fake_zero_displacement = 1;\n@@ -11325,27 +11337,7 @@ i386_att_operand (char *operand_string)\n \t++op_string;\n       if (*op_string == ':' && r->reg_type.bitfield.class == SReg)\n \t{\n-\t  switch (r->reg_num)\n-\t    {\n-\t    case 0:\n-\t      i.seg[i.mem_operands] = &es;\n-\t      break;\n-\t    case 1:\n-\t      i.seg[i.mem_operands] = &cs;\n-\t      break;\n-\t    case 2:\n-\t      i.seg[i.mem_operands] = &ss;\n-\t      break;\n-\t    case 3:\n-\t      i.seg[i.mem_operands] = &ds;\n-\t      break;\n-\t    case 4:\n-\t      i.seg[i.mem_operands] = &fs;\n-\t      break;\n-\t    case 5:\n-\t      i.seg[i.mem_operands] = &gs;\n-\t      break;\n-\t    }\n+\t  i.seg[i.mem_operands] = r;\n \n \t  /* Skip the ':' and whitespace.  */\n \t  ++op_string;"
    },
    {
      "sha": "7179187f7d084a5bb955c8c27981f2839d1e4c8f",
      "filename": "opcodes/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5e0423804a6e421e0e8a22631eab42c984502f25/opcodes/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5e0423804a6e421e0e8a22631eab42c984502f25/opcodes/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/ChangeLog?ref=5e0423804a6e421e0e8a22631eab42c984502f25",
      "patch": "@@ -1,3 +1,10 @@\n+2021-03-30  Jan Beulich  <jbeulich@suse.com>\n+\n+\t* i386-opc.c (cs, ds, ss, es, fs, gs): Delete.\n+\t(i386_seg_prefixes): New.\n+\t* i386-opc.h (cs, ds, ss, es, fs, gs): Delete.\n+\t(i386_seg_prefixes): Declare.\n+\n 2021-03-30  Jan Beulich  <jbeulich@suse.com>\n \n \t* i386-opc.h (REGNAM_AL, REGNAM_AX, REGNAM_EAX): Delete."
    },
    {
      "sha": "ca3bdfb449b690a131a24b0a947126cb8831447e",
      "filename": "opcodes/i386-opc.c",
      "status": "modified",
      "additions": 9,
      "deletions": 7,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5e0423804a6e421e0e8a22631eab42c984502f25/opcodes/i386-opc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5e0423804a6e421e0e8a22631eab42c984502f25/opcodes/i386-opc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/i386-opc.c?ref=5e0423804a6e421e0e8a22631eab42c984502f25",
      "patch": "@@ -23,10 +23,12 @@\n #include \"i386-opc.h\"\n #include \"i386-tbl.h\"\n \n-/* Segment stuff.  */\n-const seg_entry cs = { \"cs\", 0x2e };\n-const seg_entry ds = { \"ds\", 0x3e };\n-const seg_entry ss = { \"ss\", 0x36 };\n-const seg_entry es = { \"es\", 0x26 };\n-const seg_entry fs = { \"fs\", 0x64 };\n-const seg_entry gs = { \"gs\", 0x65 };\n+/* To be indexed by segment register number.  */\n+const unsigned char i386_seg_prefixes[] = {\n+  ES_PREFIX_OPCODE,\n+  CS_PREFIX_OPCODE,\n+  SS_PREFIX_OPCODE,\n+  DS_PREFIX_OPCODE,\n+  FS_PREFIX_OPCODE,\n+  GS_PREFIX_OPCODE\n+};"
    },
    {
      "sha": "60c445f2b40e02d3224638e098bc32f3b3653c7f",
      "filename": "opcodes/i386-opc.h",
      "status": "modified",
      "additions": 1,
      "deletions": 14,
      "changes": 15,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5e0423804a6e421e0e8a22631eab42c984502f25/opcodes/i386-opc.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5e0423804a6e421e0e8a22631eab42c984502f25/opcodes/i386-opc.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/i386-opc.h?ref=5e0423804a6e421e0e8a22631eab42c984502f25",
      "patch": "@@ -992,17 +992,4 @@ reg_entry;\n \n extern const reg_entry i386_regtab[];\n extern const unsigned int i386_regtab_size;\n-\n-typedef struct\n-{\n-  char *seg_name;\n-  unsigned int seg_prefix;\n-}\n-seg_entry;\n-\n-extern const seg_entry cs;\n-extern const seg_entry ds;\n-extern const seg_entry ss;\n-extern const seg_entry es;\n-extern const seg_entry fs;\n-extern const seg_entry gs;\n+extern const unsigned char i386_seg_prefixes[6];"
    }
  ]
}