{
  "sha": "a7077ce7604f78b896595dceccd89d70d2a050a0",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YTcwNzdjZTc2MDRmNzhiODk2NTk1ZGNlY2NkODlkNzBkMmEwNTBhMA==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2021-05-12T07:57:34Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2021-05-12T11:59:25Z"
    },
    "message": "Ensure data pointer kept within bounds\n\n\t* dwarf.c (process_extended_line_op): Don't bump data pointer past\n\tend when strnlen doesn't find string terminator.\n\t(decode_location_expression): Remove dead code.\n\t(skip_attr_bytes): Remove const from end param.  Ensure data\n\tpointer doesn't pass end.\n\t(get_type_signedness): Remove const from end param.\n\t(read_and_display_attr_value): Ensure data pointer doesn't pass end.\n\t(display_debug_lines_raw, display_debug_lines_decoded): Likewise.\n\t(display_debug_pubnames_worker): Likewise.\n\t(display_debug_pubnames_worker): Use SAFE_BYTE_GET_AND INC rather\n\tthan blindly incrementing data pointer.\n\t(display_debug_addr, display_debug_str_offsets): Likewise.  Don't\n\tcompare pointers, compare lengths.",
    "tree": {
      "sha": "4877e8c13d3876a002a26fd6911793fa0c44ddc9",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/4877e8c13d3876a002a26fd6911793fa0c44ddc9"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/a7077ce7604f78b896595dceccd89d70d2a050a0",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a7077ce7604f78b896595dceccd89d70d2a050a0",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/a7077ce7604f78b896595dceccd89d70d2a050a0",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a7077ce7604f78b896595dceccd89d70d2a050a0/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "6d1ad6f7834d62bedec138aaf3ac872c60702ecd",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6d1ad6f7834d62bedec138aaf3ac872c60702ecd",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/6d1ad6f7834d62bedec138aaf3ac872c60702ecd"
    }
  ],
  "stats": {
    "total": 112,
    "additions": 72,
    "deletions": 40
  },
  "files": [
    {
      "sha": "9f3099fcd76b53965c9df73a0292042fd99374ac",
      "filename": "binutils/ChangeLog",
      "status": "modified",
      "additions": 16,
      "deletions": 0,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a7077ce7604f78b896595dceccd89d70d2a050a0/binutils/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a7077ce7604f78b896595dceccd89d70d2a050a0/binutils/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/ChangeLog?ref=a7077ce7604f78b896595dceccd89d70d2a050a0",
      "patch": "@@ -1,3 +1,19 @@\n+2021-05-12  Alan Modra  <amodra@gmail.com>\n+\n+\t* dwarf.c (process_extended_line_op): Don't bump data pointer past\n+\tend when strnlen doesn't find string terminator.\n+\t(decode_location_expression): Remove dead code.\n+\t(skip_attr_bytes): Remove const from end param.  Ensure data\n+\tpointer doesn't pass end.\n+\t(get_type_signedness): Remove const from end param.\n+\t(read_and_display_attr_value): Ensure data pointer doesn't pass end.\n+\t(display_debug_lines_raw, display_debug_lines_decoded): Likewise.\n+\t(display_debug_pubnames_worker): Likewise.\n+\t(display_debug_pubnames_worker): Use SAFE_BYTE_GET_AND INC rather\n+\tthan blindly incrementing data pointer.\n+\t(display_debug_addr, display_debug_str_offsets): Likewise.  Don't\n+\tcompare pointers, compare lengths.\n+\n 2021-05-12  Alan Modra  <amodra@gmail.com>\n \n \t* dwarf.c (SAFE_BYTE_GET_INTERNAL): Define."
    },
    {
      "sha": "56983e1c799c10e8d0affc4a1ddc8a24a956084b",
      "filename": "binutils/dwarf.c",
      "status": "modified",
      "additions": 56,
      "deletions": 40,
      "changes": 96,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a7077ce7604f78b896595dceccd89d70d2a050a0/binutils/dwarf.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a7077ce7604f78b896595dceccd89d70d2a050a0/binutils/dwarf.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/dwarf.c?ref=a7077ce7604f78b896595dceccd89d70d2a050a0",
      "patch": "@@ -508,7 +508,9 @@ process_extended_line_op (unsigned char * data,\n \n \tname = data;\n \tl = strnlen ((char *) data, end - data);\n-\tdata += l + 1;\n+\tdata += l;\n+\tif (data < end)\n+\t  data++;\n \tREAD_ULEB (val, data, end);\n \tprintf (\"%s\\t\", dwarf_vmatoa (\"u\", val));\n \tREAD_ULEB (val, data, end);\n@@ -1612,8 +1614,6 @@ decode_location_expression (unsigned char * data,\n \t    need_frame_base = 1;\n \t  putchar (')');\n \t  data += uvalue;\n-\t  if (data > end)\n-\t    data = end;\n \t  break;\n \tcase DW_OP_const_type:\n \tcase DW_OP_GNU_const_type:\n@@ -1913,16 +1913,17 @@ check_uvalue (const unsigned char * start,\n }\n \n static unsigned char *\n-skip_attr_bytes (unsigned long          form,\n-\t\t unsigned char *        data,\n-\t\t unsigned const char *  end,\n-\t\t dwarf_vma              pointer_size,\n-\t\t dwarf_vma              offset_size,\n-\t\t int                    dwarf_version,\n-\t\t dwarf_vma *            value_return)\n+skip_attr_bytes (unsigned long form,\n+\t\t unsigned char *data,\n+\t\t unsigned char *end,\n+\t\t dwarf_vma pointer_size,\n+\t\t dwarf_vma offset_size,\n+\t\t int dwarf_version,\n+\t\t dwarf_vma *value_return)\n {\n   dwarf_signed_vma svalue;\n   dwarf_vma uvalue = 0;\n+  dwarf_vma inc = 0;\n \n   * value_return = 0;\n \n@@ -2000,51 +2001,54 @@ skip_attr_bytes (unsigned long          form,\n \n     case DW_FORM_data8:\n     case DW_FORM_ref_sig8:\n-      data += 8;\n+      inc = 8;\n       break;\n \n     case DW_FORM_data16:\n-      data += 16;\n+      inc = 16;\n       break;\n \n     case DW_FORM_string:\n-      data += strnlen ((char *) data, end - data) + 1;\n+      inc = strnlen ((char *) data, end - data) + 1;\n       break;\n \n     case DW_FORM_block:\n     case DW_FORM_exprloc:\n       READ_ULEB (uvalue, data, end);\n-      data += uvalue;\n+      inc = uvalue;\n       break;\n \n     case DW_FORM_block1:\n-      SAFE_BYTE_GET (uvalue, data, 1, end);\n-      data += 1 + uvalue;\n+      SAFE_BYTE_GET_AND_INC (uvalue, data, 1, end);\n+      inc = uvalue;\n       break;\n \n     case DW_FORM_block2:\n-      SAFE_BYTE_GET (uvalue, data, 2, end);\n-      data += 2 + uvalue;\n+      SAFE_BYTE_GET_AND_INC (uvalue, data, 2, end);\n+      inc = uvalue;\n       break;\n \n     case DW_FORM_block4:\n-      SAFE_BYTE_GET (uvalue, data, 4, end);\n-      data += 4 + uvalue;\n+      SAFE_BYTE_GET_AND_INC (uvalue, data, 4, end);\n+      inc = uvalue;\n       break;\n \n     case DW_FORM_indirect:\n       READ_ULEB (form, data, end);\n       if (form == DW_FORM_implicit_const)\n \tSKIP_ULEB (data, end);\n-      return skip_attr_bytes (form, data, end, pointer_size, offset_size, dwarf_version, value_return);\n+      return skip_attr_bytes (form, data, end, pointer_size, offset_size,\n+\t\t\t      dwarf_version, value_return);\n \n     default:\n       return NULL;\n     }\n \n   * value_return = uvalue;\n-  if (data > end)\n-    data = (unsigned char *) end;\n+  if (inc <= (dwarf_vma) (end - data))\n+    data += inc;\n+  else\n+    data = end;\n   return data;\n }\n \n@@ -2159,7 +2163,7 @@ static void\n get_type_signedness (abbrev_entry *entry,\n \t\t     const struct dwarf_section *section,\n \t\t     unsigned char *data,\n-\t\t     unsigned const char *end,\n+\t\t     unsigned char *end,\n \t\t     dwarf_vma cu_offset,\n \t\t     dwarf_vma pointer_size,\n \t\t     dwarf_vma offset_size,\n@@ -2578,7 +2582,9 @@ read_and_display_attr_value (unsigned long           attribute,\n     case DW_FORM_string:\n       if (!do_loc)\n \tprintf (\"%c%.*s\", delimiter, (int) (end - data), data);\n-      data += strnlen ((char *) data, end - data) + 1;\n+      data += strnlen ((char *) data, end - data);\n+      if (data < end)\n+\tdata++;\n       break;\n \n     case DW_FORM_block:\n@@ -4493,7 +4499,9 @@ display_debug_lines_raw (struct dwarf_section *  section,\n \t\t    {\n \t\t      printf (\"  %d\\t%.*s\\n\", ++last_dir_entry, (int) (end - data), data);\n \n-\t\t      data += strnlen ((char *) data, end - data) + 1;\n+\t\t      data += strnlen ((char *) data, end - data);\n+\t\t      if (data < end)\n+\t\t\tdata++;\n \t\t    }\n \n \t\t  /* PR 17512: file: 002-132094-0.004.  */\n@@ -4502,10 +4510,11 @@ display_debug_lines_raw (struct dwarf_section *  section,\n \t\t}\n \n \t      /* Skip the NUL at the end of the table.  */\n-\t      data++;\n+\t      if (data < end)\n+\t\tdata++;\n \n \t      /* Display the contents of the File Name table.  */\n-\t      if (*data == 0)\n+\t      if (data >= end || *data == 0)\n \t\tprintf (_(\"\\n The File Name Table is empty.\\n\"));\n \t      else\n \t\t{\n@@ -4520,7 +4529,9 @@ display_debug_lines_raw (struct dwarf_section *  section,\n \n \t\t      printf (\"  %d\\t\", ++state_machine_regs.last_file_entry);\n \t\t      name = data;\n-\t\t      data += strnlen ((char *) data, end - data) + 1;\n+\t\t      data += strnlen ((char *) data, end - data);\n+\t\t      if (data < end)\n+\t\t\tdata++;\n \n \t\t      READ_ULEB (val, data, end);\n \t\t      printf (\"%s\\t\", dwarf_vmatoa (\"u\", val));\n@@ -4539,7 +4550,8 @@ display_debug_lines_raw (struct dwarf_section *  section,\n \t\t}\n \n \t      /* Skip the NUL at the end of the table.  */\n-\t      data++;\n+\t      if (data < end)\n+\t\tdata++;\n \t    }\n \n \t  putchar ('\\n');\n@@ -5039,7 +5051,9 @@ display_debug_lines_decoded (struct dwarf_section *  section,\n \n \t\t  while (data < end && *data != 0)\n \t\t    {\n-\t\t      data += strnlen ((char *) data, end - data) + 1;\n+\t\t      data += strnlen ((char *) data, end - data);\n+\t\t      if (data < end)\n+\t\t\tdata++;\n \t\t      n_directories++;\n \t\t    }\n \n@@ -5076,7 +5090,9 @@ display_debug_lines_decoded (struct dwarf_section *  section,\n \t\t    {\n \t\t      /* Skip Name, directory index, last modification\n \t\t\t time and length of file.  */\n-\t\t      data += strnlen ((char *) data, end - data) + 1;\n+\t\t      data += strnlen ((char *) data, end - data);\n+\t\t      if (data < end)\n+\t\t\tdata++;\n \t\t      SKIP_ULEB (data, end);\n \t\t      SKIP_ULEB (data, end);\n \t\t      SKIP_ULEB (data, end);\n@@ -5704,12 +5720,11 @@ display_debug_pubnames_worker (struct dwarf_section *section,\n \t  bfd_size_type maxprint;\n \t  dwarf_vma offset;\n \n-\t  SAFE_BYTE_GET (offset, data, offset_size, end);\n+\t  SAFE_BYTE_GET_AND_INC (offset, data, offset_size, end);\n \n \t  if (offset == 0)\n \t    break;\n \n-\t  data += offset_size;\n \t  if (data >= end)\n \t    break;\n \t  maxprint = (end - data) - 1;\n@@ -5721,8 +5736,7 @@ display_debug_pubnames_worker (struct dwarf_section *section,\n \t      const char *kind_name;\n \t      int is_static;\n \n-\t      SAFE_BYTE_GET (kind_data, data, 1, end);\n-\t      data++;\n+\t      SAFE_BYTE_GET_AND_INC (kind_data, data, 1, end);\n \t      maxprint --;\n \t      /* GCC computes the kind as the upper byte in the CU index\n \t\t word, and then right shifts it by the CU index size.\n@@ -5740,7 +5754,9 @@ display_debug_pubnames_worker (struct dwarf_section *section,\n \t    printf (\"    %-6lx\\t%.*s\\n\",\n \t\t    (unsigned long) offset, (int) maxprint, data);\n \n-\t  data += strnlen ((char *) data, maxprint) + 1;\n+\t  data += strnlen ((char *) data, maxprint);\n+\t  if (data < end)\n+\t    data++;\n \t  if (data >= end)\n \t    break;\n \t}\n@@ -7382,7 +7398,7 @@ display_debug_addr (struct dwarf_section *section,\n \n \t  SAFE_BYTE_GET_AND_INC (length, curr_header, 4, entry);\n \t  if (length == 0xffffffff)\n-\t    SAFE_BYTE_GET (length, curr_header, 8, entry);\n+\t    SAFE_BYTE_GET_AND_INC (length, curr_header, 8, entry);\n \t  end = curr_header + length;\n \n \t  SAFE_BYTE_GET_AND_INC (version, curr_header, 2, entry);\n@@ -7451,7 +7467,7 @@ display_debug_str_offsets (struct dwarf_section *section,\n       /* FIXME: We assume that this means 64-bit DWARF is being used.  */\n       if (length == 0xffffffff)\n \t{\n-\t  SAFE_BYTE_GET (length, curr, 8, end);\n+\t  SAFE_BYTE_GET_AND_INC (length, curr, 8, end);\n \t  entry_length = 8;\n \t}\n       else\n@@ -7493,7 +7509,7 @@ display_debug_str_offsets (struct dwarf_section *section,\n \t  dwarf_vma offset;\n \t  const unsigned char * string;\n \n-\t  if (curr + entry_length > entries_end)\n+\t  if ((dwarf_vma) (entries_end - curr) < entry_length)\n \t    /* Not enough space to read one entry_length, give up.  */\n \t    return 0;\n "
    }
  ]
}