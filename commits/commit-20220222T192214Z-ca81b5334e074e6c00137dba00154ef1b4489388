{
  "sha": "ca81b5334e074e6c00137dba00154ef1b4489388",
  "node_id": "C_kwDOANOeidoAKGNhODFiNTMzNGUwNzRlNmMwMDEzN2RiYTAwMTU0ZWYxYjQ0ODkzODg",
  "commit": {
    "author": {
      "name": "John Baldwin",
      "email": "jhb@FreeBSD.org",
      "date": "2022-02-22T19:22:14Z"
    },
    "committer": {
      "name": "John Baldwin",
      "email": "jhb@FreeBSD.org",
      "date": "2022-02-22T19:22:14Z"
    },
    "message": "inf-ptrace: Support async targets in inf_ptrace_target::wait.\n\n- Handle TARGET_WNOHANG by passing WNOHANG to waitpid and returning\n  TARGET_WAITKIND_IGNORE if there are no events to report.\n\n- Handle a race in async mode where SIGCHLD might signal the event\n  pipe for an event that has already been reported.  If the event was\n  the exit of the last child process, waitpid() will fail with ECHILD\n  rather than returning a pid of 0.  For this case, return\n  TARGET_WAITKIND_NO_RESUMED.",
    "tree": {
      "sha": "a50ca85ed9cd3aeaca6132b5fc4f934db9091bfc",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/a50ca85ed9cd3aeaca6132b5fc4f934db9091bfc"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/ca81b5334e074e6c00137dba00154ef1b4489388",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ca81b5334e074e6c00137dba00154ef1b4489388",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/ca81b5334e074e6c00137dba00154ef1b4489388",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ca81b5334e074e6c00137dba00154ef1b4489388/comments",
  "author": {
    "login": "bsdjhb",
    "id": 8976613,
    "node_id": "MDQ6VXNlcjg5NzY2MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/8976613?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/bsdjhb",
    "html_url": "https://github.com/bsdjhb",
    "followers_url": "https://api.github.com/users/bsdjhb/followers",
    "following_url": "https://api.github.com/users/bsdjhb/following{/other_user}",
    "gists_url": "https://api.github.com/users/bsdjhb/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/bsdjhb/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/bsdjhb/subscriptions",
    "organizations_url": "https://api.github.com/users/bsdjhb/orgs",
    "repos_url": "https://api.github.com/users/bsdjhb/repos",
    "events_url": "https://api.github.com/users/bsdjhb/events{/privacy}",
    "received_events_url": "https://api.github.com/users/bsdjhb/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "bsdjhb",
    "id": 8976613,
    "node_id": "MDQ6VXNlcjg5NzY2MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/8976613?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/bsdjhb",
    "html_url": "https://github.com/bsdjhb",
    "followers_url": "https://api.github.com/users/bsdjhb/followers",
    "following_url": "https://api.github.com/users/bsdjhb/following{/other_user}",
    "gists_url": "https://api.github.com/users/bsdjhb/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/bsdjhb/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/bsdjhb/subscriptions",
    "organizations_url": "https://api.github.com/users/bsdjhb/orgs",
    "repos_url": "https://api.github.com/users/bsdjhb/repos",
    "events_url": "https://api.github.com/users/bsdjhb/events{/privacy}",
    "received_events_url": "https://api.github.com/users/bsdjhb/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "85e8c48c73a5c39a6980f9b2bd16ec96062fc4c3",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/85e8c48c73a5c39a6980f9b2bd16ec96062fc4c3",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/85e8c48c73a5c39a6980f9b2bd16ec96062fc4c3"
    }
  ],
  "stats": {
    "total": 27,
    "additions": 24,
    "deletions": 3
  },
  "files": [
    {
      "sha": "ebcc409b989ce31ff70fe8dcf46e15e1fa94661c",
      "filename": "gdb/inf-ptrace.c",
      "status": "modified",
      "additions": 24,
      "deletions": 3,
      "changes": 27,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ca81b5334e074e6c00137dba00154ef1b4489388/gdb/inf-ptrace.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ca81b5334e074e6c00137dba00154ef1b4489388/gdb/inf-ptrace.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/inf-ptrace.c?ref=ca81b5334e074e6c00137dba00154ef1b4489388",
      "patch": "@@ -289,26 +289,47 @@ inf_ptrace_target::resume (ptid_t ptid, int step, enum gdb_signal signal)\n \n ptid_t\n inf_ptrace_target::wait (ptid_t ptid, struct target_waitstatus *ourstatus,\n-\t\t\t target_wait_flags options)\n+\t\t\t target_wait_flags target_options)\n {\n   pid_t pid;\n-  int status, save_errno;\n+  int options, status, save_errno;\n+\n+  options = 0;\n+  if (target_options & TARGET_WNOHANG)\n+    options |= WNOHANG;\n \n   do\n     {\n       set_sigint_trap ();\n \n       do\n \t{\n-\t  pid = waitpid (ptid.pid (), &status, 0);\n+\t  pid = waitpid (ptid.pid (), &status, options);\n \t  save_errno = errno;\n \t}\n       while (pid == -1 && errno == EINTR);\n \n       clear_sigint_trap ();\n \n+      if (pid == 0)\n+\t{\n+\t  gdb_assert (target_options & TARGET_WNOHANG);\n+\t  ourstatus->set_ignore ();\n+\t  return minus_one_ptid;\n+\t}\n+\n       if (pid == -1)\n \t{\n+\t  /* In async mode the SIGCHLD might have raced and triggered\n+\t     a check for an event that had already been reported.  If\n+\t     the event was the exit of the only remaining child,\n+\t     waitpid() will fail with ECHILD.  */\n+\t  if (ptid == minus_one_ptid && save_errno == ECHILD)\n+\t    {\n+\t      ourstatus->set_no_resumed ();\n+\t      return minus_one_ptid;\n+\t    }\n+\n \t  fprintf_unfiltered (gdb_stderr,\n \t\t\t      _(\"Child process unexpectedly missing: %s.\\n\"),\n \t\t\t      safe_strerror (save_errno));"
    }
  ]
}