{
  "sha": "1f6234a335eab15c3ad878338b5256b5bdc190ab",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MWY2MjM0YTMzNWVhYjE1YzNhZDg3ODMzOGI1MjU2YjViZGMxOTBhYg==",
  "commit": {
    "author": {
      "name": "Andre Vieira",
      "email": "andre.simoesdiasvieira@arm.com",
      "date": "2019-05-16T12:52:51Z"
    },
    "committer": {
      "name": "Andre Vieira",
      "email": "andre.simoesdiasvieira@arm.com",
      "date": "2019-05-16T15:36:53Z"
    },
    "message": "[PATCH 36/57][Arm][GAS] Add support for MVE instructions: wlstp, dlstp, letp and lctp\n\ngas/ChangeLog:\n2019-05-16  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n\n\t* config/tc-arm.c (T16_32_TAB): Add new instructions.\n\t(do_t_loloop): Changed to handle tail predication variants.\n\t(md_apply_fix): Likewise.\n\t(insns): Add entries for MVE mnemonics.\n\t* testsuite/gas/arm/mve-tailpredloop-bad.d: New test.\n\t* testsuite/gas/arm/mve-tailpredloop-bad.l: New test.\n\t* testsuite/gas/arm/mve-tailpredloop-bad.s: New test.\n\t* testsuite/gas/arm/mve-tailpredloop.d: New test.",
    "tree": {
      "sha": "10bdc36cff6d05a4ba667b227089cb58f8232a6f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/10bdc36cff6d05a4ba667b227089cb58f8232a6f"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/1f6234a335eab15c3ad878338b5256b5bdc190ab",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1f6234a335eab15c3ad878338b5256b5bdc190ab",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/1f6234a335eab15c3ad878338b5256b5bdc190ab",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1f6234a335eab15c3ad878338b5256b5bdc190ab/comments",
  "author": {
    "login": "avieira-arm",
    "id": 68072104,
    "node_id": "MDQ6VXNlcjY4MDcyMTA0",
    "avatar_url": "https://avatars.githubusercontent.com/u/68072104?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/avieira-arm",
    "html_url": "https://github.com/avieira-arm",
    "followers_url": "https://api.github.com/users/avieira-arm/followers",
    "following_url": "https://api.github.com/users/avieira-arm/following{/other_user}",
    "gists_url": "https://api.github.com/users/avieira-arm/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/avieira-arm/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/avieira-arm/subscriptions",
    "organizations_url": "https://api.github.com/users/avieira-arm/orgs",
    "repos_url": "https://api.github.com/users/avieira-arm/repos",
    "events_url": "https://api.github.com/users/avieira-arm/events{/privacy}",
    "received_events_url": "https://api.github.com/users/avieira-arm/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "avieira-arm",
    "id": 68072104,
    "node_id": "MDQ6VXNlcjY4MDcyMTA0",
    "avatar_url": "https://avatars.githubusercontent.com/u/68072104?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/avieira-arm",
    "html_url": "https://github.com/avieira-arm",
    "followers_url": "https://api.github.com/users/avieira-arm/followers",
    "following_url": "https://api.github.com/users/avieira-arm/following{/other_user}",
    "gists_url": "https://api.github.com/users/avieira-arm/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/avieira-arm/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/avieira-arm/subscriptions",
    "organizations_url": "https://api.github.com/users/avieira-arm/orgs",
    "repos_url": "https://api.github.com/users/avieira-arm/repos",
    "events_url": "https://api.github.com/users/avieira-arm/events{/privacy}",
    "received_events_url": "https://api.github.com/users/avieira-arm/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "acca5630749e83ce4ec893e650afa015a086cc0f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/acca5630749e83ce4ec893e650afa015a086cc0f",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/acca5630749e83ce4ec893e650afa015a086cc0f"
    }
  ],
  "stats": {
    "total": 186,
    "additions": 152,
    "deletions": 34
  },
  "files": [
    {
      "sha": "e2cab99d797cb2f6971f9c4cd184f43c8206d57c",
      "filename": "gas/ChangeLog",
      "status": "modified",
      "additions": 11,
      "deletions": 0,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1f6234a335eab15c3ad878338b5256b5bdc190ab/gas/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1f6234a335eab15c3ad878338b5256b5bdc190ab/gas/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ChangeLog?ref=1f6234a335eab15c3ad878338b5256b5bdc190ab",
      "patch": "@@ -1,3 +1,14 @@\n+2019-05-16  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+\n+\t* config/tc-arm.c (T16_32_TAB): Add new instructions.\n+\t(do_t_loloop): Changed to handle tail predication variants.\n+\t(md_apply_fix): Likewise.\n+\t(insns): Add entries for MVE mnemonics.\n+\t* testsuite/gas/arm/mve-tailpredloop-bad.d: New test.\n+\t* testsuite/gas/arm/mve-tailpredloop-bad.l: New test.\n+\t* testsuite/gas/arm/mve-tailpredloop-bad.s: New test.\n+\t* testsuite/gas/arm/mve-tailpredloop.d: New test.\n+\n 2019-05-16  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n \n \t* config/tc-arm.c (do_mve_vshll): New encoding function."
    },
    {
      "sha": "1bc15df1a98184aa139a4bb570c6f5e578bdf3e2",
      "filename": "gas/config/tc-arm.c",
      "status": "modified",
      "additions": 74,
      "deletions": 34,
      "changes": 108,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1f6234a335eab15c3ad878338b5256b5bdc190ab/gas/config/tc-arm.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1f6234a335eab15c3ad878338b5256b5bdc190ab/gas/config/tc-arm.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-arm.c?ref=1f6234a335eab15c3ad878338b5256b5bdc190ab",
      "patch": "@@ -11134,9 +11134,11 @@ encode_thumb32_addr_mode (int i, bfd_boolean is_t, bfd_boolean is_d)\n   X(_cpy,   4600, ea4f0000),\t\t\t\\\n   X(_dec_sp,80dd, f1ad0d00),\t\t\t\\\n   X(_dls,   0000, f040e001),\t\t\t\\\n+  X(_dlstp, 0000, f000e001),\t\t\t\\\n   X(_eor,   4040, ea800000),\t\t\t\\\n   X(_eors,  4040, ea900000),\t\t\t\\\n   X(_inc_sp,00dd, f10d0d00),\t\t\t\\\n+  X(_lctp,  0000, f00fe001),\t\t\t\\\n   X(_ldmia, c800, e8900000),\t\t\t\\\n   X(_ldr,   6800, f8500000),\t\t\t\\\n   X(_ldrb,  7800, f8100000),\t\t\t\\\n@@ -11147,6 +11149,7 @@ encode_thumb32_addr_mode (int i, bfd_boolean is_t, bfd_boolean is_d)\n   X(_ldr_pc2,4800, f85f0000),\t\t\t\\\n   X(_ldr_sp,9800, f85d0000),\t\t\t\\\n   X(_le,    0000, f00fc001),\t\t\t\\\n+  X(_letp,  0000, f01fc001),\t\t\t\\\n   X(_lsl,   0000, fa00f000),\t\t\t\\\n   X(_lsls,  0000, fa10f000),\t\t\t\\\n   X(_lsr,   0800, fa20f000),\t\t\t\\\n@@ -11189,6 +11192,7 @@ encode_thumb32_addr_mode (int i, bfd_boolean is_t, bfd_boolean is_d)\n   X(_wfe,   bf20, f3af8002),\t\t\t\\\n   X(_wfi,   bf30, f3af8003),\t\t\t\\\n   X(_wls,   0000, f040c001),\t\t\t\\\n+  X(_wlstp, 0000, f000c001),\t\t\t\\\n   X(_sev,   bf40, f3af8004),                    \\\n   X(_sevl,  bf50, f3af8005),\t\t\t\\\n   X(_udf,   de00, f7f0a000)\n@@ -14114,38 +14118,6 @@ v8_1_loop_reloc (int is_le)\n     }\n }\n \n-/* To handle the Scalar Low Overhead Loop instructions\n-   in Armv8.1-M Mainline.  */\n-static void\n-do_t_loloop (void)\n-{\n-  unsigned long insn = inst.instruction;\n-\n-  set_pred_insn_type (OUTSIDE_PRED_INSN);\n-  inst.instruction = THUMB_OP32 (inst.instruction);\n-\n-  switch (insn)\n-    {\n-    case T_MNEM_le:\n-      /* le <label>.  */\n-      if (!inst.operands[0].present)\n-\tinst.instruction |= 1 << 21;\n-\n-      v8_1_loop_reloc (TRUE);\n-      break;\n-\n-    case T_MNEM_wls:\n-      v8_1_loop_reloc (FALSE);\n-      /* Fall through.  */\n-    case T_MNEM_dls:\n-      constraint (inst.operands[1].isreg != 1, BAD_ARGS);\n-      inst.instruction |= (inst.operands[1].reg << 16);\n-      break;\n-\n-    default: abort();\n-    }\n-}\n-\n /* MVE instruction encoder helpers.  */\n #define M_MNEM_vabav\t0xee800f01\n #define M_MNEM_vmladav\t  0xeef00e00\n@@ -14444,6 +14416,8 @@ NEON_ENC_TAB\n   X(2, (R, S), SINGLE),\t\t\t\\\n   X(2, (F, R), SINGLE),\t\t\t\\\n   X(2, (R, F), SINGLE),\t\t\t\\\n+/* Used for MVE tail predicated loop instructions.  */\\\n+  X(2, (R, R), QUAD),\t\t\t\\\n /* Half float shape supported so far.  */\\\n   X (2, (H, D), MIXED),\t\t\t\\\n   X (2, (D, H), MIXED),\t\t\t\\\n@@ -15985,6 +15959,66 @@ do_mve_vcmul (void)\n   inst.is_neon = 1;\n }\n \n+/* To handle the Low Overhead Loop instructions\n+   in Armv8.1-M Mainline and MVE.  */\n+static void\n+do_t_loloop (void)\n+{\n+  unsigned long insn = inst.instruction;\n+\n+  inst.instruction = THUMB_OP32 (inst.instruction);\n+\n+  if (insn == T_MNEM_lctp)\n+    return;\n+\n+  set_pred_insn_type (MVE_OUTSIDE_PRED_INSN);\n+\n+  if (insn == T_MNEM_wlstp || insn == T_MNEM_dlstp)\n+    {\n+      struct neon_type_el et\n+       = neon_check_type (2, NS_RR, N_EQK, N_8 | N_16 | N_32 | N_64 | N_KEY);\n+      inst.instruction |= neon_logbits (et.size) << 20;\n+      inst.is_neon = 1;\n+    }\n+\n+  switch (insn)\n+    {\n+    case T_MNEM_letp:\n+      constraint (!inst.operands[0].present,\n+\t\t  _(\"expected LR\"));\n+      /* fall through.  */\n+    case T_MNEM_le:\n+      /* le <label>.  */\n+      if (!inst.operands[0].present)\n+       inst.instruction |= 1 << 21;\n+\n+      v8_1_loop_reloc (TRUE);\n+      break;\n+\n+    case T_MNEM_wls:\n+    case T_MNEM_wlstp:\n+      v8_1_loop_reloc (FALSE);\n+      /* fall through.  */\n+    case T_MNEM_dlstp:\n+    case T_MNEM_dls:\n+      constraint (inst.operands[1].isreg != 1, BAD_ARGS);\n+\n+      if (insn == T_MNEM_wlstp || insn == T_MNEM_dlstp)\n+       constraint (inst.operands[1].reg == REG_PC, BAD_PC);\n+      else if (inst.operands[1].reg == REG_PC)\n+       as_tsktsk (MVE_BAD_PC);\n+      if (inst.operands[1].reg == REG_SP)\n+       as_tsktsk (MVE_BAD_SP);\n+\n+      inst.instruction |= (inst.operands[1].reg << 16);\n+      break;\n+\n+    default:\n+      abort ();\n+    }\n+}\n+\n+\n static void\n do_vfp_nsyn_cmp (void)\n {\n@@ -25240,6 +25274,11 @@ static const struct asm_opcode insns[] =\n  mToC(\"vshllt\",\t    ee201e00,\t   3, (RMQ, RMQ, I32),\t    mve_vshll),\n  mToC(\"vshllb\",\t    ee200e00,\t   3, (RMQ, RMQ, I32),\t    mve_vshll),\n \n+ toU(\"dlstp\",\t_dlstp, 2, (LR, RR),      t_loloop),\n+ toU(\"wlstp\",\t_wlstp, 3, (LR, RR, EXP), t_loloop),\n+ toU(\"letp\",\t_letp,  2, (LR, EXP),\t  t_loloop),\n+ toU(\"lctp\",\t_lctp,  0, (),\t\t  t_loloop),\n+\n #undef THUMB_VARIANT\n #define THUMB_VARIANT & mve_fp_ext\n  mToC(\"vcmul\", ee300e00,   4, (RMQ, RMQ, RMQ, EXPi),\t\t  mve_vcmul),\n@@ -28641,9 +28680,10 @@ md_apply_fix (fixS *\tfixP,\n \t}\n \n       bfd_vma insn = get_thumb32_insn (buf);\n-      /* le lr, <label> or le <label> */\n+      /* le lr, <label>, le <label> or letp lr, <label> */\n       if (((insn & 0xffffffff) == 0xf00fc001)\n-\t  || ((insn & 0xffffffff) == 0xf02fc001))\n+\t  || ((insn & 0xffffffff) == 0xf02fc001)\n+\t  || ((insn & 0xffffffff) == 0xf01fc001))\n \tvalue = -value;\n \n       if (v8_1_branch_value_check (value, 12, FALSE) == FAIL)"
    },
    {
      "sha": "53c0abcba591bcd685d36d37161d6646348f055f",
      "filename": "gas/testsuite/gas/arm/mve-tailpredloop-bad.d",
      "status": "added",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1f6234a335eab15c3ad878338b5256b5bdc190ab/gas/testsuite/gas/arm/mve-tailpredloop-bad.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1f6234a335eab15c3ad878338b5256b5bdc190ab/gas/testsuite/gas/arm/mve-tailpredloop-bad.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/mve-tailpredloop-bad.d?ref=1f6234a335eab15c3ad878338b5256b5bdc190ab",
      "patch": "@@ -0,0 +1,5 @@\n+#name: bad MVE WLSTP, DLSTP and LETP instructions\n+#as: -march=armv8.1-m.main+mve\n+#error_output: mve-tailpredloop-bad.l\n+\n+.*: +file format .*arm.*"
    },
    {
      "sha": "5e9209ff3e3669b840dd3b7097a07d30f39206be",
      "filename": "gas/testsuite/gas/arm/mve-tailpredloop-bad.l",
      "status": "added",
      "additions": 26,
      "deletions": 0,
      "changes": 26,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1f6234a335eab15c3ad878338b5256b5bdc190ab/gas/testsuite/gas/arm/mve-tailpredloop-bad.l",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1f6234a335eab15c3ad878338b5256b5bdc190ab/gas/testsuite/gas/arm/mve-tailpredloop-bad.l",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/mve-tailpredloop-bad.l?ref=1f6234a335eab15c3ad878338b5256b5bdc190ab",
      "patch": "@@ -0,0 +1,26 @@\n+[^:]*: Assembler messages:\n+[^:]*:25: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:25: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:25: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:25: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:25: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:25: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:26: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:26: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:26: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:26: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:26: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:26: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:27: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:27: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:27: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:27: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:27: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:27: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:28: Error: r15 not allowed here -- `wlstp.8 lr,pc,.label'\n+[^:]*:29: Warning: instruction is UNPREDICTABLE with SP operand\n+[^:]*:30: Error: r15 not allowed here -- `dlstp.16 lr,pc'\n+[^:]*:31: Warning: instruction is UNPREDICTABLE with SP operand\n+[^:]*:33: Error: ARM register expected -- `letp .label_back'\n+[^:]*:34: Error: branch out of range or not a multiple of 2\n+[^:]*:35: Error: branch out of range or not a multiple of 2"
    },
    {
      "sha": "929722a99c2fae207344f0a5f8b0935efac8f814",
      "filename": "gas/testsuite/gas/arm/mve-tailpredloop-bad.s",
      "status": "added",
      "additions": 36,
      "deletions": 0,
      "changes": 36,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1f6234a335eab15c3ad878338b5256b5bdc190ab/gas/testsuite/gas/arm/mve-tailpredloop-bad.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1f6234a335eab15c3ad878338b5256b5bdc190ab/gas/testsuite/gas/arm/mve-tailpredloop-bad.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/mve-tailpredloop-bad.s?ref=1f6234a335eab15c3ad878338b5256b5bdc190ab",
      "patch": "@@ -0,0 +1,36 @@\n+.macro cond1\n+.irp cond, eq, ne, gt, ge, lt, le\n+it \\cond\n+wlstp.8 lr, r0, .label\n+.endr\n+.endm\n+\n+.macro cond2\n+.irp cond, eq, ne, gt, ge, lt, le\n+it \\cond\n+dlstp.8 lr, r0\n+.endr\n+.endm\n+\n+.macro cond3\n+.irp cond, eq, ne, gt, ge, lt, le\n+it \\cond\n+letp lr, .label_back\n+.endr\n+.endm\n+\n+.label_back:\n+.syntax unified\n+.thumb\n+cond1\n+cond2\n+cond3\n+wlstp.8 lr, pc, .label\n+wlstp.8 lr, sp, .label\n+dlstp.16 lr, pc\n+dlstp.16 lr, sp\n+.label:\n+letp .label_back\n+wlstp.8 lr, r0, .label\n+letp lr, .label2\n+.label2:"
    }
  ]
}