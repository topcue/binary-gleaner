{
  "sha": "ae440402f54c634baddc462f8561442befe2cafe",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YWU0NDA0MDJmNTRjNjM0YmFkZGM0NjJmODU2MTQ0MmJlZmUyY2FmZQ==",
  "commit": {
    "author": {
      "name": "Stafford Horne",
      "email": "shorne@gmail.com",
      "date": "2020-05-19T11:40:27Z"
    },
    "committer": {
      "name": "Stafford Horne",
      "email": "shorne@gmail.com",
      "date": "2020-05-19T11:40:27Z"
    },
    "message": "or1k: Remove 64-bit support, it's not used and it breaks 32-bit hosts\n\nReported by Rich Felker when building on 32-bit hosts.  Backwards jump\nnegative offsets were not calculated correctly due to improper 32-bit\nto 64-bit zero-extension.  The 64-bit fields are present because we\nare mixing 32-bit and 64-bit architectures in our cpu descriptions.\n\nRemoving 64-bit fixes the issue.  We don't use 64-bit, there is an architecture\nspec for 64-bit but no implementations or simulators.  My thought is if\nwe need them in the future we should do the proper work to support both\n32-bit and 64-bit implementations co-existing then.\n\ncpu/ChangeLog:\n\nyyyy-mm-dd  Stafford Horne  <shorne@gmail.com>\n\n\tPR 25184\n\t* or1k.cpu (arch or1k): Remove or64 and or64nd machs.\n\t(ORBIS-MACHS, ORFPX32-MACHS): Remove pmacros.\n\t(cpu or1k64bf, mach or64, mach or64nd): Remove definitions.\n\t* or1kcommon.cpu (h-fdr): Remove hardware.\n\t* or1korfpx.cpu (rDDF, rADF, rBDF): Remove operand definitions.\n\t(float-regreg-insn): Remove lf- mnemonic -d instruction pattern.\n\t(float-setflag-insn-base): Remove lf-sf mnemonic -d pattern.\n\t(float-cust-insn): Remove \"lf-cust\" cust-num \"-d\" pattern.\n\t(lf-rem-d, lf-itof-d, lf-ftoi-d, lf-madd-d): Remove.",
    "tree": {
      "sha": "052696f415d762f88db1d5f92179d225740eb2de",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/052696f415d762f88db1d5f92179d225740eb2de"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/ae440402f54c634baddc462f8561442befe2cafe",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ae440402f54c634baddc462f8561442befe2cafe",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/ae440402f54c634baddc462f8561442befe2cafe",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ae440402f54c634baddc462f8561442befe2cafe/comments",
  "author": {
    "login": "stffrdhrn",
    "id": 2404255,
    "node_id": "MDQ6VXNlcjI0MDQyNTU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/2404255?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/stffrdhrn",
    "html_url": "https://github.com/stffrdhrn",
    "followers_url": "https://api.github.com/users/stffrdhrn/followers",
    "following_url": "https://api.github.com/users/stffrdhrn/following{/other_user}",
    "gists_url": "https://api.github.com/users/stffrdhrn/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/stffrdhrn/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/stffrdhrn/subscriptions",
    "organizations_url": "https://api.github.com/users/stffrdhrn/orgs",
    "repos_url": "https://api.github.com/users/stffrdhrn/repos",
    "events_url": "https://api.github.com/users/stffrdhrn/events{/privacy}",
    "received_events_url": "https://api.github.com/users/stffrdhrn/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "stffrdhrn",
    "id": 2404255,
    "node_id": "MDQ6VXNlcjI0MDQyNTU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/2404255?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/stffrdhrn",
    "html_url": "https://github.com/stffrdhrn",
    "followers_url": "https://api.github.com/users/stffrdhrn/followers",
    "following_url": "https://api.github.com/users/stffrdhrn/following{/other_user}",
    "gists_url": "https://api.github.com/users/stffrdhrn/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/stffrdhrn/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/stffrdhrn/subscriptions",
    "organizations_url": "https://api.github.com/users/stffrdhrn/orgs",
    "repos_url": "https://api.github.com/users/stffrdhrn/repos",
    "events_url": "https://api.github.com/users/stffrdhrn/events{/privacy}",
    "received_events_url": "https://api.github.com/users/stffrdhrn/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "7e05773767820b441b23a16628b55c98cb1aef46",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7e05773767820b441b23a16628b55c98cb1aef46",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/7e05773767820b441b23a16628b55c98cb1aef46"
    }
  ],
  "stats": {
    "total": 126,
    "additions": 16,
    "deletions": 110
  },
  "files": [
    {
      "sha": "ef6d49aa7769ca629f74be2ce3a6a8c3f106be6e",
      "filename": "cpu/ChangeLog",
      "status": "modified",
      "additions": 13,
      "deletions": 0,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ae440402f54c634baddc462f8561442befe2cafe/cpu/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ae440402f54c634baddc462f8561442befe2cafe/cpu/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/cpu/ChangeLog?ref=ae440402f54c634baddc462f8561442befe2cafe",
      "patch": "@@ -1,3 +1,16 @@\n+2020-05-19  Stafford Horne  <shorne@gmail.com>\n+\n+\tPR 25184\n+\t* or1k.cpu (arch or1k): Remove or64 and or64nd machs.\n+\t(ORBIS-MACHS, ORFPX32-MACHS): Remove pmacros.\n+\t(cpu or1k64bf, mach or64, mach or64nd): Remove definitions.\n+\t* or1kcommon.cpu (h-fdr): Remove hardware.\n+\t* or1korfpx.cpu (rDDF, rADF, rBDF): Remove operand definitions.\n+\t(float-regreg-insn): Remove lf- mnemonic -d instruction pattern.\n+\t(float-setflag-insn-base): Remove lf-sf mnemonic -d pattern.\n+\t(float-cust-insn): Remove \"lf-cust\" cust-num \"-d\" pattern.\n+\t(lf-rem-d, lf-itof-d, lf-ftoi-d, lf-madd-d): Remove.\n+\n 2020-02-16  David Faust  <david.faust@oracle.com>\n \n \t* bpf.cpu (define-cond-jump-insn): Renamed from djci."
    },
    {
      "sha": "9784f7a0fa817523768c470617ac016cf8a245b0",
      "filename": "cpu/or1k.cpu",
      "status": "modified",
      "additions": 3,
      "deletions": 32,
      "changes": 35,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ae440402f54c634baddc462f8561442befe2cafe/cpu/or1k.cpu",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ae440402f54c634baddc462f8561442befe2cafe/cpu/or1k.cpu",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/cpu/or1k.cpu?ref=ae440402f54c634baddc462f8561442befe2cafe",
      "patch": "@@ -31,7 +31,7 @@\n   (comment \"OpenRISC 1000\")\n   (default-alignment aligned)\n   (insn-lsb0? #t)\n-  (machs or32 or32nd or64 or64nd)\n+  (machs or32 or32nd)\n   (isas openrisc)\n )\n \n@@ -44,10 +44,8 @@\n   )\n \n (define-pmacro OR32-MACHS       or32,or32nd)\n-(define-pmacro OR64-MACHS       or64,or64nd)\n-(define-pmacro ORBIS-MACHS      or32,or32nd,or64,or64nd)\n-(define-pmacro ORFPX32-MACHS    or32,or32nd,or64,or64nd)\n-(define-pmacro ORFPX64-MACHS    or64,or64nd)\n+(define-pmacro ORBIS-MACHS      or32,or32nd)\n+(define-pmacro ORFPX32-MACHS    or32,or32nd)\n (define-pmacro ORFPX64A32-MACHS or32,or32nd) ; float64 for 32-bit machs\n \n (define-attr\n@@ -100,33 +98,6 @@\n       )\n     )\n \n-(if (keep-mach? (or64 or64nd))\n-    (begin\n-      (define-cpu\n-        (name or1k64bf)\n-        (comment \"OpenRISC 1000 64-bit CPU family\")\n-        (insn-endian big)\n-        (data-endian big)\n-        (word-bitsize 64)\n-        (file-transform \"64\")\n-        )\n-\n-      (define-mach\n-        (name or64)\n-        (comment \"Generic OpenRISC 1000 64-bit CPU\")\n-        (cpu or1k64bf)\n-        (bfd-name \"or1k64\")\n-        )\n-\n-      (define-mach\n-        (name or64nd)\n-        (comment \"Generic OpenRISC 1000 ND 64-bit CPU with no branch delay slot\")\n-        (cpu or1k64bf)\n-        (bfd-name \"or1k64nd\")\n-        )\n-      )\n-    )\n-\n (include \"or1kcommon.cpu\")\n (include \"or1korbis.cpu\")\n (include \"or1korfpx.cpu\")"
    },
    {
      "sha": "9f102c93a18ad3f03595ab8ef7bbe5bf550ba198",
      "filename": "cpu/or1kcommon.cpu",
      "status": "modified",
      "additions": 0,
      "deletions": 14,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ae440402f54c634baddc462f8561442befe2cafe/cpu/or1kcommon.cpu",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ae440402f54c634baddc462f8561442befe2cafe/cpu/or1kcommon.cpu",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/cpu/or1kcommon.cpu?ref=ae440402f54c634baddc462f8561442befe2cafe",
      "patch": "@@ -114,20 +114,6 @@\n   (set (index newval) (set UWI (reg h-gpr index) (zext UWI (subword SI newval 0))))\n   )\n \n-;\n-; Hardware: virtual registerts for FPU (double precision)\n-;           mapped to GPRs\n-;\n-(define-hardware\n-  (name h-fdr)\n-  (comment \"or64 floating point registers (double, virtual)\")\n-  (attrs VIRTUAL (MACH ORFPX64-MACHS))\n-  (type register DF (32))\n-  (indices keyword \"\" REG-INDICES)\n-  (get (index) (subword DF (trunc DI (reg h-gpr index)) 0))\n-  (set (index newval) (set UDI (reg h-gpr index) (zext UDI (subword DI newval 0))))\n-  )\n-\n ;\n ; Register pairs are offset by 2 for registers r16 and above.  This is to\n ; be able to allow registers to be call saved in GCC across function calls."
    },
    {
      "sha": "0bd469cff59c42acc32056fd4d03d0546307070d",
      "filename": "cpu/or1korfpx.cpu",
      "status": "modified",
      "additions": 0,
      "deletions": 64,
      "changes": 64,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/ae440402f54c634baddc462f8561442befe2cafe/cpu/or1korfpx.cpu",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/ae440402f54c634baddc462f8561442befe2cafe/cpu/or1korfpx.cpu",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/cpu/or1korfpx.cpu?ref=ae440402f54c634baddc462f8561442befe2cafe",
      "patch": "@@ -84,10 +84,6 @@\n (dnop rASF \"source register A (single floating point mode)\"    ((MACH ORFPX32-MACHS)) h-fsr f-r2)\n (dnop rBSF \"source register B (single floating point mode)\"    ((MACH ORFPX32-MACHS)) h-fsr f-r3)\n \n-(dnop rDDF \"or64 destination register (double floating point mode)\" ((MACH ORFPX64-MACHS)) h-fdr f-r1)\n-(dnop rADF \"or64 source register A (double floating point mode)\"    ((MACH ORFPX64-MACHS)) h-fdr f-r2)\n-(dnop rBDF \"or64 source register B (double floating point mode)\"    ((MACH ORFPX64-MACHS)) h-fdr f-r3)\n-\n (define-pmacro (double-field-and-ops mnemonic reg offbit op-comment)\n   (begin\n     (define-multi-ifield\n@@ -152,14 +148,6 @@\n          (set SF rDSF (mnemonic SF rASF rBSF))\n          ()\n          )\n-    (dni (.sym lf- mnemonic -d)\n-         (.str \"lf.\" mnemonic \".d reg/reg/reg\")\n-         ((MACH ORFPX64-MACHS))\n-         (.str \"lf.\" mnemonic \".d $rDDF,$rADF,$rBDF\")\n-         (+ OPC_FLOAT rDDF rADF rBDF (f-resv-10-3 0) (.sym OPC_FLOAT_REGREG_ (.upcase mnemonic) _D))\n-         (set DF rDDF (mnemonic DF rADF rBDF))\n-         ()\n-         )\n     (dni (.sym lf- mnemonic -d32)\n          (.str \"lf.\" mnemonic \".d regpair/regpair/regpair\")\n          ((MACH ORFPX64A32-MACHS))\n@@ -185,15 +173,6 @@\n      ()\n      )\n \n-(dni lf-rem-d\n-     \"lf.rem.d reg/reg/reg\"\n-     ((MACH ORFPX64-MACHS))\n-     \"lf.rem.d $rDDF,$rADF,$rBDF\"\n-     (+ OPC_FLOAT rDDF rADF rBDF (f-resv-10-3 0) OPC_FLOAT_REGREG_REM_D)\n-     (set DF rDDF (rem DF rADF rBDF))\n-     ()\n-     )\n-\n (dni lf-rem-d32\n      \"lf.rem.d regpair/regpair/regpair\"\n      ((MACH ORFPX64A32-MACHS))\n@@ -221,15 +200,6 @@\n      ()\n      )\n \n-(dni lf-itof-d\n-     \"lf.itof.d reg/reg\"\n-     ((MACH ORFPX64-MACHS))\n-     \"lf.itof.d $rDDF,$rA\"\n-     (+ OPC_FLOAT rDDF rA (f-r3 0) (f-resv-10-3 0) OPC_FLOAT_REGREG_ITOF_D)\n-     (set DF rDDF (float DF (get-rounding-mode) rA))\n-     ()\n-     )\n-\n (dni lf-itof-d32\n      \"lf.itof.d regpair/regpair\"\n      ((MACH ORFPX64A32-MACHS))\n@@ -248,15 +218,6 @@\n      ()\n      )\n \n-(dni lf-ftoi-d\n-     \"lf.ftoi.d reg/reg\"\n-     ((MACH ORFPX64-MACHS))\n-     \"lf.ftoi.d $rD,$rADF\"\n-     (+ OPC_FLOAT rD rADF (f-r3 0) (f-resv-10-3 0) OPC_FLOAT_REGREG_FTOI_D)\n-     (set WI rD (fix WI (get-rounding-mode) rADF))\n-     ()\n-     )\n-\n (dni lf-ftoi-d32\n      \"lf.ftoi.d regpair/regpair\"\n      ((MACH ORFPX64A32-MACHS))\n@@ -276,14 +237,6 @@\n          (symantics rtx-mnemonic SF rASF rBSF)\n          ()\n          )\n-    (dni (.sym lf-sf mnemonic -d)\n-         (.str \"lf.sf\" mnemonic \".d reg/reg\")\n-         ((MACH ORFPX64-MACHS))\n-         (.str \"lf.sf\" mnemonic \".d $rADF,$rBDF\")\n-         (+ OPC_FLOAT (f-r1 0) rADF rBDF (f-resv-10-3 0) (.sym OPC_FLOAT_REGREG_SF (.upcase mnemonic) _D))\n-         (symantics rtx-mnemonic DF rADF rBDF)\n-         ()\n-         )\n     (dni (.sym lf-sf mnemonic -d32)\n          (.str \"lf.sf\" mnemonic \".d regpair/regpair\")\n          ((MACH ORFPX64A32-MACHS))\n@@ -336,15 +289,6 @@\n      ()\n      )\n \n-(dni lf-madd-d\n-     \"lf.madd.d reg/reg/reg\"\n-     ((MACH ORFPX64-MACHS))\n-     \"lf.madd.d $rDDF,$rADF,$rBDF\"\n-     (+ OPC_FLOAT rDDF rADF rBDF (f-resv-10-3 0) OPC_FLOAT_REGREG_MADD_D)\n-     (set DF rDDF (add DF (mul DF rADF rBDF) rDDF))\n-     ()\n-     )\n-\n (dni lf-madd-d32\n      \"lf.madd.d regpair/regpair/regpair\"\n      ((MACH ORFPX64A32-MACHS))\n@@ -364,14 +308,6 @@\n          (nop)\n          ()\n          )\n-    (dni (.sym \"lf-cust\" cust-num \"-d\")\n-         (.str \"lf.cust\" cust-num \".d\")\n-         ((MACH ORFPX64-MACHS))\n-         (.str \"lf.cust\" cust-num \".d\")\n-         (+ OPC_FLOAT (f-resv-25-5 0) rADF rBDF (f-resv-10-3 0) (.sym \"OPC_FLOAT_REGREG_CUST\" cust-num \"_D\"))\n-         (nop)\n-         ()\n-         )\n     (dni (.sym \"lf-cust\" cust-num \"-d32\")\n          (.str \"lf.cust\" cust-num \".d\")\n          ((MACH ORFPX64A32-MACHS))"
    }
  ]
}