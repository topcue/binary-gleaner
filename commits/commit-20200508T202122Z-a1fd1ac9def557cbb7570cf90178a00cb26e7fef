{
  "sha": "a1fd1ac9def557cbb7570cf90178a00cb26e7fef",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YTFmZDFhYzlkZWY1NTdjYmI3NTcwY2Y5MDE3OGEwMGNiMjZlN2ZlZg==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-05-08T20:21:22Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2020-05-08T20:21:22Z"
    },
    "message": "Remove ALL_SO_LIBS and so_list_head\n\nThis patch started as an attempt to replace ALL_SO_LIBS with an\nordinary C++ iterator.  However, then I tripped over the so_list_head\ndefine again, and decided to remove it as well.\n\ngdb/ChangeLog\n2020-05-08  Tom Tromey  <tom@tromey.com>\n\n\t* mi/mi-cmd-file.c (mi_cmd_file_list_shared_libraries): Update.\n\t* solib-svr4.c (svr4_fetch_objfile_link_map): Update.\n\t(enable_break): Update.\n\t* solib-frv.c (frv_fdpic_find_global_pointer): Update.\n\t(frv_fdpic_find_canonical_descriptor): Update.\n\t(frv_fetch_objfile_link_map): Update.\n\t* progspace.c (program_space::free_all_objfiles): Update.\n\t(program_space::solibs): New method.\n\t* progspace.h (struct program_space) <solibs>: New method.\n\t* solist.h (master_so_list): Don't declare.\n\t(ALL_SO_LIBS): Remove.\n\t* solib.h (so_list_head): Remove.\n\t(update_solib_list): Update comment.\n\t* solib.c (master_so_list): Remove.\n\t(solib_used, update_solib_list, solib_add)\n\t(info_sharedlibrary_command, clear_solib)\n\t(reload_shared_libraries_1, remove_user_added_objfile): Update.",
    "tree": {
      "sha": "2ba2b212b672aef86649fdb3ae6e3668cc49ada2",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/2ba2b212b672aef86649fdb3ae6e3668cc49ada2"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/a1fd1ac9def557cbb7570cf90178a00cb26e7fef",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a1fd1ac9def557cbb7570cf90178a00cb26e7fef",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/a1fd1ac9def557cbb7570cf90178a00cb26e7fef",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a1fd1ac9def557cbb7570cf90178a00cb26e7fef/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "38eae084598a3531bef4b7987a8fe646ae92a988",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/38eae084598a3531bef4b7987a8fe646ae92a988",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/38eae084598a3531bef4b7987a8fe646ae92a988"
    }
  ],
  "stats": {
    "total": 135,
    "additions": 63,
    "deletions": 72
  },
  "files": [
    {
      "sha": "3badfbd2d89226ad305d19eb992f0220588d9781",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 20,
      "deletions": 0,
      "changes": 20,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a1fd1ac9def557cbb7570cf90178a00cb26e7fef/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a1fd1ac9def557cbb7570cf90178a00cb26e7fef/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=a1fd1ac9def557cbb7570cf90178a00cb26e7fef",
      "patch": "@@ -1,3 +1,23 @@\n+2020-05-08  Tom Tromey  <tom@tromey.com>\n+\n+\t* mi/mi-cmd-file.c (mi_cmd_file_list_shared_libraries): Update.\n+\t* solib-svr4.c (svr4_fetch_objfile_link_map): Update.\n+\t(enable_break): Update.\n+\t* solib-frv.c (frv_fdpic_find_global_pointer): Update.\n+\t(frv_fdpic_find_canonical_descriptor): Update.\n+\t(frv_fetch_objfile_link_map): Update.\n+\t* progspace.c (program_space::free_all_objfiles): Update.\n+\t(program_space::solibs): New method.\n+\t* progspace.h (struct program_space) <solibs>: New method.\n+\t* solist.h (master_so_list): Don't declare.\n+\t(ALL_SO_LIBS): Remove.\n+\t* solib.h (so_list_head): Remove.\n+\t(update_solib_list): Update comment.\n+\t* solib.c (master_so_list): Remove.\n+\t(solib_used, update_solib_list, solib_add)\n+\t(info_sharedlibrary_command, clear_solib)\n+\t(reload_shared_libraries_1, remove_user_added_objfile): Update.\n+\n 2020-05-08  Tom Tromey  <tom@tromey.com>\n \n \t* extension.c (extension_languages): Now a std::array."
    },
    {
      "sha": "3b0261c6c9fc028657765e48dcd9d0352b31ef07",
      "filename": "gdb/mi/mi-cmd-file.c",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a1fd1ac9def557cbb7570cf90178a00cb26e7fef/gdb/mi/mi-cmd-file.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a1fd1ac9def557cbb7570cf90178a00cb26e7fef/gdb/mi/mi-cmd-file.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/mi/mi-cmd-file.c?ref=a1fd1ac9def557cbb7570cf90178a00cb26e7fef",
      "patch": "@@ -121,7 +121,6 @@ mi_cmd_file_list_shared_libraries (const char *command, char **argv, int argc)\n {\n   struct ui_out *uiout = current_uiout;\n   const char *pattern;\n-  struct so_list *so = NULL;\n \n   switch (argc)\n     {\n@@ -148,7 +147,7 @@ mi_cmd_file_list_shared_libraries (const char *command, char **argv, int argc)\n   /* Print the table header.  */\n   ui_out_emit_list list_emitter (uiout, \"shared-libraries\");\n \n-  ALL_SO_LIBS (so)\n+  for (struct so_list *so : current_program_space->solibs ())\n     {\n       if (so->so_name[0] == '\\0')\n \tcontinue;"
    },
    {
      "sha": "252b62e02d751ecc25926a1a8311770f5ca940c4",
      "filename": "gdb/progspace.c",
      "status": "modified",
      "additions": 9,
      "deletions": 3,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a1fd1ac9def557cbb7570cf90178a00cb26e7fef/gdb/progspace.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a1fd1ac9def557cbb7570cf90178a00cb26e7fef/gdb/progspace.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/progspace.c?ref=a1fd1ac9def557cbb7570cf90178a00cb26e7fef",
      "patch": "@@ -192,10 +192,8 @@ program_space::~program_space ()\n void\n program_space::free_all_objfiles ()\n {\n-  struct so_list *so;\n-\n   /* Any objfile reference would become stale.  */\n-  for (so = master_so_list (); so; so = so->next)\n+  for (struct so_list *so : current_program_space->solibs ())\n     gdb_assert (so->objfile == NULL);\n \n   while (!objfiles_list.empty ())\n@@ -239,6 +237,14 @@ program_space::remove_objfile (struct objfile *objfile)\n     symfile_object_file = NULL;\n }\n \n+/* See progspace.h.  */\n+\n+next_adapter<struct so_list>\n+program_space::solibs () const\n+{\n+  return next_adapter<struct so_list> (this->so_list);\n+}\n+\n /* Copies program space SRC to DEST.  Copies the main executable file,\n    and the main symbol file.  Returns DEST.  */\n "
    },
    {
      "sha": "0e32224f02d1da9cdba475e3ba8eab1765898bf3",
      "filename": "gdb/progspace.h",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a1fd1ac9def557cbb7570cf90178a00cb26e7fef/gdb/progspace.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a1fd1ac9def557cbb7570cf90178a00cb26e7fef/gdb/progspace.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/progspace.h?ref=a1fd1ac9def557cbb7570cf90178a00cb26e7fef",
      "patch": "@@ -37,6 +37,7 @@ struct exec;\n struct address_space;\n struct program_space_data;\n struct address_space_data;\n+struct so_list;\n \n typedef std::list<std::shared_ptr<objfile>> objfile_list;\n \n@@ -264,6 +265,12 @@ struct program_space\n   /* Free all the objfiles associated with this program space.  */\n   void free_all_objfiles ();\n \n+  /* Return a range adapter for iterating over all the solibs in this\n+     program space.  Use it like:\n+\n+     for (so_list *so : pspace->solibs ()) { ... }  */\n+  next_adapter<struct so_list> solibs () const;\n+\n \n   /* Pointer to next in linked list.  */\n   struct program_space *next = NULL;"
    },
    {
      "sha": "62e7b05b4907e6356f3a66b7407581b9156ab205",
      "filename": "gdb/solib-frv.c",
      "status": "modified",
      "additions": 3,
      "deletions": 15,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a1fd1ac9def557cbb7570cf90178a00cb26e7fef/gdb/solib-frv.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a1fd1ac9def557cbb7570cf90178a00cb26e7fef/gdb/solib-frv.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/solib-frv.c?ref=a1fd1ac9def557cbb7570cf90178a00cb26e7fef",
      "patch": "@@ -908,10 +908,7 @@ main_got (void)\n CORE_ADDR\n frv_fdpic_find_global_pointer (CORE_ADDR addr)\n {\n-  struct so_list *so;\n-\n-  so = master_so_list ();\n-  while (so)\n+  for (struct so_list *so : current_program_space->solibs ())\n     {\n       int seg;\n       lm_info_frv *li = (lm_info_frv *) so->lm_info;\n@@ -923,8 +920,6 @@ frv_fdpic_find_global_pointer (CORE_ADDR addr)\n \t      && addr < map->segs[seg].addr + map->segs[seg].p_memsz)\n \t    return li->got_value;\n \t}\n-\n-      so = so->next;\n     }\n \n   /* Didn't find it in any of the shared objects.  So assume it's in the\n@@ -969,10 +964,7 @@ frv_fdpic_find_canonical_descriptor (CORE_ADDR entry_point)\n      in list of shared objects.  */\n   if (addr == 0)\n     {\n-      struct so_list *so;\n-\n-      so = master_so_list ();\n-      while (so)\n+      for (struct so_list *so : current_program_space->solibs ())\n \t{\n \t  lm_info_frv *li = (lm_info_frv *) so->lm_info;\n \n@@ -981,8 +973,6 @@ frv_fdpic_find_canonical_descriptor (CORE_ADDR entry_point)\n \n \t  if (addr != 0)\n \t    break;\n-\n-\t  so = so->next;\n \t}\n     }\n \n@@ -1116,8 +1106,6 @@ find_canonical_descriptor_in_load_object\n CORE_ADDR\n frv_fetch_objfile_link_map (struct objfile *objfile)\n {\n-  struct so_list *so;\n-\n   /* Cause frv_current_sos() to be run if it hasn't been already.  */\n   if (main_lm_addr == 0)\n     solib_add (0, 0, 1);\n@@ -1128,7 +1116,7 @@ frv_fetch_objfile_link_map (struct objfile *objfile)\n \n   /* The other link map addresses may be found by examining the list\n      of shared libraries.  */\n-  for (so = master_so_list (); so; so = so->next)\n+  for (struct so_list *so : current_program_space->solibs ())\n     {\n       lm_info_frv *li = (lm_info_frv *) so->lm_info;\n "
    },
    {
      "sha": "19d1105ae95f78c5e4b429670165e7eca2712e65",
      "filename": "gdb/solib-svr4.c",
      "status": "modified",
      "additions": 2,
      "deletions": 6,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a1fd1ac9def557cbb7570cf90178a00cb26e7fef/gdb/solib-svr4.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a1fd1ac9def557cbb7570cf90178a00cb26e7fef/gdb/solib-svr4.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/solib-svr4.c?ref=a1fd1ac9def557cbb7570cf90178a00cb26e7fef",
      "patch": "@@ -1537,7 +1537,6 @@ svr4_current_sos (void)\n CORE_ADDR\n svr4_fetch_objfile_link_map (struct objfile *objfile)\n {\n-  struct so_list *so;\n   struct svr4_info *info = get_svr4_info (objfile->pspace);\n \n   /* Cause svr4_current_sos() to be run if it hasn't been already.  */\n@@ -1555,7 +1554,7 @@ svr4_fetch_objfile_link_map (struct objfile *objfile)\n \n   /* The other link map addresses may be found by examining the list\n      of shared libraries.  */\n-  for (so = master_so_list (); so; so = so->next)\n+  for (struct so_list *so : current_program_space->solibs ())\n     if (so->objfile == objfile)\n       {\n \tlm_info_svr4 *li = (lm_info_svr4 *) so->lm_info;\n@@ -2307,7 +2306,6 @@ enable_break (struct svr4_info *info, int from_tty)\n       CORE_ADDR load_addr = 0;\n       int load_addr_found = 0;\n       int loader_found_in_list = 0;\n-      struct so_list *so;\n       struct target_ops *tmp_bfd_target;\n \n       sym_addr = 0;\n@@ -2340,8 +2338,7 @@ enable_break (struct svr4_info *info, int from_tty)\n \n       /* On a running target, we can get the dynamic linker's base\n          address from the shared library table.  */\n-      so = master_so_list ();\n-      while (so)\n+      for (struct so_list *so : current_program_space->solibs ())\n \t{\n \t  if (svr4_same_1 (interp_name, so->so_original_name))\n \t    {\n@@ -2350,7 +2347,6 @@ enable_break (struct svr4_info *info, int from_tty)\n \t      load_addr = lm_addr_check (so, tmp_bfd.get ());\n \t      break;\n \t    }\n-\t  so = so->next;\n \t}\n \n       /* If we were not able to find the base address of the loader"
    },
    {
      "sha": "cd410bb9e3e0998dd7a0a02665fa085693f2f0a8",
      "filename": "gdb/solib.c",
      "status": "modified",
      "additions": 18,
      "deletions": 32,
      "changes": 50,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a1fd1ac9def557cbb7570cf90178a00cb26e7fef/gdb/solib.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a1fd1ac9def557cbb7570cf90178a00cb26e7fef/gdb/solib.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/solib.c?ref=a1fd1ac9def557cbb7570cf90178a00cb26e7fef",
      "patch": "@@ -647,13 +647,6 @@ free_so (struct so_list *so)\n }\n \n \n-/* Return address of first so_list entry in master shared object list.  */\n-struct so_list *\n-master_so_list (void)\n-{\n-  return so_list_head;\n-}\n-\n /* Read in symbols for shared object SO.  If SYMFILE_VERBOSE is set in FLAGS,\n    be chatty about it.  Return true if any symbols were actually loaded.  */\n \n@@ -713,15 +706,13 @@ solib_read_symbols (struct so_list *so, symfile_add_flags flags)\n   return false;\n }\n \n-/* Return true if KNOWN->objfile is used by any other so_list object in the\n-   SO_LIST_HEAD list.  Return false otherwise.  */\n+/* Return true if KNOWN->objfile is used by any other so_list object\n+   in the list of shared libraries.  Return false otherwise.  */\n \n static bool\n solib_used (const struct so_list *const known)\n {\n-  const struct so_list *pivot;\n-\n-  for (pivot = so_list_head; pivot != NULL; pivot = pivot->next)\n+  for (const struct so_list *pivot : current_program_space->solibs ())\n     if (pivot != known && pivot->objfile == known->objfile)\n       return true;\n   return false;\n@@ -784,8 +775,8 @@ update_solib_list (int from_tty)\n      the time we're done walking GDB's list, the inferior's list\n      contains only the new shared objects, which we then add.  */\n \n-  gdb = so_list_head;\n-  gdb_link = &so_list_head;\n+  gdb = current_program_space->so_list;\n+  gdb_link = &current_program_space->so_list;\n   while (gdb)\n     {\n       struct so_list *i = inferior;\n@@ -943,8 +934,6 @@ libpthread_solib_p (struct so_list *so)\n void\n solib_add (const char *pattern, int from_tty, int readsyms)\n {\n-  struct so_list *gdb;\n-\n   if (print_symbol_loading_p (from_tty, 0, 0))\n     {\n       if (pattern != NULL)\n@@ -979,7 +968,7 @@ solib_add (const char *pattern, int from_tty, int readsyms)\n     if (from_tty)\n         add_flags |= SYMFILE_VERBOSE;\n \n-    for (gdb = so_list_head; gdb; gdb = gdb->next)\n+    for (struct so_list *gdb : current_program_space->solibs ())\n       if (! pattern || re_exec (gdb->so_name))\n \t{\n           /* Normally, we would read the symbols from that library\n@@ -1030,7 +1019,6 @@ solib_add (const char *pattern, int from_tty, int readsyms)\n static void\n info_sharedlibrary_command (const char *pattern, int from_tty)\n {\n-  struct so_list *so = NULL;\t/* link map state variable */\n   bool so_missing_debug_info = false;\n   int addr_width;\n   int nr_libs;\n@@ -1053,7 +1041,8 @@ info_sharedlibrary_command (const char *pattern, int from_tty)\n   /* ui_out_emit_table table_emitter needs to know the number of rows,\n      so we need to make two passes over the libs.  */\n \n-  for (nr_libs = 0, so = so_list_head; so; so = so->next)\n+  nr_libs = 0;\n+  for (struct so_list *so : current_program_space->solibs ())\n     {\n       if (so->so_name[0])\n \t{\n@@ -1074,7 +1063,7 @@ info_sharedlibrary_command (const char *pattern, int from_tty)\n \n     uiout->table_body ();\n \n-    ALL_SO_LIBS (so)\n+    for (struct so_list *so : current_program_space->solibs ())\n       {\n \tif (! so->so_name[0])\n \t  continue;\n@@ -1185,11 +1174,11 @@ clear_solib (void)\n \n   disable_breakpoints_in_shlibs ();\n \n-  while (so_list_head)\n+  while (current_program_space->so_list)\n     {\n-      struct so_list *so = so_list_head;\n+      struct so_list *so = current_program_space->so_list;\n \n-      so_list_head = so->next;\n+      current_program_space->so_list = so->next;\n       gdb::observers::solib_unloaded.notify (so);\n       remove_target_sections (so);\n       free_so (so);\n@@ -1284,12 +1273,10 @@ handle_solib_event (void)\n static void\n reload_shared_libraries_1 (int from_tty)\n {\n-  struct so_list *so;\n-\n   if (print_symbol_loading_p (from_tty, 0, 0))\n     printf_unfiltered (_(\"Loading symbols for shared libraries.\\n\"));\n \n-  for (so = so_list_head; so != NULL; so = so->next)\n+  for (struct so_list *so : current_program_space->solibs ())\n     {\n       const char *found_pathname = NULL;\n       bool was_loaded = so->symbols_loaded != 0;\n@@ -1552,18 +1539,17 @@ gdb_bfd_lookup_symbol (bfd *abfd,\n   return symaddr;\n }\n \n-/* SO_LIST_HEAD may contain user-loaded object files that can be removed\n-   out-of-band by the user.  So upon notification of free_objfile remove\n-   all references to any user-loaded file that is about to be freed.  */\n+/* The shared library list may contain user-loaded object files that\n+   can be removed out-of-band by the user.  So upon notification of\n+   free_objfile remove all references to any user-loaded file that is\n+   about to be freed.  */\n \n static void\n remove_user_added_objfile (struct objfile *objfile)\n {\n-  struct so_list *so;\n-\n   if (objfile != 0 && objfile->flags & OBJF_USERLOADED)\n     {\n-      for (so = so_list_head; so != NULL; so = so->next)\n+      for (struct so_list *so : current_program_space->solibs ())\n \tif (so->objfile == objfile)\n \t  so->objfile = NULL;\n     }"
    },
    {
      "sha": "801965fcd53c0389ae6885c306a758d71b115769",
      "filename": "gdb/solib.h",
      "status": "modified",
      "additions": 3,
      "deletions": 6,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a1fd1ac9def557cbb7570cf90178a00cb26e7fef/gdb/solib.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a1fd1ac9def557cbb7570cf90178a00cb26e7fef/gdb/solib.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/solib.h?ref=a1fd1ac9def557cbb7570cf90178a00cb26e7fef",
      "patch": "@@ -28,9 +28,6 @@ struct program_space;\n \n #include \"symfile-add-flags.h\"\n \n-/* List of known shared objects */\n-#define so_list_head current_program_space->so_list\n-\n /* Called when we free all symtabs, to free the shared library information\n    as well.  */\n \n@@ -81,9 +78,9 @@ extern void set_solib_ops (struct gdbarch *gdbarch,\n /* Synchronize GDB's shared object list with inferior's.\n \n    Extract the list of currently loaded shared objects from the\n-   inferior, and compare it with the list of shared objects currently\n-   in GDB's so_list_head list.  Edit so_list_head to bring it in sync\n-   with the inferior's new list.\n+   inferior, and compare it with the list of shared objects in the\n+   current program space's list of shared libraries.  Edit\n+   so_list_head to bring it in sync with the inferior's new list.\n \n    If we notice that the inferior has unloaded some shared objects,\n    free any symbolic info GDB had read about those shared objects."
    },
    {
      "sha": "0360d342ae8e3ca29f9a080c434e4ed59a565bee",
      "filename": "gdb/solist.h",
      "status": "modified",
      "additions": 0,
      "deletions": 8,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a1fd1ac9def557cbb7570cf90178a00cb26e7fef/gdb/solist.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a1fd1ac9def557cbb7570cf90178a00cb26e7fef/gdb/solist.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/solist.h?ref=a1fd1ac9def557cbb7570cf90178a00cb26e7fef",
      "patch": "@@ -24,11 +24,6 @@\n #include \"symtab.h\"\n #include \"gdb_bfd.h\"\n \n-#define ALL_SO_LIBS(so) \\\n-    for (so = so_list_head; \\\n-\t so != NULL; \\\n-\t so = so->next)\n-\n /* Base class for target-specific link map information.  */\n \n struct lm_info_base\n@@ -183,9 +178,6 @@ struct so_deleter\n /* A unique pointer to a so_list.  */\n typedef std::unique_ptr<so_list, so_deleter> so_list_up;\n \n-/* Return address of first so_list entry in master shared object list.  */\n-struct so_list *master_so_list (void);\n-\n /* Find main executable binary file.  */\n extern gdb::unique_xmalloc_ptr<char> exec_file_find (const char *in_pathname,\n \t\t\t\t\t\t     int *fd);"
    }
  ]
}