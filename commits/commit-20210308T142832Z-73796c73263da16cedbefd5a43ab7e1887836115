{
  "sha": "73796c73263da16cedbefd5a43ab7e1887836115",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NzM3OTZjNzMyNjNkYTE2Y2VkYmVmZDVhNDNhYjdlMTg4NzgzNjExNQ==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-03-08T14:27:57Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-03-08T14:28:32Z"
    },
    "message": "Introduce ada_binop_addsub_operation\n\nThis adds class ada_binop_addsub_operation, which implements the Ada +\nand - operators.\n\ngdb/ChangeLog\n2021-03-08  Tom Tromey  <tom@tromey.com>\n\n\t* ada-lang.c (ada_binop_addsub_operation::evaluate): New method.\n\t* ada-exp.h (class ada_binop_addsub_operation): New.",
    "tree": {
      "sha": "c6d74fd8ea50be3c5f5643c26dc518d802c2f511",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/c6d74fd8ea50be3c5f5643c26dc518d802c2f511"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/73796c73263da16cedbefd5a43ab7e1887836115",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/73796c73263da16cedbefd5a43ab7e1887836115",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/73796c73263da16cedbefd5a43ab7e1887836115",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/73796c73263da16cedbefd5a43ab7e1887836115/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "cd9a314824b2b87207a8ba7a8003639989d2406b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/cd9a314824b2b87207a8ba7a8003639989d2406b",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/cd9a314824b2b87207a8ba7a8003639989d2406b"
    }
  ],
  "stats": {
    "total": 61,
    "additions": 61,
    "deletions": 0
  },
  "files": [
    {
      "sha": "597513aea86ade2ad43094e098284e54483d83ea",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/73796c73263da16cedbefd5a43ab7e1887836115/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/73796c73263da16cedbefd5a43ab7e1887836115/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=73796c73263da16cedbefd5a43ab7e1887836115",
      "patch": "@@ -1,3 +1,8 @@\n+2021-03-08  Tom Tromey  <tom@tromey.com>\n+\n+\t* ada-lang.c (ada_binop_addsub_operation::evaluate): New method.\n+\t* ada-exp.h (class ada_binop_addsub_operation): New.\n+\n 2021-03-08  Tom Tromey  <tom@tromey.com>\n \n \t* ada-lang.h (ada_find_operator_symbol, ada_resolve_funcall)"
    },
    {
      "sha": "ad69d93948928c367069117177542c9cc5e0310d",
      "filename": "gdb/ada-exp.h",
      "status": "modified",
      "additions": 16,
      "deletions": 0,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/73796c73263da16cedbefd5a43ab7e1887836115/gdb/ada-exp.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/73796c73263da16cedbefd5a43ab7e1887836115/gdb/ada-exp.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-exp.h?ref=73796c73263da16cedbefd5a43ab7e1887836115",
      "patch": "@@ -134,6 +134,22 @@ class ada_unop_range_operation\n   { return UNOP_IN_RANGE; }\n };\n \n+/* The Ada + and - operators.  */\n+class ada_binop_addsub_operation\n+  : public tuple_holding_operation<enum exp_opcode, operation_up, operation_up>\n+{\n+public:\n+\n+  using tuple_holding_operation::tuple_holding_operation;\n+\n+  value *evaluate (struct type *expect_type,\n+\t\t   struct expression *exp,\n+\t\t   enum noside noside) override;\n+\n+  enum exp_opcode opcode () const override\n+  { return std::get<0> (m_storage); }\n+};\n+\n } /* namespace expr */\n \n #endif /* ADA_EXP_H */"
    },
    {
      "sha": "86ccc57334892ba399d9c558f332c3a95876357d",
      "filename": "gdb/ada-lang.c",
      "status": "modified",
      "additions": 40,
      "deletions": 0,
      "changes": 40,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/73796c73263da16cedbefd5a43ab7e1887836115/gdb/ada-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/73796c73263da16cedbefd5a43ab7e1887836115/gdb/ada-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-lang.c?ref=73796c73263da16cedbefd5a43ab7e1887836115",
      "patch": "@@ -10492,6 +10492,46 @@ ada_ternop_range_operation::evaluate (struct type *expect_type,\n   return eval_ternop_in_range (expect_type, exp, noside, arg0, arg1, arg2);\n }\n \n+value *\n+ada_binop_addsub_operation::evaluate (struct type *expect_type,\n+\t\t\t\t      struct expression *exp,\n+\t\t\t\t      enum noside noside)\n+{\n+  value *arg1 = std::get<1> (m_storage)->evaluate_with_coercion (exp, noside);\n+  value *arg2 = std::get<2> (m_storage)->evaluate_with_coercion (exp, noside);\n+\n+  auto do_op = [=] (LONGEST x, LONGEST y)\n+    {\n+      if (std::get<0> (m_storage) == BINOP_ADD)\n+\treturn x + y;\n+      return x - y;\n+    };\n+\n+  if (value_type (arg1)->code () == TYPE_CODE_PTR)\n+    return (value_from_longest\n+\t    (value_type (arg1),\n+\t     do_op (value_as_long (arg1), value_as_long (arg2))));\n+  if (value_type (arg2)->code () == TYPE_CODE_PTR)\n+    return (value_from_longest\n+\t    (value_type (arg2),\n+\t     do_op (value_as_long (arg1), value_as_long (arg2))));\n+  /* Preserve the original type for use by the range case below.\n+     We cannot cast the result to a reference type, so if ARG1 is\n+     a reference type, find its underlying type.  */\n+  struct type *type = value_type (arg1);\n+  while (type->code () == TYPE_CODE_REF)\n+    type = TYPE_TARGET_TYPE (type);\n+  binop_promote (exp->language_defn, exp->gdbarch, &arg1, &arg2);\n+  arg1 = value_binop (arg1, arg2, std::get<0> (m_storage));\n+  /* We need to special-case the result with a range.\n+     This is done for the benefit of \"ptype\".  gdb's Ada support\n+     historically used the LHS to set the result type here, so\n+     preserve this behavior.  */\n+  if (type->code () == TYPE_CODE_RANGE)\n+    arg1 = value_cast (type, arg1);\n+  return arg1;\n+}\n+\n }\n \n /* Implement the evaluate_exp routine in the exp_descriptor structure"
    }
  ]
}