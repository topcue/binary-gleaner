{
  "sha": "3345721af145007661f4e7e7f4300470095ba622",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MzM0NTcyMWFmMTQ1MDA3NjYxZjRlN2U3ZjQzMDA0NzAwOTViYTYyMg==",
  "commit": {
    "author": {
      "name": "Pedro Alves",
      "email": "palves@redhat.com",
      "date": "2019-06-12T23:06:54Z"
    },
    "committer": {
      "name": "Pedro Alves",
      "email": "palves@redhat.com",
      "date": "2019-06-12T23:25:06Z"
    },
    "message": "NEWS and manual changes for command options changes\n\ngdb/ChangeLog:\n2019-06-13  Pedro Alves  <palves@redhat.com>\n\n\t* NEWS (New commands): Mention \"maint test-options\n\trequire-delimiter\", \"maint test-options unknown-is-error\", \"maint\n\ttest-options unknown-is-operand\" and \"maint show\n\ttest-options-completion-result\".\n\t(New command options, command completion): New section.\n\t(Completion improvements): New section.\n\tMention that you can abbreviate \"unlimited\".\n\ngdb/doc/ChangeLog:\n2019-06-13  Pedro Alves  <palves@redhat.com>\n\n\t* gdb.texinfo (Command Completion): Mention command options too.\n\t(Command Options): New node.\n\t(Threads): Add anchors.  Extend descriptions of the \"taas\" and\n\t\"tfaas\" commands.\n\t(Backtrace): Describe new options of the \"backtrace\" command.  Add\n\tanchors.\n\t(Frame Apply): Describe new options of the \"frame apply\" and\n\t\"faas\" commands.  Add anchors.\n\t(Data): Describe new options of the \"print\" command.  Add anchors.\n\t(Compiling and Injecting Code): Mention options of the \"compile\n\tprint\" command.\n\t(Maintenance Commands): Mention \"maint test-options\" subcommands\n\tand the \"maint show test-options-completion-result\" command.",
    "tree": {
      "sha": "b5558d8374f1d8c94e25f6ef0a60a4cd414c6174",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/b5558d8374f1d8c94e25f6ef0a60a4cd414c6174"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/3345721af145007661f4e7e7f4300470095ba622",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3345721af145007661f4e7e7f4300470095ba622",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/3345721af145007661f4e7e7f4300470095ba622",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3345721af145007661f4e7e7f4300470095ba622/comments",
  "author": {
    "login": "palves",
    "id": 1202913,
    "node_id": "MDQ6VXNlcjEyMDI5MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1202913?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/palves",
    "html_url": "https://github.com/palves",
    "followers_url": "https://api.github.com/users/palves/followers",
    "following_url": "https://api.github.com/users/palves/following{/other_user}",
    "gists_url": "https://api.github.com/users/palves/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/palves/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/palves/subscriptions",
    "organizations_url": "https://api.github.com/users/palves/orgs",
    "repos_url": "https://api.github.com/users/palves/repos",
    "events_url": "https://api.github.com/users/palves/events{/privacy}",
    "received_events_url": "https://api.github.com/users/palves/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "palves",
    "id": 1202913,
    "node_id": "MDQ6VXNlcjEyMDI5MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1202913?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/palves",
    "html_url": "https://github.com/palves",
    "followers_url": "https://api.github.com/users/palves/followers",
    "following_url": "https://api.github.com/users/palves/following{/other_user}",
    "gists_url": "https://api.github.com/users/palves/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/palves/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/palves/subscriptions",
    "organizations_url": "https://api.github.com/users/palves/orgs",
    "repos_url": "https://api.github.com/users/palves/repos",
    "events_url": "https://api.github.com/users/palves/events{/privacy}",
    "received_events_url": "https://api.github.com/users/palves/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "6206060d9be8da3e701fe0307c6c01390e2b4ae2",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/6206060d9be8da3e701fe0307c6c01390e2b4ae2",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/6206060d9be8da3e701fe0307c6c01390e2b4ae2"
    }
  ],
  "stats": {
    "total": 449,
    "additions": 415,
    "deletions": 34
  },
  "files": [
    {
      "sha": "307a84ddae1d4b4339ded8f868a94ea97fb4f8e3",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3345721af145007661f4e7e7f4300470095ba622/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3345721af145007661f4e7e7f4300470095ba622/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=3345721af145007661f4e7e7f4300470095ba622",
      "patch": "@@ -1,3 +1,13 @@\n+2019-06-13  Pedro Alves  <palves@redhat.com>\n+\n+\t* NEWS (New commands): Mention \"maint test-options\n+\trequire-delimiter\", \"maint test-options unknown-is-error\", \"maint\n+\ttest-options unknown-is-operand\" and \"maint show\n+\ttest-options-completion-result\".\n+\t(New command options, command completion): New section.\n+\t(Completion improvements): New section.\n+\tMention that you can abbreviate \"unlimited\".\n+\n 2019-06-13  Pedro Alves  <palves@redhat.com>\n \n \t* cli/cli-utils.c (parse_flags, parse_flags_qcs): Delete."
    },
    {
      "sha": "76564d067749c17e7e258b80853146bc517572a4",
      "filename": "gdb/NEWS",
      "status": "modified",
      "additions": 91,
      "deletions": 0,
      "changes": 91,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3345721af145007661f4e7e7f4300470095ba622/gdb/NEWS",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3345721af145007661f4e7e7f4300470095ba622/gdb/NEWS",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/NEWS?ref=3345721af145007661f4e7e7f4300470095ba622",
      "patch": "@@ -115,6 +115,97 @@ show print raw-frame-arguments\n   old commands are now deprecated and may be removed in a future\n   release.\n \n+maint test-options require-delimiter\n+maint test-options unknown-is-error\n+maint test-options unknown-is-operand\n+maint show test-options-completion-result\n+  Commands used by the testsuite to validate the command options\n+  framework.\n+\n+* New command options, command completion\n+\n+  GDB now has a standard infrastructure to support dash-style command\n+  options ('-OPT').  One benefit is that commands that use it can\n+  easily support completion of command line arguments.  Try \"CMD\n+  -[TAB]\" or \"help CMD\" to find options supported by a command.  Over\n+  time, we intend to migrate most commands to this infrastructure.  A\n+  number of commands got support for new command options in this\n+  release:\n+\n+  ** The \"print\" and \"compile print\" commands now support a number of\n+     options that allow overriding relevant global print settings as\n+     set by \"set print\" subcommands:\n+\n+      -address [on|off]\n+      -array [on|off]\n+      -array-indexes [on|off]\n+      -elements NUMBER|unlimited\n+      -null-stop [on|off]\n+      -object [on|off]\n+      -pretty [on|off]\n+      -repeats NUMBER|unlimited\n+      -static-members [on|off]\n+      -symbol [on|off]\n+      -union [on|off]\n+      -vtbl [on|off]\n+\n+     Note that because the \"print\"/\"compile print\" commands accept\n+     arbitrary expressions which may look like options (including\n+     abbreviations), if you specify any command option, then you must\n+     use a double dash (\"--\") to mark the end of argument processing.\n+\n+  ** The \"backtrace\" command now supports a number of options that\n+     allow overriding relevant global print settings as set by \"set\n+     backtrace\" and \"set print\" subcommands:\n+\n+      -entry-values no|only|preferred|if-needed|both|compact|default\n+      -frame-arguments all|scalars|none\n+      -raw-frame-arguments [on|off]\n+      -past-main [on|off]\n+      -past-entry [on|off]\n+\n+     In addition, the full/no-filters/hide qualifiers are now also\n+     exposed as command options too:\n+\n+      -full\n+      -no-filters\n+      -hide\n+\n+  ** The \"frame apply\", \"tfaas\" and \"faas\" commands similarly now\n+     support the following options:\n+\n+      -past-main [on|off]\n+      -past-entry [on|off]\n+\n+   All options above can also be abbreviated.  The argument of boolean\n+   (on/off) options can be 0/1 too, and also the argument is assumed\n+   \"on\" if omitted.  This allows writing compact command invocations,\n+   like for example:\n+\n+    (gdb) p -r -p -o 0 -- *myptr\n+\n+   The above is equivalent to:\n+\n+    (gdb) print -raw -pretty -object off -- *myptr\n+\n+* Completion improvements\n+\n+  ** GDB can now complete the options of the \"thread apply all\" and\n+     \"taas\" commands, and their \"-ascending\" option can now be\n+     abbreviated.\n+\n+  ** GDB can now complete the options of the \"compile file\" and\n+     \"compile code\" commands.  The \"compile file\" command now\n+     completes on filenames.\n+\n+  ** GDB can now complete the backtrace command's\n+     \"full/no-filters/hide\" qualifiers.\n+\n+* In settings, you can now abbreviate \"unlimited\".\n+\n+  E.g., \"set print elements u\" is now equivalent to \"set print\n+  elements unlimited\".\n+\n * New MI commands\n \n -complete"
    },
    {
      "sha": "17048c8b2da48aab6641030bea8786b32634433b",
      "filename": "gdb/doc/ChangeLog",
      "status": "modified",
      "additions": 16,
      "deletions": 0,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3345721af145007661f4e7e7f4300470095ba622/gdb/doc/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3345721af145007661f4e7e7f4300470095ba622/gdb/doc/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/doc/ChangeLog?ref=3345721af145007661f4e7e7f4300470095ba622",
      "patch": "@@ -1,3 +1,19 @@\n+2019-06-13  Pedro Alves  <palves@redhat.com>\n+\n+\t* gdb.texinfo (Command Completion): Mention command options too.\n+\t(Command Options): New node.\n+\t(Threads): Add anchors.  Extend descriptions of the \"taas\" and\n+\t\"tfaas\" commands.\n+\t(Backtrace): Describe new options of the \"backtrace\" command.  Add\n+\tanchors.\n+\t(Frame Apply): Describe new options of the \"frame apply\" and\n+\t\"faas\" commands.  Add anchors.\n+\t(Data): Describe new options of the \"print\" command.  Add anchors.\n+\t(Compiling and Injecting Code): Mention options of the \"compile\n+\tprint\" command.\n+\t(Maintenance Commands): Mention \"maint test-options\" subcommands\n+\tand the \"maint show test-options-completion-result\" command.\n+\n 2019-06-13  Pedro Alves  <palves@redhat.com>\n \n \t* gdb.texinfo (Print Settings): Document \"set/show print"
    },
    {
      "sha": "a5026dfc034f52da598f8987c8d310dabe02fda5",
      "filename": "gdb/doc/gdb.texinfo",
      "status": "modified",
      "additions": 298,
      "deletions": 34,
      "changes": 332,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3345721af145007661f4e7e7f4300470095ba622/gdb/doc/gdb.texinfo",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3345721af145007661f4e7e7f4300470095ba622/gdb/doc/gdb.texinfo",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/doc/gdb.texinfo?ref=3345721af145007661f4e7e7f4300470095ba622",
      "patch": "@@ -1561,6 +1561,7 @@ show you the alternatives available, if there is more than one possibility).\n @menu\n * Command Syntax::              How to give commands to @value{GDBN}\n * Completion::                  Command completion\n+* Command Options::             Command options\n * Help::                        How to ask @value{GDBN} for help\n @end menu\n \n@@ -1623,7 +1624,8 @@ for editing.\n @value{GDBN} can fill in the rest of a word in a command for you, if there is\n only one possibility; it can also show you what the valid possibilities\n are for the next word in a command, at any time.  This works for @value{GDBN}\n-commands, @value{GDBN} subcommands, and the names of symbols in your program.\n+commands, @value{GDBN} subcommands, command options, and the names of symbols\n+in your program.\n \n Press the @key{TAB} key whenever you want @value{GDBN} to fill out the rest\n of a word.  If there is only one possibility, @value{GDBN} fills in the\n@@ -1823,6 +1825,70 @@ struct ui_file\n @}\n @end smallexample\n \n+@node Command Options\n+@section Command options\n+\n+@cindex command options\n+Some commands accept options starting with a leading dash.  For\n+example, @code{print -pretty}.  Similarly to command names, you can\n+abbreviate a @value{GDBN} option to the first few letters of the\n+option name, if that abbreviation is unambiguous, and you can also use\n+the @key{TAB} key to get @value{GDBN} to fill out the rest of a word\n+in an option (or to show you the alternatives available, if there is\n+more than one possibility).\n+\n+@cindex command options, raw input\n+Some commands take raw input as argument.  For example, the print\n+command processes arbitrary expressions in any of the languages\n+supported by @value{GDBN}.  With such commands, because raw input may\n+start with a leading dash that would be confused with an option or any\n+of its abbreviations, e.g.@: @code{print -r} (short for @code{print\n+-raw} or printing negative @code{r}?), if you specify any command\n+option, then you must use a double-dash (@code{--}) delimiter to\n+indicate the end of options.\n+\n+@cindex command options, boolean\n+\n+Some options are described as accepting an argument which can be\n+either @code{on} or @code{off}.  These are known as @dfn{boolean\n+options}.  Similarly to boolean settings commands---@code{on} and\n+@code{off} are the typical values, but any of @code{1}, @code{yes} and\n+@code{enable} can also be used as ``true'' value, and any of @code{0},\n+@code{no} and @code{disable} can also be used as ``false'' value.  You\n+can also omit a ``true'' value, as it is implied by default.\n+\n+For example, these are equivalent:\n+\n+@smallexample\n+(@value{GDBP}) print -object on -pretty off -element unlimited -- *myptr\n+(@value{GDBP}) p -o -p 0 -e u -- *myptr\n+@end smallexample\n+\n+You can discover the set of options some command accepts by completing\n+on @code{-} after the command name.  For example:\n+\n+@smallexample\n+(@value{GDBP}) print -@key{TAB}@key{TAB}\n+-address         -max-depth       -repeats         -vtbl\n+-array           -null-stop       -static-members\n+-array-indexes   -object          -symbol\n+-elements        -pretty          -union\n+@end smallexample\n+\n+Completion will in some cases guide you with a suggestion of what kind\n+of argument an option expects.  For example:\n+\n+@smallexample\n+(@value{GDBP}) print -elements @key{TAB}@key{TAB}\n+NUMBER     unlimited\n+@end smallexample\n+\n+Here, the option expects a number (e.g., @code{100}), not literal\n+@code{NUMBER}.  Such metasyntactical arguments are always presented in\n+uppercase.\n+\n+(For more on using the @code{print} command, see @ref{Data, ,Examining\n+Data}.)\n \n @node Help\n @section Getting Help\n@@ -3272,6 +3338,7 @@ As with the @samp{[New @dots{}]} message, the form of the text after\n @samp{Switching to} depends on your system's conventions for identifying\n threads.\n \n+@anchor{thread apply all}\n @kindex thread apply\n @cindex apply command to several threads\n @item thread apply [@var{thread-id-list} | all [-ascending]] [@var{flag}]@dots{} @var{command}\n@@ -3313,14 +3380,17 @@ Flags @code{-c} and @code{-s} cannot be used together.\n \n @kindex taas\n @cindex apply command to all threads (ignoring errors and empty output)\n-@item taas @var{command}\n-Shortcut for @code{thread apply all -s @var{command}}.\n+@item taas [@var{option}]@dots{} @var{command}\n+Shortcut for @code{thread apply all -s [@var{option}]@dots{} @var{command}}.\n Applies @var{command} on all threads, ignoring errors and empty output.\n \n+The @code{taas} command accepts the same options as the @code{thread\n+apply all} command.  @xref{thread apply all}.\n+\n @kindex tfaas\n @cindex apply a command to all frames of all threads (ignoring errors and empty output)\n-@item tfaas @var{command}\n-Shortcut for @code{thread apply all -s frame apply all -s @var{command}}.\n+@item tfaas [@var{option}]@dots{} @var{command}\n+Shortcut for @code{thread apply all -s -- frame apply all -s [@var{option}]@dots{} @var{command}}.\n Applies @var{command} on all frames of all threads, ignoring errors\n and empty output.  Note that the flag @code{-s} is specified twice:\n The first @code{-s} ensures that @code{thread apply} only shows the thread\n@@ -3336,6 +3406,8 @@ is, using:\n (@value{GDBP}) tfaas p some_local_var_i_do_not_remember_where_it_is\n @end smallexample\n \n+The @code{tfaas} command accepts the same options as the @code{frame\n+apply} command.  @xref{frame apply}.\n \n @kindex thread name\n @cindex name a thread\n@@ -7577,10 +7649,11 @@ printed.  You can stop the backtrace at any time by typing the system\n interrupt character, normally @kbd{Ctrl-c}.\n \n @table @code\n-@item backtrace [@var{args}@dots{}]\n-@itemx bt [@var{args}@dots{}]\n-Print the backtrace of the entire stack.  The optional @var{args} can\n-be one of the following:\n+@item backtrace [@var{option}]@dots{} [@var{qualifier}]@dots{} [@var{count}]\n+@itemx bt [@var{option}]@dots{} [@var{qualifier}]@dots{} [@var{count}]\n+Print the backtrace of the entire stack.\n+\n+The optional @var{count} can be one of the following:\n \n @table @code\n @item @var{n}\n@@ -7592,24 +7665,69 @@ number.\n @itemx -@var{n}\n Print only the outermost @var{n} frames, where @var{n} is a positive\n number.\n+@end table\n \n-@item full\n+Options:\n+\n+@table @code\n+@item -full\n Print the values of the local variables also.  This can be combined\n-with a number to limit the number of frames shown.\n+with the optional @var{count} to limit the number of frames shown.\n \n-@item no-filters\n+@item -no-filters\n Do not run Python frame filters on this backtrace.  @xref{Frame\n Filter API}, for more information.  Additionally use @ref{disable\n frame-filter all} to turn off all frame filters.  This is only\n relevant when @value{GDBN} has been configured with @code{Python}\n support.\n \n-@item hide\n+@item -hide\n A Python frame filter might decide to ``elide'' some frames.  Normally\n such elided frames are still printed, but they are indented relative\n-to the filtered frames that cause them to be elided.  The @code{hide}\n+to the filtered frames that cause them to be elided.  The @code{-hide}\n option causes elided frames to not be printed at all.\n @end table\n+\n+The @code{backtrace} command also supports a number of options that\n+allow overriding relevant global print settings as set by @code{set\n+backtrace} and @code{set print} subcommands:\n+\n+@table @code\n+@item -past-main [@code{on}|@code{off}]\n+Set whether backtraces should continue past @code{main}.  Related setting:\n+@ref{set backtrace past-main}.\n+\n+@item -past-entry [@code{on}|@code{off}]\n+Set whether backtraces should continue past the entry point of a program.\n+Related setting: @ref{set backtrace past-entry}.\n+\n+@item -entry-values @code{no}|@code{only}|@code{preferred}|@code{if-needed}|@code{both}|@code{compact}|@code{default}\n+Set printing of function arguments at function entry.\n+Related setting: @ref{set print entry-values}.\n+\n+@item -frame-arguments @code{all}|@code{scalars}|@code{none}\n+Set printing of non-scalar frame arguments.\n+Related setting: @ref{set print frame-arguments}.\n+\n+@item -raw-frame-arguments [@code{on}|@code{off}]\n+Set whether to print frame arguments in raw form.\n+Related setting: @ref{set print raw-frame-arguments}.\n+@end table\n+\n+The optional @var{qualifier} is maintained for backward compatibility.\n+It can be one of the following:\n+\n+@table @code\n+@item full\n+Equivalent to the @code{-full} option.\n+\n+@item no-filters\n+Equivalent to the @code{-no-filters} option.\n+\n+@item hide\n+Equivalent to the @code{-hide} option.\n+@end table\n+\n @end table\n \n @kindex where\n@@ -7707,6 +7825,7 @@ in a backtrace, you can change this behavior:\n @table @code\n @item set backtrace past-main\n @itemx set backtrace past-main on\n+@anchor{set backtrace past-main}\n @kindex set backtrace\n Backtraces will continue past the user entry point.\n \n@@ -7720,6 +7839,7 @@ Display the current user entry point backtrace policy.\n \n @item set backtrace past-entry\n @itemx set backtrace past-entry on\n+@anchor{set backtrace past-entry}\n Backtraces will continue past the internal entry point of an application.\n This entry point is encoded by the linker when the application is built,\n and is likely before the user entry point @code{main} (or equivalent) is called.\n@@ -7734,6 +7854,7 @@ Display the current internal entry point backtrace policy.\n @item set backtrace limit @var{n}\n @itemx set backtrace limit 0\n @itemx set backtrace limit unlimited\n+@anchor{set backtrace limit}\n @cindex backtrace limit\n Limit the backtrace to @var{n} levels.  A value of @code{unlimited}\n or zero means unlimited levels.\n@@ -8027,10 +8148,11 @@ tfaas i lo -q -t lock_something_t\n \n @node Frame Apply\n @section Applying a Command to Several Frames.\n+@anchor{frame apply}\n @kindex frame apply\n @cindex apply command to several frames\n @table @code\n-@item frame apply [all | @var{count} | @var{-count} | level @var{level}@dots{}] [@var{flag}]@dots{} @var{command}\n+@item frame apply [all | @var{count} | @var{-count} | level @var{level}@dots{}] [@var{option}]@dots{} @var{command}\n The @code{frame apply} command allows you to apply the named\n @var{command} to one or more frames.\n \n@@ -8056,23 +8178,28 @@ at levels 2, 3, 4, 6, 7, 8, and then again on frame at level 3.\n \n @end table\n \n-@end table\n-\n Note that the frames on which @code{frame apply} applies a command are\n also influenced by the @code{set backtrace} settings such as @code{set\n-backtrace past-main} and @code{set backtrace limit N}.  See\n+backtrace past-main} and @code{set backtrace limit N}.\n @xref{Backtrace,,Backtraces}.\n \n-The @var{flag} arguments control what output to produce and how to handle\n-errors raised when applying @var{command} to a frame.  @var{flag}\n-must start with a @code{-} directly followed by one letter in\n-@code{qcs}.  If several flags are provided, they must be given\n-individually, such as @code{-c -q}.\n+The @code{frame apply} command also supports a number of options that\n+allow overriding relevant @code{set backtrace} settings:\n+\n+@table @code\n+@item -past-main [@code{on}|@code{off}]\n+Whether backtraces should continue past @code{main}.\n+Related setting: @ref{set backtrace past-main}.\n+\n+@item -past-entry [@code{on}|@code{off}]\n+Whether backtraces should continue past the entry point of a program.\n+Related setting: @ref{set backtrace past-entry}.\n+@end table\n \n By default, @value{GDBN} displays some frame information before the\n output produced by @var{command}, and an error raised during the\n execution of a @var{command} will abort @code{frame apply}.  The\n-following flags can be used to fine-tune this behavior:\n+following options can be used to fine-tune these behaviors:\n \n @table @code\n @item -c\n@@ -8125,7 +8252,7 @@ $5 = (void *) 0xffffd1f0\n @end group\n @end smallexample\n \n-If flag @code{-q} is given, no frame information is printed:\n+If the flag @code{-q} is given, no frame information is printed:\n @smallexample\n @group\n (gdb) frame apply all -q p $sp\n@@ -8135,6 +8262,8 @@ $13 = (void *) 0xffffd1f0\n @end group\n @end smallexample\n \n+@end table\n+\n @table @code\n \n @kindex faas\n@@ -8150,6 +8279,9 @@ is, using:\n (@value{GDBP}) faas p some_local_var_i_do_not_remember_where_it_is\n @end smallexample\n \n+The @code{faas} command accepts the same options as the @code{frame\n+apply} command.  @xref{frame apply}.\n+\n Note that the command @code{tfaas @var{command}} applies @var{command}\n on all frames of all threads.  See @xref{Threads,,Threads}.\n @end table\n@@ -9262,16 +9394,111 @@ Different Languages}).  It may also print the expression using a\n Python-based pretty-printer (@pxref{Pretty Printing}).\n \n @table @code\n-@item print @var{expr}\n-@itemx print /@var{f} @var{expr}\n+@item print [[@var{options}] --] @var{expr}\n+@itemx print [[@var{options}] --] /@var{f} @var{expr}\n @var{expr} is an expression (in the source language).  By default the\n value of @var{expr} is printed in a format appropriate to its data type;\n you can choose a different format by specifying @samp{/@var{f}}, where\n @var{f} is a letter specifying the format; see @ref{Output Formats,,Output\n Formats}.\n \n-@item print\n-@itemx print /@var{f}\n+@anchor{print options}\n+The @code{print} command supports a number of options that allow\n+overriding relevant global print settings as set by @code{set print}\n+subcommands:\n+\n+@table @code\n+@item -address [@code{on}|@code{off}]\n+Set printing of addresses.\n+Related setting: @ref{set print address}.\n+\n+@item -array [@code{on}|@code{off}]\n+Pretty formatting of arrays.\n+Related setting: @ref{set print array}.\n+\n+@item -array-indexes [@code{on}|@code{off}]\n+Set printing of array indexes.\n+Related setting: @ref{set print array-indexes}.\n+\n+@item -elements @var{number-of-elements}|@code{unlimited}\n+Set limit on string chars or array elements to print.  The value\n+@code{unlimited} causes there to be no limit.  Related setting:\n+@ref{set print elements}.\n+\n+@item -max-depth @var{depth}|@code{unlimited}\n+Set the threshold after which nested structures are replaced with\n+ellipsis.  Related setting: @ref{set print max-depth}.\n+\n+@item -null-stop [@code{on}|@code{off}]\n+Set printing of char arrays to stop at first null char.  Related\n+setting: @ref{set print null-stop}.\n+\n+@item -object [@code{on}|@code{off}]\n+Set printing C@t{++} virtual function tables.  Related setting:\n+@ref{set print object}.\n+\n+@item -pretty [@code{on}|@code{off}]\n+Set pretty formatting of structures.  Related setting: @ref{set print\n+pretty}.\n+\n+@item -repeats @var{number-of-repeats}|@code{unlimited}\n+Set threshold for repeated print elements.  @code{unlimited} causes\n+all elements to be individually printed.  Related setting: @ref{set\n+print repeats}.\n+\n+@item -static-members [@code{on}|@code{off}]\n+Set printing C@t{++} static members.  Related setting: @ref{set print\n+static-members}.\n+\n+@item -symbol [@code{on}|@code{off}]\n+Set printing of symbol names when printing pointers.  Related setting:\n+@ref{set print symbol}.\n+\n+@item -union [@code{on}|@code{off}]\n+Set printing of unions interior to structures.  Related setting:\n+@ref{set print union}.\n+\n+@item -vtbl [@code{on}|@code{off}]\n+Set printing of C++ virtual function tables.  Related setting:\n+@ref{set print vtbl}.\n+@end table\n+\n+Because the @code{print} command accepts arbitrary expressions which\n+may look like options (including abbreviations), if you specify any\n+command option, then you must use a double dash (@code{--}) to mark\n+the end of option processing.\n+\n+For example, this prints the value of the @code{-r} expression:\n+\n+@smallexample\n+(@value{GDBP}) print -r\n+@end smallexample\n+\n+While this repeats the last value in the value history (see below)\n+with the @code{-raw} option in effect:\n+\n+@smallexample\n+(@value{GDBP}) print -r --\n+@end smallexample\n+\n+Here is an example including both on option and an expression:\n+\n+@smallexample\n+@group\n+(@value{GDBP}) print -pretty -- *myptr\n+$1 = @{\n+  next = 0x0,\n+  flags = @{\n+    sweet = 1,\n+    sour = 1\n+  @},\n+  meat = 0x54 \"Pork\"\n+@}\n+@end group\n+@end smallexample\n+\n+@item print [@var{options}]\n+@itemx print [@var{options}] /@var{f}\n @cindex reprint the last value\n If you omit @var{expr}, @value{GDBN} displays the last value again (from the\n @dfn{value history}; @pxref{Value History, ,Value History}).  This allows you to\n@@ -10312,6 +10539,7 @@ These settings are useful for debugging programs in any language:\n \n @table @code\n @kindex set print\n+@anchor{set print address}\n @item set print address\n @itemx set print address on\n @cindex print/don't print memory addresses\n@@ -10423,6 +10651,7 @@ the appropriate @code{set print} options turned on.\n You can also enable @samp{/a}-like formatting all the time using\n @samp{set print symbol on}:\n \n+@anchor{set print symbol}\n @table @code\n @item set print symbol on\n Tell @value{GDBN} to print the symbol corresponding to an address, if\n@@ -10441,6 +10670,7 @@ address.\n Other settings control how different kinds of objects are printed:\n \n @table @code\n+@anchor{set print array}\n @item set print array\n @itemx set print array on\n @cindex pretty print arrays\n@@ -10455,6 +10685,7 @@ Show whether compressed or pretty format is selected for displaying\n arrays.\n \n @cindex print array indexes\n+@anchor{set print array-indexes}\n @item set print array-indexes\n @itemx set print array-indexes on\n Print the index of each element when displaying arrays.  May be more\n@@ -10468,6 +10699,7 @@ Stop printing element indexes when displaying arrays.\n Show whether the index of each element is printed when displaying\n arrays.\n \n+@anchor{set print elements}\n @item set print elements @var{number-of-elements}\n @itemx set print elements unlimited\n @cindex number of array elements to print\n@@ -10484,6 +10716,7 @@ that the number of elements to print is unlimited.\n Display the number of elements of a large array that @value{GDBN} will print.\n If the number is 0, then the printing is unlimited.\n \n+@anchor{set print frame-arguments}\n @item set print frame-arguments @var{value}\n @kindex set print frame-arguments\n @cindex printing frame argument values\n@@ -10533,6 +10766,7 @@ thus speeding up the display of each Ada frame.\n @item show print frame-arguments\n Show how the value of arguments should be displayed when printing a frame.\n \n+@anchor{set print raw-frame-arguments}\n @item set print raw-frame-arguments on\n Print frame arguments in raw, non pretty-printed, form.\n \n@@ -10660,6 +10894,7 @@ entry resolution see @ref{set debug entry-values}.\n Show the method being used for printing of frame argument values at function\n entry.\n \n+@anchor{set print repeats}\n @item set print repeats @var{number-of-repeats}\n @itemx set print repeats unlimited\n @cindex repeated array elements\n@@ -10676,6 +10911,7 @@ is 10.\n Display the current threshold for printing repeated identical\n elements.\n \n+@anchor{set print max-depth}\n @item set print max-depth @var{depth}\n @item set print max-depth unlimited\n @cindex printing nested structures\n@@ -10734,6 +10970,7 @@ language, for most languages @code{@{...@}} is used, but Fortran uses\n Display the current threshold after which nested structures are\n replaces with ellipsis.\n \n+@anchor{set print null-stop}\n @item set print null-stop\n @cindex @sc{null} elements in arrays\n Cause @value{GDBN} to stop printing the characters of an array when the first\n@@ -10745,6 +10982,7 @@ The default is off.\n Show whether @value{GDBN} stops printing an array on the first\n @sc{null} character.\n \n+@anchor{set print pretty}\n @item set print pretty on\n @cindex print structures in indented form\n @cindex indentation in structure display\n@@ -10796,6 +11034,7 @@ international character sets, and is the default.\n @item show print sevenbit-strings\n Show whether or not @value{GDBN} is printing only seven-bit characters.\n \n+@anchor{set print union}\n @item set print union on\n @cindex unions in structures, printing\n Tell @value{GDBN} to print unions which are contained in structures\n@@ -10885,6 +11124,7 @@ decoding style by inspecting your program.\n @item show demangle-style\n Display the encoding style currently in use for decoding C@t{++} symbols.\n \n+@anchor{set print object}\n @item set print object\n @itemx set print object on\n @cindex derived type of an object, printing\n@@ -10904,6 +11144,7 @@ virtual function table.  This is the default setting.\n @item show print object\n Show whether actual, or declared, object types are displayed.\n \n+@anchor{set print static-members}\n @item set print static-members\n @itemx set print static-members on\n @cindex static members of C@t{++} objects\n@@ -10928,6 +11169,7 @@ Do not print static members when displaying a Pascal object.\n Show whether Pascal static members are printed or not.\n \n @c These don't work with HP ANSI C++ yet.\n+@anchor{set print vtbl}\n @item set print vtbl\n @itemx set print vtbl on\n @cindex pretty print C@t{++} virtual function tables\n@@ -19073,17 +19315,18 @@ compile file /home/user/example.c\n @end table\n \n @table @code\n-@item compile print @var{expr}\n-@itemx compile print /@var{f} @var{expr}\n+@item compile print [[@var{options}] --] @var{expr}\n+@itemx compile print [[@var{options}] --] /@var{f} @var{expr}\n Compile and execute @var{expr} with the compiler language found as the\n current language in @value{GDBN} (@pxref{Languages}).  By default the\n value of @var{expr} is printed in a format appropriate to its data type;\n you can choose a different format by specifying @samp{/@var{f}}, where\n @var{f} is a letter specifying the format; see @ref{Output Formats,,Output\n-Formats}.\n+Formats}.  The @code{compile print} command accepts the same options\n+as the @code{print} command; see @ref{print options}.\n \n-@item compile print\n-@itemx compile print /@var{f}\n+@item compile print [[@var{options}] --]\n+@itemx compile print [[@var{options}] --] /@var{f}\n @cindex reprint the last value\n Alternatively you can enter the expression (source code producing it) as\n multiple lines of text.  To enter this mode, invoke the @samp{compile print}\n@@ -37222,6 +37465,27 @@ If section was not specified, the section in which the symbol was found\n is also printed.  For dynamically linked executables, the name of\n executable or shared library containing the symbol is printed as well.\n \n+@kindex maint test-options\n+@item maint test-options require-delimiter\n+@itemx maint test-options unknown-is-error\n+@itemx maint test-options unknown-is-operand\n+These commands are used by the testsuite to validate the command\n+options framework.  The @code{require-delimiter} variant requires a\n+double-dash delimiter to indicate end of options.  The\n+@code{unknown-is-error} and @code{unknown-is-operand} do not.  The\n+@code{unknown-is-error} variant throws an error on unknown option,\n+while @code{unknown-is-operand} treats unknown options as the start of\n+the command's operands.  When run, the commands output the result of\n+the processed options.  When completed, the commands store the\n+internal result of completion in a variable exposed by the @code{maint\n+show test-options-completion-result} command.\n+\n+@kindex maint show test-options-completion-result\n+@item maint show test-options-completion-result\n+Shows the result of completing the @code{maint test-options}\n+subcommands.  This is used by the testsuite to validate completion\n+support in the command options framework.\n+\n @kindex maint test-settings\n @item maint test-settings set @var{kind}\n @itemx maint test-settings show @var{kind}"
    }
  ]
}