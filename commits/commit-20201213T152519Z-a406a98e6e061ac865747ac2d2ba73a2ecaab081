{
  "sha": "a406a98e6e061ac865747ac2d2ba73a2ecaab081",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YTQwNmE5OGU2ZTA2MWFjODY1NzQ3YWMyZDJiYTczYTJlY2FhYjA4MQ==",
  "commit": {
    "author": {
      "name": "Tom de Vries",
      "email": "tdevries@suse.de",
      "date": "2020-12-13T15:25:19Z"
    },
    "committer": {
      "name": "Tom de Vries",
      "email": "tdevries@suse.de",
      "date": "2020-12-13T15:25:19Z"
    },
    "message": "[gdb/testsuite] Handle ada in gdb_compile_shlib\n\nThe single test-case in the testsuite that creates an ada shared library is\ngdb.ada/catch_ex_std.exp.\n\nThe test-case does use gdb_compile_shlib, but with a few tweaks that make sure\nthings are properly handled for ada.\n\nMove the ada-specific code to gdb_compile_shlib, such that gdb_compile_sh can\nbe used for ada shared libs without tweaks.\n\nTested on x86_64-linux.\n\ngdb/testsuite/ChangeLog:\n\n2020-12-13  Tom de Vries  <tdevries@suse.de>\n\n\t* lib/gdb.exp (gdb_compile_shlib): Handle ada.\n\t* gdb.ada/catch_ex_std.exp: Use gdb_compile_shlib to compile from\n\tsource to shared lib.  Add ada to options.",
    "tree": {
      "sha": "338e7c51987343dd43adb3a6ec9ca352ceca3747",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/338e7c51987343dd43adb3a6ec9ca352ceca3747"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/a406a98e6e061ac865747ac2d2ba73a2ecaab081",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a406a98e6e061ac865747ac2d2ba73a2ecaab081",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/a406a98e6e061ac865747ac2d2ba73a2ecaab081",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a406a98e6e061ac865747ac2d2ba73a2ecaab081/comments",
  "author": {
    "login": "vries",
    "id": 4057235,
    "node_id": "MDQ6VXNlcjQwNTcyMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vries",
    "html_url": "https://github.com/vries",
    "followers_url": "https://api.github.com/users/vries/followers",
    "following_url": "https://api.github.com/users/vries/following{/other_user}",
    "gists_url": "https://api.github.com/users/vries/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vries/subscriptions",
    "organizations_url": "https://api.github.com/users/vries/orgs",
    "repos_url": "https://api.github.com/users/vries/repos",
    "events_url": "https://api.github.com/users/vries/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vries/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "vries",
    "id": 4057235,
    "node_id": "MDQ6VXNlcjQwNTcyMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vries",
    "html_url": "https://github.com/vries",
    "followers_url": "https://api.github.com/users/vries/followers",
    "following_url": "https://api.github.com/users/vries/following{/other_user}",
    "gists_url": "https://api.github.com/users/vries/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vries/subscriptions",
    "organizations_url": "https://api.github.com/users/vries/orgs",
    "repos_url": "https://api.github.com/users/vries/repos",
    "events_url": "https://api.github.com/users/vries/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vries/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "5d7e6ed0bd0ec0d4663e55b28e6fbdca2cb798e1",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5d7e6ed0bd0ec0d4663e55b28e6fbdca2cb798e1",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/5d7e6ed0bd0ec0d4663e55b28e6fbdca2cb798e1"
    }
  ],
  "stats": {
    "total": 68,
    "additions": 45,
    "deletions": 23
  },
  "files": [
    {
      "sha": "ca72392953464b3f514382460ef8643c36dd7784",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a406a98e6e061ac865747ac2d2ba73a2ecaab081/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a406a98e6e061ac865747ac2d2ba73a2ecaab081/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=a406a98e6e061ac865747ac2d2ba73a2ecaab081",
      "patch": "@@ -1,3 +1,9 @@\n+2020-12-13  Tom de Vries  <tdevries@suse.de>\n+\n+\t* lib/gdb.exp (gdb_compile_shlib): Handle ada.\n+\t* gdb.ada/catch_ex_std.exp: Use gdb_compile_shlib to compile from\n+\tsource to shared lib.  Add ada to options.\n+\n 2020-12-13  Tom de Vries  <tdevries@suse.de>\n \n \t* gdb.ada/catch_ex_std.exp: Use gnatmake -bargs and -largs instead of"
    },
    {
      "sha": "c5a0a93559437d03b272c510478749dfedec95d7",
      "filename": "gdb/testsuite/gdb.ada/catch_ex_std.exp",
      "status": "modified",
      "additions": 3,
      "deletions": 18,
      "changes": 21,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a406a98e6e061ac865747ac2d2ba73a2ecaab081/gdb/testsuite/gdb.ada/catch_ex_std.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a406a98e6e061ac865747ac2d2ba73a2ecaab081/gdb/testsuite/gdb.ada/catch_ex_std.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.ada/catch_ex_std.exp?ref=a406a98e6e061ac865747ac2d2ba73a2ecaab081",
      "patch": "@@ -24,28 +24,13 @@ if { [skip_ada_tests] } { return -1 }\n standard_ada_testfile foo\n \n set srcfile2 [file join [file dirname $srcfile] some_package.adb]\n-set ofile2 [standard_output_file some_package.o]\n set sofile [standard_output_file libsome_package.so]\n \n set outdir [file dirname $binfile]\n \n-# To make an Ada shared library we have to jump through a number of\n-# hoops.\n-\n-# First compile to a .o.  We can't compile directly to a .so because\n-# GCC rejects that:\n-#    $ gcc -g -shared -fPIC -o qqz.o some_package.adb\n-#    gcc: error: -c or -S required for Ada\n-# And, we can't compile in \"ada\" mode because dejagnu will try to\n-# invoke gnatmake, which we don't want.\n-if {[target_compile_ada_from_dir $outdir $srcfile2 $ofile2 \\\n-\t object {debug additional_flags=-fPIC}] != \"\"} {\n-    return -1\n-}\n-\n-# Now turn the .o into a shared library.\n-if {[gdb_compile_shlib $ofile2 $sofile \\\n-\t {debug additional_flags=-fPIC}] != \"\"} {\n+# Create the shared library.\n+if {[gdb_compile_shlib $srcfile2 $sofile \\\n+\t {ada debug additional_flags=-fPIC}] != \"\"} {\n     return -1\n }\n "
    },
    {
      "sha": "e413bab93c429ecec919e1d6c49a4839e1636f66",
      "filename": "gdb/testsuite/lib/gdb.exp",
      "status": "modified",
      "additions": 36,
      "deletions": 5,
      "changes": 41,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a406a98e6e061ac865747ac2d2ba73a2ecaab081/gdb/testsuite/lib/gdb.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a406a98e6e061ac865747ac2d2ba73a2ecaab081/gdb/testsuite/lib/gdb.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/lib/gdb.exp?ref=a406a98e6e061ac865747ac2d2ba73a2ecaab081",
      "patch": "@@ -4286,6 +4286,11 @@ proc gdb_compile_pthreads {source dest type options} {\n proc gdb_compile_shlib {sources dest options} {\n     set obj_options $options\n \n+    set ada 0\n+    if { [lsearch -exact $options \"ada\"] >= 0 } {\n+\tset ada 1\n+    }\n+\n     set info_options \"\"\n     if { [lsearch -exact $options \"c++\"] >= 0 } {\n \tset info_options \"c++\"\n@@ -4324,19 +4329,45 @@ proc gdb_compile_shlib {sources dest options} {\n     set outdir [file dirname $dest]\n     set objects \"\"\n     foreach source $sources {\n-\tset sourcebase [file tail $source]\n \tif {[file extension $source] == \".o\"} {\n \t    # Already a .o file.\n \t    lappend objects $source\n-\t} elseif {[gdb_compile $source \"${outdir}/${sourcebase}.o\" object \\\n-\t\t       $obj_options] != \"\"} {\n-\t    return -1\n+\t    continue\n+\t}\n+\t\n+\tset sourcebase [file tail $source]\n+\n+\tif { $ada } {\n+\t    # Gnatmake doesn't like object name foo.adb.o, use foo.o.\n+\t    set sourcebase [file rootname $sourcebase]\n+\t}\n+\tset object ${outdir}/${sourcebase}.o\n+\n+\tif { $ada } {\n+\t    # Use gdb_compile_ada_1 instead of gdb_compile_ada to avoid the\n+\t    # PASS message.\n+\t    if {[gdb_compile_ada_1 $source $object object \\\n+\t\t     $obj_options] != \"\"} {\n+\t\treturn -1\n+\t    }\n \t} else {\n-\t    lappend objects ${outdir}/${sourcebase}.o\n+\t    if {[gdb_compile $source $object object \\\n+\t\t     $obj_options] != \"\"} {\n+\t\treturn -1\n+\t    }\n \t}\n+\n+\tlappend objects $object\n     }\n \n     set link_options $options\n+    if { $ada } {\n+\t# If we try to use gnatmake for the link, it will interpret the\n+\t# object file as an .adb file.  Remove ada from the options to\n+\t# avoid it.\n+\tset idx [lsearch $link_options \"ada\"]\n+\tset link_options [lreplace $link_options $idx $idx]\n+    }\n     if [test_compiler_info \"xlc-*\"] {\n \tlappend link_options \"additional_flags=-qmkshrobj\"\n     } else {"
    }
  ]
}