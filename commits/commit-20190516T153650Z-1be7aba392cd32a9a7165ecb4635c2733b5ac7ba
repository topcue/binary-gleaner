{
  "sha": "1be7aba392cd32a9a7165ecb4635c2733b5ac7ba",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MWJlN2FiYTM5MmNkMzJhOWE3MTY1ZWNiNDYzNWMyNzMzYjVhYzdiYQ==",
  "commit": {
    "author": {
      "name": "Andre Vieira",
      "email": "andre.simoesdiasvieira@arm.com",
      "date": "2019-05-16T11:04:35Z"
    },
    "committer": {
      "name": "Andre Vieira",
      "email": "andre.simoesdiasvieira@arm.com",
      "date": "2019-05-16T15:36:50Z"
    },
    "message": "[PATCH 30/57][Arm][GAS] Add support for MVE instructions: vqmovnt, vqmovnb, vqmovunt, vqmovunb, vqrshl and vrshl\n\ngas/ChangeLog:\n2019-05-16  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n\n\t* config/tc-arm.c (M_MNEM_vqmovnt, M_MNEM_vqmovnb,\n\t M_MNEM_vqmovunt, M_MNEM_vqmovunb): New instruction encodings.\n\t(do_mve_vqmovn): New encoding function.\n\t(do_neon_rshl): Change to accepte MVE variants.\n\t(insns): Change entries and add new for MVE mnemonics.\n\t* testsuite/gas/arm/mve-vqmovn-bad.d: New test.\n\t* testsuite/gas/arm/mve-vqmovn-bad.l: New test.\n\t* testsuite/gas/arm/mve-vqmovn-bad.s: New test.\n\t* testsuite/gas/arm/mve-vqrshl-bad.d: New test.\n\t* testsuite/gas/arm/mve-vqrshl-bad.l: New test.\n\t* testsuite/gas/arm/mve-vqrshl-bad.s: New test.\n\t* testsuite/gas/arm/mve-vrshl-bad.d: New test.\n\t* testsuite/gas/arm/mve-vrshl-bad.l: New test.\n\t* testsuite/gas/arm/mve-vrshl-bad.s: New test.",
    "tree": {
      "sha": "df64f6f1808622e870158667fd09baa0eb4d5a7f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/df64f6f1808622e870158667fd09baa0eb4d5a7f"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/1be7aba392cd32a9a7165ecb4635c2733b5ac7ba",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1be7aba392cd32a9a7165ecb4635c2733b5ac7ba",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/1be7aba392cd32a9a7165ecb4635c2733b5ac7ba",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1be7aba392cd32a9a7165ecb4635c2733b5ac7ba/comments",
  "author": {
    "login": "avieira-arm",
    "id": 68072104,
    "node_id": "MDQ6VXNlcjY4MDcyMTA0",
    "avatar_url": "https://avatars.githubusercontent.com/u/68072104?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/avieira-arm",
    "html_url": "https://github.com/avieira-arm",
    "followers_url": "https://api.github.com/users/avieira-arm/followers",
    "following_url": "https://api.github.com/users/avieira-arm/following{/other_user}",
    "gists_url": "https://api.github.com/users/avieira-arm/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/avieira-arm/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/avieira-arm/subscriptions",
    "organizations_url": "https://api.github.com/users/avieira-arm/orgs",
    "repos_url": "https://api.github.com/users/avieira-arm/repos",
    "events_url": "https://api.github.com/users/avieira-arm/events{/privacy}",
    "received_events_url": "https://api.github.com/users/avieira-arm/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "avieira-arm",
    "id": 68072104,
    "node_id": "MDQ6VXNlcjY4MDcyMTA0",
    "avatar_url": "https://avatars.githubusercontent.com/u/68072104?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/avieira-arm",
    "html_url": "https://github.com/avieira-arm",
    "followers_url": "https://api.github.com/users/avieira-arm/followers",
    "following_url": "https://api.github.com/users/avieira-arm/following{/other_user}",
    "gists_url": "https://api.github.com/users/avieira-arm/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/avieira-arm/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/avieira-arm/subscriptions",
    "organizations_url": "https://api.github.com/users/avieira-arm/orgs",
    "repos_url": "https://api.github.com/users/avieira-arm/repos",
    "events_url": "https://api.github.com/users/avieira-arm/events{/privacy}",
    "received_events_url": "https://api.github.com/users/avieira-arm/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "35d1cfc2000388028c8f032e714b576615e8db02",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/35d1cfc2000388028c8f032e714b576615e8db02",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/35d1cfc2000388028c8f032e714b576615e8db02"
    }
  ],
  "stats": {
    "total": 375,
    "additions": 366,
    "deletions": 9
  },
  "files": [
    {
      "sha": "75a7ba7fdb9ceed2e7882061d5a7e0d4ec4e2db4",
      "filename": "gas/ChangeLog",
      "status": "modified",
      "additions": 17,
      "deletions": 0,
      "changes": 17,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1be7aba392cd32a9a7165ecb4635c2733b5ac7ba/gas/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1be7aba392cd32a9a7165ecb4635c2733b5ac7ba/gas/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ChangeLog?ref=1be7aba392cd32a9a7165ecb4635c2733b5ac7ba",
      "patch": "@@ -1,3 +1,20 @@\n+2019-05-16  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+\n+\t* config/tc-arm.c (M_MNEM_vqmovnt, M_MNEM_vqmovnb,\n+\t M_MNEM_vqmovunt, M_MNEM_vqmovunb): New instruction encodings.\n+\t(do_mve_vqmovn): New encoding function.\n+\t(do_neon_rshl): Change to accepte MVE variants.\n+\t(insns): Change entries and add new for MVE mnemonics.\n+\t* testsuite/gas/arm/mve-vqmovn-bad.d: New test.\n+\t* testsuite/gas/arm/mve-vqmovn-bad.l: New test.\n+\t* testsuite/gas/arm/mve-vqmovn-bad.s: New test.\n+\t* testsuite/gas/arm/mve-vqrshl-bad.d: New test.\n+\t* testsuite/gas/arm/mve-vqrshl-bad.l: New test.\n+\t* testsuite/gas/arm/mve-vqrshl-bad.s: New test.\n+\t* testsuite/gas/arm/mve-vrshl-bad.d: New test.\n+\t* testsuite/gas/arm/mve-vrshl-bad.l: New test.\n+\t* testsuite/gas/arm/mve-vrshl-bad.s: New test.\n+\n 2019-05-16  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n \n \t* config/tc-arm.c (enum operand_parse_code): Add new operand."
    },
    {
      "sha": "0072ace14094885812e5852c75aa7073c745b86f",
      "filename": "gas/config/tc-arm.c",
      "status": "modified",
      "additions": 82,
      "deletions": 9,
      "changes": 91,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1be7aba392cd32a9a7165ecb4635c2733b5ac7ba/gas/config/tc-arm.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1be7aba392cd32a9a7165ecb4635c2733b5ac7ba/gas/config/tc-arm.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-arm.c?ref=1be7aba392cd32a9a7165ecb4635c2733b5ac7ba",
      "patch": "@@ -14202,6 +14202,10 @@ do_t_loloop (void)\n #define M_MNEM_vrmlsldavha  0xfe800e21\n #define M_MNEM_vrmlsldavhx  0xfe801e01\n #define M_MNEM_vrmlsldavhax 0xfe801e21\n+#define M_MNEM_vqmovnt\t  0xee331e01\n+#define M_MNEM_vqmovnb\t  0xee330e01\n+#define M_MNEM_vqmovunt\t  0xee311e81\n+#define M_MNEM_vqmovunb\t  0xee310e81\n \n /* Neon instruction encoder helpers.  */\n \n@@ -15746,6 +15750,31 @@ do_mve_vmlas (void)\n   inst.is_neon = 1;\n }\n \n+static void\n+do_mve_vqmovn (void)\n+{\n+  struct neon_type_el et;\n+  if (inst.instruction == M_MNEM_vqmovnt\n+     || inst.instruction == M_MNEM_vqmovnb)\n+    et = neon_check_type (2, NS_QQ, N_EQK,\n+\t\t\t  N_U16 | N_U32 | N_S16 | N_S32 | N_KEY);\n+  else\n+    et = neon_check_type (2, NS_QQ, N_EQK, N_S16 | N_S32 | N_KEY);\n+\n+  if (inst.cond > COND_ALWAYS)\n+    inst.pred_insn_type = INSIDE_VPT_INSN;\n+  else\n+    inst.pred_insn_type = MVE_OUTSIDE_PRED_INSN;\n+\n+  inst.instruction |= (et.type == NT_unsigned) << 28;\n+  inst.instruction |= HI1 (inst.operands[0].reg) << 22;\n+  inst.instruction |= (et.size == 32) << 18;\n+  inst.instruction |= LOW4 (inst.operands[0].reg) << 12;\n+  inst.instruction |= HI1 (inst.operands[1].reg) << 5;\n+  inst.instruction |= LOW4 (inst.operands[1].reg);\n+  inst.is_neon = 1;\n+}\n+\n static void\n do_mve_vpsel (void)\n {\n@@ -16353,15 +16382,55 @@ do_neon_qshl_imm (void)\n static void\n do_neon_rshl (void)\n {\n-  enum neon_shape rs = neon_select_shape (NS_DDD, NS_QQQ, NS_NULL);\n-  struct neon_type_el et = neon_check_type (3, rs,\n-    N_EQK, N_EQK, N_SU_ALL | N_KEY);\n+  if (check_simd_pred_availability (0, NEON_CHECK_ARCH | NEON_CHECK_CC))\n+   return;\n+\n+  enum neon_shape rs;\n+  struct neon_type_el et;\n+  if (ARM_CPU_HAS_FEATURE (cpu_variant, mve_ext))\n+    {\n+      rs = neon_select_shape (NS_QQR, NS_QQQ, NS_NULL);\n+      et = neon_check_type (3, rs, N_EQK, N_EQK, N_SU_MVE | N_KEY);\n+    }\n+  else\n+    {\n+      rs = neon_select_shape (NS_DDD, NS_QQQ, NS_NULL);\n+      et = neon_check_type (3, rs, N_EQK, N_EQK, N_SU_ALL | N_KEY);\n+    }\n+\n   unsigned int tmp;\n \n-  tmp = inst.operands[2].reg;\n-  inst.operands[2].reg = inst.operands[1].reg;\n-  inst.operands[1].reg = tmp;\n-  neon_three_same (neon_quad (rs), et.type == NT_unsigned, et.size);\n+  if (rs == NS_QQR)\n+    {\n+      if (inst.operands[2].reg == REG_PC)\n+\tas_tsktsk (MVE_BAD_PC);\n+      else if (inst.operands[2].reg == REG_SP)\n+\tas_tsktsk (MVE_BAD_SP);\n+\n+      constraint (inst.operands[0].reg != inst.operands[1].reg,\n+\t\t  _(\"invalid instruction shape\"));\n+\n+      if (inst.instruction == 0x0000510)\n+\t/* We are dealing with vqrshl.  */\n+\tinst.instruction = 0xee331ee0;\n+      else\n+\t/* We are dealing with vrshl.  */\n+\tinst.instruction = 0xee331e60;\n+\n+      inst.instruction |= (et.type == NT_unsigned) << 28;\n+      inst.instruction |= HI1 (inst.operands[0].reg) << 22;\n+      inst.instruction |= neon_logbits (et.size) << 18;\n+      inst.instruction |= LOW4 (inst.operands[0].reg) << 12;\n+      inst.instruction |= inst.operands[2].reg;\n+      inst.is_neon = 1;\n+    }\n+  else\n+    {\n+      tmp = inst.operands[2].reg;\n+      inst.operands[2].reg = inst.operands[1].reg;\n+      inst.operands[1].reg = tmp;\n+      neon_three_same (neon_quad (rs), et.type == NT_unsigned, et.size);\n+    }\n }\n \n static int\n@@ -24110,9 +24179,7 @@ static const struct asm_opcode insns[] =\n   /* integer ops, valid types S8 S16 S32 S64 U8 U16 U32 U64.  */\n  NUF(vqaddq,    0000010, 3, (RNQ,  oRNQ,  RNQ),  neon_dyadic_i64_su),\n  NUF(vqsubq,    0000210, 3, (RNQ,  oRNQ,  RNQ),  neon_dyadic_i64_su),\n- NUF(vrshl,     0000500, 3, (RNDQ, oRNDQ, RNDQ), neon_rshl),\n  NUF(vrshlq,    0000500, 3, (RNQ,  oRNQ,  RNQ),  neon_rshl),\n- NUF(vqrshl,    0000510, 3, (RNDQ, oRNDQ, RNDQ), neon_rshl),\n  NUF(vqrshlq,   0000510, 3, (RNQ,  oRNQ,  RNQ),  neon_rshl),\n   /* If not immediate, fall back to neon_dyadic_i64_su.\n      shl_imm should accept I8 I16 I32 I64,\n@@ -24874,6 +24941,10 @@ static const struct asm_opcode insns[] =\n  mToC(\"vqrdmlash\", ee001e40,\t3, (RMQ, RMQ, RR),\t\tmve_vqdmlah),\n  mToC(\"vqdmullt\",  ee301f00,\t3, (RMQ, RMQ, RMQRR),\t\tmve_vqdmull),\n  mToC(\"vqdmullb\",  ee300f00,\t3, (RMQ, RMQ, RMQRR),\t\tmve_vqdmull),\n+ mCEF(vqmovnt,\t  _vqmovnt,\t2, (RMQ, RMQ),\t\t\tmve_vqmovn),\n+ mCEF(vqmovnb,\t  _vqmovnb,\t2, (RMQ, RMQ),\t\t\tmve_vqmovn),\n+ mCEF(vqmovunt,\t  _vqmovunt,\t2, (RMQ, RMQ),\t\t\tmve_vqmovn),\n+ mCEF(vqmovunb,\t  _vqmovunb,\t2, (RMQ, RMQ),\t\t\tmve_vqmovn),\n \n #undef THUMB_VARIANT\n #define THUMB_VARIANT & mve_fp_ext\n@@ -24960,6 +25031,8 @@ static const struct asm_opcode insns[] =\n  mnUF(vqrdmlah,  _vqrdmlah,3, (RNDQMQ, oRNDQMQ, RNDQ_RNSC_RR), neon_qrdmlah),\n  mnUF(vqdmulh,   _vqdmulh, 3, (RNDQMQ, oRNDQMQ, RNDQMQ_RNSC_RR), neon_qdmulh),\n  mnUF(vqrdmulh,  _vqrdmulh,3, (RNDQMQ, oRNDQMQ, RNDQMQ_RNSC_RR), neon_qdmulh),\n+ MNUF(vqrshl,    0000510,  3, (RNDQMQ, oRNDQMQ, RNDQMQR), neon_rshl),\n+ MNUF(vrshl,     0000500,  3, (RNDQMQ, oRNDQMQ, RNDQMQR), neon_rshl),\n \n #undef\tARM_VARIANT\n #define ARM_VARIANT & arm_ext_v8_3"
    },
    {
      "sha": "ebf6026841f93fdda790a9db4cbe4c16cf77b359",
      "filename": "gas/testsuite/gas/arm/mve-vqmovn-bad.d",
      "status": "added",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1be7aba392cd32a9a7165ecb4635c2733b5ac7ba/gas/testsuite/gas/arm/mve-vqmovn-bad.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1be7aba392cd32a9a7165ecb4635c2733b5ac7ba/gas/testsuite/gas/arm/mve-vqmovn-bad.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/mve-vqmovn-bad.d?ref=1be7aba392cd32a9a7165ecb4635c2733b5ac7ba",
      "patch": "@@ -0,0 +1,5 @@\n+#name: bad MVE VQMOVNT and VQMOVNB instructions\n+#as: -march=armv8.1-m.main+mve.fp\n+#error_output: mve-vqmovn-bad.l\n+\n+.*: +file format .*arm.*"
    },
    {
      "sha": "f29c30a63001b07032678ea734b2a6704471a9dd",
      "filename": "gas/testsuite/gas/arm/mve-vqmovn-bad.l",
      "status": "added",
      "additions": 61,
      "deletions": 0,
      "changes": 61,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1be7aba392cd32a9a7165ecb4635c2733b5ac7ba/gas/testsuite/gas/arm/mve-vqmovn-bad.l",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1be7aba392cd32a9a7165ecb4635c2733b5ac7ba/gas/testsuite/gas/arm/mve-vqmovn-bad.l",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/mve-vqmovn-bad.l?ref=1be7aba392cd32a9a7165ecb4635c2733b5ac7ba",
      "patch": "@@ -0,0 +1,61 @@\n+[^:]*: Assembler messages:\n+[^:]*:10: Error: bad type in SIMD instruction -- `vqmovnt.s8 q0,q1'\n+[^:]*:11: Error: bad type in SIMD instruction -- `vqmovnt.s64 q0,q1'\n+[^:]*:12: Error: bad type in SIMD instruction -- `vqmovnt.i16 q0,q1'\n+[^:]*:13: Error: bad type in SIMD instruction -- `vqmovnb.u8 q0,q1'\n+[^:]*:14: Error: bad type in SIMD instruction -- `vqmovnb.u64 q0,q1'\n+[^:]*:15: Error: bad type in SIMD instruction -- `vqmovnb.i16 q0,q1'\n+[^:]*:16: Error: bad type in SIMD instruction -- `vqmovunt.s8 q0,q1'\n+[^:]*:17: Error: bad type in SIMD instruction -- `vqmovunt.s64 q0,q1'\n+[^:]*:18: Error: bad type in SIMD instruction -- `vqmovunt.i16 q0,q1'\n+[^:]*:19: Error: bad type in SIMD instruction -- `vqmovunb.s8 q0,q1'\n+[^:]*:20: Error: bad type in SIMD instruction -- `vqmovunb.s64 q0,q1'\n+[^:]*:21: Error: bad type in SIMD instruction -- `vqmovunb.i16 q0,q1'\n+[^:]*:22: Error: bad type in SIMD instruction -- `vqmovunt.u16 q0,q1'\n+[^:]*:23: Error: bad type in SIMD instruction -- `vqmovunt.u32 q0,q1'\n+[^:]*:24: Error: bad type in SIMD instruction -- `vqmovunb.u16 q0,q1'\n+[^:]*:25: Error: bad type in SIMD instruction -- `vqmovunb.u32 q0,q1'\n+[^:]*:26: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:26: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:26: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:26: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:26: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:26: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:27: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:27: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:27: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:27: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:27: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:27: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:28: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:28: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:28: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:28: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:28: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:28: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:29: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:29: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:29: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:29: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:29: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:29: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:31: Error: syntax error -- `vqmovnteq.s16 q0,q1'\n+[^:]*:32: Error: syntax error -- `vqmovnteq.s16 q0,q1'\n+[^:]*:34: Error: syntax error -- `vqmovnteq.s16 q0,q1'\n+[^:]*:35: Error: vector predicated instruction should be in VPT/VPST block -- `vqmovntt.s16 q0,q1'\n+[^:]*:37: Error: instruction missing MVE vector predication code -- `vqmovnt.s16 q0,q1'\n+[^:]*:39: Error: syntax error -- `vqmovnbeq.s16 q0,q1'\n+[^:]*:40: Error: syntax error -- `vqmovnbeq.s16 q0,q1'\n+[^:]*:42: Error: syntax error -- `vqmovnbeq.s16 q0,q1'\n+[^:]*:43: Error: vector predicated instruction should be in VPT/VPST block -- `vqmovnbt.s16 q0,q1'\n+[^:]*:45: Error: instruction missing MVE vector predication code -- `vqmovnb.s16 q0,q1'\n+[^:]*:47: Error: syntax error -- `vqmovunteq.s16 q0,q1'\n+[^:]*:48: Error: syntax error -- `vqmovunteq.s16 q0,q1'\n+[^:]*:50: Error: syntax error -- `vqmovunteq.s16 q0,q1'\n+[^:]*:51: Error: vector predicated instruction should be in VPT/VPST block -- `vqmovuntt.s16 q0,q1'\n+[^:]*:53: Error: instruction missing MVE vector predication code -- `vqmovunt.s16 q0,q1'\n+[^:]*:55: Error: syntax error -- `vqmovunbeq.s16 q0,q1'\n+[^:]*:56: Error: syntax error -- `vqmovunbeq.s16 q0,q1'\n+[^:]*:58: Error: syntax error -- `vqmovunbeq.s16 q0,q1'\n+[^:]*:59: Error: vector predicated instruction should be in VPT/VPST block -- `vqmovunbt.s16 q0,q1'\n+[^:]*:61: Error: instruction missing MVE vector predication code -- `vqmovunb.s16 q0,q1'"
    },
    {
      "sha": "a59179cd40d01a366acb5baf31ae250a5c953a33",
      "filename": "gas/testsuite/gas/arm/mve-vqmovn-bad.s",
      "status": "added",
      "additions": 61,
      "deletions": 0,
      "changes": 61,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1be7aba392cd32a9a7165ecb4635c2733b5ac7ba/gas/testsuite/gas/arm/mve-vqmovn-bad.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1be7aba392cd32a9a7165ecb4635c2733b5ac7ba/gas/testsuite/gas/arm/mve-vqmovn-bad.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/mve-vqmovn-bad.s?ref=1be7aba392cd32a9a7165ecb4635c2733b5ac7ba",
      "patch": "@@ -0,0 +1,61 @@\n+.macro cond op\n+.irp cond, eq, ne, gt, ge, lt, le\n+it \\cond\n+\\op\\().s16 q0, q1\n+.endr\n+.endm\n+\n+.syntax unified\n+.thumb\n+vqmovnt.s8 q0, q1\n+vqmovnt.s64 q0, q1\n+vqmovnt.i16 q0, q1\n+vqmovnb.u8 q0, q1\n+vqmovnb.u64 q0, q1\n+vqmovnb.i16 q0, q1\n+vqmovunt.s8 q0, q1\n+vqmovunt.s64 q0, q1\n+vqmovunt.i16 q0, q1\n+vqmovunb.s8 q0, q1\n+vqmovunb.s64 q0, q1\n+vqmovunb.i16 q0, q1\n+vqmovunt.u16 q0, q1\n+vqmovunt.u32 q0, q1\n+vqmovunb.u16 q0, q1\n+vqmovunb.u32 q0, q1\n+cond vqmovnt\n+cond vqmovnb\n+cond vqmovunt\n+cond vqmovunb\n+it eq\n+vqmovnteq.s16 q0, q1\n+vqmovnteq.s16 q0, q1\n+vpst\n+vqmovnteq.s16 q0, q1\n+vqmovntt.s16 q0, q1\n+vpst\n+vqmovnt.s16 q0, q1\n+it eq\n+vqmovnbeq.s16 q0, q1\n+vqmovnbeq.s16 q0, q1\n+vpst\n+vqmovnbeq.s16 q0, q1\n+vqmovnbt.s16 q0, q1\n+vpst\n+vqmovnb.s16 q0, q1\n+it eq\n+vqmovunteq.s16 q0, q1\n+vqmovunteq.s16 q0, q1\n+vpst\n+vqmovunteq.s16 q0, q1\n+vqmovuntt.s16 q0, q1\n+vpst\n+vqmovunt.s16 q0, q1\n+it eq\n+vqmovunbeq.s16 q0, q1\n+vqmovunbeq.s16 q0, q1\n+vpst\n+vqmovunbeq.s16 q0, q1\n+vqmovunbt.s16 q0, q1\n+vpst\n+vqmovunb.s16 q0, q1"
    },
    {
      "sha": "d1185da045c1a72f7193b5da5b5fbb3b70a4ec1a",
      "filename": "gas/testsuite/gas/arm/mve-vqrshl-bad.d",
      "status": "added",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1be7aba392cd32a9a7165ecb4635c2733b5ac7ba/gas/testsuite/gas/arm/mve-vqrshl-bad.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1be7aba392cd32a9a7165ecb4635c2733b5ac7ba/gas/testsuite/gas/arm/mve-vqrshl-bad.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/mve-vqrshl-bad.d?ref=1be7aba392cd32a9a7165ecb4635c2733b5ac7ba",
      "patch": "@@ -0,0 +1,5 @@\n+#name: bad MVE VQRSHL instructions\n+#as: -march=armv8.1-m.main+mve.fp\n+#error_output: mve-vqrshl-bad.l\n+\n+.*: +file format .*arm.*"
    },
    {
      "sha": "337cf17416d83c4e8dbb67d1d3c2055c82ae7adf",
      "filename": "gas/testsuite/gas/arm/mve-vqrshl-bad.l",
      "status": "added",
      "additions": 32,
      "deletions": 0,
      "changes": 32,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1be7aba392cd32a9a7165ecb4635c2733b5ac7ba/gas/testsuite/gas/arm/mve-vqrshl-bad.l",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1be7aba392cd32a9a7165ecb4635c2733b5ac7ba/gas/testsuite/gas/arm/mve-vqrshl-bad.l",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/mve-vqrshl-bad.l?ref=1be7aba392cd32a9a7165ecb4635c2733b5ac7ba",
      "patch": "@@ -0,0 +1,32 @@\n+[^:]*: Assembler messages:\n+[^:]*:10: Error: bad type in SIMD instruction -- `vqrshl.s64 q0,q1,q2'\n+[^:]*:11: Error: bad type in SIMD instruction -- `vqrshl.u64 q0,q1,q2'\n+[^:]*:12: Error: bad type in SIMD instruction -- `vqrshl.i32 q0,q1,q2'\n+[^:]*:13: Error: bad type in SIMD instruction -- `vqrshl.s64 q0,r2'\n+[^:]*:14: Error: bad type in SIMD instruction -- `vqrshl.u64 q0,r2'\n+[^:]*:15: Error: bad type in SIMD instruction -- `vqrshl.i32 q0,r2'\n+[^:]*:16: Error: invalid instruction shape -- `vqrshl.s32 q0,q1,r2'\n+[^:]*:17: Warning: instruction is UNPREDICTABLE with PC operand\n+[^:]*:18: Warning: instruction is UNPREDICTABLE with SP operand\n+[^:]*:19: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:19: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:19: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:19: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:19: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:19: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:20: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:20: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:20: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:20: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:20: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:20: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:22: Error: syntax error -- `vqrshleq.s32 q0,q1,q2'\n+[^:]*:23: Error: syntax error -- `vqrshleq.s32 q0,q1,q2'\n+[^:]*:25: Error: syntax error -- `vqrshleq.s32 q0,q1,q2'\n+[^:]*:26: Error: vector predicated instruction should be in VPT/VPST block -- `vqrshlt.s32 q0,q1,q2'\n+[^:]*:28: Error: instruction missing MVE vector predication code -- `vqrshl.s32 q0,q1,q2'\n+[^:]*:30: Error: syntax error -- `vqrshleq.s32 q0,r2'\n+[^:]*:31: Error: syntax error -- `vqrshleq.s32 q0,r2'\n+[^:]*:33: Error: syntax error -- `vqrshleq.s32 q0,r2'\n+[^:]*:34: Error: vector predicated instruction should be in VPT/VPST block -- `vqrshlt.s32 q0,r2'\n+[^:]*:36: Error: instruction missing MVE vector predication code -- `vqrshl.s32 q0,r2'"
    },
    {
      "sha": "fd4b5cc4efaccc43b26b7d6f9b0bdf3929bfc747",
      "filename": "gas/testsuite/gas/arm/mve-vqrshl-bad.s",
      "status": "added",
      "additions": 36,
      "deletions": 0,
      "changes": 36,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1be7aba392cd32a9a7165ecb4635c2733b5ac7ba/gas/testsuite/gas/arm/mve-vqrshl-bad.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1be7aba392cd32a9a7165ecb4635c2733b5ac7ba/gas/testsuite/gas/arm/mve-vqrshl-bad.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/mve-vqrshl-bad.s?ref=1be7aba392cd32a9a7165ecb4635c2733b5ac7ba",
      "patch": "@@ -0,0 +1,36 @@\n+.macro cond lastreg\n+.irp cond, eq, ne, gt, ge, lt, le\n+it \\cond\n+vqrshl.s16 q0, q0, \\lastreg\n+.endr\n+.endm\n+\n+.syntax unified\n+.thumb\n+vqrshl.s64 q0, q1, q2\n+vqrshl.u64 q0, q1, q2\n+vqrshl.i32 q0, q1, q2\n+vqrshl.s64 q0, r2\n+vqrshl.u64 q0, r2\n+vqrshl.i32 q0, r2\n+vqrshl.s32 q0, q1, r2\n+vqrshl.s32 q0, pc\n+vqrshl.s32 q0, sp\n+cond q2\n+cond r2\n+it eq\n+vqrshleq.s32 q0, q1, q2\n+vqrshleq.s32 q0, q1, q2\n+vpst\n+vqrshleq.s32 q0, q1, q2\n+vqrshlt.s32 q0, q1, q2\n+vpst\n+vqrshl.s32 q0, q1, q2\n+it eq\n+vqrshleq.s32 q0, r2\n+vqrshleq.s32 q0, r2\n+vpst\n+vqrshleq.s32 q0, r2\n+vqrshlt.s32 q0, r2\n+vpst\n+vqrshl.s32 q0, r2"
    },
    {
      "sha": "163b3a98e84433bb84564f9d2a4abce322c6c724",
      "filename": "gas/testsuite/gas/arm/mve-vrshl-bad.d",
      "status": "added",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1be7aba392cd32a9a7165ecb4635c2733b5ac7ba/gas/testsuite/gas/arm/mve-vrshl-bad.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1be7aba392cd32a9a7165ecb4635c2733b5ac7ba/gas/testsuite/gas/arm/mve-vrshl-bad.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/mve-vrshl-bad.d?ref=1be7aba392cd32a9a7165ecb4635c2733b5ac7ba",
      "patch": "@@ -0,0 +1,5 @@\n+#name: bad MVE VRSHL instructions\n+#as: -march=armv8.1-m.main+mve\n+#error_output: mve-vrshl-bad.l\n+\n+.*: +file format .*arm.*"
    },
    {
      "sha": "5cb98c21e23ffc89d3dce812d88fee4836bbe27f",
      "filename": "gas/testsuite/gas/arm/mve-vrshl-bad.l",
      "status": "added",
      "additions": 29,
      "deletions": 0,
      "changes": 29,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1be7aba392cd32a9a7165ecb4635c2733b5ac7ba/gas/testsuite/gas/arm/mve-vrshl-bad.l",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1be7aba392cd32a9a7165ecb4635c2733b5ac7ba/gas/testsuite/gas/arm/mve-vrshl-bad.l",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/mve-vrshl-bad.l?ref=1be7aba392cd32a9a7165ecb4635c2733b5ac7ba",
      "patch": "@@ -0,0 +1,29 @@\n+[^:]*: Assembler messages:\n+[^:]*:10: Error: bad type in SIMD instruction -- `vrshl.i16 q0,q1,q2'\n+[^:]*:11: Error: bad type in SIMD instruction -- `vrshl.i16 q0,r2'\n+[^:]*:12: Error: bad type in SIMD instruction -- `vrshl.s64 q0,q1,q2'\n+[^:]*:13: Error: bad type in SIMD instruction -- `vrshl.s64 q0,r2'\n+[^:]*:14: Warning: instruction is UNPREDICTABLE with SP operand\n+[^:]*:15: Warning: instruction is UNPREDICTABLE with PC operand\n+[^:]*:16: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:16: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:16: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:16: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:16: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:16: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:17: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:17: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:17: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:17: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:17: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:17: Warning: instruction is UNPREDICTABLE in an IT block\n+[^:]*:19: Error: syntax error -- `vrshleq.s32 q0,q1,q2'\n+[^:]*:20: Error: syntax error -- `vrshleq.s32 q0,q1,q2'\n+[^:]*:22: Error: syntax error -- `vrshleq.s32 q0,q1,q2'\n+[^:]*:23: Error: vector predicated instruction should be in VPT/VPST block -- `vrshlt.s32 q0,q1,q2'\n+[^:]*:25: Error: instruction missing MVE vector predication code -- `vrshl.s32 q0,q1,q2'\n+[^:]*:27: Error: syntax error -- `vrshleq.s32 q0,r2'\n+[^:]*:28: Error: syntax error -- `vrshleq.s32 q0,r2'\n+[^:]*:30: Error: syntax error -- `vrshleq.s32 q0,r2'\n+[^:]*:31: Error: vector predicated instruction should be in VPT/VPST block -- `vrshlt.s32 q0,r2'\n+[^:]*:33: Error: instruction missing MVE vector predication code -- `vrshl.s32 q0,r2'"
    },
    {
      "sha": "77ed167ab47c16238ce5b0f7acc55a089df942c0",
      "filename": "gas/testsuite/gas/arm/mve-vrshl-bad.s",
      "status": "added",
      "additions": 33,
      "deletions": 0,
      "changes": 33,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1be7aba392cd32a9a7165ecb4635c2733b5ac7ba/gas/testsuite/gas/arm/mve-vrshl-bad.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1be7aba392cd32a9a7165ecb4635c2733b5ac7ba/gas/testsuite/gas/arm/mve-vrshl-bad.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/arm/mve-vrshl-bad.s?ref=1be7aba392cd32a9a7165ecb4635c2733b5ac7ba",
      "patch": "@@ -0,0 +1,33 @@\n+.macro cond lastreg\n+.irp cond, eq, ne, gt, ge, lt, le\n+it \\cond\n+vrshl.s32 q0, q0, \\lastreg\n+.endr\n+.endm\n+\n+.syntax unified\n+.thumb\n+vrshl.i16 q0, q1, q2\n+vrshl.i16 q0, r2\n+vrshl.s64 q0, q1, q2\n+vrshl.s64 q0, r2\n+vrshl.s32 q0, sp\n+vrshl.s32 q0, pc\n+cond q2\n+cond r2\n+it eq\n+vrshleq.s32 q0, q1, q2\n+vrshleq.s32 q0, q1, q2\n+vpst\n+vrshleq.s32 q0, q1, q2\n+vrshlt.s32 q0, q1, q2\n+vpst\n+vrshl.s32 q0, q1, q2\n+it eq\n+vrshleq.s32 q0, r2\n+vrshleq.s32 q0, r2\n+vpst\n+vrshleq.s32 q0, r2\n+vrshlt.s32 q0, r2\n+vpst\n+vrshl.s32 q0, r2"
    }
  ]
}