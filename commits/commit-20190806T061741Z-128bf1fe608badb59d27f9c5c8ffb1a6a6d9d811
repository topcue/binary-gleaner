{
  "sha": "128bf1fe608badb59d27f9c5c8ffb1a6a6d9d811",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MTI4YmYxZmU2MDhiYWRiNTlkMjdmOWM1YzhmZmIxYTZhNmQ5ZDgxMQ==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-08-06T06:10:08Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2019-08-06T06:17:41Z"
    },
    "message": "LTO object insertion point\n\nThis is a mostly cosmetic fix for cases like PR24873 where LTO\nrecompiled objects were supposed to be inserted inside a group.  The\nspecific case handled by this patch is when the first file inside a\ngroup is an archive, the first file claimed by the plugin.  Prior to\nthis patch we would have inserted the recompiled objects before the\ngroup, which doesn't matter really since the entire group will be\nreloaded, but it looks a little wrong in map files.\n\n\tPR 24873\n\t* ldlang.c (find_replacements_insert_point): Return \"before\" flag.\n\t(find_next_input_statement): New function.\n\t(lang_process): When placing recompiled LTO objects before a\n\tclaimed archive, place them immediately before in the statement\n\tlist.",
    "tree": {
      "sha": "cd5721a07cb8e85a949a9ab5508faa5222cb2332",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/cd5721a07cb8e85a949a9ab5508faa5222cb2332"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/128bf1fe608badb59d27f9c5c8ffb1a6a6d9d811",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/128bf1fe608badb59d27f9c5c8ffb1a6a6d9d811",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/128bf1fe608badb59d27f9c5c8ffb1a6a6d9d811",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/128bf1fe608badb59d27f9c5c8ffb1a6a6d9d811/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "b02c4f162335ed055964f603ba3aca18b0e5c5bf",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b02c4f162335ed055964f603ba3aca18b0e5c5bf",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/b02c4f162335ed055964f603ba3aca18b0e5c5bf"
    }
  ],
  "stats": {
    "total": 68,
    "additions": 62,
    "deletions": 6
  },
  "files": [
    {
      "sha": "563e482e1b74a68e747859611dbf3c0ee3c65bdb",
      "filename": "ld/ChangeLog",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/128bf1fe608badb59d27f9c5c8ffb1a6a6d9d811/ld/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/128bf1fe608badb59d27f9c5c8ffb1a6a6d9d811/ld/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ChangeLog?ref=128bf1fe608badb59d27f9c5c8ffb1a6a6d9d811",
      "patch": "@@ -1,3 +1,12 @@\n+2019-08-06  Alan Modra  <amodra@gmail.com>\n+\n+\tPR 24873\n+\t* ldlang.c (find_replacements_insert_point): Return \"before\" flag.\n+\t(find_next_input_statement): New function.\n+\t(lang_process): When placing recompiled LTO objects before a\n+\tclaimed archive, place them immediately before in the statement\n+\tlist.\n+\n 2019-08-06  Alan Modra  <amodra@gmail.com>\n \n \tPR 24873"
    },
    {
      "sha": "8119cfc45bf95ea8949ecab19639ad75f13382a3",
      "filename": "ld/ldlang.c",
      "status": "modified",
      "additions": 53,
      "deletions": 6,
      "changes": 59,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/128bf1fe608badb59d27f9c5c8ffb1a6a6d9d811/ld/ldlang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/128bf1fe608badb59d27f9c5c8ffb1a6a6d9d811/ld/ldlang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/ld/ldlang.c?ref=128bf1fe608badb59d27f9c5c8ffb1a6a6d9d811",
      "patch": "@@ -7226,7 +7226,7 @@ lang_relax_sections (bfd_boolean need_layout)\n    inserted at the head of the file_chain.  */\n \n static lang_input_statement_type *\n-find_replacements_insert_point (void)\n+find_replacements_insert_point (bfd_boolean *before)\n {\n   lang_input_statement_type *claim1, *lastobject;\n   lastobject = &input_file_chain.head->input_statement;\n@@ -7235,14 +7235,18 @@ find_replacements_insert_point (void)\n        claim1 = &claim1->next->input_statement)\n     {\n       if (claim1->flags.claimed)\n-\treturn claim1->flags.claim_archive ? lastobject : claim1;\n+\t{\n+\t  *before = claim1->flags.claim_archive;\n+\t  return claim1->flags.claim_archive ? lastobject : claim1;\n+\t}\n       /* Update lastobject if this is a real object file.  */\n       if (claim1->the_bfd != NULL && claim1->the_bfd->my_archive == NULL)\n \tlastobject = claim1;\n     }\n   /* No files were claimed by the plugin.  Choose the last object\n      file found on the list (maybe the first, dummy entry) as the\n      insert point.  */\n+  *before = FALSE;\n   return lastobject;\n }\n \n@@ -7323,6 +7327,35 @@ lang_list_remove_tail (lang_statement_list_type *destlist,\n   destlist->tail = savetail;\n   *savetail = NULL;\n }\n+\n+static lang_statement_union_type **\n+find_next_input_statement (lang_statement_union_type **s)\n+{\n+  for ( ; *s; s = &(*s)->header.next)\n+    {\n+      lang_statement_union_type **t;\n+      switch ((*s)->header.type)\n+\t{\n+\tcase lang_input_statement_enum:\n+\t  return s;\n+\tcase lang_wild_statement_enum:\n+\t  t = &(*s)->wild_statement.children.head;\n+\t  break;\n+\tcase lang_group_statement_enum:\n+\t  t = &(*s)->group_statement.children.head;\n+\t  break;\n+\tcase lang_output_section_statement_enum:\n+\t  t = &(*s)->output_section_statement.children.head;\n+\t  break;\n+\tdefault:\n+\t  continue;\n+\t}\n+      t = find_next_input_statement (t);\n+      if (*t)\n+\treturn t;\n+    }\n+  return s;\n+}\n #endif /* ENABLE_PLUGINS */\n \n /* Add NAME to the list of garbage collection entry points.  */\n@@ -7447,16 +7480,30 @@ lang_process (void)\n       if (added.head != NULL)\n \t{\n \t  /* If so, we will insert them into the statement list immediately\n-\t     after the first input file that was claimed by the plugin.  */\n-\t  plugin_insert = find_replacements_insert_point ();\n+\t     after the first input file that was claimed by the plugin,\n+\t     unless that file was an archive in which case it is inserted\n+\t     immediately before.  */\n+\t  bfd_boolean before;\n+\t  lang_statement_union_type **prev;\n+\t  plugin_insert = find_replacements_insert_point (&before);\n \t  /* If a plugin adds input files without having claimed any, we\n \t     don't really have a good idea where to place them.  Just putting\n \t     them at the start or end of the list is liable to leave them\n \t     outside the crtbegin...crtend range.  */\n \t  ASSERT (plugin_insert != NULL);\n \t  /* Splice the new statement list into the old one.  */\n-\t  lang_list_insert_after (stat_ptr, &added,\n-\t\t\t\t  &plugin_insert->header.next);\n+\t  prev = &plugin_insert->header.next;\n+\t  if (before)\n+\t    {\n+\t      prev = find_next_input_statement (prev);\n+\t      if (*prev != plugin_insert->next_real_file)\n+\t\t{\n+\t\t  /* Huh?  We didn't find the expected input statement.  */\n+\t\t  ASSERT (0);\n+\t\t  prev = &plugin_insert->header.next;\n+\t\t}\n+\t    }\n+\t  lang_list_insert_after (stat_ptr, &added, prev);\n \t  /* Likewise for the file chains.  */\n \t  lang_list_insert_after (&input_file_chain, &inputfiles,\n \t\t\t\t  &plugin_insert->next_real_file);"
    }
  ]
}