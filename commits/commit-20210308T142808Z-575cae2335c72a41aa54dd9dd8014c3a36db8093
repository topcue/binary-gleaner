{
  "sha": "575cae2335c72a41aa54dd9dd8014c3a36db8093",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NTc1Y2FlMjMzNWM3MmE0MWFhNTRkZDlkZDgwMTRjM2EzNmRiODA5Mw==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-03-08T14:27:57Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-03-08T14:28:08Z"
    },
    "message": "Split out eval_op_rust_struct_anon\n\nThis splits STRUCTOP_ANONYMOUS into a new function for future use.\n\ngdb/ChangeLog\n2021-03-08  Tom Tromey  <tom@tromey.com>\n\n\t* rust-lang.c (eval_op_rust_struct_anon): New function.\n\t(rust_evaluate_subexp): Use it.",
    "tree": {
      "sha": "2b2245df2c4cc3ea7b1b4dc0abeb711669d0318b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/2b2245df2c4cc3ea7b1b4dc0abeb711669d0318b"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/575cae2335c72a41aa54dd9dd8014c3a36db8093",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/575cae2335c72a41aa54dd9dd8014c3a36db8093",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/575cae2335c72a41aa54dd9dd8014c3a36db8093",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/575cae2335c72a41aa54dd9dd8014c3a36db8093/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "051042333d9d7e2622f3825d5cf532676787dd1c",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/051042333d9d7e2622f3825d5cf532676787dd1c",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/051042333d9d7e2622f3825d5cf532676787dd1c"
    }
  ],
  "stats": {
    "total": 135,
    "additions": 75,
    "deletions": 60
  },
  "files": [
    {
      "sha": "da33a9fa1535996fbf77f457fc03adaabab92a1e",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/575cae2335c72a41aa54dd9dd8014c3a36db8093/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/575cae2335c72a41aa54dd9dd8014c3a36db8093/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=575cae2335c72a41aa54dd9dd8014c3a36db8093",
      "patch": "@@ -1,3 +1,8 @@\n+2021-03-08  Tom Tromey  <tom@tromey.com>\n+\n+\t* rust-lang.c (eval_op_rust_struct_anon): New function.\n+\t(rust_evaluate_subexp): Use it.\n+\n 2021-03-08  Tom Tromey  <tom@tromey.com>\n \n \t* rust-lang.c (eval_op_rust_array): New function."
    },
    {
      "sha": "54f0d61c7dcd841782acefb5744c3ff0fe9aedce",
      "filename": "gdb/rust-lang.c",
      "status": "modified",
      "additions": 70,
      "deletions": 60,
      "changes": 130,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/575cae2335c72a41aa54dd9dd8014c3a36db8093/gdb/rust-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/575cae2335c72a41aa54dd9dd8014c3a36db8093/gdb/rust-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/rust-lang.c?ref=575cae2335c72a41aa54dd9dd8014c3a36db8093",
      "patch": "@@ -1382,6 +1382,73 @@ eval_op_rust_array (struct type *expect_type, struct expression *exp,\n     }\n }\n \n+/* A helper function for STRUCTOP_ANONYMOUS.  */\n+\n+static struct value *\n+eval_op_rust_struct_anon (struct type *expect_type, struct expression *exp,\n+\t\t\t  enum noside noside,\n+\t\t\t  int field_number, struct value *lhs)\n+{\n+  struct type *type = value_type (lhs);\n+\n+  if (type->code () == TYPE_CODE_STRUCT)\n+    {\n+      struct type *outer_type = NULL;\n+\n+      if (rust_enum_p (type))\n+\t{\n+\t  gdb::array_view<const gdb_byte> view (value_contents (lhs),\n+\t\t\t\t\t\tTYPE_LENGTH (type));\n+\t  type = resolve_dynamic_type (type, view, value_address (lhs));\n+\n+\t  if (rust_empty_enum_p (type))\n+\t    error (_(\"Cannot access field %d of empty enum %s\"),\n+\t\t   field_number, type->name ());\n+\n+\t  int fieldno = rust_enum_variant (type);\n+\t  lhs = value_primitive_field (lhs, 0, fieldno, type);\n+\t  outer_type = type;\n+\t  type = value_type (lhs);\n+\t}\n+\n+      /* Tuples and tuple structs */\n+      int nfields = type->num_fields ();\n+\n+      if (field_number >= nfields || field_number < 0)\n+\t{\n+\t  if (outer_type != NULL)\n+\t    error(_(\"Cannot access field %d of variant %s::%s, \"\n+\t\t    \"there are only %d fields\"),\n+\t\t  field_number, outer_type->name (),\n+\t\t  rust_last_path_segment (type->name ()),\n+\t\t  nfields);\n+\t  else\n+\t    error(_(\"Cannot access field %d of %s, \"\n+\t\t    \"there are only %d fields\"),\n+\t\t  field_number, type->name (), nfields);\n+\t}\n+\n+      /* Tuples are tuple structs too.  */\n+      if (!rust_tuple_struct_type_p (type))\n+\t{\n+\t  if (outer_type != NULL)\n+\t    error(_(\"Variant %s::%s is not a tuple variant\"),\n+\t\t  outer_type->name (),\n+\t\t  rust_last_path_segment (type->name ()));\n+\t  else\n+\t    error(_(\"Attempting to access anonymous field %d \"\n+\t\t    \"of %s, which is not a tuple, tuple struct, or \"\n+\t\t    \"tuple-like variant\"),\n+\t\t  field_number, type->name ());\n+\t}\n+\n+      return value_primitive_field (lhs, 0, field_number, type);\n+    }\n+  else\n+    error(_(\"Anonymous field access is only allowed on tuples, \\\n+tuple structs, and tuple-like enum variants\"));\n+}\n+\n /* evaluate_exp implementation for Rust.  */\n \n static struct value *\n@@ -1513,72 +1580,15 @@ rust_evaluate_subexp (struct type *expect_type, struct expression *exp,\n       {\n \t/* Anonymous field access, i.e. foo.1.  */\n \tstruct value *lhs;\n-\tint pc, field_number, nfields;\n-\tstruct type *type;\n+\tint pc, field_number;\n \n \tpc = (*pos)++;\n \tfield_number = longest_to_int (exp->elts[pc + 1].longconst);\n \t(*pos) += 2;\n \tlhs = evaluate_subexp (nullptr, exp, pos, noside);\n \n-\ttype = value_type (lhs);\n-\n-\tif (type->code () == TYPE_CODE_STRUCT)\n-\t  {\n-\t    struct type *outer_type = NULL;\n-\n-\t    if (rust_enum_p (type))\n-\t      {\n-\t\tgdb::array_view<const gdb_byte> view (value_contents (lhs),\n-\t\t\t\t\t\t      TYPE_LENGTH (type));\n-\t\ttype = resolve_dynamic_type (type, view, value_address (lhs));\n-\n-\t\tif (rust_empty_enum_p (type))\n-\t\t  error (_(\"Cannot access field %d of empty enum %s\"),\n-\t\t\t field_number, type->name ());\n-\n-\t\tint fieldno = rust_enum_variant (type);\n-\t\tlhs = value_primitive_field (lhs, 0, fieldno, type);\n-\t\touter_type = type;\n-\t\ttype = value_type (lhs);\n-\t      }\n-\n-\t    /* Tuples and tuple structs */\n-\t    nfields = type->num_fields ();\n-\n-\t    if (field_number >= nfields || field_number < 0)\n-\t      {\n-\t\tif (outer_type != NULL)\n-\t\t  error(_(\"Cannot access field %d of variant %s::%s, \"\n-\t\t\t  \"there are only %d fields\"),\n-\t\t\tfield_number, outer_type->name (),\n-\t\t\trust_last_path_segment (type->name ()),\n-\t\t\tnfields);\n-\t\telse\n-\t\t  error(_(\"Cannot access field %d of %s, \"\n-\t\t\t  \"there are only %d fields\"),\n-\t\t\tfield_number, type->name (), nfields);\n-\t      }\n-\n-\t    /* Tuples are tuple structs too.  */\n-\t    if (!rust_tuple_struct_type_p (type))\n-\t      {\n-\t\tif (outer_type != NULL)\n-\t\t  error(_(\"Variant %s::%s is not a tuple variant\"),\n-\t\t\touter_type->name (),\n-\t\t\trust_last_path_segment (type->name ()));\n-\t\telse\n-\t\t  error(_(\"Attempting to access anonymous field %d \"\n-\t\t\t  \"of %s, which is not a tuple, tuple struct, or \"\n-\t\t\t  \"tuple-like variant\"),\n-\t\t      field_number, type->name ());\n-\t      }\n-\n-\t    result = value_primitive_field (lhs, 0, field_number, type);\n-\t  }\n-\telse\n-\t  error(_(\"Anonymous field access is only allowed on tuples, \\\n-tuple structs, and tuple-like enum variants\"));\n+\treturn eval_op_rust_struct_anon (expect_type, exp, noside,\n+\t\t\t\t\t field_number, lhs);\n       }\n       break;\n "
    }
  ]
}