{
  "sha": "9c79936b3df018166d53869f7f2bb2909f129e51",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OWM3OTkzNmIzZGYwMTgxNjZkNTM4NjlmN2YyYmIyOTA5ZjEyOWU1MQ==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-03-08T14:27:57Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-03-08T14:28:44Z"
    },
    "message": "Use bound_minimal_symbol in var_msym_value_operation\n\nThis changes var_msym_value_operation to use a bound_minimal_symbol\nrather than separate minsym and objfile parameters.  The main benefit\nof this is removing the possibly-confusing check_objfile overload for\na plain minimal symbol.\n\ngdb/ChangeLog\n2021-03-08  Tom Tromey  <tom@tromey.com>\n\n\t* parse.c (parser_state::push_symbol, parser_state::push_dollar):\n\tUpdate.\n\t* p-exp.y (variable): Update.\n\t* go-exp.y (variable): Update.\n\t* expprint.c (dump_for_expression): Use bound_minimal_symbol.\n\tRemove overload for objfile.\n\t* expop.h (eval_op_var_msym_value): Use bound_minimal_symbol\n\tparameter.\n\t(check_objfile): Likewise.\n\t(dump_for_expression): Likewise.  Remove overload for objfile.\n\t(class var_msym_value_operation): Use bound_minimal_symbol.\n\t* eval.c (eval_op_var_msym_value): Use bound_minimal_symbol\n\tparameter.\n\t(var_msym_value_operation::evaluate_for_address)\n\t(var_msym_value_operation::evaluate_for_sizeof)\n\t(var_msym_value_operation::evaluate_for_cast): Update.\n\t* d-exp.y (PrimaryExpression): Update.\n\t* c-exp.y (variable): Update.\n\t* ax-gdb.c (var_msym_value_operation::do_generate_ax): Update.\n\t* ada-lang.c (ada_var_msym_value_operation::evaluate_for_cast):\n\tUpdate.\n\t* ada-exp.y (write_var_or_type): Update.",
    "tree": {
      "sha": "a878d993489408177c7d6b6a724276b30aed2b1d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/a878d993489408177c7d6b6a724276b30aed2b1d"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/9c79936b3df018166d53869f7f2bb2909f129e51",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9c79936b3df018166d53869f7f2bb2909f129e51",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/9c79936b3df018166d53869f7f2bb2909f129e51",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/9c79936b3df018166d53869f7f2bb2909f129e51/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "40d07d07d051308626f6079fa6d1598fafb445c7",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/40d07d07d051308626f6079fa6d1598fafb445c7",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/40d07d07d051308626f6079fa6d1598fafb445c7"
    }
  ],
  "stats": {
    "total": 122,
    "additions": 61,
    "deletions": 61
  },
  "files": [
    {
      "sha": "d1cf966d21380862805ac6a3403002a8bf7dac59",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 25,
      "deletions": 0,
      "changes": 25,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9c79936b3df018166d53869f7f2bb2909f129e51/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9c79936b3df018166d53869f7f2bb2909f129e51/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=9c79936b3df018166d53869f7f2bb2909f129e51",
      "patch": "@@ -1,3 +1,28 @@\n+2021-03-08  Tom Tromey  <tom@tromey.com>\n+\n+\t* parse.c (parser_state::push_symbol, parser_state::push_dollar):\n+\tUpdate.\n+\t* p-exp.y (variable): Update.\n+\t* go-exp.y (variable): Update.\n+\t* expprint.c (dump_for_expression): Use bound_minimal_symbol.\n+\tRemove overload for objfile.\n+\t* expop.h (eval_op_var_msym_value): Use bound_minimal_symbol\n+\tparameter.\n+\t(check_objfile): Likewise.\n+\t(dump_for_expression): Likewise.  Remove overload for objfile.\n+\t(class var_msym_value_operation): Use bound_minimal_symbol.\n+\t* eval.c (eval_op_var_msym_value): Use bound_minimal_symbol\n+\tparameter.\n+\t(var_msym_value_operation::evaluate_for_address)\n+\t(var_msym_value_operation::evaluate_for_sizeof)\n+\t(var_msym_value_operation::evaluate_for_cast): Update.\n+\t* d-exp.y (PrimaryExpression): Update.\n+\t* c-exp.y (variable): Update.\n+\t* ax-gdb.c (var_msym_value_operation::do_generate_ax): Update.\n+\t* ada-lang.c (ada_var_msym_value_operation::evaluate_for_cast):\n+\tUpdate.\n+\t* ada-exp.y (write_var_or_type): Update.\n+\n 2021-03-08  Tom Tromey  <tom@tromey.com>\n \n \t* parser-defs.h (exp_uses_objfile): Return bool."
    },
    {
      "sha": "222fec536f3c3c179db279f789fe95445d4bfb5a",
      "filename": "gdb/ada-exp.y",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9c79936b3df018166d53869f7f2bb2909f129e51/gdb/ada-exp.y",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9c79936b3df018166d53869f7f2bb2909f129e51/gdb/ada-exp.y",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-exp.y?ref=9c79936b3df018166d53869f7f2bb2909f129e51",
      "patch": "@@ -1550,8 +1550,7 @@ write_var_or_type (struct parser_state *par_state,\n \t\t= ada_lookup_simple_minsym (encoded_name);\n \t      if (msym.minsym != NULL)\n \t\t{\n-\t\t  par_state->push_new<ada_var_msym_value_operation>\n-\t\t    (msym.minsym, msym.objfile);\n+\t\t  par_state->push_new<ada_var_msym_value_operation> (msym);\n \t\t  /* Maybe cause error here rather than later? FIXME? */\n \t\t  write_selectors (par_state, encoded_name + tail_index);\n \t\t  return NULL;"
    },
    {
      "sha": "8330cbcc0b9b1a71c967bdc8ed2c1165f542adf3",
      "filename": "gdb/ada-lang.c",
      "status": "modified",
      "additions": 2,
      "deletions": 3,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9c79936b3df018166d53869f7f2bb2909f129e51/gdb/ada-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9c79936b3df018166d53869f7f2bb2909f129e51/gdb/ada-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-lang.c?ref=9c79936b3df018166d53869f7f2bb2909f129e51",
      "patch": "@@ -10241,9 +10241,8 @@ ada_var_msym_value_operation::evaluate_for_cast (struct type *expect_type,\n   if (noside == EVAL_AVOID_SIDE_EFFECTS)\n     return value_zero (expect_type, not_lval);\n \n-  value *val = evaluate_var_msym_value (noside,\n-\t\t\t\t\tstd::get<1> (m_storage),\n-\t\t\t\t\tstd::get<0> (m_storage));\n+  const bound_minimal_symbol &b = std::get<0> (m_storage);\n+  value *val = evaluate_var_msym_value (noside, b.objfile, b.minsym);\n \n   val = ada_value_cast (expect_type, val);\n "
    },
    {
      "sha": "33fc53837645f1c5eb2e0e0476c4d079639b2d03",
      "filename": "gdb/ax-gdb.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9c79936b3df018166d53869f7f2bb2909f129e51/gdb/ax-gdb.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9c79936b3df018166d53869f7f2bb2909f129e51/gdb/ax-gdb.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ax-gdb.c?ref=9c79936b3df018166d53869f7f2bb2909f129e51",
      "patch": "@@ -1631,13 +1631,13 @@ var_msym_value_operation::do_generate_ax (struct expression *exp,\n \t\t\t\t\t  struct axs_value *value,\n \t\t\t\t\t  struct type *cast_type)\n {\n-  gen_msym_var_ref (ax, value, std::get<0> (m_storage),\n-\t\t    std::get<1> (m_storage));\n+  const bound_minimal_symbol &b = std::get<0> (m_storage);\n+  gen_msym_var_ref (ax, value, b.minsym, b.objfile);\n \n   if (value->type->code () == TYPE_CODE_ERROR)\n     {\n       if (cast_type == nullptr)\n-\terror_unknown_type (std::get<0> (m_storage)->linkage_name ());\n+\terror_unknown_type (b.minsym->linkage_name ());\n       value->type = cast_type;\n     }\n }"
    },
    {
      "sha": "c0e4b494f3d23da1a5012525eca129f38d01726c",
      "filename": "gdb/c-exp.y",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9c79936b3df018166d53869f7f2bb2909f129e51/gdb/c-exp.y",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9c79936b3df018166d53869f7f2bb2909f129e51/gdb/c-exp.y",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/c-exp.y?ref=9c79936b3df018166d53869f7f2bb2909f129e51",
      "patch": "@@ -1195,7 +1195,7 @@ variable:\tname_not_typename\n \t\t\t\t= find_gnu_ifunc (sym.symbol);\n \t\t\t      if (resolver.minsym != NULL)\n \t\t\t\tpstate->push_new<var_msym_value_operation>\n-\t\t\t\t  (resolver.minsym, resolver.objfile);\n+\t\t\t\t  (resolver);\n \t\t\t      else\n \t\t\t\tpstate->push_new<var_value_operation>\n \t\t\t\t  (sym.symbol, sym.block);\n@@ -1243,7 +1243,7 @@ variable:\tname_not_typename\n \t\t\t\t  (alias_target, SYMBOL_BLOCK_VALUE (alias_target));\n \t\t\t      else\n \t\t\t\tpstate->push_new<var_msym_value_operation>\n-\t\t\t\t  (msymbol.minsym, msymbol.objfile);\n+\t\t\t\t  (msymbol);\n \t\t\t    }\n \t\t\t}\n \t;"
    },
    {
      "sha": "90c342e0e218e8e3b385abfdf41dddf4f5e21db8",
      "filename": "gdb/d-exp.y",
      "status": "modified",
      "additions": 1,
      "deletions": 2,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9c79936b3df018166d53869f7f2bb2909f129e51/gdb/d-exp.y",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9c79936b3df018166d53869f7f2bb2909f129e51/gdb/d-exp.y",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/d-exp.y?ref=9c79936b3df018166d53869f7f2bb2909f129e51",
      "patch": "@@ -470,8 +470,7 @@ PrimaryExpression:\n \t\t      /* Lookup foreign name in global static symbols.  */\n \t\t      msymbol = lookup_bound_minimal_symbol (copy.c_str ());\n \t\t      if (msymbol.minsym != NULL)\n-\t\t\tpstate->push_new<var_msym_value_operation>\n-\t\t\t  (msymbol.minsym, msymbol.objfile);\n+\t\t\tpstate->push_new<var_msym_value_operation> (msymbol);\n \t\t      else if (!have_full_symbols () && !have_partial_symbols ())\n \t\t\terror (_(\"No symbol table is loaded.  Use the \\\"file\\\" command\"));\n \t\t      else"
    },
    {
      "sha": "5af728a9bbd25979cfb1197209b89fc11b453c7d",
      "filename": "gdb/eval.c",
      "status": "modified",
      "additions": 11,
      "deletions": 14,
      "changes": 25,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9c79936b3df018166d53869f7f2bb2909f129e51/gdb/eval.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9c79936b3df018166d53869f7f2bb2909f129e51/gdb/eval.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/eval.c?ref=9c79936b3df018166d53869f7f2bb2909f129e51",
      "patch": "@@ -1005,14 +1005,15 @@ eval_op_var_entry_value (struct type *expect_type, struct expression *exp,\n struct value *\n eval_op_var_msym_value (struct type *expect_type, struct expression *exp,\n \t\t\tenum noside noside, bool outermost_p,\n-\t\t\tminimal_symbol *msymbol, struct objfile *objfile)\n+\t\t\tbound_minimal_symbol msymbol)\n {\n-  value *val = evaluate_var_msym_value (noside, objfile, msymbol);\n+  value *val = evaluate_var_msym_value (noside, msymbol.objfile,\n+\t\t\t\t\tmsymbol.minsym);\n \n   struct type *type = value_type (val);\n   if (type->code () == TYPE_CODE_ERROR\n       && (noside != EVAL_AVOID_SIDE_EFFECTS || !outermost_p))\n-    error_unknown_type (msymbol->print_name ());\n+    error_unknown_type (msymbol.minsym->print_name ());\n   return val;\n }\n \n@@ -2529,9 +2530,8 @@ value *\n var_msym_value_operation::evaluate_for_address (struct expression *exp,\n \t\t\t\t\t\tenum noside noside)\n {\n-  value *val = evaluate_var_msym_value (noside,\n-\t\t\t\t\tstd::get<1> (m_storage),\n-\t\t\t\t\tstd::get<0> (m_storage));\n+  const bound_minimal_symbol &b = std::get<0> (m_storage);\n+  value *val = evaluate_var_msym_value (noside, b.objfile, b.minsym);\n   if (noside == EVAL_AVOID_SIDE_EFFECTS)\n     {\n       struct type *type = lookup_pointer_type (value_type (val));\n@@ -2637,14 +2637,12 @@ var_msym_value_operation::evaluate_for_sizeof (struct expression *exp,\n \t\t\t\t\t       enum noside noside)\n \n {\n-  minimal_symbol *msymbol = std::get<0> (m_storage);\n-  value *mval = evaluate_var_msym_value (noside,\n-\t\t\t\t\t std::get<1> (m_storage),\n-\t\t\t\t\t msymbol);\n+  const bound_minimal_symbol &b = std::get<0> (m_storage);\n+  value *mval = evaluate_var_msym_value (noside, b.objfile, b.minsym);\n \n   struct type *type = value_type (mval);\n   if (type->code () == TYPE_CODE_ERROR)\n-    error_unknown_type (msymbol->print_name ());\n+    error_unknown_type (b.minsym->print_name ());\n \n   /* FIXME: This should be size_t.  */\n   struct type *size_type = builtin_type (exp->gdbarch)->builtin_int;\n@@ -2750,9 +2748,8 @@ var_msym_value_operation::evaluate_for_cast (struct type *to_type,\n   if (noside == EVAL_AVOID_SIDE_EFFECTS)\n     return value_zero (to_type, not_lval);\n \n-  value *val = evaluate_var_msym_value (noside,\n-\t\t\t\t\tstd::get<1> (m_storage),\n-\t\t\t\t\tstd::get<0> (m_storage));\n+  const bound_minimal_symbol &b = std::get<0> (m_storage);\n+  value *val = evaluate_var_msym_value (noside, b.objfile, b.minsym);\n \n   val = value_cast (to_type, val);\n "
    },
    {
      "sha": "cc8d9ca6741d33025a1af5f6e5c980e41e15608e",
      "filename": "gdb/expop.h",
      "status": "modified",
      "additions": 8,
      "deletions": 20,
      "changes": 28,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9c79936b3df018166d53869f7f2bb2909f129e51/gdb/expop.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9c79936b3df018166d53869f7f2bb2909f129e51/gdb/expop.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/expop.h?ref=9c79936b3df018166d53869f7f2bb2909f129e51",
      "patch": "@@ -53,8 +53,7 @@ extern struct value *eval_op_var_msym_value (struct type *expect_type,\n \t\t\t\t\t     struct expression *exp,\n \t\t\t\t\t     enum noside noside,\n \t\t\t\t\t     bool outermost_p,\n-\t\t\t\t\t     minimal_symbol *msymbol,\n-\t\t\t\t\t     struct objfile *objfile);\n+\t\t\t\t\t     bound_minimal_symbol msymbol);\n extern struct value *eval_op_var_entry_value (struct type *expect_type,\n \t\t\t\t\t      struct expression *exp,\n \t\t\t\t\t      enum noside noside, symbol *sym);\n@@ -244,11 +243,9 @@ check_objfile (const struct block *block, struct objfile *objfile)\n }\n \n static inline bool\n-check_objfile (minimal_symbol *minsym, struct objfile *objfile)\n+check_objfile (bound_minimal_symbol minsym, struct objfile *objfile)\n {\n-  /* This may seem strange but minsyms are only used with an objfile\n-     as well.  */\n-  return false;\n+  return check_objfile (minsym.objfile, objfile);\n }\n \n static inline bool\n@@ -331,7 +328,7 @@ extern void dump_for_expression (struct ui_file *stream, int depth,\n extern void dump_for_expression (struct ui_file *stream, int depth,\n \t\t\t\t symbol *sym);\n extern void dump_for_expression (struct ui_file *stream, int depth,\n-\t\t\t\t minimal_symbol *msym);\n+\t\t\t\t bound_minimal_symbol msym);\n extern void dump_for_expression (struct ui_file *stream, int depth,\n \t\t\t\t const block *bl);\n extern void dump_for_expression (struct ui_file *stream, int depth,\n@@ -340,8 +337,6 @@ extern void dump_for_expression (struct ui_file *stream, int depth,\n \t\t\t\t enum c_string_type_values flags);\n extern void dump_for_expression (struct ui_file *stream, int depth,\n \t\t\t\t enum range_flag flags);\n-extern void dump_for_expression (struct ui_file *stream, int depth,\n-\t\t\t\t objfile *objf);\n extern void dump_for_expression (struct ui_file *stream, int depth,\n \t\t\t\t const std::unique_ptr<ada_component> &comp);\n \n@@ -446,7 +441,7 @@ check_constant (const operation_up &item)\n }\n \n static inline bool\n-check_constant (struct minimal_symbol *msym)\n+check_constant (bound_minimal_symbol msym)\n {\n   return false;\n }\n@@ -469,12 +464,6 @@ check_constant (const std::string &str)\n   return true;\n }\n \n-static inline bool\n-check_constant (struct objfile *objfile)\n-{\n-  return true;\n-}\n-\n static inline bool\n check_constant (ULONGEST cst)\n {\n@@ -700,7 +689,7 @@ class long_const_operation\n };\n \n class var_msym_value_operation\n-  : public maybe_constant_operation<minimal_symbol *, struct objfile *>\n+  : public maybe_constant_operation<bound_minimal_symbol>\n {\n public:\n \n@@ -711,8 +700,7 @@ class var_msym_value_operation\n \t\t   enum noside noside) override\n   {\n     return eval_op_var_msym_value (expect_type, exp, noside, m_outermost,\n-\t\t\t\t   std::get<0> (m_storage),\n-\t\t\t\t   std::get<1> (m_storage));\n+\t\t\t\t   std::get<0> (m_storage));\n   }\n \n   value *evaluate_for_sizeof (struct expression *exp, enum noside noside)\n@@ -730,7 +718,7 @@ class var_msym_value_operation\n \t\t\t   enum noside noside,\n \t\t\t   const std::vector<operation_up> &args) override\n   {\n-    const char *name = std::get<0> (m_storage)->print_name ();\n+    const char *name = std::get<0> (m_storage).minsym->print_name ();\n     return operation::evaluate_funcall (expect_type, exp, noside, name, args);\n   }\n "
    },
    {
      "sha": "e228beb83a59bb9f52bb6f8f4fd1d94602f4f920",
      "filename": "gdb/expprint.c",
      "status": "modified",
      "additions": 4,
      "deletions": 10,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9c79936b3df018166d53869f7f2bb2909f129e51/gdb/expprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9c79936b3df018166d53869f7f2bb2909f129e51/gdb/expprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/expprint.c?ref=9c79936b3df018166d53869f7f2bb2909f129e51",
      "patch": "@@ -110,10 +110,11 @@ dump_for_expression (struct ui_file *stream, int depth, symbol *sym)\n }\n \n void\n-dump_for_expression (struct ui_file *stream, int depth, minimal_symbol *msym)\n+dump_for_expression (struct ui_file *stream, int depth,\n+\t\t     bound_minimal_symbol msym)\n {\n-  fprintf_filtered (stream, _(\"%*sMinsym: %s\\n\"), depth, \"\",\n-\t\t     msym->print_name ());\n+  fprintf_filtered (stream, _(\"%*sMinsym %s in objfile %s\\n\"), depth, \"\",\n+\t\t    msym.minsym->print_name (), objfile_name (msym.objfile));\n }\n \n void\n@@ -162,13 +163,6 @@ dump_for_expression (struct ui_file *stream, int depth,\n   fputs_unfiltered (\"\\n\", stream);\n }\n \n-void\n-dump_for_expression (struct ui_file *stream, int depth, objfile *objf)\n-{\n-  fprintf_filtered (stream, _(\"%*sObjfile: %s\\n\"), depth, \"\",\n-\t\t     objfile_name (objf));\n-}\n-\n void\n dump_for_expression (struct ui_file *stream, int depth,\n \t\t     enum range_flag flags)"
    },
    {
      "sha": "05822d142db8bf186cbb6870a9f0e309fea69855",
      "filename": "gdb/go-exp.y",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9c79936b3df018166d53869f7f2bb2909f129e51/gdb/go-exp.y",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9c79936b3df018166d53869f7f2bb2909f129e51/gdb/go-exp.y",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/go-exp.y?ref=9c79936b3df018166d53869f7f2bb2909f129e51",
      "patch": "@@ -581,7 +581,7 @@ variable:\tname_not_typename\n \t\t\t\tlookup_bound_minimal_symbol (arg.c_str ());\n \t\t\t      if (msymbol.minsym != NULL)\n \t\t\t\tpstate->push_new<var_msym_value_operation>\n-\t\t\t\t  (msymbol.minsym, msymbol.objfile);\n+\t\t\t\t  (msymbol);\n \t\t\t      else if (!have_full_symbols ()\n \t\t\t\t       && !have_partial_symbols ())\n \t\t\t\terror (_(\"No symbol table is loaded.  \""
    },
    {
      "sha": "02ad6bddc4fed4a2269da438c7cbef00b9139edf",
      "filename": "gdb/p-exp.y",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9c79936b3df018166d53869f7f2bb2909f129e51/gdb/p-exp.y",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9c79936b3df018166d53869f7f2bb2909f129e51/gdb/p-exp.y",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/p-exp.y?ref=9c79936b3df018166d53869f7f2bb2909f129e51",
      "patch": "@@ -728,7 +728,7 @@ variable:\tname_not_typename\n \t\t\t\tlookup_bound_minimal_symbol (arg.c_str ());\n \t\t\t      if (msymbol.minsym != NULL)\n \t\t\t\tpstate->push_new<var_msym_value_operation>\n-\t\t\t\t  (msymbol.minsym, msymbol.objfile);\n+\t\t\t\t  (msymbol);\n \t\t\t      else if (!have_full_symbols ()\n \t\t\t\t       && !have_partial_symbols ())\n \t\t\t\terror (_(\"No symbol table is loaded.  \""
    },
    {
      "sha": "692d38d363ded37deda522687a00c7896a0b2990",
      "filename": "gdb/parse.c",
      "status": "modified",
      "additions": 2,
      "deletions": 3,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/9c79936b3df018166d53869f7f2bb2909f129e51/gdb/parse.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/9c79936b3df018166d53869f7f2bb2909f129e51/gdb/parse.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/parse.c?ref=9c79936b3df018166d53869f7f2bb2909f129e51",
      "patch": "@@ -230,8 +230,7 @@ parser_state::push_symbol (const char *name, block_symbol sym)\n     {\n       struct bound_minimal_symbol msymbol = lookup_bound_minimal_symbol (name);\n       if (msymbol.minsym != NULL)\n-\tpush_new<expr::var_msym_value_operation> (msymbol.minsym,\n-\t\t\t\t\t\t  msymbol.objfile);\n+\tpush_new<expr::var_msym_value_operation> (msymbol);\n       else if (!have_full_symbols () && !have_partial_symbols ())\n \terror (_(\"No symbol table is loaded.  Use the \\\"file\\\" command.\"));\n       else\n@@ -308,7 +307,7 @@ parser_state::push_dollar (struct stoken str)\n   msym = lookup_bound_minimal_symbol (copy.c_str ());\n   if (msym.minsym)\n     {\n-      push_new<expr::var_msym_value_operation> (msym.minsym, msym.objfile);\n+      push_new<expr::var_msym_value_operation> (msym);\n       return;\n     }\n "
    }
  ]
}