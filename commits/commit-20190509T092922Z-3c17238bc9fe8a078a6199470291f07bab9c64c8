{
  "sha": "3c17238bc9fe8a078a6199470291f07bab9c64c8",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6M2MxNzIzOGJjOWZlOGEwNzhhNjE5OTQ3MDI5MWYwN2JhYjljNjRjOA==",
  "commit": {
    "author": {
      "name": "Matthew Malcomson",
      "email": "matthew.malcomson@arm.com",
      "date": "2019-05-09T09:29:22Z"
    },
    "committer": {
      "name": "Matthew Malcomson",
      "email": "matthew.malcomson@arm.com",
      "date": "2019-05-09T09:29:22Z"
    },
    "message": "[binutils][aarch64] New SVE_SHRIMM_UNPRED_22 operand.\n\nInclude a new iclass to extract the variant from the most significant 3\nbits of this operand.\n\nInstructions such as rshrnb include a constant shift amount as an\noperand, where the most significant three bits of this operand determine\nwhat size elements the instruction is operating on.\n\nThe new SVE_SHRIMM_UNPRED_22 operand denotes this constant encoded in\nbits 22:20-19:18-16 while the new sve_shift_tsz_hsd iclass denotes that\nthe SVE qualifier is encoded in bits 22:20-19.\n\ngas/ChangeLog:\n\n2019-05-09  Matthew Malcomson  <matthew.malcomson@arm.com>\n\n\t* config/tc-aarch64.c (parse_operands): Handle new SVE_SHRIMM_UNPRED_22\n\toperand.\n\ninclude/ChangeLog:\n\n2019-05-09  Matthew Malcomson  <matthew.malcomson@arm.com>\n\n\t* opcode/aarch64.h (enum aarch64_opnd): New SVE_SHRIMM_UNPRED_22\n\toperand.\n\t(enum aarch64_insn_class): Add sve_shift_tsz_hsd iclass.\n\nopcodes/ChangeLog:\n\n2019-05-09  Matthew Malcomson  <matthew.malcomson@arm.com>\n\n\t* aarch64-asm-2.c: Regenerated.\n\t* aarch64-dis-2.c: Regenerated.\n\t* aarch64-opc-2.c: Regenerated.\n\t* aarch64-asm.c (aarch64_ins_sve_shrimm):\n\t(aarch64_encode_variant_using_iclass): Handle\n\tsve_shift_tsz_hsd iclass encode.\n\t* aarch64-dis.c (aarch64_decode_variant_using_iclass): Handle\n\tsve_shift_tsz_hsd iclass decode.\n\t* aarch64-opc.c (operand_general_constraint_met_p): Constraint checking\n\tfor SVE_SHRIMM_UNPRED_22.\n\t(aarch64_print_operand): Add printing for SVE_SHRIMM_UNPRED_22.\n\t* aarch64-tbl.h (AARCH64_OPERANDS): Use new SVE_SHRIMM_UNPRED_22\n\toperand.",
    "tree": {
      "sha": "31443cb03fc7932249004d085552ab29ab5a9556",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/31443cb03fc7932249004d085552ab29ab5a9556"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/3c17238bc9fe8a078a6199470291f07bab9c64c8",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3c17238bc9fe8a078a6199470291f07bab9c64c8",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/3c17238bc9fe8a078a6199470291f07bab9c64c8",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3c17238bc9fe8a078a6199470291f07bab9c64c8/comments",
  "author": {
    "login": "mmalcomson",
    "id": 57484298,
    "node_id": "MDQ6VXNlcjU3NDg0Mjk4",
    "avatar_url": "https://avatars.githubusercontent.com/u/57484298?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/mmalcomson",
    "html_url": "https://github.com/mmalcomson",
    "followers_url": "https://api.github.com/users/mmalcomson/followers",
    "following_url": "https://api.github.com/users/mmalcomson/following{/other_user}",
    "gists_url": "https://api.github.com/users/mmalcomson/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/mmalcomson/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/mmalcomson/subscriptions",
    "organizations_url": "https://api.github.com/users/mmalcomson/orgs",
    "repos_url": "https://api.github.com/users/mmalcomson/repos",
    "events_url": "https://api.github.com/users/mmalcomson/events{/privacy}",
    "received_events_url": "https://api.github.com/users/mmalcomson/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "mmalcomson",
    "id": 57484298,
    "node_id": "MDQ6VXNlcjU3NDg0Mjk4",
    "avatar_url": "https://avatars.githubusercontent.com/u/57484298?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/mmalcomson",
    "html_url": "https://github.com/mmalcomson",
    "followers_url": "https://api.github.com/users/mmalcomson/followers",
    "following_url": "https://api.github.com/users/mmalcomson/following{/other_user}",
    "gists_url": "https://api.github.com/users/mmalcomson/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/mmalcomson/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/mmalcomson/subscriptions",
    "organizations_url": "https://api.github.com/users/mmalcomson/orgs",
    "repos_url": "https://api.github.com/users/mmalcomson/repos",
    "events_url": "https://api.github.com/users/mmalcomson/events{/privacy}",
    "received_events_url": "https://api.github.com/users/mmalcomson/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "cd50a87ae29f163e7d254729a902a5e51fcccbbc",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/cd50a87ae29f163e7d254729a902a5e51fcccbbc",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/cd50a87ae29f163e7d254729a902a5e51fcccbbc"
    }
  ],
  "stats": {
    "total": 119,
    "additions": 87,
    "deletions": 32
  },
  "files": [
    {
      "sha": "4e968452e93a2e65c7a776486df2ac00b0fdd45f",
      "filename": "gas/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3c17238bc9fe8a078a6199470291f07bab9c64c8/gas/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3c17238bc9fe8a078a6199470291f07bab9c64c8/gas/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ChangeLog?ref=3c17238bc9fe8a078a6199470291f07bab9c64c8",
      "patch": "@@ -1,3 +1,8 @@\n+2019-05-09  Matthew Malcomson  <matthew.malcomson@arm.com>\n+\n+\t* config/tc-aarch64.c (parse_operands): Handle new SVE_SHRIMM_UNPRED_22\n+\toperand.\n+\n 2019-05-09  Matthew Malcomson  <matthew.malcomson@arm.com>\n \n \t* config/tc-aarch64.c (REG_ZR): Macro specifying zero register."
    },
    {
      "sha": "7bf73fd9c3cd6d65e87583867e552d0af35b1900",
      "filename": "gas/config/tc-aarch64.c",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3c17238bc9fe8a078a6199470291f07bab9c64c8/gas/config/tc-aarch64.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3c17238bc9fe8a078a6199470291f07bab9c64c8/gas/config/tc-aarch64.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-aarch64.c?ref=3c17238bc9fe8a078a6199470291f07bab9c64c8",
      "patch": "@@ -5787,6 +5787,7 @@ parse_operands (char *str, const aarch64_opcode *opcode)\n \tcase AARCH64_OPND_SVE_SHLIMM_UNPRED:\n \tcase AARCH64_OPND_SVE_SHRIMM_PRED:\n \tcase AARCH64_OPND_SVE_SHRIMM_UNPRED:\n+\tcase AARCH64_OPND_SVE_SHRIMM_UNPRED_22:\n \tcase AARCH64_OPND_SVE_SIMM5:\n \tcase AARCH64_OPND_SVE_SIMM5B:\n \tcase AARCH64_OPND_SVE_SIMM6:"
    },
    {
      "sha": "3b389d544857efc9d74c2c9927fbc1252b2f2ecf",
      "filename": "include/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3c17238bc9fe8a078a6199470291f07bab9c64c8/include/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3c17238bc9fe8a078a6199470291f07bab9c64c8/include/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/ChangeLog?ref=3c17238bc9fe8a078a6199470291f07bab9c64c8",
      "patch": "@@ -1,3 +1,9 @@\n+2019-05-09  Matthew Malcomson  <matthew.malcomson@arm.com>\n+\n+\t* opcode/aarch64.h (enum aarch64_opnd): New SVE_SHRIMM_UNPRED_22\n+\toperand.\n+\t(enum aarch64_insn_class): Add sve_shift_tsz_hsd iclass.\n+\n 2019-05-09  Matthew Malcomson  <matthew.malcomson@arm.com>\n \n \t* opcode/aarch64.h (enum aarch64_insn_class): Add sve_size_013 iclass."
    },
    {
      "sha": "bd6b845a134ef3ec26585db32c16b5c288964574",
      "filename": "include/opcode/aarch64.h",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3c17238bc9fe8a078a6199470291f07bab9c64c8/include/opcode/aarch64.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3c17238bc9fe8a078a6199470291f07bab9c64c8/include/opcode/aarch64.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/include/opcode/aarch64.h?ref=3c17238bc9fe8a078a6199470291f07bab9c64c8",
      "patch": "@@ -394,6 +394,7 @@ enum aarch64_opnd\n   AARCH64_OPND_SVE_SHLIMM_UNPRED, /* SVE shift left amount (unpredicated).  */\n   AARCH64_OPND_SVE_SHRIMM_PRED,\t  /* SVE shift right amount (predicated).  */\n   AARCH64_OPND_SVE_SHRIMM_UNPRED, /* SVE shift right amount (unpredicated).  */\n+  AARCH64_OPND_SVE_SHRIMM_UNPRED_22,\t/* SVE 3 bit shift right unpred.  */\n   AARCH64_OPND_SVE_SIMM5,\t/* SVE signed 5-bit immediate.  */\n   AARCH64_OPND_SVE_SIMM5B,\t/* SVE secondary signed 5-bit immediate.  */\n   AARCH64_OPND_SVE_SIMM6,\t/* SVE signed 6-bit immediate.  */\n@@ -597,6 +598,7 @@ enum aarch64_insn_class\n   sve_size_bh,\n   sve_size_sd2,\n   sve_size_013,\n+  sve_shift_tsz_hsd,\n   testbranch,\n   cryptosm3,\n   cryptosm4,"
    },
    {
      "sha": "2ab1845dc558bf1565fa74794531890dc5199950",
      "filename": "opcodes/ChangeLog",
      "status": "modified",
      "additions": 16,
      "deletions": 0,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3c17238bc9fe8a078a6199470291f07bab9c64c8/opcodes/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3c17238bc9fe8a078a6199470291f07bab9c64c8/opcodes/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/ChangeLog?ref=3c17238bc9fe8a078a6199470291f07bab9c64c8",
      "patch": "@@ -1,3 +1,19 @@\n+2019-05-09  Matthew Malcomson  <matthew.malcomson@arm.com>\n+\n+\t* aarch64-asm-2.c: Regenerated.\n+\t* aarch64-dis-2.c: Regenerated.\n+\t* aarch64-opc-2.c: Regenerated.\n+\t* aarch64-asm.c (aarch64_ins_sve_shrimm):\n+\t(aarch64_encode_variant_using_iclass): Handle\n+\tsve_shift_tsz_hsd iclass encode.\n+\t* aarch64-dis.c (aarch64_decode_variant_using_iclass): Handle\n+\tsve_shift_tsz_hsd iclass decode.\n+\t* aarch64-opc.c (operand_general_constraint_met_p): Constraint checking\n+\tfor SVE_SHRIMM_UNPRED_22.\n+\t(aarch64_print_operand): Add printing for SVE_SHRIMM_UNPRED_22.\n+\t* aarch64-tbl.h (AARCH64_OPERANDS): Use new SVE_SHRIMM_UNPRED_22\n+\toperand.\n+\n 2019-05-09  Matthew Malcomson  <matthew.malcomson@arm.com>\n \n \t* aarch64-asm.c (aarch64_encode_variant_using_iclass): Handle"
    },
    {
      "sha": "00ab9b370ed77392bac43958fb37d1744b071238",
      "filename": "opcodes/aarch64-asm-2.c",
      "status": "modified",
      "additions": 11,
      "deletions": 10,
      "changes": 21,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3c17238bc9fe8a078a6199470291f07bab9c64c8/opcodes/aarch64-asm-2.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3c17238bc9fe8a078a6199470291f07bab9c64c8/opcodes/aarch64-asm-2.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/aarch64-asm-2.c?ref=3c17238bc9fe8a078a6199470291f07bab9c64c8",
      "patch": "@@ -638,7 +638,6 @@ aarch64_insert_operand (const aarch64_operand *self,\n     case 169:\n     case 170:\n     case 171:\n-    case 184:\n     case 185:\n     case 186:\n     case 187:\n@@ -647,8 +646,9 @@ aarch64_insert_operand (const aarch64_operand *self,\n     case 190:\n     case 191:\n     case 192:\n-    case 197:\n-    case 200:\n+    case 193:\n+    case 198:\n+    case 201:\n       return aarch64_ins_regno (self, info, code, inst, errors);\n     case 14:\n       return aarch64_ins_reg_extended (self, info, code, inst, errors);\n@@ -660,7 +660,7 @@ aarch64_insert_operand (const aarch64_operand *self,\n     case 32:\n     case 33:\n     case 34:\n-    case 203:\n+    case 204:\n       return aarch64_ins_reglane (self, info, code, inst, errors);\n     case 35:\n       return aarch64_ins_reglist (self, info, code, inst, errors);\n@@ -696,15 +696,15 @@ aarch64_insert_operand (const aarch64_operand *self,\n     case 82:\n     case 159:\n     case 161:\n-    case 176:\n     case 177:\n     case 178:\n     case 179:\n     case 180:\n     case 181:\n     case 182:\n     case 183:\n-    case 202:\n+    case 184:\n+    case 203:\n       return aarch64_ins_imm (self, info, code, inst, errors);\n     case 43:\n     case 44:\n@@ -845,16 +845,17 @@ aarch64_insert_operand (const aarch64_operand *self,\n       return aarch64_ins_sve_shlimm (self, info, code, inst, errors);\n     case 174:\n     case 175:\n+    case 176:\n       return aarch64_ins_sve_shrimm (self, info, code, inst, errors);\n-    case 193:\n     case 194:\n     case 195:\n     case 196:\n+    case 197:\n       return aarch64_ins_sve_quad_index (self, info, code, inst, errors);\n-    case 198:\n-      return aarch64_ins_sve_index (self, info, code, inst, errors);\n     case 199:\n-    case 201:\n+      return aarch64_ins_sve_index (self, info, code, inst, errors);\n+    case 200:\n+    case 202:\n       return aarch64_ins_sve_reglist (self, info, code, inst, errors);\n     default: assert (0); abort ();\n     }"
    },
    {
      "sha": "6be17f9246ecab85c18ce5eb9ac1a4b10d5d6527",
      "filename": "opcodes/aarch64-asm.c",
      "status": "modified",
      "additions": 4,
      "deletions": 2,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3c17238bc9fe8a078a6199470291f07bab9c64c8/opcodes/aarch64-asm.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3c17238bc9fe8a078a6199470291f07bab9c64c8/opcodes/aarch64-asm.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/aarch64-asm.c?ref=3c17238bc9fe8a078a6199470291f07bab9c64c8",
      "patch": "@@ -1241,8 +1241,9 @@ aarch64_ins_sve_shrimm (const aarch64_operand *self,\n   const aarch64_opnd_info *prev_operand;\n   unsigned int esize;\n \n-  assert (info->idx > 0);\n-  prev_operand = &inst->operands[info->idx - 1];\n+  unsigned int opnd_backshift = get_operand_specific_data (self);\n+  assert (info->idx >= (int)opnd_backshift);\n+  prev_operand = &inst->operands[info->idx - opnd_backshift];\n   esize = aarch64_get_qualifier_esize (prev_operand->qualifier);\n   insert_all_fields (self, code, 16 * esize - info->imm.value);\n   return TRUE;\n@@ -1624,6 +1625,7 @@ aarch64_encode_variant_using_iclass (struct aarch64_inst *inst)\n     case sve_index:\n     case sve_shift_pred:\n     case sve_shift_unpred:\n+    case sve_shift_tsz_hsd:\n       /* For indices and shift amounts, the variant is encoded as\n \t part of the immediate.  */\n       break;"
    },
    {
      "sha": "d70a29095bf522948c1daaef307664bd36872ab2",
      "filename": "opcodes/aarch64-dis-2.c",
      "status": "modified",
      "additions": 11,
      "deletions": 10,
      "changes": 21,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3c17238bc9fe8a078a6199470291f07bab9c64c8/opcodes/aarch64-dis-2.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3c17238bc9fe8a078a6199470291f07bab9c64c8/opcodes/aarch64-dis-2.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/aarch64-dis-2.c?ref=3c17238bc9fe8a078a6199470291f07bab9c64c8",
      "patch": "@@ -20069,7 +20069,6 @@ aarch64_extract_operand (const aarch64_operand *self,\n     case 169:\n     case 170:\n     case 171:\n-    case 184:\n     case 185:\n     case 186:\n     case 187:\n@@ -20078,8 +20077,9 @@ aarch64_extract_operand (const aarch64_operand *self,\n     case 190:\n     case 191:\n     case 192:\n-    case 197:\n-    case 200:\n+    case 193:\n+    case 198:\n+    case 201:\n       return aarch64_ext_regno (self, info, code, inst, errors);\n     case 9:\n       return aarch64_ext_regrt_sysins (self, info, code, inst, errors);\n@@ -20095,7 +20095,7 @@ aarch64_extract_operand (const aarch64_operand *self,\n     case 32:\n     case 33:\n     case 34:\n-    case 203:\n+    case 204:\n       return aarch64_ext_reglane (self, info, code, inst, errors);\n     case 35:\n       return aarch64_ext_reglist (self, info, code, inst, errors);\n@@ -20132,15 +20132,15 @@ aarch64_extract_operand (const aarch64_operand *self,\n     case 82:\n     case 159:\n     case 161:\n-    case 176:\n     case 177:\n     case 178:\n     case 179:\n     case 180:\n     case 181:\n     case 182:\n     case 183:\n-    case 202:\n+    case 184:\n+    case 203:\n       return aarch64_ext_imm (self, info, code, inst, errors);\n     case 43:\n     case 44:\n@@ -20283,16 +20283,17 @@ aarch64_extract_operand (const aarch64_operand *self,\n       return aarch64_ext_sve_shlimm (self, info, code, inst, errors);\n     case 174:\n     case 175:\n+    case 176:\n       return aarch64_ext_sve_shrimm (self, info, code, inst, errors);\n-    case 193:\n     case 194:\n     case 195:\n     case 196:\n+    case 197:\n       return aarch64_ext_sve_quad_index (self, info, code, inst, errors);\n-    case 198:\n-      return aarch64_ext_sve_index (self, info, code, inst, errors);\n     case 199:\n-    case 201:\n+      return aarch64_ext_sve_index (self, info, code, inst, errors);\n+    case 200:\n+    case 202:\n       return aarch64_ext_sve_reglist (self, info, code, inst, errors);\n     default: assert (0); abort ();\n     }"
    },
    {
      "sha": "5571ab6c98fdfebb156977bfa5e0f82fe83d853b",
      "filename": "opcodes/aarch64-dis.c",
      "status": "modified",
      "additions": 11,
      "deletions": 0,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3c17238bc9fe8a078a6199470291f07bab9c64c8/opcodes/aarch64-dis.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3c17238bc9fe8a078a6199470291f07bab9c64c8/opcodes/aarch64-dis.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/aarch64-dis.c?ref=3c17238bc9fe8a078a6199470291f07bab9c64c8",
      "patch": "@@ -2832,6 +2832,17 @@ aarch64_decode_variant_using_iclass (aarch64_inst *inst)\n \tvariant = i;\n       break;\n \n+    case sve_shift_tsz_hsd:\n+      i = extract_fields (inst->value, 0, 2, FLD_SVE_sz, FLD_SVE_tszl_19);\n+      if (i == 0)\n+\treturn FALSE;\n+      while (i != 1)\n+\t{\n+\t  i >>= 1;\n+\t  variant += 1;\n+\t}\n+      break;\n+\n     default:\n       /* No mapping between instruction class and qualifiers.  */\n       return TRUE;"
    },
    {
      "sha": "3c0e13a0fb92d59ae75d5876c2a051fa2e4a511f",
      "filename": "opcodes/aarch64-opc-2.c",
      "status": "modified",
      "additions": 3,
      "deletions": 2,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3c17238bc9fe8a078a6199470291f07bab9c64c8/opcodes/aarch64-opc-2.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3c17238bc9fe8a078a6199470291f07bab9c64c8/opcodes/aarch64-opc-2.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/aarch64-opc-2.c?ref=3c17238bc9fe8a078a6199470291f07bab9c64c8",
      "patch": "@@ -198,8 +198,9 @@ const struct aarch64_operand aarch64_operands[] =\n   {AARCH64_OPND_CLASS_INT_REG, \"SVE_Rn_SP\", OPD_F_MAYBE_SP | OPD_F_HAS_INSERTER | OPD_F_HAS_EXTRACTOR, {FLD_SVE_Rn}, \"an integer register or SP\"},\n   {AARCH64_OPND_CLASS_IMMEDIATE, \"SVE_SHLIMM_PRED\", OPD_F_HAS_INSERTER | OPD_F_HAS_EXTRACTOR, {FLD_SVE_tszh,FLD_SVE_imm5}, \"a shift-left immediate operand\"},\n   {AARCH64_OPND_CLASS_IMMEDIATE, \"SVE_SHLIMM_UNPRED\", OPD_F_HAS_INSERTER | OPD_F_HAS_EXTRACTOR, {FLD_SVE_tszh,FLD_imm5}, \"a shift-left immediate operand\"},\n-  {AARCH64_OPND_CLASS_IMMEDIATE, \"SVE_SHRIMM_PRED\", OPD_F_HAS_INSERTER | OPD_F_HAS_EXTRACTOR, {FLD_SVE_tszh,FLD_SVE_imm5}, \"a shift-right immediate operand\"},\n-  {AARCH64_OPND_CLASS_IMMEDIATE, \"SVE_SHRIMM_UNPRED\", OPD_F_HAS_INSERTER | OPD_F_HAS_EXTRACTOR, {FLD_SVE_tszh,FLD_imm5}, \"a shift-right immediate operand\"},\n+  {AARCH64_OPND_CLASS_IMMEDIATE, \"SVE_SHRIMM_PRED\", 1 << OPD_F_OD_LSB | OPD_F_HAS_INSERTER | OPD_F_HAS_EXTRACTOR, {FLD_SVE_tszh,FLD_SVE_imm5}, \"a shift-right immediate operand\"},\n+  {AARCH64_OPND_CLASS_IMMEDIATE, \"SVE_SHRIMM_UNPRED\", 1 << OPD_F_OD_LSB | OPD_F_HAS_INSERTER | OPD_F_HAS_EXTRACTOR, {FLD_SVE_tszh,FLD_imm5}, \"a shift-right immediate operand\"},\n+  {AARCH64_OPND_CLASS_IMMEDIATE, \"SVE_SHRIMM_UNPRED_22\", 2 << OPD_F_OD_LSB | OPD_F_HAS_INSERTER | OPD_F_HAS_EXTRACTOR, {FLD_SVE_sz, FLD_SVE_tszl_19, FLD_SVE_imm3}, \"a shift-right immediate operand\"},\n   {AARCH64_OPND_CLASS_IMMEDIATE, \"SVE_SIMM5\", OPD_F_SEXT | OPD_F_HAS_INSERTER | OPD_F_HAS_EXTRACTOR, {FLD_SVE_imm5}, \"a 5-bit signed immediate\"},\n   {AARCH64_OPND_CLASS_IMMEDIATE, \"SVE_SIMM5B\", OPD_F_SEXT | OPD_F_HAS_INSERTER | OPD_F_HAS_EXTRACTOR, {FLD_SVE_imm5b}, \"a 5-bit signed immediate\"},\n   {AARCH64_OPND_CLASS_IMMEDIATE, \"SVE_SIMM6\", OPD_F_SEXT | OPD_F_HAS_INSERTER | OPD_F_HAS_EXTRACTOR, {FLD_SVE_imms}, \"a 6-bit signed immediate\"},"
    },
    {
      "sha": "84e30f5f34531db41f4581fda37a5051d516edd2",
      "filename": "opcodes/aarch64-opc.c",
      "status": "modified",
      "additions": 12,
      "deletions": 6,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3c17238bc9fe8a078a6199470291f07bab9c64c8/opcodes/aarch64-opc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3c17238bc9fe8a078a6199470291f07bab9c64c8/opcodes/aarch64-opc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/aarch64-opc.c?ref=3c17238bc9fe8a078a6199470291f07bab9c64c8",
      "patch": "@@ -2540,13 +2540,18 @@ operand_general_constraint_met_p (const aarch64_opnd_info *opnds, int idx,\n \n \tcase AARCH64_OPND_SVE_SHRIMM_PRED:\n \tcase AARCH64_OPND_SVE_SHRIMM_UNPRED:\n-\t  size = aarch64_get_qualifier_esize (opnds[idx - 1].qualifier);\n-\t  if (!value_in_range_p (opnd->imm.value, 1, 8 * size))\n+\tcase AARCH64_OPND_SVE_SHRIMM_UNPRED_22:\n \t    {\n-\t      set_imm_out_of_range_error (mismatch_detail, idx, 1, 8 * size);\n-\t      return 0;\n-\t    }\n-\t  break;\n+\t      unsigned int index =\n+\t\t(type == AARCH64_OPND_SVE_SHRIMM_UNPRED_22) ? 2 : 1;\n+\t      size = aarch64_get_qualifier_esize (opnds[idx - index].qualifier);\n+\t      if (!value_in_range_p (opnd->imm.value, 1, 8 * size))\n+\t\t{\n+\t\t  set_imm_out_of_range_error (mismatch_detail, idx, 1, 8*size);\n+\t\t  return 0;\n+\t\t}\n+\t      break;\n+\t   }\n \n \tdefault:\n \t  break;\n@@ -3352,6 +3357,7 @@ aarch64_print_operand (char *buf, size_t size, bfd_vma pc,\n     case AARCH64_OPND_SVE_SHLIMM_UNPRED:\n     case AARCH64_OPND_SVE_SHRIMM_PRED:\n     case AARCH64_OPND_SVE_SHRIMM_UNPRED:\n+    case AARCH64_OPND_SVE_SHRIMM_UNPRED_22:\n     case AARCH64_OPND_SVE_SIMM5:\n     case AARCH64_OPND_SVE_SIMM5B:\n     case AARCH64_OPND_SVE_SIMM6:"
    },
    {
      "sha": "6f8f47a664d32f4727f6fa94ee62a51a64c3538c",
      "filename": "opcodes/aarch64-tbl.h",
      "status": "modified",
      "additions": 5,
      "deletions": 2,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3c17238bc9fe8a078a6199470291f07bab9c64c8/opcodes/aarch64-tbl.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3c17238bc9fe8a078a6199470291f07bab9c64c8/opcodes/aarch64-tbl.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/opcodes/aarch64-tbl.h?ref=3c17238bc9fe8a078a6199470291f07bab9c64c8",
      "patch": "@@ -4923,10 +4923,13 @@ struct aarch64_opcode aarch64_opcode_table[] =\n       F(FLD_SVE_tszh,FLD_SVE_imm5), \"a shift-left immediate operand\")\t\\\n     Y(IMMEDIATE, sve_shlimm, \"SVE_SHLIMM_UNPRED\", 0,\t\t\t\\\n       F(FLD_SVE_tszh,FLD_imm5), \"a shift-left immediate operand\")\t\\\n-    Y(IMMEDIATE, sve_shrimm, \"SVE_SHRIMM_PRED\", 0,\t\t\t\\\n+    Y(IMMEDIATE, sve_shrimm, \"SVE_SHRIMM_PRED\", 1 << OPD_F_OD_LSB,\t\\\n       F(FLD_SVE_tszh,FLD_SVE_imm5), \"a shift-right immediate operand\")\t\\\n-    Y(IMMEDIATE, sve_shrimm, \"SVE_SHRIMM_UNPRED\", 0,\t\t\t\\\n+    Y(IMMEDIATE, sve_shrimm, \"SVE_SHRIMM_UNPRED\", 1 << OPD_F_OD_LSB,\t\\\n       F(FLD_SVE_tszh,FLD_imm5), \"a shift-right immediate operand\")\t\\\n+    Y(IMMEDIATE, sve_shrimm, \"SVE_SHRIMM_UNPRED_22\", 2 << OPD_F_OD_LSB,\t\\\n+      F(FLD_SVE_sz, FLD_SVE_tszl_19, FLD_SVE_imm3),\t\t\t\\\n+      \"a shift-right immediate operand\")\t\t\t\t\\\n     Y(IMMEDIATE, imm, \"SVE_SIMM5\", OPD_F_SEXT, F(FLD_SVE_imm5),\t\t\\\n       \"a 5-bit signed immediate\")\t\t\t\t\t\\\n     Y(IMMEDIATE, imm, \"SVE_SIMM5B\", OPD_F_SEXT, F(FLD_SVE_imm5b),\t\\"
    }
  ]
}