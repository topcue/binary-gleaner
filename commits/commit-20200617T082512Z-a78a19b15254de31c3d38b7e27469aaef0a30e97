{
  "sha": "a78a19b15254de31c3d38b7e27469aaef0a30e97",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YTc4YTE5YjE1MjU0ZGUzMWMzZDM4YjdlMjc0NjlhYWVmMGEzMGU5Nw==",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2020-06-01T21:17:59Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2020-06-17T08:25:12Z"
    },
    "message": "gdb: Convert language la_lookup_symbol_nonlocal field to a method\n\nThis commit changes the language_data::la_lookup_symbol_nonlocal\nfunction pointer member variable into a member function of\nlanguage_defn.\n\nThere should be no user visible changes after this commit.\n\ngdb/ChangeLog:\n\n\t* ada-lang.c (ada_lookup_symbol_nonlocal): Rename to\n\tada_language::lookup_symbol_nonlocal.\n\t(ada_language_data): Delete la_lookup_symbol_nonlocal initializer.\n\t(ada_language::lookup_symbol_nonlocal): New member function,\n\timplementation from ada_lookup_symbol_nonlocal.\n\t* c-lang.c (c_language_data): Delete la_lookup_symbol_nonlocal\n\tinitializer.\n\t(cplus_language_data): Delete la_lookup_symbol_nonlocal\n\tinitializer.\n\t(cplus_language::lookup_symbol_nonlocal): New member function.\n\t(asm_language_data): Delete la_lookup_symbol_nonlocal initializer.\n\t(minimal_language_data) Likewise.\n\t* cp-namespace.c (cp_lookup_nested_symbol): Update comment.\n\t* d-lang.c (d_language_data): Delete la_lookup_symbol_nonlocal\n\tinitializer.\n\t(d_language::lookup_symbol_nonlocal): New member function.\n\t* f-lang.c (f_language_data): Delete la_lookup_symbol_nonlocal\n\tinitializer.\n\t(f_language::lookup_symbol_nonlocal): New member function.\n\t* go-lang.c (go_language_data): Delete la_lookup_symbol_nonlocal\n\tinitializer.\n\t* language.c (unknown_language_data): Likewise.\n\t(auto_language_data): Likewise.\n\t* language.h (language_data): Delete la_lookup_symbol_nonlocal\n\tfield.\n\t(language_defn::lookup_symbol_nonlocal): New member function.\n\t* m2-lang.c (m2_language_data): Delete la_lookup_symbol_nonlocal\n\tinitializer.\n\t* objc-lang.c (objc_language_data): Likewise.\n\t* opencl-lang.c (opencl_language_data): Likewise.\n\t* p-lang.c (pascal_language_data): Likewise.\n\t* rust-lang.c (rust_lookup_symbol_nonlocal): Rename to\n\trust_language::lookup_symbol_nonlocal.\n\t(rust_language_data): Delete la_lookup_symbol_nonlocal\n\tinitializer.\n\t(rust_language::lookup_symbol_nonlocal): New member function,\n\timplementation from rust_lookup_symbol_nonlocal.\n\t* symtab.c (lookup_symbol_aux): Update call to\n\tlookup_symbol_nonlocal.\n\t(basic_lookup_symbol_nonlocal): Rename to...\n\t(language_defn::lookup_symbol_nonlocal): ...this, and update\n\theader comment.  Remove language_defn parameter, and replace with\n\tuses of `this'.\n\t* symtab.h (basic_lookup_symbol_nonlocal): Delete declaration.",
    "tree": {
      "sha": "0fe1497b95f1c0c554eaabbfd170fdd949562a70",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/0fe1497b95f1c0c554eaabbfd170fdd949562a70"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/a78a19b15254de31c3d38b7e27469aaef0a30e97",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a78a19b15254de31c3d38b7e27469aaef0a30e97",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/a78a19b15254de31c3d38b7e27469aaef0a30e97",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a78a19b15254de31c3d38b7e27469aaef0a30e97/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "ebe2334ee6cb065d2a86688bc9558d62320dd459",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ebe2334ee6cb065d2a86688bc9558d62320dd459",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/ebe2334ee6cb065d2a86688bc9558d62320dd459"
    }
  ],
  "stats": {
    "total": 299,
    "additions": 171,
    "deletions": 128
  },
  "files": [
    {
      "sha": "f4d9eaa5b4bb95215f39346f085f7f1c94629fb7",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 47,
      "deletions": 0,
      "changes": 47,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a78a19b15254de31c3d38b7e27469aaef0a30e97/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a78a19b15254de31c3d38b7e27469aaef0a30e97/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=a78a19b15254de31c3d38b7e27469aaef0a30e97",
      "patch": "@@ -1,3 +1,50 @@\n+2020-06-17  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* ada-lang.c (ada_lookup_symbol_nonlocal): Rename to\n+\tada_language::lookup_symbol_nonlocal.\n+\t(ada_language_data): Delete la_lookup_symbol_nonlocal initializer.\n+\t(ada_language::lookup_symbol_nonlocal): New member function,\n+\timplementation from ada_lookup_symbol_nonlocal.\n+\t* c-lang.c (c_language_data): Delete la_lookup_symbol_nonlocal\n+\tinitializer.\n+\t(cplus_language_data): Delete la_lookup_symbol_nonlocal\n+\tinitializer.\n+\t(cplus_language::lookup_symbol_nonlocal): New member function.\n+\t(asm_language_data): Delete la_lookup_symbol_nonlocal initializer.\n+\t(minimal_language_data) Likewise.\n+\t* cp-namespace.c (cp_lookup_nested_symbol): Update comment.\n+\t* d-lang.c (d_language_data): Delete la_lookup_symbol_nonlocal\n+\tinitializer.\n+\t(d_language::lookup_symbol_nonlocal): New member function.\n+\t* f-lang.c (f_language_data): Delete la_lookup_symbol_nonlocal\n+\tinitializer.\n+\t(f_language::lookup_symbol_nonlocal): New member function.\n+\t* go-lang.c (go_language_data): Delete la_lookup_symbol_nonlocal\n+\tinitializer.\n+\t* language.c (unknown_language_data): Likewise.\n+\t(auto_language_data): Likewise.\n+\t* language.h (language_data): Delete la_lookup_symbol_nonlocal\n+\tfield.\n+\t(language_defn::lookup_symbol_nonlocal): New member function.\n+\t* m2-lang.c (m2_language_data): Delete la_lookup_symbol_nonlocal\n+\tinitializer.\n+\t* objc-lang.c (objc_language_data): Likewise.\n+\t* opencl-lang.c (opencl_language_data): Likewise.\n+\t* p-lang.c (pascal_language_data): Likewise.\n+\t* rust-lang.c (rust_lookup_symbol_nonlocal): Rename to\n+\trust_language::lookup_symbol_nonlocal.\n+\t(rust_language_data): Delete la_lookup_symbol_nonlocal\n+\tinitializer.\n+\t(rust_language::lookup_symbol_nonlocal): New member function,\n+\timplementation from rust_lookup_symbol_nonlocal.\n+\t* symtab.c (lookup_symbol_aux): Update call to\n+\tlookup_symbol_nonlocal.\n+\t(basic_lookup_symbol_nonlocal): Rename to...\n+\t(language_defn::lookup_symbol_nonlocal): ...this, and update\n+\theader comment.  Remove language_defn parameter, and replace with\n+\tuses of `this'.\n+\t* symtab.h (basic_lookup_symbol_nonlocal): Delete declaration.\n+\n 2020-06-17  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* ada-lang.c (ada_language_data): Delete la_value_print_inner"
    },
    {
      "sha": "d303915ebd700060029751dbda4d281bc72c1746",
      "filename": "gdb/ada-lang.c",
      "status": "modified",
      "additions": 41,
      "deletions": 41,
      "changes": 82,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a78a19b15254de31c3d38b7e27469aaef0a30e97/gdb/ada-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a78a19b15254de31c3d38b7e27469aaef0a30e97/gdb/ada-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-lang.c?ref=a78a19b15254de31c3d38b7e27469aaef0a30e97",
      "patch": "@@ -5764,46 +5764,6 @@ ada_lookup_symbol (const char *name, const struct block *block0,\n   return info;\n }\n \n-static struct block_symbol\n-ada_lookup_symbol_nonlocal (const struct language_defn *langdef,\n-\t\t\t    const char *name,\n-                            const struct block *block,\n-                            const domain_enum domain)\n-{\n-  struct block_symbol sym;\n-\n-  sym = ada_lookup_symbol (name, block_static_block (block), domain);\n-  if (sym.symbol != NULL)\n-    return sym;\n-\n-  /* If we haven't found a match at this point, try the primitive\n-     types.  In other languages, this search is performed before\n-     searching for global symbols in order to short-circuit that\n-     global-symbol search if it happens that the name corresponds\n-     to a primitive type.  But we cannot do the same in Ada, because\n-     it is perfectly legitimate for a program to declare a type which\n-     has the same name as a standard type.  If looking up a type in\n-     that situation, we have traditionally ignored the primitive type\n-     in favor of user-defined types.  This is why, unlike most other\n-     languages, we search the primitive types this late and only after\n-     having searched the global symbols without success.  */\n-\n-  if (domain == VAR_DOMAIN)\n-    {\n-      struct gdbarch *gdbarch;\n-\n-      if (block == NULL)\n-\tgdbarch = target_gdbarch ();\n-      else\n-\tgdbarch = block_gdbarch (block);\n-      sym.symbol = language_lookup_primitive_type_as_symbol (langdef, gdbarch, name);\n-      if (sym.symbol != NULL)\n-\treturn sym;\n-    }\n-\n-  return {};\n-}\n-\n \n /* True iff STR is a possible encoded suffix of a normal Ada name\n    that is to be ignored for matching purposes.  Suffixes of parallel\n@@ -13766,7 +13726,6 @@ extern const struct language_data ada_language_data =\n   ada_print_typedef,            /* Print a typedef using appropriate syntax */\n   NULL,                         /* name_of_this */\n   true,                         /* la_store_sym_names_in_linkage_form_p */\n-  ada_lookup_symbol_nonlocal,   /* Looking up non-local symbols.  */\n   ada_op_print_tab,             /* expression operators for printing */\n   0,                            /* c-style arrays */\n   1,                            /* String lower bound */\n@@ -14116,6 +14075,47 @@ class ada_language : public language_defn\n     return ada_value_print_inner (val, stream, recurse, options);\n   }\n \n+  /* See language.h.  */\n+\n+  struct block_symbol lookup_symbol_nonlocal\n+\t(const char *name, const struct block *block,\n+\t const domain_enum domain) const override\n+  {\n+    struct block_symbol sym;\n+\n+    sym = ada_lookup_symbol (name, block_static_block (block), domain);\n+    if (sym.symbol != NULL)\n+      return sym;\n+\n+    /* If we haven't found a match at this point, try the primitive\n+       types.  In other languages, this search is performed before\n+       searching for global symbols in order to short-circuit that\n+       global-symbol search if it happens that the name corresponds\n+       to a primitive type.  But we cannot do the same in Ada, because\n+       it is perfectly legitimate for a program to declare a type which\n+       has the same name as a standard type.  If looking up a type in\n+       that situation, we have traditionally ignored the primitive type\n+       in favor of user-defined types.  This is why, unlike most other\n+       languages, we search the primitive types this late and only after\n+       having searched the global symbols without success.  */\n+\n+    if (domain == VAR_DOMAIN)\n+      {\n+\tstruct gdbarch *gdbarch;\n+\n+\tif (block == NULL)\n+\t  gdbarch = target_gdbarch ();\n+\telse\n+\t  gdbarch = block_gdbarch (block);\n+\tsym.symbol\n+\t  = language_lookup_primitive_type_as_symbol (this, gdbarch, name);\n+\tif (sym.symbol != NULL)\n+\t  return sym;\n+      }\n+\n+    return {};\n+  }\n+\n protected:\n   /* See language.h.  */\n "
    },
    {
      "sha": "64dfd713991047dd8456fc329897897a6c575fa1",
      "filename": "gdb/c-lang.c",
      "status": "modified",
      "additions": 9,
      "deletions": 4,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a78a19b15254de31c3d38b7e27469aaef0a30e97/gdb/c-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a78a19b15254de31c3d38b7e27469aaef0a30e97/gdb/c-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/c-lang.c?ref=a78a19b15254de31c3d38b7e27469aaef0a30e97",
      "patch": "@@ -897,7 +897,6 @@ extern const struct language_data c_language_data =\n   c_print_typedef,\t\t/* Print a typedef using appropriate syntax */\n   NULL,\t\t\t\t/* name_of_this */\n   true,\t\t\t\t/* la_store_sym_names_in_linkage_form_p */\n-  basic_lookup_symbol_nonlocal,\t/* lookup_symbol_nonlocal */\n   c_op_print_tab,\t\t/* expression operators for printing */\n   1,\t\t\t\t/* c-style arrays */\n   0,\t\t\t\t/* String lower bound */\n@@ -1006,7 +1005,6 @@ extern const struct language_data cplus_language_data =\n   c_print_typedef,\t\t/* Print a typedef using appropriate syntax */\n   \"this\",                       /* name_of_this */\n   false,\t\t\t/* la_store_sym_names_in_linkage_form_p */\n-  cp_lookup_symbol_nonlocal,\t/* lookup_symbol_nonlocal */\n   c_op_print_tab,\t\t/* expression operators for printing */\n   1,\t\t\t\t/* c-style arrays */\n   0,\t\t\t\t/* String lower bound */\n@@ -1162,6 +1160,15 @@ class cplus_language : public language_defn\n     return cp_class_name_from_physname (physname);\n   }\n \n+  /* See language.h.  */\n+\n+  struct block_symbol lookup_symbol_nonlocal\n+\t(const char *name, const struct block *block,\n+\t const domain_enum domain) const override\n+  {\n+    return cp_lookup_symbol_nonlocal (this, name, block, domain);\n+  }\n+\n protected:\n \n   /* See language.h.  */\n@@ -1203,7 +1210,6 @@ extern const struct language_data asm_language_data =\n   c_print_typedef,\t\t/* Print a typedef using appropriate syntax */\n   NULL,\t\t\t\t/* name_of_this */\n   true,\t\t\t\t/* la_store_sym_names_in_linkage_form_p */\n-  basic_lookup_symbol_nonlocal,\t/* lookup_symbol_nonlocal */\n   c_op_print_tab,\t\t/* expression operators for printing */\n   1,\t\t\t\t/* c-style arrays */\n   0,\t\t\t\t/* String lower bound */\n@@ -1267,7 +1273,6 @@ extern const struct language_data minimal_language_data =\n   c_print_typedef,\t\t/* Print a typedef using appropriate syntax */\n   NULL,\t\t\t\t/* name_of_this */\n   true,\t\t\t\t/* la_store_sym_names_in_linkage_form_p */\n-  basic_lookup_symbol_nonlocal,\t/* lookup_symbol_nonlocal */\n   c_op_print_tab,\t\t/* expression operators for printing */\n   1,\t\t\t\t/* c-style arrays */\n   0,\t\t\t\t/* String lower bound */"
    },
    {
      "sha": "bf57e703d434c8f813d7ea910628e3d07482e37e",
      "filename": "gdb/cp-namespace.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a78a19b15254de31c3d38b7e27469aaef0a30e97/gdb/cp-namespace.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a78a19b15254de31c3d38b7e27469aaef0a30e97/gdb/cp-namespace.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/cp-namespace.c?ref=a78a19b15254de31c3d38b7e27469aaef0a30e97",
      "patch": "@@ -935,7 +935,7 @@ cp_lookup_nested_symbol (struct type *parent_type,\n     case TYPE_CODE_ENUM:\n     /* NOTE: Handle modules here as well, because Fortran is re-using the C++\n        specific code to lookup nested symbols in modules, by calling the\n-       function pointer la_lookup_symbol_nonlocal, which ends up here.  */\n+       method lookup_symbol_nonlocal, which ends up here.  */\n     case TYPE_CODE_MODULE:\n       {\n \tint size;"
    },
    {
      "sha": "5689b6ceafc05aab04a54550f99e98c711487664",
      "filename": "gdb/d-lang.c",
      "status": "modified",
      "additions": 9,
      "deletions": 1,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a78a19b15254de31c3d38b7e27469aaef0a30e97/gdb/d-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a78a19b15254de31c3d38b7e27469aaef0a30e97/gdb/d-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/d-lang.c?ref=a78a19b15254de31c3d38b7e27469aaef0a30e97",
      "patch": "@@ -151,7 +151,6 @@ extern const struct language_data d_language_data =\n \t\t\t\t   syntax.  */\n   \"this\",\n   false,\t\t\t/* la_store_sym_names_in_linkage_form_p */\n-  d_lookup_symbol_nonlocal,\n   d_op_print_tab,\t\t/* Expression operators for printing.  */\n   1,\t\t\t\t/* C-style arrays.  */\n   0,\t\t\t\t/* String lower bound.  */\n@@ -265,6 +264,15 @@ class d_language : public language_defn\n   {\n     return d_value_print_inner (val, stream, recurse, options);\n   }\n+\n+  /* See language.h.  */\n+\n+  struct block_symbol lookup_symbol_nonlocal\n+\t(const char *name, const struct block *block,\n+\t const domain_enum domain) const override\n+  {\n+    return d_lookup_symbol_nonlocal (this, name, block, domain);\n+  }\n };\n \n /* Single instance of the D language class.  */"
    },
    {
      "sha": "db337be26bbaf0a47713eb60164bebae905f45a2",
      "filename": "gdb/f-lang.c",
      "status": "modified",
      "additions": 8,
      "deletions": 1,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a78a19b15254de31c3d38b7e27469aaef0a30e97/gdb/f-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a78a19b15254de31c3d38b7e27469aaef0a30e97/gdb/f-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/f-lang.c?ref=a78a19b15254de31c3d38b7e27469aaef0a30e97",
      "patch": "@@ -572,7 +572,6 @@ extern const struct language_data f_language_data =\n   f_print_typedef,\t\t/* Print a typedef using appropriate syntax */\n   NULL,                    \t/* name_of_this */\n   false,\t\t\t/* la_store_sym_names_in_linkage_form_p */\n-  cp_lookup_symbol_nonlocal,\t/* lookup_symbol_nonlocal */\n   f_op_print_tab,\t\t/* expression operators for printing */\n   0,\t\t\t\t/* arrays are first-class (not c-style) */\n   1,\t\t\t\t/* String lower bound */\n@@ -705,6 +704,14 @@ class f_language : public language_defn\n     return f_value_print_inner (val, stream, recurse, options);\n   }\n \n+  /* See language.h.  */\n+\n+  struct block_symbol lookup_symbol_nonlocal\n+\t(const char *name, const struct block *block,\n+\t const domain_enum domain) const override\n+  {\n+    return cp_lookup_symbol_nonlocal (this, name, block, domain);\n+  }\n \n protected:\n "
    },
    {
      "sha": "7da9299fddf3ac42e20d8093b821d58c7c08a70f",
      "filename": "gdb/go-lang.c",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a78a19b15254de31c3d38b7e27469aaef0a30e97/gdb/go-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a78a19b15254de31c3d38b7e27469aaef0a30e97/gdb/go-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/go-lang.c?ref=a78a19b15254de31c3d38b7e27469aaef0a30e97",
      "patch": "@@ -536,7 +536,6 @@ extern const struct language_data go_language_data =\n \t\t\t\t   syntax.  */\n   NULL,\t\t\t\t/* name_of_this */\n   false,\t\t\t/* la_store_sym_names_in_linkage_form_p */\n-  basic_lookup_symbol_nonlocal, \n   go_op_print_tab,\t\t/* Expression operators for printing.  */\n   1,\t\t\t\t/* C-style arrays.  */\n   0,\t\t\t\t/* String lower bound.  */"
    },
    {
      "sha": "0cbc7f0540238add1f6c4b4a6b89c9ad3732f7e6",
      "filename": "gdb/language.c",
      "status": "modified",
      "additions": 0,
      "deletions": 2,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a78a19b15254de31c3d38b7e27469aaef0a30e97/gdb/language.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a78a19b15254de31c3d38b7e27469aaef0a30e97/gdb/language.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/language.c?ref=a78a19b15254de31c3d38b7e27469aaef0a30e97",
      "patch": "@@ -785,7 +785,6 @@ extern const struct language_data unknown_language_data =\n   default_print_typedef,\t/* Print a typedef using appropriate syntax */\n   \"this\",        \t    \t/* name_of_this */\n   true,\t\t\t\t/* store_sym_names_in_linkage_form_p */\n-  basic_lookup_symbol_nonlocal, /* lookup_symbol_nonlocal */\n   unk_op_print_tab,\t\t/* expression operators for printing */\n   1,\t\t\t\t/* c-style arrays */\n   0,\t\t\t\t/* String lower bound */\n@@ -870,7 +869,6 @@ extern const struct language_data auto_language_data =\n   default_print_typedef,\t/* Print a typedef using appropriate syntax */\n   \"this\",\t\t        /* name_of_this */\n   false,\t\t\t/* store_sym_names_in_linkage_form_p */\n-  basic_lookup_symbol_nonlocal,\t/* lookup_symbol_nonlocal */\n   unk_op_print_tab,\t\t/* expression operators for printing */\n   1,\t\t\t\t/* c-style arrays */\n   0,\t\t\t\t/* String lower bound */"
    },
    {
      "sha": "2149487dd74d089a9a3b9f81e92184cdb3cc31f9",
      "filename": "gdb/language.h",
      "status": "modified",
      "additions": 9,
      "deletions": 10,
      "changes": 19,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a78a19b15254de31c3d38b7e27469aaef0a30e97/gdb/language.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a78a19b15254de31c3d38b7e27469aaef0a30e97/gdb/language.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/language.h?ref=a78a19b15254de31c3d38b7e27469aaef0a30e97",
      "patch": "@@ -285,16 +285,6 @@ struct language_data\n \n     const bool la_store_sym_names_in_linkage_form_p;\n \n-    /* This is a function that lookup_symbol will call when it gets to\n-       the part of symbol lookup where C looks up static and global\n-       variables.  */\n-\n-    struct block_symbol (*la_lookup_symbol_nonlocal)\n-      (const struct language_defn *,\n-       const char *,\n-       const struct block *,\n-       const domain_enum);\n-\n     /* Table for printing expressions.  */\n \n     const struct op_print *la_op_print_tab;\n@@ -522,6 +512,15 @@ struct language_defn : language_data\n       (tracker, mode, name_match_type, text, word, \"\", code);\n   }\n \n+  /* This is a function that lookup_symbol will call when it gets to\n+     the part of symbol lookup where C looks up static and global\n+     variables.  This default implements the basic C lookup rules.  */\n+\n+  virtual struct block_symbol lookup_symbol_nonlocal\n+\t(const char *name,\n+\t const struct block *block,\n+\t const domain_enum domain) const;\n+\n   /* Return an expression that can be used for a location\n      watchpoint.  TYPE is a pointer type that points to the memory\n      to watch, and ADDR is the address of the watched memory.  */"
    },
    {
      "sha": "356ed4c3bfa97ab131a4dc6c00e3f7a6dd343afa",
      "filename": "gdb/m2-lang.c",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a78a19b15254de31c3d38b7e27469aaef0a30e97/gdb/m2-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a78a19b15254de31c3d38b7e27469aaef0a30e97/gdb/m2-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/m2-lang.c?ref=a78a19b15254de31c3d38b7e27469aaef0a30e97",
      "patch": "@@ -370,7 +370,6 @@ extern const struct language_data m2_language_data =\n   m2_print_typedef,\t\t/* Print a typedef using appropriate syntax */\n   NULL,\t\t                /* name_of_this */\n   false,\t\t\t/* la_store_sym_names_in_linkage_form_p */\n-  basic_lookup_symbol_nonlocal,\t/* lookup_symbol_nonlocal */\n   m2_op_print_tab,\t\t/* expression operators for printing */\n   0,\t\t\t\t/* arrays are first-class (not c-style) */\n   0,\t\t\t\t/* String lower bound */"
    },
    {
      "sha": "1e4862fe3feeda38f139a49a298fed2bbd27e93f",
      "filename": "gdb/objc-lang.c",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a78a19b15254de31c3d38b7e27469aaef0a30e97/gdb/objc-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a78a19b15254de31c3d38b7e27469aaef0a30e97/gdb/objc-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/objc-lang.c?ref=a78a19b15254de31c3d38b7e27469aaef0a30e97",
      "patch": "@@ -345,7 +345,6 @@ extern const struct language_data objc_language_data =\n   c_print_typedef,\t\t/* Print a typedef using appropriate syntax */\n   \"self\",\t\t        /* name_of_this */\n   false,\t\t\t/* la_store_sym_names_in_linkage_form_p */\n-  basic_lookup_symbol_nonlocal,\t/* lookup_symbol_nonlocal */\n   objc_op_print_tab,\t\t/* Expression operators for printing */\n   1,\t\t\t\t/* C-style arrays */\n   0,\t\t\t\t/* String lower bound */"
    },
    {
      "sha": "2a83f51f5c7036ade3dfdbb783ccf7803e028f71",
      "filename": "gdb/opencl-lang.c",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a78a19b15254de31c3d38b7e27469aaef0a30e97/gdb/opencl-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a78a19b15254de31c3d38b7e27469aaef0a30e97/gdb/opencl-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/opencl-lang.c?ref=a78a19b15254de31c3d38b7e27469aaef0a30e97",
      "patch": "@@ -1024,7 +1024,6 @@ extern const struct language_data opencl_language_data =\n   c_print_typedef,\t\t/* Print a typedef using appropriate syntax */\n   NULL,                         /* name_of_this */\n   false,\t\t\t/* la_store_sym_names_in_linkage_form_p */\n-  basic_lookup_symbol_nonlocal,\t/* lookup_symbol_nonlocal */\n   c_op_print_tab,\t\t/* expression operators for printing */\n   1,\t\t\t\t/* c-style arrays */\n   0,\t\t\t\t/* String lower bound */"
    },
    {
      "sha": "5c1b273e7f5260718b49347a6925dcc2f0e185b3",
      "filename": "gdb/p-lang.c",
      "status": "modified",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a78a19b15254de31c3d38b7e27469aaef0a30e97/gdb/p-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a78a19b15254de31c3d38b7e27469aaef0a30e97/gdb/p-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/p-lang.c?ref=a78a19b15254de31c3d38b7e27469aaef0a30e97",
      "patch": "@@ -401,7 +401,6 @@ extern const struct language_data pascal_language_data =\n   pascal_print_typedef,\t\t/* Print a typedef using appropriate syntax */\n   \"this\",\t\t        /* name_of_this */\n   false,\t\t\t/* la_store_sym_names_in_linkage_form_p */\n-  basic_lookup_symbol_nonlocal,\t/* lookup_symbol_nonlocal */\n   pascal_op_print_tab,\t\t/* expression operators for printing */\n   1,\t\t\t\t/* c-style arrays */\n   0,\t\t\t\t/* String lower bound */"
    },
    {
      "sha": "d251dab29fc403232897b99aa1083e46429f72d2",
      "filename": "gdb/rust-lang.c",
      "status": "modified",
      "additions": 41,
      "deletions": 46,
      "changes": 87,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a78a19b15254de31c3d38b7e27469aaef0a30e97/gdb/rust-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a78a19b15254de31c3d38b7e27469aaef0a30e97/gdb/rust-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/rust-lang.c?ref=a78a19b15254de31c3d38b7e27469aaef0a30e97",
      "patch": "@@ -1961,51 +1961,6 @@ rust_operator_check (struct expression *exp, int pos,\n \n \f\n \n-/* Implementation of la_lookup_symbol_nonlocal for Rust.  */\n-\n-static struct block_symbol\n-rust_lookup_symbol_nonlocal (const struct language_defn *langdef,\n-\t\t\t     const char *name,\n-\t\t\t     const struct block *block,\n-\t\t\t     const domain_enum domain)\n-{\n-  struct block_symbol result = {};\n-\n-  if (symbol_lookup_debug)\n-    {\n-      fprintf_unfiltered (gdb_stdlog,\n-\t\t\t  \"rust_lookup_symbol_non_local\"\n-\t\t\t  \" (%s, %s (scope %s), %s)\\n\",\n-\t\t\t  name, host_address_to_string (block),\n-\t\t\t  block_scope (block), domain_name (domain));\n-    }\n-\n-  /* Look up bare names in the block's scope.  */\n-  std::string scopedname;\n-  if (name[cp_find_first_component (name)] == '\\0')\n-    {\n-      const char *scope = block_scope (block);\n-\n-      if (scope[0] != '\\0')\n-\t{\n-\t  scopedname = std::string (scope) + \"::\" + name;\n-\t  name = scopedname.c_str ();\n-\t}\n-      else\n-\tname = NULL;\n-    }\n-\n-  if (name != NULL)\n-    {\n-      result = lookup_symbol_in_static_block (name, block, domain);\n-      if (result.symbol == NULL)\n-\tresult = lookup_global_symbol (name, block, domain);\n-    }\n-  return result;\n-}\n-\n-\f\n-\n static const struct exp_descriptor exp_descriptor_rust = \n {\n   rust_print_subexp,\n@@ -2042,7 +1997,6 @@ extern const struct language_data rust_language_data =\n   rust_print_typedef,\t\t/* Print a typedef using appropriate syntax */\n   NULL,\t\t\t\t/* name_of_this */\n   false,\t\t\t/* la_store_sym_names_in_linkage_form_p */\n-  rust_lookup_symbol_nonlocal,\t/* lookup_symbol_nonlocal */\n   c_op_print_tab,\t\t/* expression operators for printing */\n   1,\t\t\t\t/* c-style arrays */\n   0,\t\t\t\t/* String lower bound */\n@@ -2147,6 +2101,47 @@ class rust_language : public language_defn\n   {\n     return rust_value_print_inner (val, stream, recurse, options);\n   }\n+\n+  /* See language.h.  */\n+\n+  struct block_symbol lookup_symbol_nonlocal\n+\t(const char *name, const struct block *block,\n+\t const domain_enum domain) const override\n+  {\n+    struct block_symbol result = {};\n+\n+    if (symbol_lookup_debug)\n+      {\n+\tfprintf_unfiltered (gdb_stdlog,\n+\t\t\t    \"rust_lookup_symbol_non_local\"\n+\t\t\t    \" (%s, %s (scope %s), %s)\\n\",\n+\t\t\t    name, host_address_to_string (block),\n+\t\t\t    block_scope (block), domain_name (domain));\n+      }\n+\n+    /* Look up bare names in the block's scope.  */\n+    std::string scopedname;\n+    if (name[cp_find_first_component (name)] == '\\0')\n+      {\n+\tconst char *scope = block_scope (block);\n+\n+\tif (scope[0] != '\\0')\n+\t  {\n+\t    scopedname = std::string (scope) + \"::\" + name;\n+\t    name = scopedname.c_str ();\n+\t  }\n+\telse\n+\t  name = NULL;\n+      }\n+\n+    if (name != NULL)\n+      {\n+\tresult = lookup_symbol_in_static_block (name, block, domain);\n+\tif (result.symbol == NULL)\n+\t  result = lookup_global_symbol (name, block, domain);\n+      }\n+    return result;\n+  }\n };\n \n /* Single instance of the Rust language class.  */"
    },
    {
      "sha": "19f078e36a386d8a0354b4de01cf6711e487ba19",
      "filename": "gdb/symtab.c",
      "status": "modified",
      "additions": 6,
      "deletions": 7,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a78a19b15254de31c3d38b7e27469aaef0a30e97/gdb/symtab.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a78a19b15254de31c3d38b7e27469aaef0a30e97/gdb/symtab.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symtab.c?ref=a78a19b15254de31c3d38b7e27469aaef0a30e97",
      "patch": "@@ -2086,7 +2086,7 @@ lookup_symbol_aux (const char *name, symbol_name_match_type match_type,\n   /* Now do whatever is appropriate for LANGUAGE to look\n      up static and global variables.  */\n \n-  result = langdef->la_lookup_symbol_nonlocal (langdef, name, block, domain);\n+  result = langdef->lookup_symbol_nonlocal (name, block, domain);\n   if (result.symbol != NULL)\n     {\n       if (symbol_lookup_debug)\n@@ -2401,13 +2401,12 @@ lookup_symbol_via_quick_fns (struct objfile *objfile,\n   return result;\n }\n \n-/* See symtab.h.  */\n+/* See language.h.  */\n \n struct block_symbol\n-basic_lookup_symbol_nonlocal (const struct language_defn *langdef,\n-\t\t\t      const char *name,\n-\t\t\t      const struct block *block,\n-\t\t\t      const domain_enum domain)\n+language_defn::lookup_symbol_nonlocal (const char *name,\n+\t\t\t\t       const struct block *block,\n+\t\t\t\t       const domain_enum domain) const\n {\n   struct block_symbol result;\n \n@@ -2433,7 +2432,7 @@ basic_lookup_symbol_nonlocal (const struct language_defn *langdef,\n \tgdbarch = target_gdbarch ();\n       else\n \tgdbarch = block_gdbarch (block);\n-      result.symbol = language_lookup_primitive_type_as_symbol (langdef,\n+      result.symbol = language_lookup_primitive_type_as_symbol (this,\n \t\t\t\t\t\t\t\tgdbarch, name);\n       result.block = NULL;\n       if (result.symbol != NULL)"
    },
    {
      "sha": "0b186554ea154d220f4d615b4b29c32066634217",
      "filename": "gdb/symtab.h",
      "status": "modified",
      "additions": 0,
      "deletions": 10,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a78a19b15254de31c3d38b7e27469aaef0a30e97/gdb/symtab.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a78a19b15254de31c3d38b7e27469aaef0a30e97/gdb/symtab.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symtab.h?ref=a78a19b15254de31c3d38b7e27469aaef0a30e97",
      "patch": "@@ -1644,16 +1644,6 @@ extern struct block_symbol lookup_symbol_search_name (const char *search_name,\n \t\t\t\t\t\t      const struct block *block,\n \t\t\t\t\t\t      domain_enum domain);\n \n-/* A default version of lookup_symbol_nonlocal for use by languages\n-   that can't think of anything better to do.\n-   This implements the C lookup rules.  */\n-\n-extern struct block_symbol\n-  basic_lookup_symbol_nonlocal (const struct language_defn *langdef,\n-\t\t\t\tconst char *,\n-\t\t\t\tconst struct block *,\n-\t\t\t\tconst domain_enum);\n-\n /* Some helper functions for languages that need to write their own\n    lookup_symbol_nonlocal functions.  */\n "
    }
  ]
}