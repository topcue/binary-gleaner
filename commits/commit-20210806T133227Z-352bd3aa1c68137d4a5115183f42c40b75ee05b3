{
  "sha": "352bd3aa1c68137d4a5115183f42c40b75ee05b3",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MzUyYmQzYWExYzY4MTM3ZDRhNTExNTE4M2Y0MmM0MGI3NWVlMDViMw==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2021-08-06T07:56:14Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2021-08-06T13:32:27Z"
    },
    "message": "PR28172, bfin_pcrel24_reloc heap-buffer-overflow\n\nbfin pcrel24 relocs are weird, they apply to the reloc address minus\ntwo.  That means reloc addresses of 0 and 1 are invalid.  Check that,\nand fix other reloc range checking.\n\n\tPR 28172\n\t* elf32-bfin.c (bfin_pcrel24_reloc): Correct reloc range check.\n\t(bfin_imm16_reloc, bfin_byte4_reloc, bfin_bfd_reloc): Likewise.\n\t(bfin_final_link_relocate): Likewise.",
    "tree": {
      "sha": "d202236bdae4f73c88a48c8d1fdaf65720b2c6cc",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/d202236bdae4f73c88a48c8d1fdaf65720b2c6cc"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/352bd3aa1c68137d4a5115183f42c40b75ee05b3",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/352bd3aa1c68137d4a5115183f42c40b75ee05b3",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/352bd3aa1c68137d4a5115183f42c40b75ee05b3",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/352bd3aa1c68137d4a5115183f42c40b75ee05b3/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "8179e388b60acc6ac35b40cd154f8d56234d1c3b",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8179e388b60acc6ac35b40cd154f8d56234d1c3b",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/8179e388b60acc6ac35b40cd154f8d56234d1c3b"
    }
  ],
  "stats": {
    "total": 16,
    "additions": 11,
    "deletions": 5
  },
  "files": [
    {
      "sha": "037da60ef74e174128b804fc55c807f3c514e432",
      "filename": "bfd/elf32-bfin.c",
      "status": "modified",
      "additions": 11,
      "deletions": 5,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/352bd3aa1c68137d4a5115183f42c40b75ee05b3/bfd/elf32-bfin.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/352bd3aa1c68137d4a5115183f42c40b75ee05b3/bfd/elf32-bfin.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/elf32-bfin.c?ref=352bd3aa1c68137d4a5115183f42c40b75ee05b3",
      "patch": "@@ -59,8 +59,9 @@ bfin_pcrel24_reloc (bfd *abfd,\n   reloc_howto_type *howto = reloc_entry->howto;\n   asection *output_section;\n   bool relocatable = (output_bfd != NULL);\n+  bfd_size_type limit = bfd_get_section_limit_octets (abfd, input_section);\n \n-  if (reloc_entry->address > bfd_get_section_limit (abfd, input_section))\n+  if (addr - 2 > limit || limit - (addr - 2) < 2)\n     return bfd_reloc_outofrange;\n \n   if (bfd_is_und_section (symbol->section)\n@@ -156,9 +157,10 @@ bfin_imm16_reloc (bfd *abfd,\n   reloc_howto_type *howto = reloc_entry->howto;\n   asection *output_section;\n   bool relocatable = (output_bfd != NULL);\n+  bfd_size_type limit = bfd_get_section_limit_octets (abfd, input_section);\n \n   /* Is the address of the relocation really within the section?  */\n-  if (reloc_entry->address > bfd_get_section_limit (abfd, input_section))\n+  if (reloc_addr > limit || limit - reloc_addr < 2)\n     return bfd_reloc_outofrange;\n \n   if (bfd_is_und_section (symbol->section)\n@@ -227,9 +229,10 @@ bfin_byte4_reloc (bfd *abfd,\n   bfd_vma output_base = 0;\n   asection *output_section;\n   bool relocatable = (output_bfd != NULL);\n+  bfd_size_type limit = bfd_get_section_limit_octets (abfd, input_section);\n \n   /* Is the address of the relocation really within the section?  */\n-  if (reloc_entry->address > bfd_get_section_limit (abfd, input_section))\n+  if (addr > limit || limit - addr < 4)\n     return bfd_reloc_outofrange;\n \n   if (bfd_is_und_section (symbol->section)\n@@ -294,9 +297,10 @@ bfin_bfd_reloc (bfd *abfd,\n   reloc_howto_type *howto = reloc_entry->howto;\n   asection *output_section;\n   bool relocatable = (output_bfd != NULL);\n+  bfd_size_type limit = bfd_get_section_limit_octets (abfd, input_section);\n \n   /* Is the address of the relocation really within the section?  */\n-  if (reloc_entry->address > bfd_get_section_limit (abfd, input_section))\n+  if (addr > limit || limit - addr < howto->size + 1u)\n     return bfd_reloc_outofrange;\n \n   if (bfd_is_und_section (symbol->section)\n@@ -1316,8 +1320,10 @@ bfin_final_link_relocate (Elf_Internal_Rela *rel, reloc_howto_type *howto,\n     {\n       bfd_reloc_status_type r = bfd_reloc_ok;\n       bfd_vma x;\n+      bfd_size_type limit = bfd_get_section_limit_octets (input_bfd,\n+\t\t\t\t\t\t\t  input_section);\n \n-      if (address > bfd_get_section_limit (input_bfd, input_section))\n+      if (address - 2 > limit || limit - (address - 2) < 4)\n \treturn bfd_reloc_outofrange;\n \n       value += addend;"
    }
  ]
}