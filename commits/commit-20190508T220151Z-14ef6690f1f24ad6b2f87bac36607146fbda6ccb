{
  "sha": "14ef6690f1f24ad6b2f87bac36607146fbda6ccb",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MTRlZjY2OTBmMWYyNGFkNmIyZjg3YmFjMzY2MDcxNDZmYmRhNmNjYg==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-05-01T21:02:27Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2019-05-08T22:01:51Z"
    },
    "message": "Convert ada-tasks.c to type-safe registry API\n\nThis changes ada-tasks.c to use the type-safe registry API.\n\ngdb/ChangeLog\n2019-05-08  Tom Tromey  <tom@tromey.com>\n\n\t* ada-tasks.c (ada_tasks_pspace_data_handle): Change type.\n\t(get_ada_tasks_pspace_data): Update.\n\t(ada_tasks_pspace_data_cleanup): Remove.\n\t(_initialize_tasks): Update.\n\t(ada_tasks_inferior_data_handle): Change type.\n\t(get_ada_tasks_inferior_data): Update.\n\t(ada_tasks_inferior_data_cleanup): Remove.\n\t(struct ada_tasks_pspace_data): Add initializers.",
    "tree": {
      "sha": "c2ff41daa9597575fc222dac9211515596bd2336",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/c2ff41daa9597575fc222dac9211515596bd2336"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/14ef6690f1f24ad6b2f87bac36607146fbda6ccb",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/14ef6690f1f24ad6b2f87bac36607146fbda6ccb",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/14ef6690f1f24ad6b2f87bac36607146fbda6ccb",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/14ef6690f1f24ad6b2f87bac36607146fbda6ccb/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "814cf43a1f16157fcbe2c662f567d064393a0fcb",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/814cf43a1f16157fcbe2c662f567d064393a0fcb",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/814cf43a1f16157fcbe2c662f567d064393a0fcb"
    }
  ],
  "stats": {
    "total": 70,
    "additions": 25,
    "deletions": 45
  },
  "files": [
    {
      "sha": "f19cb8883269d7fe03b5931957e9a4ed07934a35",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 11,
      "deletions": 0,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/14ef6690f1f24ad6b2f87bac36607146fbda6ccb/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/14ef6690f1f24ad6b2f87bac36607146fbda6ccb/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=14ef6690f1f24ad6b2f87bac36607146fbda6ccb",
      "patch": "@@ -1,3 +1,14 @@\n+2019-05-08  Tom Tromey  <tom@tromey.com>\n+\n+\t* ada-tasks.c (ada_tasks_pspace_data_handle): Change type.\n+\t(get_ada_tasks_pspace_data): Update.\n+\t(ada_tasks_pspace_data_cleanup): Remove.\n+\t(_initialize_tasks): Update.\n+\t(ada_tasks_inferior_data_handle): Change type.\n+\t(get_ada_tasks_inferior_data): Update.\n+\t(ada_tasks_inferior_data_cleanup): Remove.\n+\t(struct ada_tasks_pspace_data): Add initializers.\n+\n 2019-05-08  Tom Tromey  <tom@tromey.com>\n \n \t* symfile.h (struct sym_probe_fns) <sym_get_probes>: Change type."
    },
    {
      "sha": "762fb868e755682e9f176096f04f874d1afc69aa",
      "filename": "gdb/ada-tasks.c",
      "status": "modified",
      "additions": 14,
      "deletions": 45,
      "changes": 59,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/14ef6690f1f24ad6b2f87bac36607146fbda6ccb/gdb/ada-tasks.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/14ef6690f1f24ad6b2f87bac36607146fbda6ccb/gdb/ada-tasks.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-tasks.c?ref=14ef6690f1f24ad6b2f87bac36607146fbda6ccb",
      "patch": "@@ -142,35 +142,27 @@ struct ada_tasks_pspace_data\n   /* Nonzero if the data has been initialized.  If set to zero,\n      it means that the data has either not been initialized, or\n      has potentially become stale.  */\n-  int initialized_p;\n+  int initialized_p = 0;\n \n   /* The ATCB record type.  */\n-  struct type *atcb_type;\n+  struct type *atcb_type = nullptr;\n \n   /* The ATCB \"Common\" component type.  */\n-  struct type *atcb_common_type;\n+  struct type *atcb_common_type = nullptr;\n \n   /* The type of the \"ll\" field, from the atcb_common_type.  */\n-  struct type *atcb_ll_type;\n+  struct type *atcb_ll_type = nullptr;\n \n   /* The type of the \"call\" field, from the atcb_common_type.  */\n-  struct type *atcb_call_type;\n+  struct type *atcb_call_type = nullptr;\n \n   /* The index of various fields in the ATCB record and sub-records.  */\n-  struct atcb_fieldnos atcb_fieldno;\n+  struct atcb_fieldnos atcb_fieldno {};\n };\n \n /* Key to our per-program-space data.  */\n-static const struct program_space_data *ada_tasks_pspace_data_handle;\n-\n-/* A cleanup routine for our per-program-space data.  */\n-static void\n-ada_tasks_pspace_data_cleanup (struct program_space *pspace, void *arg)\n-{\n-  struct ada_tasks_pspace_data *data\n-    = (struct ada_tasks_pspace_data *) arg;\n-  xfree (data);\n-}\n+static const struct program_space_key<ada_tasks_pspace_data>\n+  ada_tasks_pspace_data_handle;\n \n /* The kind of data structure used by the runtime to store the list\n    of Ada tasks.  */\n@@ -245,7 +237,8 @@ struct ada_tasks_inferior_data\n };\n \n /* Key to our per-inferior data.  */\n-static const struct inferior_data *ada_tasks_inferior_data_handle;\n+static const struct inferior_key<ada_tasks_inferior_data>\n+  ada_tasks_inferior_data_handle;\n \n /* Return the ada-tasks module's data for the given program space (PSPACE).\n    If none is found, add a zero'ed one now.\n@@ -257,13 +250,9 @@ get_ada_tasks_pspace_data (struct program_space *pspace)\n {\n   struct ada_tasks_pspace_data *data;\n \n-  data = ((struct ada_tasks_pspace_data *)\n-\t  program_space_data (pspace, ada_tasks_pspace_data_handle));\n+  data = ada_tasks_pspace_data_handle.get (pspace);\n   if (data == NULL)\n-    {\n-      data = XCNEW (struct ada_tasks_pspace_data);\n-      set_program_space_data (pspace, ada_tasks_pspace_data_handle, data);\n-    }\n+    data = ada_tasks_pspace_data_handle.emplace (pspace);\n \n   return data;\n }\n@@ -285,26 +274,13 @@ get_ada_tasks_inferior_data (struct inferior *inf)\n {\n   struct ada_tasks_inferior_data *data;\n \n-  data = ((struct ada_tasks_inferior_data *)\n-\t  inferior_data (inf, ada_tasks_inferior_data_handle));\n+  data = ada_tasks_inferior_data_handle.get (inf);\n   if (data == NULL)\n-    {\n-      data = new ada_tasks_inferior_data;\n-      set_inferior_data (inf, ada_tasks_inferior_data_handle, data);\n-    }\n+    data = ada_tasks_inferior_data_handle.emplace (inf);\n \n   return data;\n }\n \n-/* A cleanup routine for our per-inferior data.  */\n-static void\n-ada_tasks_inferior_data_cleanup (struct inferior *inf, void *arg)\n-{\n-  struct ada_tasks_inferior_data *data\n-    = (struct ada_tasks_inferior_data *) arg;\n-  delete data;\n-}\n-\n /* Return the task number of the task whose thread is THREAD, or zero\n    if the task could not be found.  */\n \n@@ -1431,13 +1407,6 @@ ada_tasks_new_objfile_observer (struct objfile *objfile)\n void\n _initialize_tasks (void)\n {\n-  ada_tasks_pspace_data_handle\n-    = register_program_space_data_with_cleanup (NULL,\n-\t\t\t\t\t\tada_tasks_pspace_data_cleanup);\n-  ada_tasks_inferior_data_handle\n-    = register_inferior_data_with_cleanup (NULL,\n-\t\t\t\t\t   ada_tasks_inferior_data_cleanup);\n-\n   /* Attach various observers.  */\n   gdb::observers::normal_stop.attach (ada_tasks_normal_stop_observer);\n   gdb::observers::new_objfile.attach (ada_tasks_new_objfile_observer);"
    }
  ]
}