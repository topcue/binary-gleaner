{
  "sha": "e0802d59969339502203ad8e0d161b5f93beca73",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZTA4MDJkNTk5NjkzMzk1MDIyMDNhZDhlMGQxNjFiNWY5M2JlY2E3Mw==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2020-04-01T13:47:13Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2020-04-01T13:47:13Z"
    },
    "message": "Avoid copying in lookup_name_info\n\nlookup_name_info always copies the name that is passed in.  However,\nnormally a copy is not needed.  This patch changes this class to avoid\ncopying.  This required changing the \"name\" method to return something\nelse; I chose a gdb::string_view, to avoid excessive calls to strlen\nin the code using the lookup_name_info.  However, as this class does\nnot allow an arbitrary string_view, I've also added a c_str method\nthat guarantees a \\0-terminated result -- a pedantic difference but\none that respects the string_view contract, IMO.\n\ngdb/ChangeLog\n2020-04-01  Tom Tromey  <tromey@adacore.com>\n\n\t* symtab.h (class lookup_name_info) <lookup_name_info>: Change\n\t\"name\" parameter to rvalue reference.  Initialize m_name_holder.\n\t<lookup_name_info>: New overloads.\n\t<name>: Return gdb::string_view.\n\t<c_str>: New method.\n\t<make_ignore_params>: Update.\n\t<search_name_hash>: Update.\n\t<language_lookup_name>: Return const char *.\n\t<m_name>: Change type.\n\t* symtab.c (demangle_for_lookup_info::demangle_for_lookup_info)\n\t(demangle_for_lookup_info::demangle_for_lookup_info): Update.\n\t(lookup_name_info::match_any): Update.\n\t* psymtab.c (match_partial_symbol, lookup_partial_symbol):\n\tUpdate.\n\t* minsyms.c (linkage_name_str): Update.\n\t* language.c (default_symbol_name_matcher): Update.\n\t* dwarf2/read.c (mapped_index_base::find_name_components_bounds):\n\tUpdate.\n\t* ada-lang.c (ada_fold_name): Change parameter to string_view.\n\t(ada_lookup_name_info::ada_lookup_name_info): Update.\n\t(literal_symbol_name_matcher): Update.",
    "tree": {
      "sha": "71137374b46f6d98923a95882567c7b9f2d9b46a",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/71137374b46f6d98923a95882567c7b9f2d9b46a"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/e0802d59969339502203ad8e0d161b5f93beca73",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e0802d59969339502203ad8e0d161b5f93beca73",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/e0802d59969339502203ad8e0d161b5f93beca73",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e0802d59969339502203ad8e0d161b5f93beca73/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "8c072cb6a19abdc9d4b93c19a1d609fe1a486c32",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8c072cb6a19abdc9d4b93c19a1d609fe1a486c32",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/8c072cb6a19abdc9d4b93c19a1d609fe1a486c32"
    }
  ],
  "stats": {
    "total": 136,
    "additions": 95,
    "deletions": 41
  },
  "files": [
    {
      "sha": "8afad21c9ec878f179a8055a1f5e7a4f48039cd7",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 24,
      "deletions": 0,
      "changes": 24,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e0802d59969339502203ad8e0d161b5f93beca73/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e0802d59969339502203ad8e0d161b5f93beca73/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=e0802d59969339502203ad8e0d161b5f93beca73",
      "patch": "@@ -1,3 +1,27 @@\n+2020-04-01  Tom Tromey  <tromey@adacore.com>\n+\n+\t* symtab.h (class lookup_name_info) <lookup_name_info>: Change\n+\t\"name\" parameter to rvalue reference.  Initialize m_name_holder.\n+\t<lookup_name_info>: New overloads.\n+\t<name>: Return gdb::string_view.\n+\t<c_str>: New method.\n+\t<make_ignore_params>: Update.\n+\t<search_name_hash>: Update.\n+\t<language_lookup_name>: Return const char *.\n+\t<m_name>: Change type.\n+\t* symtab.c (demangle_for_lookup_info::demangle_for_lookup_info)\n+\t(demangle_for_lookup_info::demangle_for_lookup_info): Update.\n+\t(lookup_name_info::match_any): Update.\n+\t* psymtab.c (match_partial_symbol, lookup_partial_symbol):\n+\tUpdate.\n+\t* minsyms.c (linkage_name_str): Update.\n+\t* language.c (default_symbol_name_matcher): Update.\n+\t* dwarf2/read.c (mapped_index_base::find_name_components_bounds):\n+\tUpdate.\n+\t* ada-lang.c (ada_fold_name): Change parameter to string_view.\n+\t(ada_lookup_name_info::ada_lookup_name_info): Update.\n+\t(literal_symbol_name_matcher): Update.\n+\n 2020-04-01  Tom Tromey  <tromey@adacore.com>\n \n \t* psymtab.c (psymtab_search_name): Remove function."
    },
    {
      "sha": "029a7912a036d702d7af2f5aa555275b521aac59",
      "filename": "gdb/ada-lang.c",
      "status": "modified",
      "additions": 19,
      "deletions": 17,
      "changes": 36,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e0802d59969339502203ad8e0d161b5f93beca73/gdb/ada-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e0802d59969339502203ad8e0d161b5f93beca73/gdb/ada-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ada-lang.c?ref=e0802d59969339502203ad8e0d161b5f93beca73",
      "patch": "@@ -1016,17 +1016,17 @@ ada_encode (const char *decoded)\n    to next call.  */\n \n static char *\n-ada_fold_name (const char *name)\n+ada_fold_name (gdb::string_view name)\n {\n   static char *fold_buffer = NULL;\n   static size_t fold_buffer_size = 0;\n \n-  int len = strlen (name);\n+  int len = name.size ();\n   GROW_VECT (fold_buffer, fold_buffer_size, len + 1);\n \n   if (name[0] == '\\'')\n     {\n-      strncpy (fold_buffer, name + 1, len - 2);\n+      strncpy (fold_buffer, name.data () + 1, len - 2);\n       fold_buffer[len - 2] = '\\000';\n     }\n   else\n@@ -5657,8 +5657,8 @@ add_nonlocal_symbols (struct obstack *obstackp,\n   if (num_defns_collected (obstackp) == 0 && global && !is_wild_match)\n     {\n       const char *name = ada_lookup_name (lookup_name);\n-      lookup_name_info name1 (std::string (\"<_ada_\") + name + '>',\n-\t\t\t      symbol_name_match_type::FULL);\n+      std::string bracket_name = std::string (\"<_ada_\") + name + '>';\n+      lookup_name_info name1 (bracket_name, symbol_name_match_type::FULL);\n \n       for (objfile *objfile : current_program_space->objfiles ())\n         {\n@@ -13946,14 +13946,16 @@ do_exact_match (const char *symbol_search_name,\n \n ada_lookup_name_info::ada_lookup_name_info (const lookup_name_info &lookup_name)\n {\n-  const std::string &user_name = lookup_name.name ();\n+  gdb::string_view user_name = lookup_name.name ();\n \n   if (user_name[0] == '<')\n     {\n       if (user_name.back () == '>')\n-\tm_encoded_name = user_name.substr (1, user_name.size () - 2);\n+\tm_encoded_name\n+\t  = user_name.substr (1, user_name.size () - 2).to_string ();\n       else\n-\tm_encoded_name = user_name.substr (1, user_name.size () - 1);\n+\tm_encoded_name\n+\t  = user_name.substr (1, user_name.size () - 1).to_string ();\n       m_encoded_p = true;\n       m_verbatim_p = true;\n       m_wild_match_p = false;\n@@ -13963,19 +13965,19 @@ ada_lookup_name_info::ada_lookup_name_info (const lookup_name_info &lookup_name)\n     {\n       m_verbatim_p = false;\n \n-      m_encoded_p = user_name.find (\"__\") != std::string::npos;\n+      m_encoded_p = user_name.find (\"__\") != gdb::string_view::npos;\n \n       if (!m_encoded_p)\n \t{\n-\t  const char *folded = ada_fold_name (user_name.c_str ());\n+\t  const char *folded = ada_fold_name (user_name);\n \t  const char *encoded = ada_encode_1 (folded, false);\n \t  if (encoded != NULL)\n \t    m_encoded_name = encoded;\n \t  else\n-\t    m_encoded_name = user_name;\n+\t    m_encoded_name = user_name.to_string ();\n \t}\n       else\n-\tm_encoded_name = user_name;\n+\tm_encoded_name = user_name.to_string ();\n \n       /* Handle the 'package Standard' special case.  See description\n \t of m_standard_p.  */\n@@ -14022,12 +14024,12 @@ literal_symbol_name_matcher (const char *symbol_search_name,\n \t\t\t     const lookup_name_info &lookup_name,\n \t\t\t     completion_match_result *comp_match_res)\n {\n-  const std::string &name = lookup_name.name ();\n+  gdb::string_view name_view = lookup_name.name ();\n \n-  int cmp = (lookup_name.completion_mode ()\n-\t     ? strncmp (symbol_search_name, name.c_str (), name.size ())\n-\t     : strcmp (symbol_search_name, name.c_str ()));\n-  if (cmp == 0)\n+  if (lookup_name.completion_mode ()\n+      ? (strncmp (symbol_search_name, name_view.data (),\n+\t\t  name_view.size ()) == 0)\n+      : symbol_search_name == name_view)\n     {\n       if (comp_match_res != NULL)\n \tcomp_match_res->set_match (symbol_search_name);"
    },
    {
      "sha": "6ee33fcd6ed91ddad840ef1088eabf55cc332f5f",
      "filename": "gdb/dwarf2/read.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e0802d59969339502203ad8e0d161b5f93beca73/gdb/dwarf2/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e0802d59969339502203ad8e0d161b5f93beca73/gdb/dwarf2/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.c?ref=e0802d59969339502203ad8e0d161b5f93beca73",
      "patch": "@@ -3681,7 +3681,7 @@ mapped_index_base::find_name_components_bounds\n     = this->name_components_casing == case_sensitive_on ? strcmp : strcasecmp;\n \n   const char *lang_name\n-    = lookup_name_without_params.language_lookup_name (lang).c_str ();\n+    = lookup_name_without_params.language_lookup_name (lang);\n \n   /* Comparison function object for lower_bound that matches against a\n      given symbol name.  */"
    },
    {
      "sha": "c13fd1a406a5bbf987b641fbc6ebcf7a5e4d9280",
      "filename": "gdb/language.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e0802d59969339502203ad8e0d161b5f93beca73/gdb/language.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e0802d59969339502203ad8e0d161b5f93beca73/gdb/language.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/language.c?ref=e0802d59969339502203ad8e0d161b5f93beca73",
      "patch": "@@ -699,14 +699,14 @@ default_symbol_name_matcher (const char *symbol_search_name,\n \t\t\t     const lookup_name_info &lookup_name,\n \t\t\t     completion_match_result *comp_match_res)\n {\n-  const std::string &name = lookup_name.name ();\n+  gdb::string_view name = lookup_name.name ();\n   completion_match_for_lcd *match_for_lcd\n     = (comp_match_res != NULL ? &comp_match_res->match_for_lcd : NULL);\n   strncmp_iw_mode mode = (lookup_name.completion_mode ()\n \t\t\t  ? strncmp_iw_mode::NORMAL\n \t\t\t  : strncmp_iw_mode::MATCH_PARAMS);\n \n-  if (strncmp_iw_with_mode (symbol_search_name, name.c_str (), name.size (),\n+  if (strncmp_iw_with_mode (symbol_search_name, name.data (), name.size (),\n \t\t\t    mode, language_minimal, match_for_lcd) == 0)\n     {\n       if (comp_match_res != NULL)"
    },
    {
      "sha": "d2ac8172eea4f2426e8c20229a6aa77d201ae876",
      "filename": "gdb/minsyms.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e0802d59969339502203ad8e0d161b5f93beca73/gdb/minsyms.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e0802d59969339502203ad8e0d161b5f93beca73/gdb/minsyms.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/minsyms.c?ref=e0802d59969339502203ad8e0d161b5f93beca73",
      "patch": "@@ -467,7 +467,7 @@ linkage_name_str (const lookup_name_info &lookup_name)\n   if (current_language->la_language == language_ada)\n     return lookup_name.ada ().lookup_name ().c_str ();\n \n-  return lookup_name.name ().c_str ();\n+  return lookup_name.c_str ();\n }\n \n /* See minsyms.h.  */"
    },
    {
      "sha": "d3569ff013087f68c98f635d5a6d490b7ec2b45b",
      "filename": "gdb/psymtab.c",
      "status": "modified",
      "additions": 2,
      "deletions": 3,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e0802d59969339502203ad8e0d161b5f93beca73/gdb/psymtab.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e0802d59969339502203ad8e0d161b5f93beca73/gdb/psymtab.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/psymtab.c?ref=e0802d59969339502203ad8e0d161b5f93beca73",
      "patch": "@@ -578,8 +578,7 @@ match_partial_symbol (struct objfile *objfile,\n \t  gdb_assert (center < top);\n \n \t  enum language lang = (*center)->ginfo.language ();\n-\t  const char *lang_ln\n-\t    = name.language_lookup_name (lang).c_str ();\n+\t  const char *lang_ln = name.language_lookup_name (lang);\n \n \t  if (ordered_compare ((*center)->ginfo.search_name (),\n \t\t\t       lang_ln) >= 0)\n@@ -658,7 +657,7 @@ lookup_partial_symbol (struct objfile *objfile,\n \t    internal_error (__FILE__, __LINE__,\n \t\t\t    _(\"failed internal consistency check\"));\n \t  if (strcmp_iw_ordered ((*center)->ginfo.search_name (),\n-\t\t\t\t lookup_name.name ().c_str ()) >= 0)\n+\t\t\t\t lookup_name.c_str ()) >= 0)\n \t    {\n \t      top = center;\n \t    }"
    },
    {
      "sha": "680280105f57c5c1ffc19bbb61ebb7e099fd3638",
      "filename": "gdb/symtab.c",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e0802d59969339502203ad8e0d161b5f93beca73/gdb/symtab.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e0802d59969339502203ad8e0d161b5f93beca73/gdb/symtab.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symtab.c?ref=e0802d59969339502203ad8e0d161b5f93beca73",
      "patch": "@@ -1790,7 +1790,7 @@ demangle_for_lookup_info::demangle_for_lookup_info\n   if (lookup_name.ignore_parameters () && lang == language_cplus)\n     {\n       gdb::unique_xmalloc_ptr<char> without_params\n-\t= cp_remove_params_if_any (lookup_name.name ().c_str (),\n+\t= cp_remove_params_if_any (lookup_name.c_str (),\n \t\t\t\t   lookup_name.completion_mode ());\n \n       if (without_params != NULL)\n@@ -1803,9 +1803,9 @@ demangle_for_lookup_info::demangle_for_lookup_info\n     }\n \n   if (lookup_name.match_type () == symbol_name_match_type::SEARCH_NAME)\n-    m_demangled_name = lookup_name.name ();\n+    m_demangled_name = lookup_name.c_str ();\n   else\n-    m_demangled_name = demangle_for_lookup (lookup_name.name ().c_str (),\n+    m_demangled_name = demangle_for_lookup (lookup_name.c_str (),\n \t\t\t\t\t    lang, storage);\n }\n \n@@ -1816,7 +1816,7 @@ lookup_name_info::match_any ()\n {\n   /* Lookup any symbol that \"\" would complete.  I.e., this matches all\n      symbol names.  */\n-  static const lookup_name_info lookup_name ({}, symbol_name_match_type::FULL,\n+  static const lookup_name_info lookup_name (\"\", symbol_name_match_type::FULL,\n \t\t\t\t\t     true);\n \n   return lookup_name;"
    },
    {
      "sha": "77f60e6c24ac6497a3eac5bb9905a2f9675e9a99",
      "filename": "gdb/symtab.h",
      "status": "modified",
      "additions": 42,
      "deletions": 13,
      "changes": 55,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e0802d59969339502203ad8e0d161b5f93beca73/gdb/symtab.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e0802d59969339502203ad8e0d161b5f93beca73/gdb/symtab.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symtab.h?ref=e0802d59969339502203ad8e0d161b5f93beca73",
      "patch": "@@ -185,29 +185,58 @@ struct demangle_for_lookup_info final\n class lookup_name_info final\n {\n  public:\n-  /* Create a new object.  */\n-  lookup_name_info (std::string name,\n+  /* We delete this overload so that the callers are required to\n+     explicitly handle the lifetime of the name.  */\n+  lookup_name_info (std::string &&name,\n+\t\t    symbol_name_match_type match_type,\n+\t\t    bool completion_mode = false,\n+\t\t    bool ignore_parameters = false) = delete;\n+\n+  /* This overload requires that NAME have a lifetime at least as long\n+     as the lifetime of this object.  */\n+  lookup_name_info (const std::string &name,\n+\t\t    symbol_name_match_type match_type,\n+\t\t    bool completion_mode = false,\n+\t\t    bool ignore_parameters = false)\n+    : m_match_type (match_type),\n+      m_completion_mode (completion_mode),\n+      m_ignore_parameters (ignore_parameters),\n+      m_name (name)\n+  {}\n+\n+  /* This overload requires that NAME have a lifetime at least as long\n+     as the lifetime of this object.  */\n+  lookup_name_info (const char *name,\n \t\t    symbol_name_match_type match_type,\n \t\t    bool completion_mode = false,\n \t\t    bool ignore_parameters = false)\n     : m_match_type (match_type),\n       m_completion_mode (completion_mode),\n       m_ignore_parameters (ignore_parameters),\n-      m_name (std::move (name))\n+      m_name (name)\n   {}\n \n   /* Getters.  See description of each corresponding field.  */\n   symbol_name_match_type match_type () const { return m_match_type; }\n   bool completion_mode () const { return m_completion_mode; }\n-  const std::string &name () const { return m_name; }\n+  gdb::string_view name () const { return m_name; }\n   const bool ignore_parameters () const { return m_ignore_parameters; }\n \n+  /* Like the \"name\" method but guarantees that the returned string is\n+     \\0-terminated.  */\n+  const char *c_str () const\n+  {\n+    /* Actually this is always guaranteed due to how the class is\n+       constructed.  */\n+    return m_name.data ();\n+  }\n+\n   /* Return a version of this lookup name that is usable with\n      comparisons against symbols have no parameter info, such as\n      psymbols and GDB index symbols.  */\n   lookup_name_info make_ignore_params () const\n   {\n-    return lookup_name_info (m_name, m_match_type, m_completion_mode,\n+    return lookup_name_info (c_str (), m_match_type, m_completion_mode,\n \t\t\t     true /* ignore params */);\n   }\n \n@@ -218,27 +247,27 @@ class lookup_name_info final\n     if (!m_demangled_hashes_p[lang])\n       {\n \tm_demangled_hashes[lang]\n-\t  = ::search_name_hash (lang, language_lookup_name (lang).c_str ());\n+\t  = ::search_name_hash (lang, language_lookup_name (lang));\n \tm_demangled_hashes_p[lang] = true;\n       }\n     return m_demangled_hashes[lang];\n   }\n \n   /* Get the search name for searches in language LANG.  */\n-  const std::string &language_lookup_name (language lang) const\n+  const char *language_lookup_name (language lang) const\n   {\n     switch (lang)\n       {\n       case language_ada:\n-\treturn ada ().lookup_name ();\n+\treturn ada ().lookup_name ().c_str ();\n       case language_cplus:\n-\treturn cplus ().lookup_name ();\n+\treturn cplus ().lookup_name ().c_str ();\n       case language_d:\n-\treturn d ().lookup_name ();\n+\treturn d ().lookup_name ().c_str ();\n       case language_go:\n-\treturn go ().lookup_name ();\n+\treturn go ().lookup_name ().c_str ();\n       default:\n-\treturn m_name;\n+\treturn m_name.data ();\n       }\n   }\n \n@@ -287,7 +316,7 @@ class lookup_name_info final\n   symbol_name_match_type m_match_type;\n   bool m_completion_mode;\n   bool m_ignore_parameters;\n-  std::string m_name;\n+  gdb::string_view m_name;\n \n   /* Language-specific info.  These fields are filled lazily the first\n      time a lookup is done in the corresponding language.  They're"
    }
  ]
}