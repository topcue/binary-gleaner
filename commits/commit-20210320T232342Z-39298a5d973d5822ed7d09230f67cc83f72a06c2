{
  "sha": "39298a5d973d5822ed7d09230f67cc83f72a06c2",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MzkyOThhNWQ5NzNkNTgyMmVkN2QwOTIzMGY2N2NjODNmNzJhMDZjMg==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-03-20T23:23:40Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-03-20T23:23:42Z"
    },
    "message": "Convert quick_symbol_functions to use methods\n\nThis changes quick_symbol_functions to be a base class with pure\nvirtual methods, rather than a struct holding function pointers.\nThen, objfile is changed to hold a unique_ptr to an instance of this\nclass.\n\nstruct psymbol_functions is put into psympriv.h, and not psymtab.c,\nbecause that is convenient later in the series.\n\ngdb/ChangeLog\n2021-03-20  Tom Tromey  <tom@tromey.com>\n\n\t* psympriv.h (struct psymbol_functions): New.\n\t* symfile.c (syms_from_objfile_1, reread_symbols): Update.\n\t* symfile-debug.c (objfile::find_compunit_symtab_by_address)\n\t(objfile::lookup_global_symbol_language): Update.\n\t* quick-symbol.h (struct quick_symbol_functions): Convert function\n\tpointers to methods.  Add virtual destructor.\n\t(quick_symbol_functions_up): New typedef.\n\t* psymtab.h (psym_functions, dwarf2_gdb_index_functions)\n\t(dwarf2_debug_names_functions): Don't declare.\n\t(make_psymbol_functions): Declare.\n\t* psymtab.c (psymbol_functions::map_symtabs_matching_filename)\n\t(psymbol_functions::find_pc_sect_compunit_symtab)\n\t(psymbol_functions::lookup_symbol)\n\t(psymbol_functions::lookup_global_symbol_language)\n\t(psymbol_functions::find_last_source_symtab)\n\t(psymbol_functions::forget_cached_source_info)\n\t(psymbol_functions::print_stats, psymbol_functions::dump)\n\t(psymbol_functions::expand_symtabs_for_function)\n\t(psymbol_functions::expand_all_symtabs)\n\t(psymbol_functions::expand_symtabs_with_fullname)\n\t(psymbol_functions::map_symbol_filenames)\n\t(psymbol_functions::map_matching_symbols)\n\t(psymbol_functions::expand_symtabs_matching)\n\t(psymbol_functions::has_symbols)\n\t(psymbol_functions::find_compunit_symtab_by_address): Rename.\n\t(psym_functions): Remove.\n\t(make_psymbol_functions): New function.\n\t* objfiles.h (struct objfile) <qf>: Change type.\n\t* elfread.c (elf_symfile_read): Update.\n\t* dwarf2/read.c (struct dwarf2_base_index_functions)\n\t(struct dwarf2_gdb_index, struct dwarf2_debug_names_index): New.\n\t(make_dwarf_gdb_index, make_dwarf_debug_names): New functions.\n\t(dwarf2_base_index_functions::find_last_source_symtab)\n\t(dwarf2_base_index_functions::forget_cached_source_info)\n\t(dwarf2_base_index_functions::map_symtabs_matching_filename)\n\t(dwarf2_gdb_index::lookup_symbol)\n\t(dwarf2_base_index_functions::print_stats)\n\t(dwarf2_gdb_index::dump)\n\t(dwarf2_gdb_index::expand_symtabs_for_function)\n\t(dwarf2_base_index_functions::expand_all_symtabs)\n\t(dwarf2_base_index_functions::expand_symtabs_with_fullname):\n\tRename.\n\t(dwarf2_gdb_index::map_matching_symbols): New method.\n\t(dwarf2_gdb_index::expand_symtabs_matching): New method.\n\t(dwarf2_base_index_functions::find_pc_sect_compunit_symtab)\n\t(dwarf2_base_index_functions::map_symbol_filenames)\n\t(dwarf2_base_index_functions::has_symbols): Rename.\n\t(dwarf2_gdb_index_functions): Remove.\n\t(dwarf2_debug_names_index::lookup_symbol)\n\t(dwarf2_debug_names_index::dump)\n\t(dwarf2_debug_names_index::expand_symtabs_for_function)\n\t(dwarf2_debug_names_index::map_matching_symbols)\n\t(dwarf2_debug_names_index::expand_symtabs_matching): Rename.\n\t(dwarf2_debug_names_functions): Remove.\n\t* dwarf2/public.h (make_dwarf_gdb_index, make_dwarf_debug_names):\n\tDeclare.",
    "tree": {
      "sha": "468409018aab2f1b1856aec397eee5bd38d19f51",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/468409018aab2f1b1856aec397eee5bd38d19f51"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/39298a5d973d5822ed7d09230f67cc83f72a06c2",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/39298a5d973d5822ed7d09230f67cc83f72a06c2",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/39298a5d973d5822ed7d09230f67cc83f72a06c2",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/39298a5d973d5822ed7d09230f67cc83f72a06c2/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "5c3f1e5bfc0cf45d8bc734aabaf0225b72a31096",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5c3f1e5bfc0cf45d8bc734aabaf0225b72a31096",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/5c3f1e5bfc0cf45d8bc734aabaf0225b72a31096"
    }
  ],
  "stats": {
    "total": 607,
    "additions": 416,
    "deletions": 191
  },
  "files": [
    {
      "sha": "1ab402b60ea6eb724ebd736f96e6d488d72e3f02",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 59,
      "deletions": 0,
      "changes": 59,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/39298a5d973d5822ed7d09230f67cc83f72a06c2/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/39298a5d973d5822ed7d09230f67cc83f72a06c2/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=39298a5d973d5822ed7d09230f67cc83f72a06c2",
      "patch": "@@ -1,3 +1,62 @@\n+2021-03-20  Tom Tromey  <tom@tromey.com>\n+\n+\t* psympriv.h (struct psymbol_functions): New.\n+\t* symfile.c (syms_from_objfile_1, reread_symbols): Update.\n+\t* symfile-debug.c (objfile::find_compunit_symtab_by_address)\n+\t(objfile::lookup_global_symbol_language): Update.\n+\t* quick-symbol.h (struct quick_symbol_functions): Convert function\n+\tpointers to methods.  Add virtual destructor.\n+\t(quick_symbol_functions_up): New typedef.\n+\t* psymtab.h (psym_functions, dwarf2_gdb_index_functions)\n+\t(dwarf2_debug_names_functions): Don't declare.\n+\t(make_psymbol_functions): Declare.\n+\t* psymtab.c (psymbol_functions::map_symtabs_matching_filename)\n+\t(psymbol_functions::find_pc_sect_compunit_symtab)\n+\t(psymbol_functions::lookup_symbol)\n+\t(psymbol_functions::lookup_global_symbol_language)\n+\t(psymbol_functions::find_last_source_symtab)\n+\t(psymbol_functions::forget_cached_source_info)\n+\t(psymbol_functions::print_stats, psymbol_functions::dump)\n+\t(psymbol_functions::expand_symtabs_for_function)\n+\t(psymbol_functions::expand_all_symtabs)\n+\t(psymbol_functions::expand_symtabs_with_fullname)\n+\t(psymbol_functions::map_symbol_filenames)\n+\t(psymbol_functions::map_matching_symbols)\n+\t(psymbol_functions::expand_symtabs_matching)\n+\t(psymbol_functions::has_symbols)\n+\t(psymbol_functions::find_compunit_symtab_by_address): Rename.\n+\t(psym_functions): Remove.\n+\t(make_psymbol_functions): New function.\n+\t* objfiles.h (struct objfile) <qf>: Change type.\n+\t* elfread.c (elf_symfile_read): Update.\n+\t* dwarf2/read.c (struct dwarf2_base_index_functions)\n+\t(struct dwarf2_gdb_index, struct dwarf2_debug_names_index): New.\n+\t(make_dwarf_gdb_index, make_dwarf_debug_names): New functions.\n+\t(dwarf2_base_index_functions::find_last_source_symtab)\n+\t(dwarf2_base_index_functions::forget_cached_source_info)\n+\t(dwarf2_base_index_functions::map_symtabs_matching_filename)\n+\t(dwarf2_gdb_index::lookup_symbol)\n+\t(dwarf2_base_index_functions::print_stats)\n+\t(dwarf2_gdb_index::dump)\n+\t(dwarf2_gdb_index::expand_symtabs_for_function)\n+\t(dwarf2_base_index_functions::expand_all_symtabs)\n+\t(dwarf2_base_index_functions::expand_symtabs_with_fullname):\n+\tRename.\n+\t(dwarf2_gdb_index::map_matching_symbols): New method.\n+\t(dwarf2_gdb_index::expand_symtabs_matching): New method.\n+\t(dwarf2_base_index_functions::find_pc_sect_compunit_symtab)\n+\t(dwarf2_base_index_functions::map_symbol_filenames)\n+\t(dwarf2_base_index_functions::has_symbols): Rename.\n+\t(dwarf2_gdb_index_functions): Remove.\n+\t(dwarf2_debug_names_index::lookup_symbol)\n+\t(dwarf2_debug_names_index::dump)\n+\t(dwarf2_debug_names_index::expand_symtabs_for_function)\n+\t(dwarf2_debug_names_index::map_matching_symbols)\n+\t(dwarf2_debug_names_index::expand_symtabs_matching): Rename.\n+\t(dwarf2_debug_names_functions): Remove.\n+\t* dwarf2/public.h (make_dwarf_gdb_index, make_dwarf_debug_names):\n+\tDeclare.\n+\n 2021-03-20  Tom Tromey  <tom@tromey.com>\n \n \t* psymtab.c (require_partial_symbols): Check that 'sf' is not"
    },
    {
      "sha": "6b0fe0874b2b13ba524572d65d5198c3f1c5346e",
      "filename": "gdb/dwarf2/public.h",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/39298a5d973d5822ed7d09230f67cc83f72a06c2/gdb/dwarf2/public.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/39298a5d973d5822ed7d09230f67cc83f72a06c2/gdb/dwarf2/public.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/public.h?ref=39298a5d973d5822ed7d09230f67cc83f72a06c2",
      "patch": "@@ -43,4 +43,7 @@ extern bool dwarf2_initialize_objfile (struct objfile *objfile,\n extern void dwarf2_build_psymtabs (struct objfile *);\n extern void dwarf2_build_frame_info (struct objfile *);\n \n+extern quick_symbol_functions_up make_dwarf_gdb_index ();\n+extern quick_symbol_functions_up make_dwarf_debug_names ();\n+\n #endif /* DWARF2_PUBLIC_H */"
    },
    {
      "sha": "19e5cdb6d5abd377ce87658c20195fa32ae161cb",
      "filename": "gdb/dwarf2/read.c",
      "status": "modified",
      "additions": 189,
      "deletions": 85,
      "changes": 274,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/39298a5d973d5822ed7d09230f67cc83f72a06c2/gdb/dwarf2/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/39298a5d973d5822ed7d09230f67cc83f72a06c2/gdb/dwarf2/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.c?ref=39298a5d973d5822ed7d09230f67cc83f72a06c2",
      "patch": "@@ -2150,7 +2150,7 @@ dwarf2_get_section_info (struct objfile *objfile,\n }\n \n \f\n-/* DWARF quick_symbols_functions support.  */\n+/* DWARF quick_symbol_functions support.  */\n \n /* TUs can share .debug_line entries, and there can be a lot more TUs than\n    unique line tables, so we maintain a separate table of all .debug_line\n@@ -2193,6 +2193,119 @@ struct dwarf2_per_cu_quick_data\n   unsigned int no_file_data : 1;\n };\n \n+struct dwarf2_base_index_functions : public quick_symbol_functions\n+{\n+  bool has_symbols (struct objfile *objfile) override;\n+\n+  struct symtab *find_last_source_symtab (struct objfile *objfile) override;\n+\n+  void forget_cached_source_info (struct objfile *objfile) override;\n+\n+  bool map_symtabs_matching_filename\n+    (struct objfile *objfile, const char *name, const char *real_path,\n+     gdb::function_view<bool (symtab *)> callback) override;\n+\n+  enum language lookup_global_symbol_language (struct objfile *objfile,\n+\t\t\t\t\t       const char *name,\n+\t\t\t\t\t       domain_enum domain,\n+\t\t\t\t\t       bool *symbol_found_p) override\n+  {\n+    *symbol_found_p = false;\n+    return language_unknown;\n+  }\n+\n+  void print_stats (struct objfile *objfile) override;\n+\n+  void expand_all_symtabs (struct objfile *objfile) override;\n+\n+  void expand_symtabs_with_fullname (struct objfile *objfile,\n+\t\t\t\t     const char *fullname) override;\n+\n+  struct compunit_symtab *find_pc_sect_compunit_symtab\n+    (struct objfile *objfile, struct bound_minimal_symbol msymbol,\n+     CORE_ADDR pc, struct obj_section *section, int warn_if_readin) override;\n+\n+  struct compunit_symtab *find_compunit_symtab_by_address\n+    (struct objfile *objfile, CORE_ADDR address) override\n+  {\n+    return nullptr;\n+  }\n+\n+  void map_symbol_filenames (struct objfile *objfile,\n+\t\t\t     symbol_filename_ftype *fun, void *data,\n+\t\t\t     int need_fullname) override;\n+};\n+\n+struct dwarf2_gdb_index : public dwarf2_base_index_functions\n+{\n+  struct compunit_symtab *lookup_symbol (struct objfile *objfile,\n+\t\t\t\t\t block_enum block_index,\n+\t\t\t\t\t const char *name,\n+\t\t\t\t\t domain_enum domain) override;\n+\n+  void dump (struct objfile *objfile) override;\n+\n+  void expand_symtabs_for_function (struct objfile *objfile,\n+\t\t\t\t    const char *func_name) override;\n+\n+  void map_matching_symbols\n+    (struct objfile *,\n+     const lookup_name_info &lookup_name,\n+     domain_enum domain,\n+     int global,\n+     gdb::function_view<symbol_found_callback_ftype> callback,\n+     symbol_compare_ftype *ordered_compare) override;\n+\n+  void expand_symtabs_matching\n+    (struct objfile *objfile,\n+     gdb::function_view<expand_symtabs_file_matcher_ftype> file_matcher,\n+     const lookup_name_info *lookup_name,\n+     gdb::function_view<expand_symtabs_symbol_matcher_ftype> symbol_matcher,\n+     gdb::function_view<expand_symtabs_exp_notify_ftype> expansion_notify,\n+     enum search_domain kind) override;\n+};\n+\n+struct dwarf2_debug_names_index : public dwarf2_base_index_functions\n+{\n+  struct compunit_symtab *lookup_symbol (struct objfile *objfile,\n+\t\t\t\t\t block_enum block_index,\n+\t\t\t\t\t const char *name,\n+\t\t\t\t\t domain_enum domain) override;\n+\n+  void dump (struct objfile *objfile) override;\n+\n+  void expand_symtabs_for_function (struct objfile *objfile,\n+\t\t\t\t    const char *func_name) override;\n+\n+  void map_matching_symbols\n+    (struct objfile *,\n+     const lookup_name_info &lookup_name,\n+     domain_enum domain,\n+     int global,\n+     gdb::function_view<symbol_found_callback_ftype> callback,\n+     symbol_compare_ftype *ordered_compare) override;\n+\n+  void expand_symtabs_matching\n+    (struct objfile *objfile,\n+     gdb::function_view<expand_symtabs_file_matcher_ftype> file_matcher,\n+     const lookup_name_info *lookup_name,\n+     gdb::function_view<expand_symtabs_symbol_matcher_ftype> symbol_matcher,\n+     gdb::function_view<expand_symtabs_exp_notify_ftype> expansion_notify,\n+     enum search_domain kind) override;\n+};\n+\n+quick_symbol_functions_up\n+make_dwarf_gdb_index ()\n+{\n+  return quick_symbol_functions_up (new dwarf2_gdb_index);\n+}\n+\n+quick_symbol_functions_up\n+make_dwarf_debug_names ()\n+{\n+  return quick_symbol_functions_up (new dwarf2_debug_names_index);\n+}\n+\n /* Utility hash function for a stmt_list_hash.  */\n \n static hashval_t\n@@ -3206,8 +3319,8 @@ dw2_get_real_path (dwarf2_per_objfile *per_objfile,\n   return qfn->real_names[index];\n }\n \n-static struct symtab *\n-dw2_find_last_source_symtab (struct objfile *objfile)\n+struct symtab *\n+dwarf2_base_index_functions::find_last_source_symtab (struct objfile *objfile)\n {\n   dwarf2_per_objfile *per_objfile = get_dwarf2_per_objfile (objfile);\n   dwarf2_per_cu_data *dwarf_cu = per_objfile->per_bfd->all_comp_units.back ();\n@@ -3240,8 +3353,9 @@ dw2_free_cached_file_names (void **slot, void *info)\n   return 1;\n }\n \n-static void\n-dw2_forget_cached_source_info (struct objfile *objfile)\n+void\n+dwarf2_base_index_functions::forget_cached_source_info\n+     (struct objfile *objfile)\n {\n   dwarf2_per_objfile *per_objfile = get_dwarf2_per_objfile (objfile);\n \n@@ -3275,8 +3389,8 @@ dw2_map_expand_apply (struct objfile *objfile,\n \n /* Implementation of the map_symtabs_matching_filename method.  */\n \n-static bool\n-dw2_map_symtabs_matching_filename\n+bool\n+dwarf2_base_index_functions::map_symtabs_matching_filename\n   (struct objfile *objfile, const char *name, const char *real_path,\n    gdb::function_view<bool (symtab *)> callback)\n {\n@@ -3525,9 +3639,10 @@ dw2_symtab_iter_next (struct dw2_symtab_iterator *iter)\n   return NULL;\n }\n \n-static struct compunit_symtab *\n-dw2_lookup_symbol (struct objfile *objfile, block_enum block_index,\n-\t\t   const char *name, domain_enum domain)\n+struct compunit_symtab *\n+dwarf2_gdb_index::lookup_symbol (struct objfile *objfile,\n+\t\t\t\t block_enum block_index,\n+\t\t\t\t const char *name, domain_enum domain)\n {\n   struct compunit_symtab *stab_best = NULL;\n   dwarf2_per_objfile *per_objfile = get_dwarf2_per_objfile (objfile);\n@@ -3568,8 +3683,8 @@ dw2_lookup_symbol (struct objfile *objfile, block_enum block_index,\n   return stab_best;\n }\n \n-static void\n-dw2_print_stats (struct objfile *objfile)\n+void\n+dwarf2_base_index_functions::print_stats (struct objfile *objfile)\n {\n   dwarf2_per_objfile *per_objfile = get_dwarf2_per_objfile (objfile);\n   int total = (per_objfile->per_bfd->all_comp_units.size ()\n@@ -3592,8 +3707,8 @@ dw2_print_stats (struct objfile *objfile)\n    One use is to verify .gdb_index has been loaded by the\n    gdb.dwarf2/gdb-index.exp testcase.  */\n \n-static void\n-dw2_dump (struct objfile *objfile)\n+void\n+dwarf2_gdb_index::dump (struct objfile *objfile)\n {\n   dwarf2_per_objfile *per_objfile = get_dwarf2_per_objfile (objfile);\n \n@@ -3609,9 +3724,9 @@ dw2_dump (struct objfile *objfile)\n   printf_filtered (\"\\n\");\n }\n \n-static void\n-dw2_expand_symtabs_for_function (struct objfile *objfile,\n-\t\t\t\t const char *func_name)\n+void\n+dwarf2_gdb_index::expand_symtabs_for_function (struct objfile *objfile,\n+\t\t\t\t\t       const char *func_name)\n {\n   dwarf2_per_objfile *per_objfile = get_dwarf2_per_objfile (objfile);\n \n@@ -3625,8 +3740,8 @@ dw2_expand_symtabs_for_function (struct objfile *objfile,\n \n }\n \n-static void\n-dw2_expand_all_symtabs (struct objfile *objfile)\n+void\n+dwarf2_base_index_functions::expand_all_symtabs (struct objfile *objfile)\n {\n   dwarf2_per_objfile *per_objfile = get_dwarf2_per_objfile (objfile);\n   int total_units = (per_objfile->per_bfd->all_comp_units.size ()\n@@ -3645,9 +3760,9 @@ dw2_expand_all_symtabs (struct objfile *objfile)\n     }\n }\n \n-static void\n-dw2_expand_symtabs_with_fullname (struct objfile *objfile,\n-\t\t\t\t  const char *fullname)\n+void\n+dwarf2_base_index_functions::expand_symtabs_with_fullname\n+     (struct objfile *objfile, const char *fullname)\n {\n   dwarf2_per_objfile *per_objfile = get_dwarf2_per_objfile (objfile);\n \n@@ -3753,6 +3868,18 @@ dw2_map_matching_symbols\n     }\n }\n \n+void\n+dwarf2_gdb_index::map_matching_symbols\n+  (struct objfile *objfile,\n+   const lookup_name_info &name, domain_enum domain,\n+   int global,\n+   gdb::function_view<symbol_found_callback_ftype> callback,\n+   symbol_compare_ftype *ordered_compare)\n+{\n+  dw2_map_matching_symbols (objfile, name, domain, global, callback,\n+\t\t\t    ordered_compare);\n+}\n+\n /* Starting from a search name, return the string that finds the upper\n    bound of all strings that start with SEARCH_NAME in a sorted name\n    list.  Returns the empty string to indicate that the upper bound is\n@@ -4746,6 +4873,19 @@ dw2_expand_symtabs_matching\n     }, per_objfile);\n }\n \n+void\n+dwarf2_gdb_index::expand_symtabs_matching\n+    (struct objfile *objfile,\n+     gdb::function_view<expand_symtabs_file_matcher_ftype> file_matcher,\n+     const lookup_name_info *lookup_name,\n+     gdb::function_view<expand_symtabs_symbol_matcher_ftype> symbol_matcher,\n+     gdb::function_view<expand_symtabs_exp_notify_ftype> expansion_notify,\n+     enum search_domain kind)\n+{\n+  dw2_expand_symtabs_matching (objfile, file_matcher, lookup_name,\n+\t\t\t       symbol_matcher, expansion_notify, kind);\n+}\n+\n /* A helper for dw2_find_pc_sect_compunit_symtab which finds the most specific\n    symtab.  */\n \n@@ -4774,12 +4914,13 @@ recursively_find_pc_sect_compunit_symtab (struct compunit_symtab *cust,\n   return NULL;\n }\n \n-static struct compunit_symtab *\n-dw2_find_pc_sect_compunit_symtab (struct objfile *objfile,\n-\t\t\t\t  struct bound_minimal_symbol msymbol,\n-\t\t\t\t  CORE_ADDR pc,\n-\t\t\t\t  struct obj_section *section,\n-\t\t\t\t  int warn_if_readin)\n+struct compunit_symtab *\n+dwarf2_base_index_functions::find_pc_sect_compunit_symtab\n+     (struct objfile *objfile,\n+      struct bound_minimal_symbol msymbol,\n+      CORE_ADDR pc,\n+      struct obj_section *section,\n+      int warn_if_readin)\n {\n   struct dwarf2_per_cu_data *data;\n   struct compunit_symtab *result;\n@@ -4805,9 +4946,11 @@ dw2_find_pc_sect_compunit_symtab (struct objfile *objfile,\n   return result;\n }\n \n-static void\n-dw2_map_symbol_filenames (struct objfile *objfile, symbol_filename_ftype *fun,\n-\t\t\t  void *data, int need_fullname)\n+void\n+dwarf2_base_index_functions::map_symbol_filenames (struct objfile *objfile,\n+\t\t\t\t\t\t   symbol_filename_ftype *fun,\n+\t\t\t\t\t\t   void *data,\n+\t\t\t\t\t\t   int need_fullname)\n {\n   dwarf2_per_objfile *per_objfile = get_dwarf2_per_objfile (objfile);\n \n@@ -4872,32 +5015,12 @@ dw2_map_symbol_filenames (struct objfile *objfile, symbol_filename_ftype *fun,\n     });\n }\n \n-static bool\n-dw2_has_symbols (struct objfile *objfile)\n+bool\n+dwarf2_base_index_functions::has_symbols (struct objfile *objfile)\n {\n   return true;\n }\n \n-const struct quick_symbol_functions dwarf2_gdb_index_functions =\n-{\n-  dw2_has_symbols,\n-  dw2_find_last_source_symtab,\n-  dw2_forget_cached_source_info,\n-  dw2_map_symtabs_matching_filename,\n-  dw2_lookup_symbol,\n-  NULL,\n-  dw2_print_stats,\n-  dw2_dump,\n-  dw2_expand_symtabs_for_function,\n-  dw2_expand_all_symtabs,\n-  dw2_expand_symtabs_with_fullname,\n-  dw2_map_matching_symbols,\n-  dw2_expand_symtabs_matching,\n-  dw2_find_pc_sect_compunit_symtab,\n-  NULL,\n-  dw2_map_symbol_filenames\n-};\n-\n /* DWARF-5 debug_names reader.  */\n \n /* DWARF-5 augmentation string for GDB's DW_IDX_GNU_* extension.  */\n@@ -5632,9 +5755,10 @@ dw2_debug_names_iterator::next ()\n   return per_cu;\n }\n \n-static struct compunit_symtab *\n-dw2_debug_names_lookup_symbol (struct objfile *objfile, block_enum block_index,\n-\t\t\t       const char *name, domain_enum domain)\n+struct compunit_symtab *\n+dwarf2_debug_names_index::lookup_symbol\n+     (struct objfile *objfile, block_enum block_index,\n+      const char *name, domain_enum domain)\n {\n   dwarf2_per_objfile *per_objfile = get_dwarf2_per_objfile (objfile);\n \n@@ -5683,8 +5807,8 @@ dw2_debug_names_lookup_symbol (struct objfile *objfile, block_enum block_index,\n    via \"mt print objfiles\".  The gdb.dwarf2/gdb-index.exp testcase\n    uses this to verify that .debug_names has been loaded.  */\n \n-static void\n-dw2_debug_names_dump (struct objfile *objfile)\n+void\n+dwarf2_debug_names_index::dump (struct objfile *objfile)\n {\n   dwarf2_per_objfile *per_objfile = get_dwarf2_per_objfile (objfile);\n \n@@ -5697,9 +5821,9 @@ dw2_debug_names_dump (struct objfile *objfile)\n   printf_filtered (\"\\n\");\n }\n \n-static void\n-dw2_debug_names_expand_symtabs_for_function (struct objfile *objfile,\n-\t\t\t\t\t     const char *func_name)\n+void\n+dwarf2_debug_names_index::expand_symtabs_for_function\n+     (struct objfile *objfile, const char *func_name)\n {\n   dwarf2_per_objfile *per_objfile = get_dwarf2_per_objfile (objfile);\n \n@@ -5717,8 +5841,8 @@ dw2_debug_names_expand_symtabs_for_function (struct objfile *objfile,\n     }\n }\n \n-static void\n-dw2_debug_names_map_matching_symbols\n+void\n+dwarf2_debug_names_index::map_matching_symbols\n   (struct objfile *objfile,\n    const lookup_name_info &name, domain_enum domain,\n    int global,\n@@ -5775,8 +5899,8 @@ dw2_debug_names_map_matching_symbols\n     }\n }\n \n-static void\n-dw2_debug_names_expand_symtabs_matching\n+void\n+dwarf2_debug_names_index::expand_symtabs_matching\n   (struct objfile *objfile,\n    gdb::function_view<expand_symtabs_file_matcher_ftype> file_matcher,\n    const lookup_name_info *lookup_name,\n@@ -5822,26 +5946,6 @@ dw2_debug_names_expand_symtabs_matching\n     }, per_objfile);\n }\n \n-const struct quick_symbol_functions dwarf2_debug_names_functions =\n-{\n-  dw2_has_symbols,\n-  dw2_find_last_source_symtab,\n-  dw2_forget_cached_source_info,\n-  dw2_map_symtabs_matching_filename,\n-  dw2_debug_names_lookup_symbol,\n-  NULL,\n-  dw2_print_stats,\n-  dw2_debug_names_dump,\n-  dw2_debug_names_expand_symtabs_for_function,\n-  dw2_expand_all_symtabs,\n-  dw2_expand_symtabs_with_fullname,\n-  dw2_debug_names_map_matching_symbols,\n-  dw2_debug_names_expand_symtabs_matching,\n-  dw2_find_pc_sect_compunit_symtab,\n-  NULL,\n-  dw2_map_symbol_filenames\n-};\n-\n /* Get the content of the .gdb_index section of OBJ.  SECTION_OWNER should point\n    to either a dwarf2_per_bfd or dwz_file object.  */\n "
    },
    {
      "sha": "4ca1f4d5284c59d32d2359b32aea568837c18277",
      "filename": "gdb/elfread.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/39298a5d973d5822ed7d09230f67cc83f72a06c2/gdb/elfread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/39298a5d973d5822ed7d09230f67cc83f72a06c2/gdb/elfread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/elfread.c?ref=39298a5d973d5822ed7d09230f67cc83f72a06c2",
      "patch": "@@ -1270,10 +1270,10 @@ elf_symfile_read (struct objfile *objfile, symfile_add_flags symfile_flags)\n \t  switch (index_kind)\n \t    {\n \t    case dw_index_kind::GDB_INDEX:\n-\t      objfile->qf = &dwarf2_gdb_index_functions;\n+\t      objfile->qf = make_dwarf_gdb_index ();\n \t      break;\n \t    case dw_index_kind::DEBUG_NAMES:\n-\t      objfile->qf = &dwarf2_debug_names_functions;\n+\t      objfile->qf = make_dwarf_debug_names ();\n \t      break;\n \t    }\n \t}"
    },
    {
      "sha": "7235713cbdf2cab133d7ce5c8c3c1b206a07c4ea",
      "filename": "gdb/objfiles.h",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/39298a5d973d5822ed7d09230f67cc83f72a06c2/gdb/objfiles.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/39298a5d973d5822ed7d09230f67cc83f72a06c2/gdb/objfiles.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/objfiles.h?ref=39298a5d973d5822ed7d09230f67cc83f72a06c2",
      "patch": "@@ -37,6 +37,7 @@\n #include \"gdbarch.h\"\n #include \"gdbsupport/refcounted-object.h\"\n #include \"jit.h\"\n+#include \"quick-symbol.h\"\n \n struct htab;\n struct objfile_data;\n@@ -679,7 +680,7 @@ struct objfile\n \n   /* The \"quick\" (aka partial) symbol functions for this symbol\n      reader.  */\n-  const struct quick_symbol_functions *qf = nullptr;\n+  quick_symbol_functions_up qf;\n \n   /* Per objfile data-pointers required by other GDB modules.  */\n "
    },
    {
      "sha": "6b9ee184e9c2aa2a9b333731b45a46940bb82a4f",
      "filename": "gdb/psympriv.h",
      "status": "modified",
      "additions": 64,
      "deletions": 0,
      "changes": 64,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/39298a5d973d5822ed7d09230f67cc83f72a06c2/gdb/psympriv.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/39298a5d973d5822ed7d09230f67cc83f72a06c2/gdb/psympriv.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/psympriv.h?ref=39298a5d973d5822ed7d09230f67cc83f72a06c2",
      "patch": "@@ -473,4 +473,68 @@ class psymtab_discarder\n   struct partial_symtab *m_psymtab;\n };\n \n+/* An implementation of quick_symbol_functions, specialized for\n+   partial symbols.  */\n+struct psymbol_functions : public quick_symbol_functions\n+{\n+  bool has_symbols (struct objfile *objfile) override;\n+\n+  struct symtab *find_last_source_symtab (struct objfile *objfile) override;\n+\n+  void forget_cached_source_info (struct objfile *objfile) override;\n+\n+  bool map_symtabs_matching_filename\n+    (struct objfile *objfile, const char *name, const char *real_path,\n+     gdb::function_view<bool (symtab *)> callback) override;\n+\n+  struct compunit_symtab *lookup_symbol (struct objfile *objfile,\n+\t\t\t\t\t block_enum block_index,\n+\t\t\t\t\t const char *name,\n+\t\t\t\t\t domain_enum domain) override;\n+\n+  enum language lookup_global_symbol_language (struct objfile *objfile,\n+\t\t\t\t\t       const char *name,\n+\t\t\t\t\t       domain_enum domain,\n+\t\t\t\t\t       bool *symbol_found_p) override;\n+\n+  void print_stats (struct objfile *objfile) override;\n+\n+  void dump (struct objfile *objfile) override;\n+\n+  void expand_symtabs_for_function (struct objfile *objfile,\n+\t\t\t\t    const char *func_name) override;\n+\n+  void expand_all_symtabs (struct objfile *objfile) override;\n+\n+  void expand_symtabs_with_fullname (struct objfile *objfile,\n+\t\t\t\t     const char *fullname) override;\n+\n+  void map_matching_symbols\n+    (struct objfile *,\n+     const lookup_name_info &lookup_name,\n+     domain_enum domain,\n+     int global,\n+     gdb::function_view<symbol_found_callback_ftype> callback,\n+     symbol_compare_ftype *ordered_compare) override;\n+\n+  void expand_symtabs_matching\n+    (struct objfile *objfile,\n+     gdb::function_view<expand_symtabs_file_matcher_ftype> file_matcher,\n+     const lookup_name_info *lookup_name,\n+     gdb::function_view<expand_symtabs_symbol_matcher_ftype> symbol_matcher,\n+     gdb::function_view<expand_symtabs_exp_notify_ftype> expansion_notify,\n+     enum search_domain kind) override;\n+\n+  struct compunit_symtab *find_pc_sect_compunit_symtab\n+    (struct objfile *objfile, struct bound_minimal_symbol msymbol,\n+     CORE_ADDR pc, struct obj_section *section, int warn_if_readin) override;\n+\n+  struct compunit_symtab *find_compunit_symtab_by_address\n+    (struct objfile *objfile, CORE_ADDR address) override;\n+\n+  void map_symbol_filenames (struct objfile *objfile,\n+\t\t\t     symbol_filename_ftype *fun, void *data,\n+\t\t\t     int need_fullname) override;\n+};\n+\n #endif /* PSYMPRIV_H */"
    },
    {
      "sha": "c022daa7894255d3ec47255bf181b5bceb18e756",
      "filename": "gdb/psymtab.c",
      "status": "modified",
      "additions": 52,
      "deletions": 62,
      "changes": 114,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/39298a5d973d5822ed7d09230f67cc83f72a06c2/gdb/psymtab.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/39298a5d973d5822ed7d09230f67cc83f72a06c2/gdb/psymtab.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/psymtab.c?ref=39298a5d973d5822ed7d09230f67cc83f72a06c2",
      "patch": "@@ -132,8 +132,8 @@ partial_map_expand_apply (struct objfile *objfile,\n /*  Psymtab version of map_symtabs_matching_filename.  See its definition in\n     the definition of quick_symbol_functions in symfile.h.  */\n \n-static bool\n-psym_map_symtabs_matching_filename\n+bool\n+psymbol_functions::map_symtabs_matching_filename\n   (struct objfile *objfile,\n    const char *name,\n    const char *real_path,\n@@ -359,12 +359,13 @@ find_pc_sect_psymtab (struct objfile *objfile, CORE_ADDR pc,\n /* Psymtab version of find_pc_sect_compunit_symtab.  See its definition in\n    the definition of quick_symbol_functions in symfile.h.  */\n \n-static struct compunit_symtab *\n-psym_find_pc_sect_compunit_symtab (struct objfile *objfile,\n-\t\t\t\t   struct bound_minimal_symbol msymbol,\n-\t\t\t\t   CORE_ADDR pc,\n-\t\t\t\t   struct obj_section *section,\n-\t\t\t\t   int warn_if_readin)\n+struct compunit_symtab *\n+psymbol_functions::find_pc_sect_compunit_symtab\n+     (struct objfile *objfile,\n+      struct bound_minimal_symbol msymbol,\n+      CORE_ADDR pc,\n+      struct obj_section *section,\n+      int warn_if_readin)\n {\n   struct partial_symtab *ps = find_pc_sect_psymtab (objfile, pc, section,\n \t\t\t\t\t\t    msymbol);\n@@ -449,10 +450,10 @@ find_pc_sect_psymbol (struct objfile *objfile,\n /* Psymtab version of lookup_symbol.  See its definition in\n    the definition of quick_symbol_functions in symfile.h.  */\n \n-static struct compunit_symtab *\n-psym_lookup_symbol (struct objfile *objfile,\n-\t\t    block_enum block_index, const char *name,\n-\t\t    const domain_enum domain)\n+struct compunit_symtab *\n+psymbol_functions::lookup_symbol (struct objfile *objfile,\n+\t\t\t\t  block_enum block_index, const char *name,\n+\t\t\t\t  const domain_enum domain)\n {\n   const int psymtab_index = (block_index == GLOBAL_BLOCK ? 1 : 0);\n   struct compunit_symtab *stab_best = NULL;\n@@ -500,9 +501,11 @@ psym_lookup_symbol (struct objfile *objfile,\n /* Psymtab version of lookup_global_symbol_language.  See its definition in\n    the definition of quick_symbol_functions in symfile.h.  */\n \n-static enum language\n-psym_lookup_global_symbol_language (struct objfile *objfile, const char *name,\n-\t\t\t\t    domain_enum domain, bool *symbol_found_p)\n+enum language\n+psymbol_functions::lookup_global_symbol_language (struct objfile *objfile,\n+\t\t\t\t\t\t  const char *name,\n+\t\t\t\t\t\t  domain_enum domain,\n+\t\t\t\t\t\t  bool *symbol_found_p)\n {\n   *symbol_found_p = false;\n   if (objfile->sf == NULL)\n@@ -754,8 +757,8 @@ psymtab_to_symtab (struct objfile *objfile, struct partial_symtab *pst)\n /* Psymtab version of find_last_source_symtab.  See its definition in\n    the definition of quick_symbol_functions in symfile.h.  */\n \n-static struct symtab *\n-psym_find_last_source_symtab (struct objfile *ofp)\n+struct symtab *\n+psymbol_functions::find_last_source_symtab (struct objfile *ofp)\n {\n   struct partial_symtab *cs_pst = NULL;\n \n@@ -792,8 +795,8 @@ psym_find_last_source_symtab (struct objfile *ofp)\n /* Psymtab version of forget_cached_source_info.  See its definition in\n    the definition of quick_symbol_functions in symfile.h.  */\n \n-static void\n-psym_forget_cached_source_info (struct objfile *objfile)\n+void\n+psymbol_functions::forget_cached_source_info (struct objfile *objfile)\n {\n   for (partial_symtab *pst : require_partial_symbols (objfile, true))\n     {\n@@ -975,8 +978,8 @@ dump_psymtab (struct objfile *objfile, struct partial_symtab *psymtab,\n /* Psymtab version of print_stats.  See its definition in\n    the definition of quick_symbol_functions in symfile.h.  */\n \n-static void\n-psym_print_stats (struct objfile *objfile)\n+void\n+psymbol_functions::print_stats (struct objfile *objfile)\n {\n   int i;\n \n@@ -992,8 +995,8 @@ psym_print_stats (struct objfile *objfile)\n /* Psymtab version of dump.  See its definition in\n    the definition of quick_symbol_functions in symfile.h.  */\n \n-static void\n-psym_dump (struct objfile *objfile)\n+void\n+psymbol_functions::dump (struct objfile *objfile)\n {\n   struct partial_symtab *psymtab;\n \n@@ -1017,9 +1020,9 @@ psym_dump (struct objfile *objfile)\n /* Psymtab version of expand_symtabs_for_function.  See its definition in\n    the definition of quick_symbol_functions in symfile.h.  */\n \n-static void\n-psym_expand_symtabs_for_function (struct objfile *objfile,\n-\t\t\t\t  const char *func_name)\n+void\n+psymbol_functions::expand_symtabs_for_function (struct objfile *objfile,\n+\t\t\t\t\t\tconst char *func_name)\n {\n   lookup_name_info base_lookup (func_name, symbol_name_match_type::FULL);\n   lookup_name_info lookup_name = base_lookup.make_ignore_params ();\n@@ -1040,8 +1043,8 @@ psym_expand_symtabs_for_function (struct objfile *objfile,\n /* Psymtab version of expand_all_symtabs.  See its definition in\n    the definition of quick_symbol_functions in symfile.h.  */\n \n-static void\n-psym_expand_all_symtabs (struct objfile *objfile)\n+void\n+psymbol_functions::expand_all_symtabs (struct objfile *objfile)\n {\n   for (partial_symtab *psymtab : require_partial_symbols (objfile, true))\n     psymtab_to_symtab (objfile, psymtab);\n@@ -1050,9 +1053,9 @@ psym_expand_all_symtabs (struct objfile *objfile)\n /* Psymtab version of expand_symtabs_with_fullname.  See its definition in\n    the definition of quick_symbol_functions in symfile.h.  */\n \n-static void\n-psym_expand_symtabs_with_fullname (struct objfile *objfile,\n-\t\t\t\t   const char *fullname)\n+void\n+psymbol_functions::expand_symtabs_with_fullname (struct objfile *objfile,\n+\t\t\t\t\t\t const char *fullname)\n {\n   for (partial_symtab *p : require_partial_symbols (objfile, true))\n     {\n@@ -1072,10 +1075,11 @@ psym_expand_symtabs_with_fullname (struct objfile *objfile,\n /* Psymtab version of map_symbol_filenames.  See its definition in\n    the definition of quick_symbol_functions in symfile.h.  */\n \n-static void\n-psym_map_symbol_filenames (struct objfile *objfile,\n-\t\t\t   symbol_filename_ftype *fun, void *data,\n-\t\t\t   int need_fullname)\n+void\n+psymbol_functions::map_symbol_filenames (struct objfile *objfile,\n+\t\t\t\t\t symbol_filename_ftype *fun,\n+\t\t\t\t\t void *data,\n+\t\t\t\t\t int need_fullname)\n {\n   for (partial_symtab *ps : require_partial_symbols (objfile, true))\n     {\n@@ -1148,8 +1152,8 @@ psymtab_to_fullname (struct partial_symtab *ps)\n /* Psymtab version of map_matching_symbols.  See its definition in\n    the definition of quick_symbol_functions in symfile.h.  */\n \n-static void\n-psym_map_matching_symbols\n+void\n+psymbol_functions::map_matching_symbols\n   (struct objfile *objfile,\n    const lookup_name_info &name, domain_enum domain,\n    int global,\n@@ -1273,8 +1277,8 @@ recursively_search_psymtabs\n /* Psymtab version of expand_symtabs_matching.  See its definition in\n    the definition of quick_symbol_functions in symfile.h.  */\n \n-static void\n-psym_expand_symtabs_matching\n+void\n+psymbol_functions::expand_symtabs_matching\n   (struct objfile *objfile,\n    gdb::function_view<expand_symtabs_file_matcher_ftype> file_matcher,\n    const lookup_name_info *lookup_name,\n@@ -1335,8 +1339,8 @@ psym_expand_symtabs_matching\n /* Psymtab version of has_symbols.  See its definition in\n    the definition of quick_symbol_functions in symfile.h.  */\n \n-static bool\n-psym_has_symbols (struct objfile *objfile)\n+bool\n+psymbol_functions::has_symbols (struct objfile *objfile)\n {\n   return objfile->partial_symtabs->psymtabs != NULL;\n }\n@@ -1367,9 +1371,9 @@ psym_fill_psymbol_map (struct objfile *objfile,\n /* See find_compunit_symtab_by_address in quick_symbol_functions, in\n    symfile.h.  */\n \n-static compunit_symtab *\n-psym_find_compunit_symtab_by_address (struct objfile *objfile,\n-\t\t\t\t      CORE_ADDR address)\n+compunit_symtab *\n+psymbol_functions::find_compunit_symtab_by_address (struct objfile *objfile,\n+\t\t\t\t\t\t    CORE_ADDR address)\n {\n   if (objfile->psymbol_map.empty ())\n     {\n@@ -1409,25 +1413,11 @@ psym_find_compunit_symtab_by_address (struct objfile *objfile,\n   return psymtab_to_symtab (objfile, iter->second);\n }\n \n-const struct quick_symbol_functions psym_functions =\n+quick_symbol_functions_up\n+make_psymbol_functions ()\n {\n-  psym_has_symbols,\n-  psym_find_last_source_symtab,\n-  psym_forget_cached_source_info,\n-  psym_map_symtabs_matching_filename,\n-  psym_lookup_symbol,\n-  psym_lookup_global_symbol_language,\n-  psym_print_stats,\n-  psym_dump,\n-  psym_expand_symtabs_for_function,\n-  psym_expand_all_symtabs,\n-  psym_expand_symtabs_with_fullname,\n-  psym_map_matching_symbols,\n-  psym_expand_symtabs_matching,\n-  psym_find_pc_sect_compunit_symtab,\n-  psym_find_compunit_symtab_by_address,\n-  psym_map_symbol_filenames\n-};\n+  return quick_symbol_functions_up (new psymbol_functions);\n+}\n \n \f\n "
    },
    {
      "sha": "45eaf0b9013950f48686481fbb12ad8138b2f1c3",
      "filename": "gdb/psymtab.h",
      "status": "modified",
      "additions": 2,
      "deletions": 5,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/39298a5d973d5822ed7d09230f67cc83f72a06c2/gdb/psymtab.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/39298a5d973d5822ed7d09230f67cc83f72a06c2/gdb/psymtab.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/psymtab.h?ref=39298a5d973d5822ed7d09230f67cc83f72a06c2",
      "patch": "@@ -146,11 +146,6 @@ class psymtab_storage\n };\n \n \n-extern const struct quick_symbol_functions psym_functions;\n-\n-extern const struct quick_symbol_functions dwarf2_gdb_index_functions;\n-extern const struct quick_symbol_functions dwarf2_debug_names_functions;\n-\n /* Ensure that the partial symbols for OBJFILE have been loaded.  If\n    VERBOSE is true, then this will print a message when symbols\n    are loaded.  This function returns a range adapter suitable for\n@@ -159,4 +154,6 @@ extern const struct quick_symbol_functions dwarf2_debug_names_functions;\n extern psymtab_storage::partial_symtab_range require_partial_symbols\n     (struct objfile *objfile, bool verbose);\n \n+extern quick_symbol_functions_up make_psymbol_functions ();\n+\n #endif /* PSYMTAB_H */"
    },
    {
      "sha": "85e7a32eacd9441b9c2ed2e28eccb3439318fe3e",
      "filename": "gdb/quick-symbol.h",
      "status": "modified",
      "additions": 39,
      "deletions": 32,
      "changes": 71,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/39298a5d973d5822ed7d09230f67cc83f72a06c2/gdb/quick-symbol.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/39298a5d973d5822ed7d09230f67cc83f72a06c2/gdb/quick-symbol.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/quick-symbol.h?ref=39298a5d973d5822ed7d09230f67cc83f72a06c2",
      "patch": "@@ -66,16 +66,20 @@ typedef void (expand_symtabs_exp_notify_ftype) (compunit_symtab *symtab);\n \n struct quick_symbol_functions\n {\n+  virtual ~quick_symbol_functions ()\n+  {\n+  }\n+\n   /* Return true if this objfile has any \"partial\" symbols\n      available.  */\n-  bool (*has_symbols) (struct objfile *objfile);\n+  virtual bool has_symbols (struct objfile *objfile) = 0;\n \n   /* Return the symbol table for the \"last\" file appearing in\n      OBJFILE.  */\n-  struct symtab *(*find_last_source_symtab) (struct objfile *objfile);\n+  virtual struct symtab *find_last_source_symtab (struct objfile *objfile) = 0;\n \n   /* Forget all cached full file names for OBJFILE.  */\n-  void (*forget_cached_source_info) (struct objfile *objfile);\n+  virtual void forget_cached_source_info (struct objfile *objfile) = 0;\n \n   /* Expand and iterate over each \"partial\" symbol table in OBJFILE\n      where the source file is named NAME.\n@@ -89,9 +93,9 @@ struct quick_symbol_functions\n      Then, this calls iterate_over_some_symtabs (or equivalent) over\n      all newly-created symbol tables, passing CALLBACK to it.\n      The result of this call is returned.  */\n-  bool (*map_symtabs_matching_filename)\n+  virtual bool map_symtabs_matching_filename\n     (struct objfile *objfile, const char *name, const char *real_path,\n-     gdb::function_view<bool (symtab *)> callback);\n+     gdb::function_view<bool (symtab *)> callback) = 0;\n \n   /* Check to see if the symbol is defined in a \"partial\" symbol table\n      of OBJFILE.  BLOCK_INDEX should be either GLOBAL_BLOCK or STATIC_BLOCK,\n@@ -103,46 +107,47 @@ struct quick_symbol_functions\n      defined, or NULL if no such symbol table exists.  If OBJFILE\n      contains !TYPE_OPAQUE symbol prefer its compunit.  If it contains\n      only TYPE_OPAQUE symbol(s), return at least that compunit.  */\n-  struct compunit_symtab *(*lookup_symbol) (struct objfile *objfile,\n-\t\t\t\t\t    block_enum block_index,\n-\t\t\t\t\t    const char *name,\n-\t\t\t\t\t    domain_enum domain);\n+  virtual struct compunit_symtab *lookup_symbol (struct objfile *objfile,\n+\t\t\t\t\t\t block_enum block_index,\n+\t\t\t\t\t\t const char *name,\n+\t\t\t\t\t\t domain_enum domain) = 0;\n \n   /* Check to see if the global symbol is defined in a \"partial\" symbol table\n      of OBJFILE. NAME is the name of the symbol to look for.  DOMAIN\n      indicates what sort of symbol to search for.\n \n      If found, sets *symbol_found_p to true and returns the symbol language.\n      defined, or NULL if no such symbol table exists.  */\n-  enum language (*lookup_global_symbol_language) (struct objfile *objfile,\n-\t\t\t\t\t\t  const char *name,\n-\t\t\t\t\t\t  domain_enum domain,\n-\t\t\t\t\t\t  bool *symbol_found_p);\n+  virtual enum language lookup_global_symbol_language\n+       (struct objfile *objfile,\n+\tconst char *name,\n+\tdomain_enum domain,\n+\tbool *symbol_found_p) = 0;\n \n   /* Print statistics about any indices loaded for OBJFILE.  The\n      statistics should be printed to gdb_stdout.  This is used for\n      \"maint print statistics\".  */\n-  void (*print_stats) (struct objfile *objfile);\n+  virtual void print_stats (struct objfile *objfile) = 0;\n \n   /* Dump any indices loaded for OBJFILE.  The dump should go to\n      gdb_stdout.  This is used for \"maint print objfiles\".  */\n-  void (*dump) (struct objfile *objfile);\n+  virtual void dump (struct objfile *objfile) = 0;\n \n   /* Find all the symbols in OBJFILE named FUNC_NAME, and ensure that\n      the corresponding symbol tables are loaded.  */\n-  void (*expand_symtabs_for_function) (struct objfile *objfile,\n-\t\t\t\t       const char *func_name);\n+  virtual void expand_symtabs_for_function (struct objfile *objfile,\n+\t\t\t\t\t    const char *func_name) = 0;\n \n   /* Read all symbol tables associated with OBJFILE.  */\n-  void (*expand_all_symtabs) (struct objfile *objfile);\n+  virtual void expand_all_symtabs (struct objfile *objfile) = 0;\n \n   /* Read all symbol tables associated with OBJFILE which have\n      symtab_to_fullname equal to FULLNAME.\n      This is for the purposes of examining code only, e.g., expand_line_sal.\n      The routine may ignore debug info that is known to not be useful with\n      code, e.g., DW_TAG_type_unit for dwarf debug info.  */\n-  void (*expand_symtabs_with_fullname) (struct objfile *objfile,\n-\t\t\t\t\tconst char *fullname);\n+  virtual void expand_symtabs_with_fullname (struct objfile *objfile,\n+\t\t\t\t\t     const char *fullname) = 0;\n \n   /* Find global or static symbols in all tables that are in DOMAIN\n      and for which MATCH (symbol name, NAME) == 0, passing each to \n@@ -161,13 +166,13 @@ struct quick_symbol_functions\n      CALLBACK returns true to indicate that the scan should continue, or\n      false to indicate that the scan should be terminated.  */\n \n-  void (*map_matching_symbols)\n+  virtual void map_matching_symbols\n     (struct objfile *,\n      const lookup_name_info &lookup_name,\n      domain_enum domain,\n      int global,\n      gdb::function_view<symbol_found_callback_ftype> callback,\n-     symbol_compare_ftype *ordered_compare);\n+     symbol_compare_ftype *ordered_compare) = 0;\n \n   /* Expand all symbol tables in OBJFILE matching some criteria.\n \n@@ -190,39 +195,41 @@ struct quick_symbol_functions\n      If SYMBOL_MATCHER returns false, then the symbol is skipped.\n \n      Otherwise, the symbol's symbol table is expanded.  */\n-  void (*expand_symtabs_matching)\n+  virtual void expand_symtabs_matching\n     (struct objfile *objfile,\n      gdb::function_view<expand_symtabs_file_matcher_ftype> file_matcher,\n      const lookup_name_info *lookup_name,\n      gdb::function_view<expand_symtabs_symbol_matcher_ftype> symbol_matcher,\n      gdb::function_view<expand_symtabs_exp_notify_ftype> expansion_notify,\n-     enum search_domain kind);\n+     enum search_domain kind) = 0;\n \n   /* Return the comp unit from OBJFILE that contains PC and\n      SECTION.  Return NULL if there is no such compunit.  This\n      should return the compunit that contains a symbol whose\n      address exactly matches PC, or, if there is no exact match, the\n      compunit that contains a symbol whose address is closest to\n      PC.  */\n-  struct compunit_symtab *(*find_pc_sect_compunit_symtab)\n+  virtual struct compunit_symtab *find_pc_sect_compunit_symtab\n     (struct objfile *objfile, struct bound_minimal_symbol msymbol,\n-     CORE_ADDR pc, struct obj_section *section, int warn_if_readin);\n+     CORE_ADDR pc, struct obj_section *section, int warn_if_readin) = 0;\n \n   /* Return the comp unit from OBJFILE that contains a symbol at\n      ADDRESS.  Return NULL if there is no such comp unit.  Unlike\n      find_pc_sect_compunit_symtab, any sort of symbol (not just text\n      symbols) can be considered, and only exact address matches are\n-     considered.  This pointer may be NULL.  */\n-  struct compunit_symtab *(*find_compunit_symtab_by_address)\n-    (struct objfile *objfile, CORE_ADDR address);\n+     considered.  */\n+  virtual struct compunit_symtab *find_compunit_symtab_by_address\n+    (struct objfile *objfile, CORE_ADDR address) = 0;\n \n   /* Call a callback for every file defined in OBJFILE whose symtab is\n      not already read in.  FUN is the callback.  It is passed the file's\n      FILENAME, the file's FULLNAME (if need_fullname is non-zero), and\n      the DATA passed to this function.  */\n-  void (*map_symbol_filenames) (struct objfile *objfile,\n-\t\t\t\tsymbol_filename_ftype *fun, void *data,\n-\t\t\t\tint need_fullname);\n+  virtual void map_symbol_filenames (struct objfile *objfile,\n+\t\t\t\t     symbol_filename_ftype *fun, void *data,\n+\t\t\t\t     int need_fullname) = 0;\n };\n \n+typedef std::unique_ptr<quick_symbol_functions> quick_symbol_functions_up;\n+\n #endif /* GDB_QUICK_SYMBOL_H */"
    },
    {
      "sha": "55865ab03b0ebce6bd791e6b0f0e070fd3e0ac4f",
      "filename": "gdb/symfile-debug.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/39298a5d973d5822ed7d09230f67cc83f72a06c2/gdb/symfile-debug.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/39298a5d973d5822ed7d09230f67cc83f72a06c2/gdb/symfile-debug.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symfile-debug.c?ref=39298a5d973d5822ed7d09230f67cc83f72a06c2",
      "patch": "@@ -328,7 +328,7 @@ objfile::find_compunit_symtab_by_address (CORE_ADDR address)\n \t\t      hex_string (address));\n \n   struct compunit_symtab *result = NULL;\n-  if (qf != nullptr && qf->find_compunit_symtab_by_address != NULL)\n+  if (qf != nullptr)\n     result = qf->find_compunit_symtab_by_address (this, address);\n \n   if (debug_symfile)\n@@ -348,7 +348,7 @@ objfile::lookup_global_symbol_language (const char *name,\n {\n   enum language result = language_unknown;\n \n-  if (qf != nullptr && qf->lookup_global_symbol_language != nullptr)\n+  if (qf != nullptr)\n     result = qf->lookup_global_symbol_language (this, name, domain,\n \t\t\t\t\t\tsymbol_found_p);\n   else"
    },
    {
      "sha": "d0b9da2138b9393f00d68d2480bf21497ec1aea5",
      "filename": "gdb/symfile.c",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/39298a5d973d5822ed7d09230f67cc83f72a06c2/gdb/symfile.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/39298a5d973d5822ed7d09230f67cc83f72a06c2/gdb/symfile.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/symfile.c?ref=39298a5d973d5822ed7d09230f67cc83f72a06c2",
      "patch": "@@ -904,7 +904,7 @@ syms_from_objfile_1 (struct objfile *objfile,\n   const int mainline = add_flags & SYMFILE_MAINLINE;\n \n   objfile_set_sym_fns (objfile, find_sym_fns (objfile->obfd));\n-  objfile->qf = &psym_functions;\n+  objfile->qf = make_psymbol_functions ();\n \n   if (objfile->sf == NULL)\n     {\n@@ -2555,7 +2555,7 @@ reread_symbols (void)\n \t     based on whether .gdb_index is present, and we need it to\n \t     start over.  PR symtab/15885  */\n \t  objfile_set_sym_fns (objfile, find_sym_fns (objfile->obfd));\n-\t  objfile->qf = &psym_functions;\n+\t  objfile->qf = make_psymbol_functions ();\n \n \t  build_objfile_section_table (objfile);\n "
    }
  ]
}