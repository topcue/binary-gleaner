{
  "sha": "22fe7df8c964c23f5760ecf9653af86ede8b5030",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MjJmZTdkZjhjOTY0YzIzZjU3NjBlY2Y5NjUzYWY4NmVkZThiNTAzMA==",
  "commit": {
    "author": {
      "name": "H.J. Lu",
      "email": "hjl.tools@gmail.com",
      "date": "2020-02-11T23:36:13Z"
    },
    "committer": {
      "name": "H.J. Lu",
      "email": "hjl.tools@gmail.com",
      "date": "2020-02-11T23:36:31Z"
    },
    "message": "Plugin: Treat each object as independent\n\nSince plugin treats each object as independent, we must do a fresh dlopen\nof plugin for each object.\n\n\tPR binutils/25355\n\t* plugin.c (try_claim): Always clean up for LTO wrapper.\n\t(try_load_plugin): Treat each object as independent.  Create a\n\tcopy for plugin name.",
    "tree": {
      "sha": "61d7b7af342621e302adacaf9b1a855afa55845e",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/61d7b7af342621e302adacaf9b1a855afa55845e"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/22fe7df8c964c23f5760ecf9653af86ede8b5030",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/22fe7df8c964c23f5760ecf9653af86ede8b5030",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/22fe7df8c964c23f5760ecf9653af86ede8b5030",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/22fe7df8c964c23f5760ecf9653af86ede8b5030/comments",
  "author": {
    "login": "hjl-tools",
    "id": 1072356,
    "node_id": "MDQ6VXNlcjEwNzIzNTY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/hjl-tools",
    "html_url": "https://github.com/hjl-tools",
    "followers_url": "https://api.github.com/users/hjl-tools/followers",
    "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}",
    "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions",
    "organizations_url": "https://api.github.com/users/hjl-tools/orgs",
    "repos_url": "https://api.github.com/users/hjl-tools/repos",
    "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}",
    "received_events_url": "https://api.github.com/users/hjl-tools/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "hjl-tools",
    "id": 1072356,
    "node_id": "MDQ6VXNlcjEwNzIzNTY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/hjl-tools",
    "html_url": "https://github.com/hjl-tools",
    "followers_url": "https://api.github.com/users/hjl-tools/followers",
    "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}",
    "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions",
    "organizations_url": "https://api.github.com/users/hjl-tools/orgs",
    "repos_url": "https://api.github.com/users/hjl-tools/repos",
    "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}",
    "received_events_url": "https://api.github.com/users/hjl-tools/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "69ed9b74b61359d43a6f5f5a295c3cfb7f3ee61c",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/69ed9b74b61359d43a6f5f5a295c3cfb7f3ee61c",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/69ed9b74b61359d43a6f5f5a295c3cfb7f3ee61c"
    }
  ],
  "stats": {
    "total": 83,
    "additions": 45,
    "deletions": 38
  },
  "files": [
    {
      "sha": "98a027e08c220a8da6bcc1ee8144928adcbbafa8",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/22fe7df8c964c23f5760ecf9653af86ede8b5030/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/22fe7df8c964c23f5760ecf9653af86ede8b5030/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=22fe7df8c964c23f5760ecf9653af86ede8b5030",
      "patch": "@@ -1,3 +1,10 @@\n+2020-02-11  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR binutils/25355\n+\t* plugin.c (try_claim): Always clean up for LTO wrapper.\n+\t(try_load_plugin): Treat each object as independent.  Create a\n+\tcopy for plugin name.\n+\n 2020-02-11  Nick Clifton  <nickc@redhat.com>\n \n \t* elf32-msp430.c (msp430_final_link_relocate): Always use longs"
    },
    {
      "sha": "d9416771545cd3f03f13a7b395495a895685705a",
      "filename": "bfd/plugin.c",
      "status": "modified",
      "additions": 38,
      "deletions": 38,
      "changes": 76,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/22fe7df8c964c23f5760ecf9653af86ede8b5030/bfd/plugin.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/22fe7df8c964c23f5760ecf9653af86ede8b5030/bfd/plugin.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/plugin.c?ref=22fe7df8c964c23f5760ecf9653af86ede8b5030",
      "patch": "@@ -549,9 +549,8 @@ try_claim (bfd *abfd)\n   struct ld_plugin_input_file file;\n \n   file.handle = abfd;\n-  if (!bfd_plugin_open_input (abfd, &file))\n-    return 0;\n-  if (current_plugin->claim_file)\n+  if (bfd_plugin_open_input (abfd, &file)\n+      && current_plugin->claim_file)\n     {\n       current_plugin->claim_file (&file, &claimed);\n       if (claimed)\n@@ -577,14 +576,18 @@ try_claim (bfd *abfd)\n \t    }\n \t}\n \n-      if (current_plugin->lto_wrapper)\n-\t{\n-\t  /* Clean up for LTO wrapper.  */\n-\t  unlink (current_plugin->resolution_file);\n-\t  free (current_plugin->resolution_option);\n-\t}\n+      close (file.fd);\n     }\n-  close (file.fd);\n+\n+  if (current_plugin->lto_wrapper)\n+    {\n+      /* Clean up for LTO wrapper.  NB: Resolution file and option\n+\t have been created regardless if an IR object is claimed or\n+\t not.  */\n+      unlink (current_plugin->resolution_file);\n+      free (current_plugin->resolution_option);\n+    }\n+\n   return claimed;\n }\n \n@@ -600,16 +603,15 @@ try_load_plugin (const char *pname, bfd *abfd, int *has_plugin_p)\n \n   *has_plugin_p = 0;\n \n-  /* NB: Each object is inddependent.  Reuse the previous plugin from\n-     the last LTO wrapper run will lead to wrong LTO data.  */\n-  if (current_plugin\n-      && current_plugin->handle\n-      && current_plugin->lto_wrapper\n-      && strcmp (current_plugin->plugin_name, pname) == 0)\n+  /* NB: Each object is independent.  Reuse the previous plugin from\n+     the last run will lead to wrong result.  */\n+  if (current_plugin)\n     {\n-      dlclose (current_plugin->handle);\n+      if (current_plugin->handle)\n+\tdlclose (current_plugin->handle);\n       memset (current_plugin, 0,\n \t      offsetof (struct plugin_list_entry, next));\n+      current_plugin = NULL;\n     }\n \n   plugin_handle = dlopen (pname, RTLD_NOW);\n@@ -622,31 +624,30 @@ try_load_plugin (const char *pname, bfd *abfd, int *has_plugin_p)\n   for (plugin_list_iter = plugin_list;\n        plugin_list_iter;\n        plugin_list_iter = plugin_list_iter->next)\n+    if (strcmp (plugin_list_iter->plugin_name, pname) == 0)\n+      break;\n+\n+  if (plugin_list_iter == NULL)\n     {\n-      if (plugin_handle == plugin_list_iter->handle)\n+      size_t length_plugin_name = strlen (pname) + 1;\n+      char *plugin_name = bfd_malloc (length_plugin_name);\n+      if (plugin_name == NULL)\n+\treturn 0;\n+      plugin_list_iter = bfd_malloc (sizeof *plugin_list_iter);\n+      if (plugin_list_iter == NULL)\n \t{\n-\t  dlclose (plugin_handle);\n-\t  if (!plugin_list_iter->claim_file)\n-\t    return 0;\n-\n-\t  register_claim_file (plugin_list_iter->claim_file);\n-\t  current_plugin = plugin_list_iter;\n-\t  goto have_claim_file;\n+\t  free (plugin_name);\n+\t  return 0;\n \t}\n-      else if (plugin_list_iter->lto_wrapper\n-\t       && strcmp (plugin_list_iter->plugin_name, pname) == 0)\n-\tgoto have_lto_wrapper;\n+      /* Make a copy of PNAME since PNAME from load_plugin () will be\n+\t freed.  */\n+      memcpy (plugin_name, pname, length_plugin_name);\n+      memset (plugin_list_iter, 0, sizeof (*plugin_list_iter));\n+      plugin_list_iter->plugin_name = plugin_name;\n+      plugin_list_iter->next = plugin_list;\n+      plugin_list = plugin_list_iter;\n     }\n \n-  plugin_list_iter = bfd_malloc (sizeof *plugin_list_iter);\n-  if (plugin_list_iter == NULL)\n-    return 0;\n-  memset (plugin_list_iter, 0, sizeof (*plugin_list_iter));\n-  plugin_list_iter->plugin_name = pname;\n-  plugin_list_iter->next = plugin_list;\n-  plugin_list = plugin_list_iter;\n-\n-have_lto_wrapper:\n   plugin_list_iter->handle = plugin_handle;\n \n   onload = dlsym (plugin_handle, \"onload\");\n@@ -716,7 +717,6 @@ try_load_plugin (const char *pname, bfd *abfd, int *has_plugin_p)\n       && setup_lto_wrapper_env (current_plugin))\n     return 0;\n \n-have_claim_file:\n   *has_plugin_p = 1;\n \n   abfd->plugin_format = bfd_plugin_no;"
    }
  ]
}