{
  "sha": "0ae9445d52b99182a541a6da7177665252f37af8",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MGFlOTQ0NWQ1MmI5OTE4MmE1NDFhNmRhNzE3NzY2NTI1MmYzN2FmOA==",
  "commit": {
    "author": {
      "name": "Sergey Belyashav",
      "email": "sergey.belyashov@gmail.com",
      "date": "2020-10-06T10:58:57Z"
    },
    "committer": {
      "name": "Nick Clifton",
      "email": "nickc@redhat.com",
      "date": "2020-10-06T10:58:57Z"
    },
    "message": "A small set of code improvements for the Z80 assembler.\n\n\tPR 26692\n\t* config/tc-z80.c (md_begin): Ensure that xpressions are empty\n\tbefore using them.\n\t(unify_indexed): Likewise.\n\t(z80_start_line_hook): Improve hash sign handling when SDCC\n\tcompatibility mode enabled.\n\t(md_parse_exp_not_indexed): Improve indirect addressing\n\tdetection.\n\t(md_pseudo_table): Accept hd64 as an alias of z810.",
    "tree": {
      "sha": "dc31ef07ed1dd8b1b7f6dd14d454ed49cdcac79e",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/dc31ef07ed1dd8b1b7f6dd14d454ed49cdcac79e"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/0ae9445d52b99182a541a6da7177665252f37af8",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0ae9445d52b99182a541a6da7177665252f37af8",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/0ae9445d52b99182a541a6da7177665252f37af8",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/0ae9445d52b99182a541a6da7177665252f37af8/comments",
  "author": {
    "login": "b-s-a",
    "id": 2833802,
    "node_id": "MDQ6VXNlcjI4MzM4MDI=",
    "avatar_url": "https://avatars.githubusercontent.com/u/2833802?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/b-s-a",
    "html_url": "https://github.com/b-s-a",
    "followers_url": "https://api.github.com/users/b-s-a/followers",
    "following_url": "https://api.github.com/users/b-s-a/following{/other_user}",
    "gists_url": "https://api.github.com/users/b-s-a/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/b-s-a/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/b-s-a/subscriptions",
    "organizations_url": "https://api.github.com/users/b-s-a/orgs",
    "repos_url": "https://api.github.com/users/b-s-a/repos",
    "events_url": "https://api.github.com/users/b-s-a/events{/privacy}",
    "received_events_url": "https://api.github.com/users/b-s-a/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "nickclifton",
    "id": 31441682,
    "node_id": "MDQ6VXNlcjMxNDQxNjgy",
    "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickclifton",
    "html_url": "https://github.com/nickclifton",
    "followers_url": "https://api.github.com/users/nickclifton/followers",
    "following_url": "https://api.github.com/users/nickclifton/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions",
    "organizations_url": "https://api.github.com/users/nickclifton/orgs",
    "repos_url": "https://api.github.com/users/nickclifton/repos",
    "events_url": "https://api.github.com/users/nickclifton/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickclifton/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "043f5c63f06e9a376f189df54507666f3d30ed77",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/043f5c63f06e9a376f189df54507666f3d30ed77",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/043f5c63f06e9a376f189df54507666f3d30ed77"
    }
  ],
  "stats": {
    "total": 40,
    "additions": 33,
    "deletions": 7
  },
  "files": [
    {
      "sha": "30019327d65b399ad24cfad595ba6c604f88cd22",
      "filename": "gas/ChangeLog",
      "status": "modified",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0ae9445d52b99182a541a6da7177665252f37af8/gas/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0ae9445d52b99182a541a6da7177665252f37af8/gas/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ChangeLog?ref=0ae9445d52b99182a541a6da7177665252f37af8",
      "patch": "@@ -1,3 +1,15 @@\n+2020-10-06  Sergey Belyashav  <sergey.belyashov@gmail.com>\n+\n+\tPR 26692\n+\t* config/tc-z80.c (md_begin): Ensure that xpressions are empty\n+\tbefore using them.\n+\t(unify_indexed): Likewise.\n+\t(z80_start_line_hook): Improve hash sign handling when SDCC\n+\tcompatibility mode enabled.\n+\t(md_parse_exp_not_indexed): Improve indirect addressing\n+\tdetection.\n+\t(md_pseudo_table): Accept hd64 as an alias of z810.\n+\n 2020-10-06  Alan Modra  <amodra@gmail.com>\n \n \t* testsuite/gas/elf/sh-link-zero.s: Don't start directives in"
    },
    {
      "sha": "e5dc877674264f59fec72dac2c9a1f3ce82defde",
      "filename": "gas/config/tc-z80.c",
      "status": "modified",
      "additions": 21,
      "deletions": 7,
      "changes": 28,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/0ae9445d52b99182a541a6da7177665252f37af8/gas/config/tc-z80.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/0ae9445d52b99182a541a6da7177665252f37af8/gas/config/tc-z80.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-z80.c?ref=0ae9445d52b99182a541a6da7177665252f37af8",
      "patch": "@@ -492,6 +492,9 @@ md_begin (void)\n   unsigned int i, j, k;\n   char buf[BUFLEN];\n \n+  memset (&reg, 0, sizeof (reg));\n+  memset (&nul, 0, sizeof (nul));\n+\n   if (ins_ok & INS_EZ80)   /* if select EZ80 cpu then */\n     listing_lhs_width = 6; /* use 6 bytes per line in the listing */\n \n@@ -612,9 +615,16 @@ z80_start_line_hook (void)\n \t      return 1;\n \t    }\n \t  break;\n-\tcase '#':\n-\t  if (sdcc_compat)\n-\t    *p = (*skip_space (p + 1) == '(') ? '+' : ' ';\n+\tcase '#': /* force to use next expression as immediate value in SDCC */\n+\t  if (!sdcc_compat)\n+\t   break;\n+\t  if (ISSPACE(p[1]) && *skip_space (p + 1) == '(')\n+\t    { /* ld a,# (expr)... -> ld a,0+(expr)... */\n+\t      *p++ = '0';\n+\t      *p = '+';\n+\t    }\n+\t  else /* ld a,#(expr)... -> ld a,+(expr); ld a,#expr -> ld a, expr */\n+\t    *p = (p[1] == '(') ? '+' : ' ';\n \t  break;\n \t}\n     }\n@@ -871,6 +881,7 @@ parse_exp_not_indexed (const char *s, expressionS *op)\n   int indir;\n   int make_shift = -1;\n \n+  memset (op, 0, sizeof (*op));\n   p = skip_space (s);\n   if (sdcc_compat && (*p == '<' || *p == '>'))\n     {\n@@ -887,7 +898,11 @@ parse_exp_not_indexed (const char *s, expressionS *op)\n       p = skip_space (p);\n     }\n \n-  op->X_md = indir = is_indir (p);\n+  if (make_shift == -1)\n+    indir = is_indir (p);\n+  else\n+    indir = 0;\n+  op->X_md = indir;\n   if (indir && (ins_ok & INS_GBZ80))\n     { /* check for instructions like ld a,(hl+), ld (hl-),a */\n       p = skip_space (p+1);\n@@ -950,10 +965,9 @@ unify_indexed (expressionS *op)\n   if (O_subtract == op->X_op)\n     {\n       expressionS minus;\n+      memset (&minus, 0, sizeof (minus));\n       minus.X_op = O_uminus;\n-      minus.X_add_number = 0;\n       minus.X_add_symbol = op->X_op_symbol;\n-      minus.X_op_symbol = 0;\n       op->X_op_symbol = make_expr_symbol (&minus);\n       op->X_op = O_add;\n     }\n@@ -966,7 +980,6 @@ unify_indexed (expressionS *op)\n       add.X_op = O_symbol;\n       add.X_add_number = op->X_add_number;\n       add.X_add_symbol = op->X_op_symbol;\n-      add.X_op_symbol = 0;\n       op->X_add_symbol = make_expr_symbol (&add);\n     }\n   else\n@@ -3444,6 +3457,7 @@ const pseudo_typeS md_pseudo_table[] =\n   { \".r800\", set_inss, INS_R800},\n   { \".set\", s_set, 0},\n   { \".z180\", set_inss, INS_Z180},\n+  { \".hd64\", set_inss, INS_Z180},\n   { \".z80\", set_inss, INS_Z80},\n   { \".z80n\", set_inss, INS_Z80N},\n   { \"db\" , emit_data, 1},"
    }
  ]
}