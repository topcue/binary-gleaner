{
  "sha": "333f35b6315f6ed71db4fb76bfc1ebb7ec347d43",
  "node_id": "C_kwDOANOeidoAKDMzM2YzNWI2MzE1ZjZlZDcxZGI0ZmI3NmJmYzFlYmI3ZWMzNDdkNDM",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2021-11-02T16:21:31Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2021-11-16T02:47:27Z"
    },
    "message": "gdb: rework \"set debuginfod\" commands\n\nAs discussed here [1], do some re-work in the \"set debuginfod commands\".\n\nFirst, use \"set debuginfod enabled on/off/ask\" instead of \"set\ndebuginfod on/off/ask\".  This is more MI-friendly, and it gives an\noutput that makes more sense in \"info set\", for example.\n\nThen, make the show commands not call \"error\" when debuginfod support is\nnot compiled in.  This makes the commands \"show\" and \"show debuginfod\"\nstop early, breaking gdb.base/default.exp:\n\n    Running /home/smarchi/src/binutils-gdb/gdb/testsuite/gdb.base/default.exp ...\n    FAIL: gdb.base/default.exp: info set\n    FAIL: gdb.base/default.exp: show\n\n - Make the \"debuginfod enabled\" setting default to \"off\" when debuginfod\n   support is not compiled in, and \"ask\" otherwise.\n - Make the setter of \"debuginfod enabled\" error out when debuginfod\n   support is not compiled in, so that \"debuginfod enabled\" will always\n   remain \"off\" in that case.\n - Make the setter of \"debuginfod verbose\" work in any case.  I don't\n   see the harm in letting the user change that setting, since the user will\n   hit an error if they try to enable the use of debuginfod.\n - I would do the same for the \"debuginfod urls\" setter, but because\n   this one needs to see the DEBUGINFOD_URLS_ENV_VAR macro, provided by\n   libdebuginfod, I made that one error out as well if debuginfod\n   support is not compiled it (otherwise, I would have left it like\n   \"debuginfod verbose\".  Alternatively, we could hard-code\n   \"DEBUGINFOD_URLS\" in the code (in fact, it was prior to this patch,\n   but I think it was an oversight, as other spots use\n   DEBUGINFOD_URLS_ENV_VAR), or use a dummy string to store the setting,\n   but I don't really see the value in that.\n\nRename debuginfod_enable to debuginfod_enabled, just so it matches the\nsetting name.\n\n[1] https://sourceware.org/pipermail/gdb-patches/2021-October/182937.html\n\nChange-Id: I45fdb2993f668226a5639228951362b7800f09d5\nCo-Authored-By: Aaron Merey <amerey@redhat.com>",
    "tree": {
      "sha": "2f6fa67e0af759a8d0f6ebaa36d1a179a9b1ec23",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/2f6fa67e0af759a8d0f6ebaa36d1a179a9b1ec23"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/333f35b6315f6ed71db4fb76bfc1ebb7ec347d43",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/333f35b6315f6ed71db4fb76bfc1ebb7ec347d43",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/333f35b6315f6ed71db4fb76bfc1ebb7ec347d43",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/333f35b6315f6ed71db4fb76bfc1ebb7ec347d43/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "aa70a99eb03444f41f50e100c9b1e00e9a32cde9",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/aa70a99eb03444f41f50e100c9b1e00e9a32cde9",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/aa70a99eb03444f41f50e100c9b1e00e9a32cde9"
    }
  ],
  "stats": {
    "total": 345,
    "additions": 142,
    "deletions": 203
  },
  "files": [
    {
      "sha": "2e1837da9491cac9dcc1045c0cc3a6e52a597a70",
      "filename": "gdb/debuginfod-support.c",
      "status": "modified",
      "additions": 126,
      "deletions": 188,
      "changes": 314,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/333f35b6315f6ed71db4fb76bfc1ebb7ec347d43/gdb/debuginfod-support.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/333f35b6315f6ed71db4fb76bfc1ebb7ec347d43/gdb/debuginfod-support.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/debuginfod-support.c?ref=333f35b6315f6ed71db4fb76bfc1ebb7ec347d43",
      "patch": "@@ -32,8 +32,22 @@ static const char debuginfod_on[] = \"on\";\n static const char debuginfod_off[] = \"off\";\n static const char debuginfod_ask[] = \"ask\";\n \n-static const char *debuginfod_enable = debuginfod_ask;\n-static unsigned debuginfod_verbose = 1;\n+static const char *debuginfod_enabled_enum[] =\n+{\n+  debuginfod_on,\n+  debuginfod_off,\n+  debuginfod_ask,\n+  nullptr\n+};\n+\n+static const char *debuginfod_enabled =\n+#if defined(HAVE_LIBDEBUGINFOD)\n+  debuginfod_ask;\n+#else\n+  debuginfod_off;\n+#endif\n+\n+static unsigned int debuginfod_verbose = 1;\n \n #ifndef HAVE_LIBDEBUGINFOD\n scoped_fd\n@@ -56,70 +70,6 @@ debuginfod_debuginfo_query (const unsigned char *build_id,\n \n #define NO_IMPL _(\"Support for debuginfod is not compiled into GDB.\")\n \n-/* Stub set/show commands that indicate debuginfod is not supported.  */\n-\n-static void\n-set_debuginfod_on_command (const char *args, int from_tty)\n-{\n-  error (NO_IMPL);\n-  debuginfod_enable = debuginfod_off;\n-}\n-\n-static void\n-set_debuginfod_off_command (const char *args, int from_tty)\n-{\n-  error (NO_IMPL);\n-  debuginfod_enable = debuginfod_off;\n-}\n-\n-static void\n-set_debuginfod_ask_command (const char *args, int from_tty)\n-{\n-  error (NO_IMPL);\n-  debuginfod_enable = debuginfod_off;\n-}\n-\n-static void\n-show_debuginfod_status_command (const char *args, int from_tty)\n-{\n-  error (NO_IMPL);\n-}\n-\n-static void\n-set_debuginfod_urls_command (const std::string& urls)\n-{\n-  error (NO_IMPL);\n-}\n-\n-static const std::string&\n-get_debuginfod_urls_command ()\n-{\n-  static std::string empty;\n-  return empty;\n-}\n-\n-static void\n-show_debuginfod_urls_command (struct ui_file *file, int from_tty,\n-\t\t\t      struct cmd_list_element *cmd, const char *value)\n-{\n-  error (NO_IMPL);\n-}\n-\n-static void\n-set_debuginfod_verbose_command (const char *args, int from_tty,\n-\t\t\t\tstruct cmd_list_element *c)\n-{\n-  error (NO_IMPL);\n-  debuginfod_verbose = 0;\n-}\n-\n-static void\n-show_debuginfod_verbose_command (struct ui_file *file, int from_tty,\n-\t\t\t\t struct cmd_list_element *cmd,\n-\t\t\t\t const char *value)\n-{\n-  error (NO_IMPL);\n-}\n #else\n #include <elfutils/debuginfod.h>\n \n@@ -147,96 +97,6 @@ struct debuginfod_client_deleter\n using debuginfod_client_up\n   = std::unique_ptr<debuginfod_client, debuginfod_client_deleter>;\n \n-/* Enable debuginfod.  */\n-\n-static void\n-set_debuginfod_on_command (const char *args, int from_tty)\n-{\n-  debuginfod_enable = debuginfod_on;\n-}\n-\n-/* Disable debuginfod.  */\n-\n-static void\n-set_debuginfod_off_command (const char *args, int from_tty)\n-{\n-  debuginfod_enable = debuginfod_off;\n-}\n-\n-/* Before next query, ask user whether to enable debuginfod.  */\n-\n-static void\n-set_debuginfod_ask_command (const char *args, int from_tty)\n-{\n-  debuginfod_enable = debuginfod_ask;\n-}\n-\n-/* Show whether debuginfod is enabled.  */\n-\n-static void\n-show_debuginfod_status_command (const char *args, int from_tty)\n-{\n-  printf_unfiltered (_(\"Debuginfod functionality is currently set to \" \\\n-\t\t     \"\\\"%s\\\".\\n\"), debuginfod_enable);\n-}\n-\n-/* Set the URLs that debuginfod will query.  */\n-\n-static void\n-set_debuginfod_urls_command (const std::string& urls)\n-{\n-  if (setenv (\"DEBUGINFOD_URLS\", urls.c_str (), 1) != 0)\n-    warning (_(\"Unable to set debuginfod URLs: %s\"), safe_strerror (errno));\n-}\n-\n-/* Get current debuginfod URLs.  */\n-\n-static const std::string&\n-get_debuginfod_urls_command ()\n-{\n-  static std::string urls;\n-  const char *envvar = getenv (DEBUGINFOD_URLS_ENV_VAR);\n-\n-  if (envvar != nullptr)\n-    urls = envvar;\n-  else\n-    urls.clear ();\n-\n-  return urls;\n-}\n-\n-/* Show the URLs that debuginfod will query.  */\n-\n-static void\n-show_debuginfod_urls_command (struct ui_file *file, int from_tty,\n-\t\t\t      struct cmd_list_element *cmd, const char *value)\n-{\n-  if (value == nullptr || value[0] == '\\0')\n-    fprintf_unfiltered (file, _(\"Debuginfod URLs have not been set.\\n\"));\n-  else\n-    fprintf_filtered (file, _(\"Debuginfod URLs are currently set to:\\n%s\\n\"),\n-\t\t      value);\n-}\n-\n-/* No-op setter used for compatibility when gdb is built without debuginfod.  */\n-\n-static void\n-set_debuginfod_verbose_command (const char *args, int from_tty,\n-\t\t\t\tstruct cmd_list_element *c)\n-{\n-  return;\n-}\n-\n-/* Show verbosity.  */\n-\n-static void\n-show_debuginfod_verbose_command (struct ui_file *file, int from_tty,\n-\t\t\t\t struct cmd_list_element *cmd, const char *value)\n-{\n-  fprintf_filtered (file, _(\"Debuginfod verbose output is set to %s.\\n\"),\n-\t\t    value);\n-}\n-\n static int\n progressfn (debuginfod_client *c, long cur, long total)\n {\n@@ -293,15 +153,15 @@ get_debuginfod_client ()\n    whether to enable debuginfod.  */\n \n static bool\n-debuginfod_enabled ()\n+debuginfod_is_enabled ()\n {\n   const char *urls = getenv (DEBUGINFOD_URLS_ENV_VAR);\n \n   if (urls == nullptr || urls[0] == '\\0'\n-      || debuginfod_enable == debuginfod_off)\n+      || debuginfod_enabled == debuginfod_off)\n     return false;\n \n-  if (debuginfod_enable == debuginfod_ask)\n+  if (debuginfod_enabled == debuginfod_ask)\n     {\n       int resp = nquery (_(\"\\nThis GDB supports auto-downloading debuginfo \" \\\n \t\t\t   \"from the following URLs:\\n%s\\nEnable debuginfod \" \\\n@@ -310,16 +170,16 @@ debuginfod_enabled ()\n       if (!resp)\n \t{\n \t  printf_filtered (_(\"Debuginfod has been disabled.\\nTo make this \" \\\n-\t\t\t     \"setting permanent, add \\'set debuginfod off\\' \" \\\n-\t\t\t     \"to .gdbinit.\\n\"));\n-\t  debuginfod_enable = debuginfod_off;\n+\t\t\t     \"setting permanent, add \\'set debuginfod \" \\\n+\t\t\t     \"enabled off\\' to .gdbinit.\\n\"));\n+\t  debuginfod_enabled = debuginfod_off;\n \t  return false;\n \t}\n \n       printf_filtered (_(\"Debuginfod has been enabled.\\nTo make this \" \\\n-\t\t\t \"setting permanent, add \\'set debuginfod on\\' \" \\\n-\t\t\t \"to .gdbinit.\\n\"));\n-      debuginfod_enable = debuginfod_on;\n+\t\t\t \"setting permanent, add \\'set debuginfod enabled \" \\\n+\t\t\t \"on\\' to .gdbinit.\\n\"));\n+      debuginfod_enabled = debuginfod_on;\n     }\n \n   return true;\n@@ -333,7 +193,7 @@ debuginfod_source_query (const unsigned char *build_id,\n \t\t\t const char *srcpath,\n \t\t\t gdb::unique_xmalloc_ptr<char> *destname)\n {\n-  if (!debuginfod_enabled ())\n+  if (!debuginfod_is_enabled ())\n     return scoped_fd (-ENOSYS);\n \n   debuginfod_client *c = get_debuginfod_client ();\n@@ -370,7 +230,7 @@ debuginfod_debuginfo_query (const unsigned char *build_id,\n \t\t\t    const char *filename,\n \t\t\t    gdb::unique_xmalloc_ptr<char> *destname)\n {\n-  if (!debuginfod_enabled ())\n+  if (!debuginfod_is_enabled ())\n     return scoped_fd (-ENOSYS);\n \n   debuginfod_client *c = get_debuginfod_client ();\n@@ -398,6 +258,90 @@ debuginfod_debuginfo_query (const unsigned char *build_id,\n }\n #endif\n \n+/* Set callback for \"set debuginfod enabled\".  */\n+\n+static void\n+set_debuginfod_enabled (const char *value)\n+{\n+#if defined(HAVE_LIBDEBUGINFOD)\n+  debuginfod_enabled = value;\n+#else\n+  error (NO_IMPL);\n+#endif\n+}\n+\n+/* Get callback for \"set debuginfod enabled\".  */\n+\n+static const char *\n+get_debuginfod_enabled ()\n+{\n+  return debuginfod_enabled;\n+}\n+\n+/* Show callback for \"set debuginfod enabled\".  */\n+\n+static void\n+show_debuginfod_enabled (ui_file *file, int from_tty, cmd_list_element *cmd,\n+\t\t\t const char *value)\n+{\n+  printf_unfiltered (_(\"Debuginfod functionality is currently set to \"\n+\t\t       \"\\\"%s\\\".\\n\"), debuginfod_enabled);\n+}\n+\n+/* Set callback for \"set debuginfod urls\".  */\n+\n+static void\n+set_debuginfod_urls (const std::string &urls)\n+{\n+#if defined(HAVE_LIBDEBUGINFOD)\n+  if (setenv (DEBUGINFOD_URLS_ENV_VAR, urls.c_str (), 1) != 0)\n+    warning (_(\"Unable to set debuginfod URLs: %s\"), safe_strerror (errno));\n+#else\n+  error (NO_IMPL);\n+#endif\n+}\n+\n+/* Get callback for \"set debuginfod urls\".  */\n+\n+static const std::string&\n+get_debuginfod_urls ()\n+{\n+  static std::string urls;\n+#if defined(HAVE_LIBDEBUGINFOD)\n+  const char *envvar = getenv (DEBUGINFOD_URLS_ENV_VAR);\n+\n+  if (envvar != nullptr)\n+    urls = envvar;\n+  else\n+    urls.clear ();\n+#endif\n+\n+  return urls;\n+}\n+\n+/* Show callback for \"set debuginfod urls\".  */\n+\n+static void\n+show_debuginfod_urls (ui_file *file, int from_tty, cmd_list_element *cmd,\n+\t\t      const char *value)\n+{\n+  if (value[0] == '\\0')\n+    fprintf_unfiltered (file, _(\"Debuginfod URLs have not been set.\\n\"));\n+  else\n+    fprintf_filtered (file, _(\"Debuginfod URLs are currently set to:\\n%s\\n\"),\n+\t\t      value);\n+}\n+\n+/* Show callback for \"set debuginfod verbose\".  */\n+\n+static void\n+show_debuginfod_verbose_command (ui_file *file, int from_tty,\n+\t\t\t\t cmd_list_element *cmd, const char *value)\n+{\n+  fprintf_filtered (file, _(\"Debuginfod verbose output is set to %s.\\n\"),\n+\t\t    value);\n+}\n+\n /* Register debuginfod commands.  */\n \n void _initialize_debuginfod ();\n@@ -412,23 +356,17 @@ _initialize_debuginfod ()\n \t\t\t  &show_debuginfod_prefix_list,\n \t\t\t  &setlist, &showlist);\n \n-  /* set debuginfod on */\n-  add_cmd (\"on\", class_run, set_debuginfod_on_command,\n-\t   _(\"Enable debuginfod.\"), &set_debuginfod_prefix_list);\n-\n-  /* set debuginfod off */\n-  add_cmd (\"off\", class_run, set_debuginfod_off_command,\n-\t   _(\"Disable debuginfod.\"), &set_debuginfod_prefix_list);\n-\n-  /* set debuginfod ask */\n-  add_cmd (\"ask\", class_run, set_debuginfod_ask_command, _(\"\\\n-Ask the user whether to enable debuginfod before performing the next query.\"),\n-\t   &set_debuginfod_prefix_list);\n-\n-  /* show debuginfod status */\n-  add_cmd (\"status\", class_run, show_debuginfod_status_command,\n-\t   _(\"Show whether debuginfod is set to \\\"on\\\", \\\"off\\\" or \\\"ask\\\".\"),\n-\t   &show_debuginfod_prefix_list);\n+  add_setshow_enum_cmd (\"enabled\", class_run, debuginfod_enabled_enum,\n+\t\t\t_(\"Set whether to use debuginfod.\"),\n+\t\t\t_(\"Show whether to use debuginfod.\"),\n+\t\t\t_(\"\\\n+When on, enable the use of debuginfod to download missing debug info and\\n\\\n+source files.\"),\n+\t\t\tset_debuginfod_enabled,\n+\t\t\tget_debuginfod_enabled,\n+\t\t\tshow_debuginfod_enabled,\n+\t\t\t&set_debuginfod_prefix_list,\n+\t\t\t&show_debuginfod_prefix_list);\n \n   /* set/show debuginfod urls */\n   add_setshow_string_noescape_cmd (\"urls\", class_run, _(\"\\\n@@ -437,9 +375,9 @@ Show the list of debuginfod server URLs.\"), _(\"\\\n Manage the space-separated list of debuginfod server URLs that GDB will query \\\n when missing debuginfo, executables or source files.\\nThe default value is \\\n copied from the DEBUGINFOD_URLS environment variable.\"),\n-\t\t\t\t   set_debuginfod_urls_command,\n-\t\t\t\t   get_debuginfod_urls_command,\n-\t\t\t\t   show_debuginfod_urls_command,\n+\t\t\t\t   set_debuginfod_urls,\n+\t\t\t\t   get_debuginfod_urls,\n+\t\t\t\t   show_debuginfod_urls,\n \t\t\t\t   &set_debuginfod_prefix_list,\n \t\t\t\t   &show_debuginfod_prefix_list);\n \n@@ -450,7 +388,7 @@ Set verbosity of debuginfod output.\"), _(\"\\\n Show debuginfod debugging.\"), _(\"\\\n When set to a non-zero value, display verbose output for each debuginfod \\\n query.\\nTo disable, set to zero.  Verbose output is displayed by default.\"),\n-\t\t\t     set_debuginfod_verbose_command,\n+\t\t\t     nullptr,\n \t\t\t     show_debuginfod_verbose_command,\n \t\t\t     &set_debuginfod_prefix_list,\n \t\t\t     &show_debuginfod_prefix_list);"
    },
    {
      "sha": "f6d221f003e4abbd52f5206e4d6ca43eb15cf9c0",
      "filename": "gdb/doc/gdb.texinfo",
      "status": "modified",
      "additions": 14,
      "deletions": 13,
      "changes": 27,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/333f35b6315f6ed71db4fb76bfc1ebb7ec347d43/gdb/doc/gdb.texinfo",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/333f35b6315f6ed71db4fb76bfc1ebb7ec347d43/gdb/doc/gdb.texinfo",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/doc/gdb.texinfo?ref=333f35b6315f6ed71db4fb76bfc1ebb7ec347d43",
      "patch": "@@ -47114,27 +47114,28 @@ regarding @code{debuginfod}.\n @value{GDBN} provides the following commands for configuring @code{debuginfod}.\n \n @table @code\n-@kindex set debuginfod\n-@anchor{set debuginfod}\n-@item set debuginfod\n-@itemx set debuginfod on\n+@kindex set debuginfod enabled\n+@anchor{set debuginfod enabled}\n+@item set debuginfod enabled\n+@itemx set debuginfod enabled on\n @cindex enable debuginfod\n @value{GDBN} will attempt to query @code{debuginfod} servers when missing debug\n info or source files.\n \n-@item set debuginfod off\n+@item set debuginfod enabled off\n @value{GDBN} will not attempt to query @code{debuginfod} servers when missing\n-debug info or source files.  By default, @code{debuginfod} is set to @code{off}\n-for non-interactive sessions.\n+debug info or source files.  By default, @code{debuginfod enabled} is set to\n+@code{off} for non-interactive sessions.\n \n-@item set debuginfod ask\n+@item set debuginfod enabled ask\n @value{GDBN} will prompt the user to enable or disable @code{debuginfod} before\n-attempting to perform the next query.  By default, @code{debuginfod} is set to\n-@code{ask} for interactive sessions.\n+attempting to perform the next query.  By default, @code{debuginfod enabled}\n+is set to @code{ask} for interactive sessions.\n \n-@kindex show debuginfod status\n-@item show debuginfod status\n-Show whether @code{debuginfod} is set to @code{on}, @code{off} or @code{ask}.\n+@kindex show debuginfod enabled\n+@item show debuginfod enabled\n+Display whether @code{debuginfod enabled} is set to @code{on}, @code{off} or\n+@code{ask}.\n \n @kindex set debuginfod urls\n @cindex configure debuginfod URLs"
    },
    {
      "sha": "757bd201b178de1327455d010a01fcb73fd73b08",
      "filename": "gdb/testsuite/gdb.debuginfod/fetch_src_and_symbols.exp",
      "status": "modified",
      "additions": 2,
      "deletions": 2,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/333f35b6315f6ed71db4fb76bfc1ebb7ec347d43/gdb/testsuite/gdb.debuginfod/fetch_src_and_symbols.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/333f35b6315f6ed71db4fb76bfc1ebb7ec347d43/gdb/testsuite/gdb.debuginfod/fetch_src_and_symbols.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.debuginfod/fetch_src_and_symbols.exp?ref=333f35b6315f6ed71db4fb76bfc1ebb7ec347d43",
      "patch": "@@ -246,15 +246,15 @@ proc local_url { } {\n     clean_restart\n     gdb_test \"file $binfile\" \".*No debugging symbols.*\" \\\n \t\"file [file tail $binfile] cmd\"\n-    gdb_test_no_output \"set debuginfod off\"\n+    gdb_test_no_output \"set debuginfod enabled off\"\n     gdb_test_no_output \"set debuginfod urls http://127.0.0.1:$port\"\n \n     # gdb shouldn't find the debuginfo since debuginfod has been disabled\n     gdb_test \"file $binfile\" \".*No debugging symbols.*\" \\\n \t\"file [file tail $binfile] cmd off\"\n \n     # Enable debuginfod and fetch the debuginfo\n-    gdb_test_no_output \"set debuginfod on\"\n+    gdb_test_no_output \"set debuginfod enabled on\"\n     gdb_test \"file $binfile\" \".*Reading symbols from.*debuginfo.*\" \\\n \t\"file [file tail $binfile] cmd on\"\n }"
    }
  ]
}