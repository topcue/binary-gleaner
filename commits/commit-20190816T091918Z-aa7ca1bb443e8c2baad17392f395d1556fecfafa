{
  "sha": "aa7ca1bb443e8c2baad17392f395d1556fecfafa",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YWE3Y2ExYmI0NDNlOGMyYmFhZDE3MzkyZjM5NWQxNTU2ZmVjZmFmYQ==",
  "commit": {
    "author": {
      "name": "Alan Hayward",
      "email": "alan.hayward@arm.com",
      "date": "2019-08-16T09:19:18Z"
    },
    "committer": {
      "name": "Alan Hayward",
      "email": "alan.hayward@arm.com",
      "date": "2019-08-16T09:19:18Z"
    },
    "message": "Move [PAC] into a new MI field addr_flags\n\nAdd a new print_pc which prints both the PC and a new field addr_flags.\nCall this wherever the PC is printed in stack.c.\n\nAdd a new gdbarch method get_pc_address_flags to obtain the addr_flag\ncontents. By default returns an empty string, on AArch64 this returns\nPAC if the address has been masked in the frame.\n\nDocument this in the manual and NEWS file.\n\ngdb/ChangeLog:\n\n\t* NEWS (Other MI changes): New subsection.\n\t* aarch64-tdep.c (aarch64_get_pc_address_flags): New function.\n\t(aarch64_gdbarch_init): Add aarch64_get_pc_address_flags.\n\t* arch-utils.c (default_get_pc_address_flags): New function.\n\t* arch-utils.h (default_get_pc_address_flags): New declaration.\n\t* gdbarch.sh: Add get_pc_address_flags.\n\t* gdbarch.c: Regenerate.\n\t* gdbarch.h: Likewise.\n\t* stack.c (print_pc): New function.\n\t(print_frame_info) (print_frame): Call print_pc.\n\ngdb/doc/ChangeLog:\n\n\t* gdb.texinfo (AArch64 Pointer Authentication)\n\t(GDB/MI Breakpoint Information) (Frame Information): Document\n\taddr_field.",
    "tree": {
      "sha": "a5a8006f5d93879956ad07a0a184bc657e0fc69e",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/a5a8006f5d93879956ad07a0a184bc657e0fc69e"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/aa7ca1bb443e8c2baad17392f395d1556fecfafa",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/aa7ca1bb443e8c2baad17392f395d1556fecfafa",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/aa7ca1bb443e8c2baad17392f395d1556fecfafa",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/aa7ca1bb443e8c2baad17392f395d1556fecfafa/comments",
  "author": {
    "login": "a74nh",
    "id": 4146708,
    "node_id": "MDQ6VXNlcjQxNDY3MDg=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4146708?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/a74nh",
    "html_url": "https://github.com/a74nh",
    "followers_url": "https://api.github.com/users/a74nh/followers",
    "following_url": "https://api.github.com/users/a74nh/following{/other_user}",
    "gists_url": "https://api.github.com/users/a74nh/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/a74nh/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/a74nh/subscriptions",
    "organizations_url": "https://api.github.com/users/a74nh/orgs",
    "repos_url": "https://api.github.com/users/a74nh/repos",
    "events_url": "https://api.github.com/users/a74nh/events{/privacy}",
    "received_events_url": "https://api.github.com/users/a74nh/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "a74nh",
    "id": 4146708,
    "node_id": "MDQ6VXNlcjQxNDY3MDg=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4146708?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/a74nh",
    "html_url": "https://github.com/a74nh",
    "followers_url": "https://api.github.com/users/a74nh/followers",
    "following_url": "https://api.github.com/users/a74nh/following{/other_user}",
    "gists_url": "https://api.github.com/users/a74nh/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/a74nh/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/a74nh/subscriptions",
    "organizations_url": "https://api.github.com/users/a74nh/orgs",
    "repos_url": "https://api.github.com/users/a74nh/repos",
    "events_url": "https://api.github.com/users/a74nh/events{/privacy}",
    "received_events_url": "https://api.github.com/users/a74nh/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "fdfc8cf7f04e2f4d24ec9fff331ebd71a2e768a3",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/fdfc8cf7f04e2f4d24ec9fff331ebd71a2e768a3",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/fdfc8cf7f04e2f4d24ec9fff331ebd71a2e768a3"
    }
  ],
  "stats": {
    "total": 130,
    "additions": 120,
    "deletions": 10
  },
  "files": [
    {
      "sha": "08a77e8c82fad6a843b1879b472346fce14c4aea",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 13,
      "deletions": 0,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aa7ca1bb443e8c2baad17392f395d1556fecfafa/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aa7ca1bb443e8c2baad17392f395d1556fecfafa/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=aa7ca1bb443e8c2baad17392f395d1556fecfafa",
      "patch": "@@ -1,3 +1,16 @@\n+2019-08-16  Alan Hayward  <alan.hayward@arm.com>\n+\n+\t* NEWS (Other MI changes): New subsection.\n+\t* aarch64-tdep.c (aarch64_get_pc_address_flags): New function.\n+\t(aarch64_gdbarch_init): Add aarch64_get_pc_address_flags.\n+\t* arch-utils.c (default_get_pc_address_flags): New function.\n+\t* arch-utils.h (default_get_pc_address_flags): New declaration.\n+\t* gdbarch.sh: Add get_pc_address_flags.\n+\t* gdbarch.c: Regenerate.\n+\t* gdbarch.h: Likewise.\n+\t* stack.c (print_pc): New function.\n+\t(print_frame_info) (print_frame): Call print_pc.\n+\n 2019-08-16  Tom de Vries  <tdevries@suse.de>\n \n \t* maint.c (maintenance_info_sections): Also handle !ALLOBJ case using"
    },
    {
      "sha": "0a4e0f260f2cffa04bb0ddae3a06790e11b0bb0d",
      "filename": "gdb/NEWS",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aa7ca1bb443e8c2baad17392f395d1556fecfafa/gdb/NEWS",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aa7ca1bb443e8c2baad17392f395d1556fecfafa/gdb/NEWS",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/NEWS?ref=aa7ca1bb443e8c2baad17392f395d1556fecfafa",
      "patch": "@@ -287,6 +287,13 @@ maint show test-options-completion-result\n   These can be used to catch C++ exceptions in a similar fashion to\n   the CLI commands 'catch throw', 'catch rethrow', and 'catch catch'.\n \n+* Other MI changes\n+\n+ ** Backtraces and frames include a new optional field addr_flags which is\n+    given after the addr field.  On AArch64 this contains PAC if the address\n+    has been masked in the frame.  On all other targets the field is not\n+    present.\n+\n * Testsuite\n \n   The testsuite now creates the files gdb.cmd (containing the arguments"
    },
    {
      "sha": "e512118579e198897d494bb5e85d1497a05b7bcb",
      "filename": "gdb/aarch64-tdep.c",
      "status": "modified",
      "additions": 13,
      "deletions": 0,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aa7ca1bb443e8c2baad17392f395d1556fecfafa/gdb/aarch64-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aa7ca1bb443e8c2baad17392f395d1556fecfafa/gdb/aarch64-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/aarch64-tdep.c?ref=aa7ca1bb443e8c2baad17392f395d1556fecfafa",
      "patch": "@@ -273,6 +273,17 @@ aarch64_frame_unmask_lr (struct gdbarch_tdep *tdep,\n   return addr;\n }\n \n+/* Implement the \"get_pc_address_flags\" gdbarch method.  */\n+\n+static std::string\n+aarch64_get_pc_address_flags (frame_info *frame, CORE_ADDR pc)\n+{\n+  if (pc != 0 && get_frame_pc_masked (frame))\n+    return \"PAC\";\n+\n+  return \"\";\n+}\n+\n /* Analyze a prologue, looking for a recognizable stack frame\n    and frame pointer.  Scan until we encounter a store that could\n    clobber the stack frame unexpectedly, or an unknown instruction.  */\n@@ -3370,6 +3381,8 @@ aarch64_gdbarch_init (struct gdbarch_info info, struct gdbarch_list *arches)\n \n   set_gdbarch_gen_return_address (gdbarch, aarch64_gen_return_address);\n \n+  set_gdbarch_get_pc_address_flags (gdbarch, aarch64_get_pc_address_flags);\n+\n   tdesc_use_registers (gdbarch, tdesc, tdesc_data);\n \n   /* Add standard register aliases.  */"
    },
    {
      "sha": "c61fa6f051917ea6ddff431184c1692fc7886d9a",
      "filename": "gdb/arch-utils.c",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aa7ca1bb443e8c2baad17392f395d1556fecfafa/gdb/arch-utils.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aa7ca1bb443e8c2baad17392f395d1556fecfafa/gdb/arch-utils.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/arch-utils.c?ref=aa7ca1bb443e8c2baad17392f395d1556fecfafa",
      "patch": "@@ -995,6 +995,14 @@ default_type_align (struct gdbarch *gdbarch, struct type *type)\n   return 0;\n }\n \n+/* See arch-utils.h.  */\n+\n+std::string\n+default_get_pc_address_flags (frame_info *frame, CORE_ADDR pc)\n+{\n+  return \"\";\n+}\n+\n void\n _initialize_gdbarch_utils (void)\n {"
    },
    {
      "sha": "e5bbcd1f9515c0653175bbca034997cc3bfa1042",
      "filename": "gdb/arch-utils.h",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aa7ca1bb443e8c2baad17392f395d1556fecfafa/gdb/arch-utils.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aa7ca1bb443e8c2baad17392f395d1556fecfafa/gdb/arch-utils.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/arch-utils.h?ref=aa7ca1bb443e8c2baad17392f395d1556fecfafa",
      "patch": "@@ -272,4 +272,8 @@ extern bool default_in_indirect_branch_thunk (gdbarch *gdbarch,\n extern ULONGEST default_type_align (struct gdbarch *gdbarch,\n \t\t\t\t    struct type *type);\n \n+/* Default implementation of gdbarch get_pc_address_flags method.  */\n+extern std::string default_get_pc_address_flags (frame_info *frame,\n+\t\t\t\t\t\t CORE_ADDR pc);\n+\n #endif /* ARCH_UTILS_H */"
    },
    {
      "sha": "339f3375e0c8064e72271ea4648b16d1c840e66e",
      "filename": "gdb/doc/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aa7ca1bb443e8c2baad17392f395d1556fecfafa/gdb/doc/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aa7ca1bb443e8c2baad17392f395d1556fecfafa/gdb/doc/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/doc/ChangeLog?ref=aa7ca1bb443e8c2baad17392f395d1556fecfafa",
      "patch": "@@ -1,3 +1,9 @@\n+2019-08-16  Alan Hayward  <alan.hayward@arm.com>\n+\n+\t* gdb.texinfo (AArch64 Pointer Authentication)\n+\t(GDB/MI Breakpoint Information) (Frame Information): Document\n+\taddr_field.\n+\n 2019-08-12  Tom Tromey  <tom@tromey.com>\n \n \t* gdb.texinfo (Configure Options): Document minimum version of"
    },
    {
      "sha": "bcf0420779b7cc633a11a772646d7d5a4dea45d5",
      "filename": "gdb/doc/gdb.texinfo",
      "status": "modified",
      "additions": 17,
      "deletions": 1,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aa7ca1bb443e8c2baad17392f395d1556fecfafa/gdb/doc/gdb.texinfo",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aa7ca1bb443e8c2baad17392f395d1556fecfafa/gdb/doc/gdb.texinfo",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/doc/gdb.texinfo?ref=aa7ca1bb443e8c2baad17392f395d1556fecfafa",
      "patch": "@@ -24397,7 +24397,8 @@ When @value{GDBN} is debugging the AArch64 architecture, and the program is\n using the v8.3-A feature Pointer Authentication (PAC), then whenever the link\n register @code{$lr} is pointing to an PAC function its value will be masked.\n When GDB prints a backtrace, any addresses that required unmasking will be\n-postfixed with the marker [PAC].\n+postfixed with the marker [PAC].  When using the MI, this is printed as part\n+of the @code{addr_flags} field.\n \n @node i386\n @subsection x86 Architecture-specific Issues\n@@ -28925,6 +28926,11 @@ breakpoint; or the string @samp{<MULTIPLE>}, for a breakpoint with\n multiple locations.  This field will not be present if no address can\n be determined.  For example, a watchpoint does not have an address.\n \n+@item addr_flags\n+Optional field containing any flags related to the address.  These flags are\n+architecture-dependent; see @ref{Architectures} for their meaning for a\n+particular CPU.\n+\n @item func\n If known, the function in which the breakpoint appears.\n If not known, this field is not present.\n@@ -29025,6 +29031,11 @@ Note that this is not the same as the field @code{enable}.\n @item addr\n The address of this location as an hexidecimal number.\n \n+@item addr_flags\n+Optional field containing any flags related to the address.  These flags are\n+architecture-dependent; see @ref{Architectures} for their meaning for a\n+particular CPU.\n+\n @item func\n If known, the function in which the location appears.\n If not known, this field is not present.\n@@ -29077,6 +29088,11 @@ be absent if @value{GDBN} is unable to determine the function name.\n @item addr\n The code address for the frame.  This field is always present.\n \n+@item addr_flags\n+Optional field containing any flags related to the address.  These flags are\n+architecture-dependent; see @ref{Architectures} for their meaning for a\n+particular CPU.\n+\n @item file\n The name of the source files that correspond to the frame's code\n address.  This field may be absent."
    },
    {
      "sha": "7b93d003a7293a4273c58b6ff31e4932a8cd42f5",
      "filename": "gdb/gdbarch.c",
      "status": "modified",
      "additions": 23,
      "deletions": 0,
      "changes": 23,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aa7ca1bb443e8c2baad17392f395d1556fecfafa/gdb/gdbarch.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aa7ca1bb443e8c2baad17392f395d1556fecfafa/gdb/gdbarch.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbarch.c?ref=aa7ca1bb443e8c2baad17392f395d1556fecfafa",
      "patch": "@@ -358,6 +358,7 @@ struct gdbarch\n   char ** disassembler_options;\n   const disasm_options_and_args_t * valid_disassembler_options;\n   gdbarch_type_align_ftype *type_align;\n+  gdbarch_get_pc_address_flags_ftype *get_pc_address_flags;\n };\n \n /* Create a new ``struct gdbarch'' based on information provided by\n@@ -473,6 +474,7 @@ gdbarch_alloc (const struct gdbarch_info *info,\n   gdbarch->gnu_triplet_regexp = default_gnu_triplet_regexp;\n   gdbarch->addressable_memory_unit_size = default_addressable_memory_unit_size;\n   gdbarch->type_align = default_type_align;\n+  gdbarch->get_pc_address_flags = default_get_pc_address_flags;\n   /* gdbarch_alloc() */\n \n   return gdbarch;\n@@ -721,6 +723,7 @@ verify_gdbarch (struct gdbarch *gdbarch)\n   /* Skip verify of disassembler_options, invalid_p == 0 */\n   /* Skip verify of valid_disassembler_options, invalid_p == 0 */\n   /* Skip verify of type_align, invalid_p == 0 */\n+  /* Skip verify of get_pc_address_flags, invalid_p == 0 */\n   if (!log.empty ())\n     internal_error (__FILE__, __LINE__,\n                     _(\"verify_gdbarch: the following are invalid ...%s\"),\n@@ -1065,6 +1068,9 @@ gdbarch_dump (struct gdbarch *gdbarch, struct ui_file *file)\n   fprintf_unfiltered (file,\n                       \"gdbarch_dump: get_longjmp_target = <%s>\\n\",\n                       host_address_to_string (gdbarch->get_longjmp_target));\n+  fprintf_unfiltered (file,\n+                      \"gdbarch_dump: get_pc_address_flags = <%s>\\n\",\n+                      host_address_to_string (gdbarch->get_pc_address_flags));\n   fprintf_unfiltered (file,\n                       \"gdbarch_dump: gdbarch_get_siginfo_type_p() = %d\\n\",\n                       gdbarch_get_siginfo_type_p (gdbarch));\n@@ -5156,6 +5162,23 @@ set_gdbarch_type_align (struct gdbarch *gdbarch,\n   gdbarch->type_align = type_align;\n }\n \n+std::string\n+gdbarch_get_pc_address_flags (struct gdbarch *gdbarch, frame_info *frame, CORE_ADDR pc)\n+{\n+  gdb_assert (gdbarch != NULL);\n+  gdb_assert (gdbarch->get_pc_address_flags != NULL);\n+  if (gdbarch_debug >= 2)\n+    fprintf_unfiltered (gdb_stdlog, \"gdbarch_get_pc_address_flags called\\n\");\n+  return gdbarch->get_pc_address_flags (frame, pc);\n+}\n+\n+void\n+set_gdbarch_get_pc_address_flags (struct gdbarch *gdbarch,\n+                                  gdbarch_get_pc_address_flags_ftype get_pc_address_flags)\n+{\n+  gdbarch->get_pc_address_flags = get_pc_address_flags;\n+}\n+\n \n /* Keep a registry of per-architecture data-pointers required by GDB\n    modules.  */"
    },
    {
      "sha": "3c6efae895f4b0620769d39ddd23235553966680",
      "filename": "gdb/gdbarch.h",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aa7ca1bb443e8c2baad17392f395d1556fecfafa/gdb/gdbarch.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aa7ca1bb443e8c2baad17392f395d1556fecfafa/gdb/gdbarch.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbarch.h?ref=aa7ca1bb443e8c2baad17392f395d1556fecfafa",
      "patch": "@@ -1640,6 +1640,12 @@ typedef ULONGEST (gdbarch_type_align_ftype) (struct gdbarch *gdbarch, struct typ\n extern ULONGEST gdbarch_type_align (struct gdbarch *gdbarch, struct type *type);\n extern void set_gdbarch_type_align (struct gdbarch *gdbarch, gdbarch_type_align_ftype *type_align);\n \n+/* Return a string containing any flags for the given PC in the given FRAME. */\n+\n+typedef std::string (gdbarch_get_pc_address_flags_ftype) (frame_info *frame, CORE_ADDR pc);\n+extern std::string gdbarch_get_pc_address_flags (struct gdbarch *gdbarch, frame_info *frame, CORE_ADDR pc);\n+extern void set_gdbarch_get_pc_address_flags (struct gdbarch *gdbarch, gdbarch_get_pc_address_flags_ftype *get_pc_address_flags);\n+\n extern struct gdbarch_tdep *gdbarch_tdep (struct gdbarch *gdbarch);\n \n "
    },
    {
      "sha": "d589b2c49a07089a4eacc0b096a973562ab76341",
      "filename": "gdb/gdbarch.sh",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aa7ca1bb443e8c2baad17392f395d1556fecfafa/gdb/gdbarch.sh",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aa7ca1bb443e8c2baad17392f395d1556fecfafa/gdb/gdbarch.sh",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbarch.sh?ref=aa7ca1bb443e8c2baad17392f395d1556fecfafa",
      "patch": "@@ -1210,6 +1210,9 @@ v;const disasm_options_and_args_t *;valid_disassembler_options;;;0;0;;0;host_add\n # default rules as laid out in gdbtypes.c:type_align.\n m;ULONGEST;type_align;struct type *type;type;;default_type_align;;0\n \n+# Return a string containing any flags for the given PC in the given FRAME.\n+f;std::string;get_pc_address_flags;frame_info *frame, CORE_ADDR pc;frame, pc;;default_get_pc_address_flags;;0\n+\n EOF\n }\n "
    },
    {
      "sha": "06431ea3543e786a89e6194a023f66b949bacb8b",
      "filename": "gdb/stack.c",
      "status": "modified",
      "additions": 20,
      "deletions": 9,
      "changes": 29,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/aa7ca1bb443e8c2baad17392f395d1556fecfafa/gdb/stack.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/aa7ca1bb443e8c2baad17392f395d1556fecfafa/gdb/stack.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/stack.c?ref=aa7ca1bb443e8c2baad17392f395d1556fecfafa",
      "patch": "@@ -923,6 +923,23 @@ print_frame_info_to_print_what (const char *print_frame_info)\n \t\t  print_frame_info);\n }\n \n+/* Print the PC from FRAME, plus any flags, to UIOUT.  */\n+\n+static void\n+print_pc (struct ui_out *uiout, struct gdbarch *gdbarch, frame_info *frame,\n+\t  CORE_ADDR pc)\n+{\n+  uiout->field_core_addr (\"addr\", gdbarch, pc);\n+\n+  std::string flags = gdbarch_get_pc_address_flags (gdbarch, frame, pc);\n+  if (!flags.empty ())\n+  {\n+    uiout->text (\" [\");\n+    uiout->field_string (\"addr_flags\", flags);\n+    uiout->text (\"]\");\n+  }\n+}\n+\n /* See stack.h.  */\n \n void\n@@ -980,8 +997,7 @@ print_frame_info (const frame_print_options &fp_opts,\n       if (uiout->is_mi_like_p ())\n         {\n           annotate_frame_address ();\n-          uiout->field_core_addr (\"addr\",\n-\t\t\t\t  gdbarch, get_frame_pc (frame));\n+\t  print_pc (uiout, gdbarch, frame, get_frame_pc (frame));\n           annotate_frame_address_end ();\n         }\n \n@@ -1065,8 +1081,7 @@ print_frame_info (const frame_print_options &fp_opts,\n \t     ability to decide for themselves if it is desired.  */\n \t  if (opts.addressprint && mid_statement)\n \t    {\n-\t      uiout->field_core_addr (\"addr\",\n-\t\t\t\t      gdbarch, get_frame_pc (frame));\n+\t      print_pc (uiout, gdbarch, frame, get_frame_pc (frame));\n \t      uiout->text (\"\\t\");\n \t    }\n \n@@ -1292,11 +1307,7 @@ print_frame (const frame_print_options &fp_opts,\n \t{\n \t  annotate_frame_address ();\n \t  if (pc_p)\n-\t    {\n-\t      uiout->field_core_addr (\"addr\", gdbarch, pc);\n-\t      if (get_frame_pc_masked (frame))\n-\t\tuiout->field_string (\"pac\", \" [PAC]\");\n-\t    }\n+\t    print_pc (uiout, gdbarch, frame, pc);\n \t  else\n \t    uiout->field_string (\"addr\", \"<unavailable>\",\n \t\t\t\t ui_out_style_kind::ADDRESS);"
    }
  ]
}