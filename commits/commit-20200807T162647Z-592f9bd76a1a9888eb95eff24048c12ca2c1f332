{
  "sha": "592f9bd76a1a9888eb95eff24048c12ca2c1f332",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NTkyZjliZDc2YTFhOTg4OGViOTVlZmYyNDA0OGMxMmNhMmMxZjMzMg==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2020-08-07T16:26:45Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2020-08-07T16:26:47Z"
    },
    "message": "Fetch registers from correct thread in ravenscar-thread.c\n\nFabien also noticed that gdb would not report a stop correctly when\nusing Ravenscar.  This patch fixes the bug by making a few changes:\n\n* ravenscar_thread_target::wait now updates the inferior ptid before\n  updating the thread list.  This ensures that a new thread is\n  correctly associated with the underlying CPU.\n\n* The fetch_registers, store_registers, and prepare_to_store methods\n  now save and restore the regcache's ptid before doing the operation\n  on the underlying live thread.  This ensures that gdb informs the\n  remote of a thread it knows about, as opposed to using a Ravenscar\n  thread, which probably will not be recognized.\n\ngdb/ChangeLog\n2020-08-07  Tom Tromey  <tromey@adacore.com>\n\n\t* ravenscar-thread.c (ravenscar_thread_target::wait): Call\n\tupdate_inferior_ptid before update_thread_list.\n\t(temporarily_change_regcache_ptid): New class.\n\t(ravenscar_thread_target::fetch_registers)\n\t(ravenscar_thread_target::store_registers)\n\t(ravenscar_thread_target::prepare_to_store): Use base thread when\n\tforwarding operation.",
    "tree": {
      "sha": "3776100ad95d663b7b1a4f0690b3cc0aa35bac48",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/3776100ad95d663b7b1a4f0690b3cc0aa35bac48"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/592f9bd76a1a9888eb95eff24048c12ca2c1f332",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/592f9bd76a1a9888eb95eff24048c12ca2c1f332",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/592f9bd76a1a9888eb95eff24048c12ca2c1f332",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/592f9bd76a1a9888eb95eff24048c12ca2c1f332/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "39e2018a4e83522fef595d079c880c9097d70228",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/39e2018a4e83522fef595d079c880c9097d70228",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/39e2018a4e83522fef595d079c880c9097d70228"
    }
  ],
  "stats": {
    "total": 95,
    "additions": 77,
    "deletions": 18
  },
  "files": [
    {
      "sha": "640fb397a7d51ae1b3b290b35f147cb695b53963",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/592f9bd76a1a9888eb95eff24048c12ca2c1f332/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/592f9bd76a1a9888eb95eff24048c12ca2c1f332/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=592f9bd76a1a9888eb95eff24048c12ca2c1f332",
      "patch": "@@ -1,3 +1,13 @@\n+2020-08-07  Tom Tromey  <tromey@adacore.com>\n+\n+\t* ravenscar-thread.c (ravenscar_thread_target::wait): Call\n+\tupdate_inferior_ptid before update_thread_list.\n+\t(temporarily_change_regcache_ptid): New class.\n+\t(ravenscar_thread_target::fetch_registers)\n+\t(ravenscar_thread_target::store_registers)\n+\t(ravenscar_thread_target::prepare_to_store): Use base thread when\n+\tforwarding operation.\n+\n 2020-08-07  Tom Tromey  <tromey@adacore.com>\n \n \t* ravenscar-thread.c (ravenscar_thread_target::resume): Handle"
    },
    {
      "sha": "459e5ea3ed3822342806a429fca9f4f41c90bca2",
      "filename": "gdb/ravenscar-thread.c",
      "status": "modified",
      "additions": 67,
      "deletions": 18,
      "changes": 85,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/592f9bd76a1a9888eb95eff24048c12ca2c1f332/gdb/ravenscar-thread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/592f9bd76a1a9888eb95eff24048c12ca2c1f332/gdb/ravenscar-thread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ravenscar-thread.c?ref=592f9bd76a1a9888eb95eff24048c12ca2c1f332",
      "patch": "@@ -457,20 +457,55 @@ ravenscar_thread_target::pid_to_str (ptid_t ptid)\n   return string_printf (\"Ravenscar Thread %#x\", (int) ptid.tid ());\n }\n \n+/* Temporarily set the ptid of a regcache to some other value.  When\n+   this object is destroyed, the regcache's original ptid is\n+   restored.  */\n+\n+class temporarily_change_regcache_ptid\n+{\n+public:\n+\n+  temporarily_change_regcache_ptid (struct regcache *regcache, ptid_t new_ptid)\n+    : m_regcache (regcache),\n+      m_save_ptid (regcache->ptid ())\n+  {\n+    m_regcache->set_ptid (new_ptid);\n+  }\n+\n+  ~temporarily_change_regcache_ptid ()\n+  {\n+    m_regcache->set_ptid (m_save_ptid);\n+  }\n+\n+private:\n+\n+  /* The regcache.  */\n+  struct regcache *m_regcache;\n+  /* The saved ptid.  */\n+  ptid_t m_save_ptid;\n+};\n+\n void\n ravenscar_thread_target::fetch_registers (struct regcache *regcache, int regnum)\n {\n   ptid_t ptid = regcache->ptid ();\n \n-  if (runtime_initialized ()\n-      && is_ravenscar_task (ptid)\n-      && !task_is_currently_active (ptid))\n+  if (runtime_initialized () && is_ravenscar_task (ptid))\n     {\n-      struct gdbarch *gdbarch = regcache->arch ();\n-      struct ravenscar_arch_ops *arch_ops\n-\t= gdbarch_ravenscar_ops (gdbarch);\n+      if (task_is_currently_active (ptid))\n+\t{\n+\t  ptid_t base = get_base_thread_from_ravenscar_task (ptid);\n+\t  temporarily_change_regcache_ptid changer (regcache, base);\n+\t  beneath ()->fetch_registers (regcache, regnum);\n+\t}\n+      else\n+\t{\n+\t  struct gdbarch *gdbarch = regcache->arch ();\n+\t  struct ravenscar_arch_ops *arch_ops\n+\t    = gdbarch_ravenscar_ops (gdbarch);\n \n-      arch_ops->fetch_registers (regcache, regnum);\n+\t  arch_ops->fetch_registers (regcache, regnum);\n+\t}\n     }\n   else\n     beneath ()->fetch_registers (regcache, regnum);\n@@ -482,15 +517,22 @@ ravenscar_thread_target::store_registers (struct regcache *regcache,\n {\n   ptid_t ptid = regcache->ptid ();\n \n-  if (runtime_initialized ()\n-      && is_ravenscar_task (ptid)\n-      && !task_is_currently_active (ptid))\n+  if (runtime_initialized () && is_ravenscar_task (ptid))\n     {\n-      struct gdbarch *gdbarch = regcache->arch ();\n-      struct ravenscar_arch_ops *arch_ops\n-\t= gdbarch_ravenscar_ops (gdbarch);\n+      if (task_is_currently_active (ptid))\n+\t{\n+\t  ptid_t base = get_base_thread_from_ravenscar_task (ptid);\n+\t  temporarily_change_regcache_ptid changer (regcache, base);\n+\t  beneath ()->store_registers (regcache, regnum);\n+\t}\n+      else\n+\t{\n+\t  struct gdbarch *gdbarch = regcache->arch ();\n+\t  struct ravenscar_arch_ops *arch_ops\n+\t    = gdbarch_ravenscar_ops (gdbarch);\n \n-      arch_ops->store_registers (regcache, regnum);\n+\t  arch_ops->store_registers (regcache, regnum);\n+\t}\n     }\n   else\n     beneath ()->store_registers (regcache, regnum);\n@@ -501,11 +543,18 @@ ravenscar_thread_target::prepare_to_store (struct regcache *regcache)\n {\n   ptid_t ptid = regcache->ptid ();\n \n-  if (runtime_initialized ()\n-      && is_ravenscar_task (ptid)\n-      && !task_is_currently_active (ptid))\n+  if (runtime_initialized () && is_ravenscar_task (ptid))\n     {\n-      /* Nothing.  */\n+      if (task_is_currently_active (ptid))\n+\t{\n+\t  ptid_t base = get_base_thread_from_ravenscar_task (ptid);\n+\t  temporarily_change_regcache_ptid changer (regcache, base);\n+\t  beneath ()->prepare_to_store (regcache);\n+\t}\n+      else\n+\t{\n+\t  /* Nothing.  */\n+\t}\n     }\n   else\n     beneath ()->prepare_to_store (regcache);"
    }
  ]
}