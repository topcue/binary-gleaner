{
  "sha": "78f2c40a12179d26d3065c09f054b7e751b2732f",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NzhmMmM0MGExMjE3OWQyNmQzMDY1YzA5ZjA1NGI3ZTc1MWIyNzMyZg==",
  "commit": {
    "author": {
      "name": "Pedro Alves",
      "email": "palves@redhat.com",
      "date": "2020-01-10T20:05:53Z"
    },
    "committer": {
      "name": "Pedro Alves",
      "email": "palves@redhat.com",
      "date": "2020-01-10T20:05:53Z"
    },
    "message": "Fix reconnecting to a gdbserver already debugging multiple processes, I\n\nThe multi-target patch will change the remote target's behavior when:\n\n- the current inferior is connected to an extended-remote target.\n- the current inferior is attached to any process.\n- some other inferior than than the current one is live.\n\nIn current master, we get:\n\n (gdb) tar extended-remote :9999\n A program is being debugged already.  Kill it? (y or n)\n\nWhile after multi-target, since each inferior may have its own target\nconnection, we'll get:\n\n (gdb) tar extended-remote :9999\n Already connected to a remote target.  Disconnect? (y or n)\n\nThat change made gdb.server/extended-remote-restart.exp expose a gdb\nbug, because it made \"target remote\", via gdb_reconnect, just\ndisconnect from the previous connection, while in current master that\ncommand would kill the inferior before disconnecting.  In turn, that\nwould make a multi-target gdb find processes already running under\ncontrol of gdbserver as soon as it reconnects, while in current master\nthere is never any process around when gdb reconnects, since they'd\nall been killed prior to disconnection.\n\nThe bug this exposed is that remote_target::remote_add_inferior was\nalways reusing current_inferior() for the new process, even if the\ncurrent inferior was already bound to a process.  In the testcase's\ncase, when we reconnect, the remote is debugging two processes.  So\nwe'd bind the first remote process to the empty current inferior the\nfirst time, and then bind the second remote process to the same\ninferior again, essencially losing track of the first process.  That\nresulted in failed assertions when we look up the inferior for the\nfirst process by PID.  The fix is to still prefer binding to the\ncurrent inferior (so that plain \"target remote\" keeps doing what you'd\nexpect), but not reuse the current inferior if it is already bound to\na process.\n\nThis patch tweaks the test to explicitly disconnect before\nreconnecting, to avoid GDB killing processes, thus making current GDB\nbehave the same as it will behave when the multi-target work lands.\nThat change alone without the GDB fix exposes the bug like so:\n\n (gdb) PASS: gdb.server/extended-remote-restart.exp: kill: 0, follow-child 0: disconnect\n target extended-remote localhost:2350\n Remote debugging using localhost:2350\n src/gdb/thread.c:93: internal-error: thread_info* inferior_thread(): Assertion `tp' failed.\n A problem internal to GDB has been detected,\n further debugging may prove unreliable.\n Quit this debugging session? (y or n)\n\nThe original bug that the testcase was written for was related to\nkilling, (git 9d4a934ce604 (\"gdb: Fix assert for extended-remote\ntarget (PR gdb/18050)\")), but since the testcase tries reconnecting\nwith both explicitly killing and not explicitly killing, I think we're\ncovering the original bug with this testcase change.\n\ngdb/ChangeLog:\n2020-01-10  Pedro Alves  <palves@redhat.com>\n\n\t* remote.c (remote_target::remote_add_inferior): Don't bind a\n\tprocess to the current inferior if the current inferior is already\n\tbound to a process.\n\ngdb/testsuite/ChangeLog:\n2020-01-10  Pedro Alves  <palves@redhat.com>\n\n\t* gdb.server/extended-remote-restart.exp (test_reload): Explicitly\n\tdisconnect before reconnecting.",
    "tree": {
      "sha": "4380f719d41522962e68a99bf609fb515c453ee1",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/4380f719d41522962e68a99bf609fb515c453ee1"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/78f2c40a12179d26d3065c09f054b7e751b2732f",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/78f2c40a12179d26d3065c09f054b7e751b2732f",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/78f2c40a12179d26d3065c09f054b7e751b2732f",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/78f2c40a12179d26d3065c09f054b7e751b2732f/comments",
  "author": {
    "login": "palves",
    "id": 1202913,
    "node_id": "MDQ6VXNlcjEyMDI5MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1202913?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/palves",
    "html_url": "https://github.com/palves",
    "followers_url": "https://api.github.com/users/palves/followers",
    "following_url": "https://api.github.com/users/palves/following{/other_user}",
    "gists_url": "https://api.github.com/users/palves/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/palves/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/palves/subscriptions",
    "organizations_url": "https://api.github.com/users/palves/orgs",
    "repos_url": "https://api.github.com/users/palves/repos",
    "events_url": "https://api.github.com/users/palves/events{/privacy}",
    "received_events_url": "https://api.github.com/users/palves/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "palves",
    "id": 1202913,
    "node_id": "MDQ6VXNlcjEyMDI5MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1202913?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/palves",
    "html_url": "https://github.com/palves",
    "followers_url": "https://api.github.com/users/palves/followers",
    "following_url": "https://api.github.com/users/palves/following{/other_user}",
    "gists_url": "https://api.github.com/users/palves/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/palves/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/palves/subscriptions",
    "organizations_url": "https://api.github.com/users/palves/orgs",
    "repos_url": "https://api.github.com/users/palves/repos",
    "events_url": "https://api.github.com/users/palves/events{/privacy}",
    "received_events_url": "https://api.github.com/users/palves/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "e7af6c702da7a77529afdeffbbe6e13639beb441",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e7af6c702da7a77529afdeffbbe6e13639beb441",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/e7af6c702da7a77529afdeffbbe6e13639beb441"
    }
  ],
  "stats": {
    "total": 35,
    "additions": 34,
    "deletions": 1
  },
  "files": [
    {
      "sha": "4163c869afed4c1f63b140240b8b21ebdb42ddac",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/78f2c40a12179d26d3065c09f054b7e751b2732f/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/78f2c40a12179d26d3065c09f054b7e751b2732f/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=78f2c40a12179d26d3065c09f054b7e751b2732f",
      "patch": "@@ -1,3 +1,9 @@\n+2020-01-10  Pedro Alves  <palves@redhat.com>\n+\n+\t* remote.c (remote_target::remote_add_inferior): Don't bind a\n+\tprocess to the current inferior if the current inferior is already\n+\tbound to a process.\n+\n 2020-01-10  Tankut Baris Aktemur  <tankut.baris.aktemur@intel.com>\n \t    Pedro Alves\t <palves@redhat.com>\n "
    },
    {
      "sha": "751769ea7fc517013a3931df7ef0452a321f61d8",
      "filename": "gdb/remote.c",
      "status": "modified",
      "additions": 20,
      "deletions": 0,
      "changes": 20,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/78f2c40a12179d26d3065c09f054b7e751b2732f/gdb/remote.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/78f2c40a12179d26d3065c09f054b7e751b2732f/gdb/remote.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/remote.c?ref=78f2c40a12179d26d3065c09f054b7e751b2732f",
      "patch": "@@ -2367,6 +2367,26 @@ remote_target::remote_add_inferior (bool fake_pid_p, int pid, int attached,\n \t between program/address spaces.  We simply bind the inferior\n \t to the program space's address space.  */\n       inf = current_inferior ();\n+\n+      /* However, if the current inferior is already bound to a\n+\t process, find some other empty inferior.  */\n+      if (inf->pid != 0)\n+\t{\n+\t  inf = nullptr;\n+\t  for (inferior *it : all_inferiors ())\n+\t    if (it->pid == 0)\n+\t      {\n+\t\tinf = it;\n+\t\tbreak;\n+\t      }\n+\t}\n+      if (inf == nullptr)\n+\t{\n+\t  /* Since all inferiors were already bound to a process, add\n+\t     a new inferior.  */\n+\t  inf = add_inferior_with_spaces ();\n+\t}\n+      switch_to_inferior_no_thread (inf);\n       inferior_appeared (inf, pid);\n     }\n "
    },
    {
      "sha": "0ff75954b1a6fc5dd2275f2ad219abfdc4363e91",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/78f2c40a12179d26d3065c09f054b7e751b2732f/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/78f2c40a12179d26d3065c09f054b7e751b2732f/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=78f2c40a12179d26d3065c09f054b7e751b2732f",
      "patch": "@@ -1,3 +1,8 @@\n+2020-01-10  Pedro Alves  <palves@redhat.com>\n+\n+\t* gdb.server/extended-remote-restart.exp (test_reload): Explicitly\n+\tdisconnect before reconnecting.\n+\n 2020-01-10  Tankut Baris Aktemur  <tankut.baris.aktemur@intel.com>\n \t    Pedro Alves\t <palves@redhat.com>\n "
    },
    {
      "sha": "3ce0f0b076ab8210580ce97d96d5b85a509f3b0f",
      "filename": "gdb/testsuite/gdb.server/extended-remote-restart.exp",
      "status": "modified",
      "additions": 3,
      "deletions": 1,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/78f2c40a12179d26d3065c09f054b7e751b2732f/gdb/testsuite/gdb.server/extended-remote-restart.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/78f2c40a12179d26d3065c09f054b7e751b2732f/gdb/testsuite/gdb.server/extended-remote-restart.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.server/extended-remote-restart.exp?ref=78f2c40a12179d26d3065c09f054b7e751b2732f",
      "patch": "@@ -113,7 +113,9 @@ proc test_reload { do_kill_p follow_child_p } {\n \t    \"Check inferior was killed\"\n     }\n \n-    # Reconnect to the target.\n+    # Disconnect, and reconnect to the target.\n+    gdb_test \"disconnect\" \".*\"\n+\n     if { [gdb_reconnect] == 0 } {\n \tpass \"reconnect after fork\"\n     } else {"
    }
  ]
}