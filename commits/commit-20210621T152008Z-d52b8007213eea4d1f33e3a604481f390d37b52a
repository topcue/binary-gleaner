{
  "sha": "d52b8007213eea4d1f33e3a604481f390d37b52a",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZDUyYjgwMDcyMTNlZWE0ZDFmMzNlM2E2MDQ0ODFmMzkwZDM3YjUyYQ==",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2021-05-26T21:01:59Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2021-06-21T15:20:08Z"
    },
    "message": "gdb/python: add PendingFrame.level and Frame.level methods\n\nAdd new methods to the PendingFrame and Frame classes to obtain the\nstack frame level for each object.\n\nThe use of 'level' as the method name is consistent with the existing\nattribute RecordFunctionSegment.level (though this is an attribute\nrather than a method).\n\nFor Frame/PendingFrame I went with methods as these classes currently\nonly use methods, including for simple data like architecture, so I\nwant to be consistent with this interface.\n\ngdb/ChangeLog:\n\n\t* NEWS: Mention the two new methods.\n\t* python/py-frame.c (frapy_level): New function.\n\t(frame_object_methods): Register 'level' method.\n\t* python/py-unwind.c (pending_framepy_level): New function.\n\t(pending_frame_object_methods): Register 'level' method.\n\ngdb/doc/ChangeLog:\n\n\t* python.texi (Unwinding Frames in Python): Mention\n\tPendingFrame.level.\n\t(Frames In Python): Mention Frame.level.\n\ngdb/testsuite/ChangeLog:\n\n\t* gdb.python/py-frame.exp: Add Frame.level tests.\n\t* gdb.python/py-pending-frame-level.c: New file.\n\t* gdb.python/py-pending-frame-level.exp: New file.\n\t* gdb.python/py-pending-frame-level.py: New file.",
    "tree": {
      "sha": "07158fe01e4d4d0edc2bf3e043d13198cb21d96e",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/07158fe01e4d4d0edc2bf3e043d13198cb21d96e"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/d52b8007213eea4d1f33e3a604481f390d37b52a",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d52b8007213eea4d1f33e3a604481f390d37b52a",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/d52b8007213eea4d1f33e3a604481f390d37b52a",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d52b8007213eea4d1f33e3a604481f390d37b52a/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "8b9c48b287d42d1c816f441e4273dcb8c7af1876",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8b9c48b287d42d1c816f441e4273dcb8c7af1876",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/8b9c48b287d42d1c816f441e4273dcb8c7af1876"
    }
  ],
  "stats": {
    "total": 258,
    "additions": 258,
    "deletions": 0
  },
  "files": [
    {
      "sha": "0501a56bc5a85caf717b05d9fef7da35225ffd26",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d52b8007213eea4d1f33e3a604481f390d37b52a/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d52b8007213eea4d1f33e3a604481f390d37b52a/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=d52b8007213eea4d1f33e3a604481f390d37b52a",
      "patch": "@@ -1,3 +1,11 @@\n+2021-06-21  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* NEWS: Mention the two new methods.\n+\t* python/py-frame.c (frapy_level): New function.\n+\t(frame_object_methods): Register 'level' method.\n+\t* python/py-unwind.c (pending_framepy_level): New function.\n+\t(pending_frame_object_methods): Register 'level' method.\n+\n 2021-06-21  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* python/py-inferior.c (infpy_get_connection_num): Call"
    },
    {
      "sha": "65699e11abec95cae1890bce88426d0258cf34cf",
      "filename": "gdb/NEWS",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d52b8007213eea4d1f33e3a604481f390d37b52a/gdb/NEWS",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d52b8007213eea4d1f33e3a604481f390d37b52a/gdb/NEWS",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/NEWS?ref=d52b8007213eea4d1f33e3a604481f390d37b52a",
      "patch": "@@ -220,6 +220,12 @@ QMemTags\n      gives the connection number as seen in 'info connections' and\n      'info inferiors'.\n \n+  ** New method gdb.Frame.level() which returns the stack level of the\n+     frame object.\n+\n+  ** New method gdb.PendingFrame.level() which returns the stack level\n+     of the frame object.\n+\n *** Changes in GDB 10\n \n * There are new feature names for ARC targets: \"org.gnu.gdb.arc.core\""
    },
    {
      "sha": "9595c21e043a5654966c590ae3646900fe623411",
      "filename": "gdb/doc/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d52b8007213eea4d1f33e3a604481f390d37b52a/gdb/doc/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d52b8007213eea4d1f33e3a604481f390d37b52a/gdb/doc/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/doc/ChangeLog?ref=d52b8007213eea4d1f33e3a604481f390d37b52a",
      "patch": "@@ -1,3 +1,9 @@\n+2021-06-21  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* python.texi (Unwinding Frames in Python): Mention\n+\tPendingFrame.level.\n+\t(Frames In Python): Mention Frame.level.\n+\n 2021-06-16  Felix Willgerodt  <felix.willgerodt@intel.com>\n \n \t* gdb.texinfo (Process Record and Replay): Stop mentioning lines"
    },
    {
      "sha": "01a2e8b7974006a35f5aa434ef58d07ffaa1ddcd",
      "filename": "gdb/doc/python.texi",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d52b8007213eea4d1f33e3a604481f390d37b52a/gdb/doc/python.texi",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d52b8007213eea4d1f33e3a604481f390d37b52a/gdb/doc/python.texi",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/doc/python.texi?ref=d52b8007213eea4d1f33e3a604481f390d37b52a",
      "patch": "@@ -2605,6 +2605,11 @@ for this @code{gdb.PendingFrame}.  This represents the architecture of\n the particular frame being unwound.\n @end defun\n \n+@defun PendingFrame.level ()\n+Return an integer, the stack frame level for this frame.\n+@xref{Frames, ,Stack Frames}.\n+@end defun\n+\n @subheading Unwinder Output: UnwindInfo\n \n Use @code{PendingFrame.create_unwind_info} method described above to\n@@ -4813,6 +4818,10 @@ Set this frame to be the selected frame.  @xref{Stack, ,Examining the\n Stack}.\n @end defun\n \n+@defun Frame.level ()\n+Return an integer, the stack frame level for this frame.  @xref{Frames, ,Stack Frames}.\n+@end defun\n+\n @node Blocks In Python\n @subsubsection Accessing blocks from Python\n "
    },
    {
      "sha": "ee57eb105769c0493354464b1aa1d436c09f42af",
      "filename": "gdb/python/py-frame.c",
      "status": "modified",
      "additions": 23,
      "deletions": 0,
      "changes": 23,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d52b8007213eea4d1f33e3a604481f390d37b52a/gdb/python/py-frame.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d52b8007213eea4d1f33e3a604481f390d37b52a/gdb/python/py-frame.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-frame.c?ref=d52b8007213eea4d1f33e3a604481f390d37b52a",
      "patch": "@@ -577,6 +577,27 @@ frapy_select (PyObject *self, PyObject *args)\n   Py_RETURN_NONE;\n }\n \n+/* The stack frame level for this frame.  */\n+\n+static PyObject *\n+frapy_level (PyObject *self, PyObject *args)\n+{\n+  struct frame_info *fi;\n+\n+  try\n+    {\n+      FRAPY_REQUIRE_VALID (self, fi);\n+\n+      return gdb_py_object_from_longest (frame_relative_level (fi)).release ();\n+    }\n+  catch (const gdb_exception &except)\n+    {\n+      GDB_PY_HANDLE_EXCEPTION (except);\n+    }\n+\n+  Py_RETURN_NONE;\n+}\n+\n /* Implementation of gdb.newest_frame () -> gdb.Frame.\n    Returns the newest frame object.  */\n \n@@ -748,6 +769,8 @@ Return the frame's symtab and line.\" },\n Return the value of the variable in this frame.\" },\n   { \"select\", frapy_select, METH_NOARGS,\n     \"Select this frame as the user's current frame.\" },\n+  { \"level\", frapy_level, METH_NOARGS,\n+    \"The stack level of this frame.\" },\n   {NULL}  /* Sentinel */\n };\n "
    },
    {
      "sha": "d3ef1911ab8204d74e180e889590706a10696e62",
      "filename": "gdb/python/py-unwind.c",
      "status": "modified",
      "additions": 19,
      "deletions": 0,
      "changes": 19,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d52b8007213eea4d1f33e3a604481f390d37b52a/gdb/python/py-unwind.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d52b8007213eea4d1f33e3a604481f390d37b52a/gdb/python/py-unwind.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/python/py-unwind.c?ref=d52b8007213eea4d1f33e3a604481f390d37b52a",
      "patch": "@@ -463,6 +463,23 @@ pending_framepy_architecture (PyObject *self, PyObject *args)\n   return gdbarch_to_arch_object (pending_frame->gdbarch);\n }\n \n+/* Implementation of PendingFrame.level (self) -> Integer.  */\n+\n+static PyObject *\n+pending_framepy_level (PyObject *self, PyObject *args)\n+{\n+  pending_frame_object *pending_frame = (pending_frame_object *) self;\n+\n+  if (pending_frame->frame_info == NULL)\n+    {\n+      PyErr_SetString (PyExc_ValueError,\n+\t\t       \"Attempting to read stack level from stale PendingFrame\");\n+      return NULL;\n+    }\n+  int level = frame_relative_level (pending_frame->frame_info);\n+  return gdb_py_object_from_longest (level).release ();\n+}\n+\n /* frame_unwind.this_id method.  */\n \n static void\n@@ -704,6 +721,8 @@ static PyMethodDef pending_frame_object_methods[] =\n     pending_framepy_architecture, METH_NOARGS,\n     \"architecture () -> gdb.Architecture\\n\"\n     \"The architecture for this PendingFrame.\" },\n+  { \"level\", pending_framepy_level, METH_NOARGS,\n+    \"The stack level of this frame.\" },\n   {NULL}  /* Sentinel */\n };\n "
    },
    {
      "sha": "0f5c1527277aa6a731ee62353ce2b8b81ea30655",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d52b8007213eea4d1f33e3a604481f390d37b52a/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d52b8007213eea4d1f33e3a604481f390d37b52a/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=d52b8007213eea4d1f33e3a604481f390d37b52a",
      "patch": "@@ -1,3 +1,10 @@\n+2021-06-21  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* gdb.python/py-frame.exp: Add Frame.level tests.\n+\t* gdb.python/py-pending-frame-level.c: New file.\n+\t* gdb.python/py-pending-frame-level.exp: New file.\n+\t* gdb.python/py-pending-frame-level.py: New file.\n+\n 2021-06-21  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* gdb.python/py-unwind-user-regs.c: New file."
    },
    {
      "sha": "05c7fb00dfdbb96b27ffe9c1d42813d32dcabd92",
      "filename": "gdb/testsuite/gdb.python/py-frame.exp",
      "status": "modified",
      "additions": 11,
      "deletions": 0,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d52b8007213eea4d1f33e3a604481f390d37b52a/gdb/testsuite/gdb.python/py-frame.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d52b8007213eea4d1f33e3a604481f390d37b52a/gdb/testsuite/gdb.python/py-frame.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.python/py-frame.exp?ref=d52b8007213eea4d1f33e3a604481f390d37b52a",
      "patch": "@@ -70,6 +70,17 @@ gdb_test \"up\" \".*\" \"\"\n \n gdb_py_test_silent_cmd \"python f1 = gdb.selected_frame ()\" \"get second frame\" 0\n gdb_py_test_silent_cmd \"python f0 = f1.newer ()\" \"get first frame\" 0\n+gdb_py_test_silent_cmd \"python f2 = f1.older ()\" \"get last frame\" 0\n+\n+# Check the Frame.level method.\n+gdb_test \"python print ('bframe.level = %d' % bframe.level ())\" \\\n+    \"bframe\\\\.level = 0\"\n+gdb_test \"python print ('f0.level = %d' % f0.level ())\" \\\n+    \"f0\\\\.level = 0\"\n+gdb_test \"python print ('f1.level = %d' % f1.level ())\" \\\n+    \"f1\\\\.level = 1\"\n+gdb_test \"python print ('f2.level = %d' % f2.level ())\" \\\n+    \"f2\\\\.level = 2\"\n \n gdb_test \"python print (f1 == gdb.newest_frame())\" False \\\n     \"selected frame -vs- newest frame\""
    },
    {
      "sha": "5e5495c1d71fe39b3ad1919139c1df1c8dafeea3",
      "filename": "gdb/testsuite/gdb.python/py-pending-frame-level.c",
      "status": "added",
      "additions": 49,
      "deletions": 0,
      "changes": 49,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d52b8007213eea4d1f33e3a604481f390d37b52a/gdb/testsuite/gdb.python/py-pending-frame-level.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d52b8007213eea4d1f33e3a604481f390d37b52a/gdb/testsuite/gdb.python/py-pending-frame-level.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.python/py-pending-frame-level.c?ref=d52b8007213eea4d1f33e3a604481f390d37b52a",
      "patch": "@@ -0,0 +1,49 @@\n+/* This test program is part of GDB, the GNU debugger.\n+\n+   Copyright 2021 Free Software Foundation, Inc.\n+\n+   This program is free software; you can redistribute it and/or modify\n+   it under the terms of the GNU General Public License as published by\n+   the Free Software Foundation; either version 3 of the License, or\n+   (at your option) any later version.\n+\n+   This program is distributed in the hope that it will be useful,\n+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+   GNU General Public License for more details.\n+\n+   You should have received a copy of the GNU General Public License\n+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n+\n+volatile int global_var;\n+\n+void __attribute__ ((noinline))\n+f0 (void)\n+{\n+  ++global_var;\t\t/* Break here.  */\n+}\n+\n+void __attribute__ ((noinline))\n+f1 (void)\n+{\n+  f0 ();\n+}\n+\n+void __attribute__ ((noinline))\n+f2 (void)\n+{\n+  f1 ();\n+}\n+\n+void __attribute__ ((noinline))\n+f3 (void)\n+{\n+  f2 ();\n+}\n+\n+int\n+main (void)\n+{\n+  f3 ();\n+  return 0;\n+}"
    },
    {
      "sha": "1aadcaeacae4c85bcf4700f537b1276c9403ed87",
      "filename": "gdb/testsuite/gdb.python/py-pending-frame-level.exp",
      "status": "added",
      "additions": 65,
      "deletions": 0,
      "changes": 65,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d52b8007213eea4d1f33e3a604481f390d37b52a/gdb/testsuite/gdb.python/py-pending-frame-level.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d52b8007213eea4d1f33e3a604481f390d37b52a/gdb/testsuite/gdb.python/py-pending-frame-level.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.python/py-pending-frame-level.exp?ref=d52b8007213eea4d1f33e3a604481f390d37b52a",
      "patch": "@@ -0,0 +1,65 @@\n+# Copyright (C) 2021 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+# Test gdb.PendingFrame.level method.\n+\n+load_lib gdb-python.exp\n+\n+standard_testfile\n+\n+if { [prepare_for_testing \"failed to prepare\" ${testfile} ${srcfile}] } {\n+    return -1\n+}\n+\n+# Skip all tests if Python scripting is not enabled.\n+if { [skip_python_tests] } { continue }\n+\n+if ![runto_main] then {\n+    fail \"can't run to main\"\n+    return 0\n+}\n+\n+set pyfile [gdb_remote_download host ${srcdir}/${subdir}/${testfile}.py]\n+\n+gdb_breakpoint [gdb_get_line_number \"Break here\"]\n+gdb_continue_to_breakpoint \"stop at test breakpoint\"\n+\n+# An initial look at the stack to ensure it is correct.\n+gdb_test_sequence \"bt\"  \"Initial backtrace\" {\n+    \"\\\\r\\\\n#0 \\[^\\r\\n\\]* f0 \\\\(\\\\) at \"\n+    \"\\\\r\\\\n#1 \\[^\\r\\n\\]* f1 \\\\(\\\\) at \"\n+    \"\\\\r\\\\n#2 \\[^\\r\\n\\]* f2 \\\\(\\\\) at \"\n+    \"\\\\r\\\\n#3 \\[^\\r\\n\\]* f3 \\\\(\\\\) at \"\n+    \"\\\\r\\\\n#4 \\[^\\r\\n\\]* main \\\\(\\\\) at \"\n+}\n+\n+# Load the script containing the unwinder.\n+gdb_test_no_output \"source ${pyfile}\"\\\n+    \"import python scripts\"\n+\n+# Now look at the stack again, we should see output from the Python\n+# unwinder mixed in.\n+gdb_test_sequence \"bt\"  \"Backtrace with extra Python output\" {\n+    \"Func f0, Level 0\"\n+    \"Func f1, Level 1\"\n+    \"\\\\r\\\\n#0 \\[^\\r\\n\\]* f0 \\\\(\\\\) at \"\n+    \"\\\\r\\\\n#1 \\[^\\r\\n\\]* f1 \\\\(\\\\) at \"\n+    \"Func f2, Level 2\"\n+    \"\\\\r\\\\n#2 \\[^\\r\\n\\]* f2 \\\\(\\\\) at \"\n+    \"Func f3, Level 3\"\n+    \"\\\\r\\\\n#3 \\[^\\r\\n\\]* f3 \\\\(\\\\) at \"\n+    \"Func main, Level 4\"\n+    \"\\\\r\\\\n#4 \\[^\\r\\n\\]* main \\\\(\\\\) at \"\n+}"
    },
    {
      "sha": "87b226cef6beb0072fe4e375371d9ec4cd51a0b0",
      "filename": "gdb/testsuite/gdb.python/py-pending-frame-level.py",
      "status": "added",
      "additions": 55,
      "deletions": 0,
      "changes": 55,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d52b8007213eea4d1f33e3a604481f390d37b52a/gdb/testsuite/gdb.python/py-pending-frame-level.py",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d52b8007213eea4d1f33e3a604481f390d37b52a/gdb/testsuite/gdb.python/py-pending-frame-level.py",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.python/py-pending-frame-level.py?ref=d52b8007213eea4d1f33e3a604481f390d37b52a",
      "patch": "@@ -0,0 +1,55 @@\n+# Copyright (C) 2021 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+import gdb\n+from gdb.unwinder import Unwinder\n+\n+\n+class FrameId(object):\n+    def __init__(self, sp, pc):\n+        self._sp = sp\n+        self._pc = pc\n+\n+    @property\n+    def sp(self):\n+        return self._sp\n+\n+    @property\n+    def pc(self):\n+        return self._pc\n+\n+\n+class TestUnwinder(Unwinder):\n+    def __init__(self):\n+        Unwinder.__init__(self, \"show level\")\n+\n+    def __call__(self, pending_frame):\n+        pc_desc = pending_frame.architecture().registers().find(\"pc\")\n+        pc = pending_frame.read_register(pc_desc)\n+\n+        block = gdb.block_for_pc(int(pc))\n+        if block is None:\n+            return None\n+        func = block.function\n+        if func is None:\n+            return None\n+\n+        print(\"Func %s, Level %d\" % (str(func), pending_frame.level()))\n+\n+        # This unwinder never claims any frames.\n+        return None\n+\n+\n+gdb.unwinder.register_unwinder(None, TestUnwinder(), True)"
    }
  ]
}