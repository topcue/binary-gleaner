{
  "sha": "03c0f9c2057d361a1d9e717624ab94e4b7d67bf2",
  "node_id": "C_kwDOANOeidoAKDAzYzBmOWMyMDU3ZDM2MWExZDllNzE3NjI0YWI5NGU0YjdkNjdiZjI",
  "commit": {
    "author": {
      "name": "Mike Frysinger",
      "email": "vapier@gentoo.org",
      "date": "2021-11-22T04:35:22Z"
    },
    "committer": {
      "name": "Mike Frysinger",
      "email": "vapier@gentoo.org",
      "date": "2021-11-27T00:17:59Z"
    },
    "message": "sim: testsuite: rename global_sim_options to SIMFLAGS_FOR_TARGET\n\nNow that all the other toolchain settings have been renamed to match\nthe dejagnu settings of XXX_FOR_TARGET, rename global_sim_options to\nSIMFLAGS_FOR_TARGET too.",
    "tree": {
      "sha": "8a88710a2906644b7e78888fadcd917f2f410aaa",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/8a88710a2906644b7e78888fadcd917f2f410aaa"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/03c0f9c2057d361a1d9e717624ab94e4b7d67bf2",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/03c0f9c2057d361a1d9e717624ab94e4b7d67bf2",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/03c0f9c2057d361a1d9e717624ab94e4b7d67bf2",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/03c0f9c2057d361a1d9e717624ab94e4b7d67bf2/comments",
  "author": {
    "login": "vapier",
    "id": 176950,
    "node_id": "MDQ6VXNlcjE3Njk1MA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/176950?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vapier",
    "html_url": "https://github.com/vapier",
    "followers_url": "https://api.github.com/users/vapier/followers",
    "following_url": "https://api.github.com/users/vapier/following{/other_user}",
    "gists_url": "https://api.github.com/users/vapier/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vapier/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vapier/subscriptions",
    "organizations_url": "https://api.github.com/users/vapier/orgs",
    "repos_url": "https://api.github.com/users/vapier/repos",
    "events_url": "https://api.github.com/users/vapier/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vapier/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "vapier",
    "id": 176950,
    "node_id": "MDQ6VXNlcjE3Njk1MA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/176950?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vapier",
    "html_url": "https://github.com/vapier",
    "followers_url": "https://api.github.com/users/vapier/followers",
    "following_url": "https://api.github.com/users/vapier/following{/other_user}",
    "gists_url": "https://api.github.com/users/vapier/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vapier/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vapier/subscriptions",
    "organizations_url": "https://api.github.com/users/vapier/orgs",
    "repos_url": "https://api.github.com/users/vapier/repos",
    "events_url": "https://api.github.com/users/vapier/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vapier/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "d07ada6f5a27da66ff83455834e6c3a939816196",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d07ada6f5a27da66ff83455834e6c3a939816196",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/d07ada6f5a27da66ff83455834e6c3a939816196"
    }
  ],
  "stats": {
    "total": 56,
    "additions": 19,
    "deletions": 37
  },
  "files": [
    {
      "sha": "66e76f62fe9a80708fd0a4c82d6e8b21b16dc708",
      "filename": "sim/testsuite/bpf/allinsn.exp",
      "status": "modified",
      "additions": 2,
      "deletions": 4,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/03c0f9c2057d361a1d9e717624ab94e4b7d67bf2/sim/testsuite/bpf/allinsn.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/03c0f9c2057d361a1d9e717624ab94e4b7d67bf2/sim/testsuite/bpf/allinsn.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/testsuite/bpf/allinsn.exp?ref=03c0f9c2057d361a1d9e717624ab94e4b7d67bf2",
      "patch": "@@ -4,10 +4,8 @@ if [istarget bpf-unknown-none] {\n     # all machines\n     set all_machs \"bpf\"\n \n-    global global_sim_options\n-    if ![info exists global_sim_options] {\n-\tset global_sim_options \"--memory-size=4Mb\"\n-    }\n+    global SIMFLAGS_FOR_TARGET\n+    set SIMFLAGS_FOR_TARGET \"--memory-size=4Mb\"\n \n     global LDFLAGS_FOR_TARGET\n     set LDFLAGS_FOR_TARGET \"-Ttext=0x0\""
    },
    {
      "sha": "7105a1a8248ffee5e4d719e0ecdbe6abcba82d0e",
      "filename": "sim/testsuite/cr16/allinsn.exp",
      "status": "modified",
      "additions": 2,
      "deletions": 8,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/03c0f9c2057d361a1d9e717624ab94e4b7d67bf2/sim/testsuite/cr16/allinsn.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/03c0f9c2057d361a1d9e717624ab94e4b7d67bf2/sim/testsuite/cr16/allinsn.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/testsuite/cr16/allinsn.exp?ref=03c0f9c2057d361a1d9e717624ab94e4b7d67bf2",
      "patch": "@@ -4,14 +4,10 @@ if [istarget cr16*-*-*] {\n     # all machines\n     set all_machs \"cr16\"\n \n-    global global_sim_options\n-    if ![info exists global_sim_options] {\n-\tset global_sim_options \"\"\n-    }\n-    set saved_global_sim_options $global_sim_options\n+    global SIMFLAGS_FOR_TARGET\n     # The cr16 linker sets the default LMA base to 0, and all the code\n     # expects the VMA when running, so use that when running the tests.\n-    set global_sim_options \"$saved_global_sim_options --load-vma\"\n+    set SIMFLAGS_FOR_TARGET \"--load-vma\"\n \n     # The .cgs suffix is for \"cgen .s\".\n     foreach src [lsort [glob -nocomplain $srcdir/$subdir/*.cgs]] {\n@@ -23,6 +19,4 @@ if [istarget cr16*-*-*] {\n \n \trun_sim_test $src $all_machs\n     }\n-\n-    set global_sim_options $saved_global_sim_options\n }"
    },
    {
      "sha": "bb1bef3f78bb5b889424c8bb2d240d404c7e8b5b",
      "filename": "sim/testsuite/cr16/misc.exp",
      "status": "modified",
      "additions": 2,
      "deletions": 8,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/03c0f9c2057d361a1d9e717624ab94e4b7d67bf2/sim/testsuite/cr16/misc.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/03c0f9c2057d361a1d9e717624ab94e4b7d67bf2/sim/testsuite/cr16/misc.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/testsuite/cr16/misc.exp?ref=03c0f9c2057d361a1d9e717624ab94e4b7d67bf2",
      "patch": "@@ -4,14 +4,10 @@ if [istarget cr16*-*-*] {\n     # all machines\n     set all_machs \"cr16\"\n \n-    global global_sim_options\n-    if ![info exists global_sim_options] {\n-\tset global_sim_options \"\"\n-    }\n-    set saved_global_sim_options $global_sim_options\n+    global SIMFLAGS_FOR_TARGET\n     # The cr16 linker sets the default LMA base to 0, and all the code\n     # expects the VMA when running, so use that when running the tests.\n-    set global_sim_options \"$saved_global_sim_options --load-vma\"\n+    set SIMFLAGS_FOR_TARGET \"--load-vma\"\n \n     # The .ms suffix is for \"miscellaneous .s\".\n     foreach src [lsort [glob -nocomplain $srcdir/$subdir/*.ms]] {\n@@ -23,6 +19,4 @@ if [istarget cr16*-*-*] {\n \n \trun_sim_test $src $all_machs\n     }\n-\n-    set global_sim_options $saved_global_sim_options\n }"
    },
    {
      "sha": "5d7126cc6e3fa950108ed0a2d8c4d7ad9c8ff099",
      "filename": "sim/testsuite/cris/hw/rv-n-cris/rvc.exp",
      "status": "modified",
      "additions": 9,
      "deletions": 13,
      "changes": 22,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/03c0f9c2057d361a1d9e717624ab94e4b7d67bf2/sim/testsuite/cris/hw/rv-n-cris/rvc.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/03c0f9c2057d361a1d9e717624ab94e4b7d67bf2/sim/testsuite/cris/hw/rv-n-cris/rvc.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/testsuite/cris/hw/rv-n-cris/rvc.exp?ref=03c0f9c2057d361a1d9e717624ab94e4b7d67bf2",
      "patch": "@@ -21,7 +21,7 @@\n proc sim_has_rv_and_cris {} {\n     global srcdir\n     global subdir\n-    global global_sim_options\n+    global SIMFLAGS_FOR_TARGET\n \n     # We need to assemble and link a trivial program and pass that, in\n     # order to test successful exit.\n@@ -30,8 +30,8 @@ proc sim_has_rv_and_cris {} {\n     # what we want to do it to run the simulator without affecting the\n     # PASS/FAIL counters, and we can use e.g. run_sim_test for that.\n \n-    if ![info exists global_sim_options] {\n-        set global_sim_options \"\"\n+    if ![info exists SIMFLAGS_FOR_TARGET] {\n+\tset SIMFLAGS_FOR_TARGET \"\"\n     }\n \n     set comp_output [target_assemble $srcdir/$subdir/quit.s quit.o \\\n@@ -53,7 +53,7 @@ proc sim_has_rv_and_cris {} {\n \n     set result \\\n \t[sim_run quit.x \\\n-\t     \"$global_sim_options --hw-device rv --hw-device cris --hw-info\" \\\n+\t     \"$SIMFLAGS_FOR_TARGET --hw-device rv --hw-device cris --hw-info\" \\\n \t     \"\" \"\" \"\"]\n     set return_code [lindex $result 0]\n     set output [lindex $result 1]\n@@ -111,10 +111,8 @@ proc slurp_rv { file } {\n if [istarget cris*-*-*] {\n     global ASFLAGS_FOR_TARGET\n     global LDFLAGS_FOR_TARGET\n+    global SIMFLAGS_FOR_TARGET\n     set has_rv_and_cris [sim_has_rv_and_cris]\n-    global global_sim_options\n-\n-    set saved_global_sim_options $global_sim_options\n \n     # See the logic in sim-defs.exp for more details.\n     set sim [board_info target sim]\n@@ -156,7 +154,9 @@ if [istarget cris*-*-*] {\n \t\tcontinue\n \t    }\n \n-\t    set sim_defaults \"--hw-file $srcdir/$subdir/std.dev\"\n+\t    # Unfortunately this seems like the only way to pass\n+\t    # additional sim, ld etc. options to run_sim_test.\n+\t    set SIMFLAGS_FOR_TARGET \"--hw-file $srcdir/$subdir/std.dev\"\n \t    set LDFLAGS_FOR_TARGET \"--section-start=.text=0\"\n \n \t    # We parse options an extra time besides in run_sim_test,\n@@ -171,7 +171,7 @@ if [istarget cris*-*-*] {\n \t\t# Allow concatenating to the default options by\n \t\t# specifying a mach.\n \t\tif { $opt_name == \"sim\" && $opt_machs == \"\" } {\n-\t\t    set sim_defaults \"\"\n+\t\t    set SIMFLAGS_FOR_TARGET \"\"\n \t\t}\n \t    }\n \n@@ -208,11 +208,7 @@ if [istarget cris*-*-*] {\n \t\tset rvdummy_id $spawn_id\n \t    }\n \n-\t    # Unfortunately this seems like the only way to pass\n-\t    # additional sim, ld etc. options to run_sim_test.\n-\t    set global_sim_options \"$saved_global_sim_options $sim_defaults\"\n \t    run_sim_test $src $mach\n-\t    set global_sim_options $saved_global_sim_options\n \n \t    # Stop the rvdummy, if it's still running.  We need to\n \t    # wait on it anyway to avoid it turning into a zombie."
    },
    {
      "sha": "d10246e5238535ca9d9d28e380318849020c7cdf",
      "filename": "sim/testsuite/lib/sim-defs.exp",
      "status": "modified",
      "additions": 4,
      "deletions": 4,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/03c0f9c2057d361a1d9e717624ab94e4b7d67bf2/sim/testsuite/lib/sim-defs.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/03c0f9c2057d361a1d9e717624ab94e4b7d67bf2/sim/testsuite/lib/sim-defs.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/testsuite/lib/sim-defs.exp?ref=03c0f9c2057d361a1d9e717624ab94e4b7d67bf2",
      "patch": "@@ -185,7 +185,7 @@ proc run_sim_test { name requested_machs } {\n     global opts\n     global cpu_option\n     global cpu_option_sep\n-    global global_sim_options\n+    global SIMFLAGS_FOR_TARGET\n \n     if ![file exists [sim_tool_path]] {\n \tunsupported \"$name: missing simulator [sim_tool_path]\"\n@@ -219,8 +219,8 @@ proc run_sim_test { name requested_machs } {\n     set opts(kfail) \"\"\n     set seen_output 0\n \n-    if ![info exists global_sim_options] {\n-        set global_sim_options \"\"\n+    if ![info exists SIMFLAGS_FOR_TARGET] {\n+\tset SIMFLAGS_FOR_TARGET \"\"\n     }\n \n     # Clear any machine specific options specified in a previous test case\n@@ -368,7 +368,7 @@ proc run_sim_test { name requested_machs } {\n \t    set options \"$options timeout=$opts(timeout)\"\n \t}\n \n-\tset result [sim_run ${name}.x \"$opts(sim,$mach) $global_sim_options\" \"$opts(progopts)\" \"\" \"$options\"]\n+\tset result [sim_run ${name}.x \"$opts(sim,$mach) $SIMFLAGS_FOR_TARGET\" \"$opts(progopts)\" \"\" \"$options\"]\n \tset return_code [lindex $result 0]\n \tset output [lindex $result 1]\n "
    }
  ]
}