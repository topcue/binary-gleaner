{
  "sha": "49078ece048d0871508218203744f95e68ba5b4a",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NDkwNzhlY2UwNDhkMDg3MTUwODIxODIwMzc0NGY5NWU2OGJhNWI0YQ==",
  "commit": {
    "author": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2020-01-06T09:21:22Z"
    },
    "committer": {
      "name": "Alan Modra",
      "email": "amodra@gmail.com",
      "date": "2020-01-06T11:23:51Z"
    },
    "message": "bfd_check_format: ignore errors from coff_real_object_p\n\nSince 1993-11-05 git commit c188b0bec3b, bfd_check_format has failed\nif any of the target object_p functions returns false with any error\nbut bfd_error_wrong_format.  That's just weird.  There is really no\nreason why coff_real_object_p should be fixed to only return that\nerror instead of numerous other possible errors.  Even an out of\nmemory condition for one target doesn't necessarily mean other targets\ncan't match, assuming the failing target nicely returns all memory it\nmight have used.\n\n\t* format.c (bfd_check_format_matches): Ignore bfd_error on target\n\tmatch failures.  Don't init to bfd_error_wrong_format before\n\tcalling _bfd_check_format.",
    "tree": {
      "sha": "7431f2866ed84e221a3bc5b8536b2dffc4988e72",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/7431f2866ed84e221a3bc5b8536b2dffc4988e72"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/49078ece048d0871508218203744f95e68ba5b4a",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/49078ece048d0871508218203744f95e68ba5b4a",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/49078ece048d0871508218203744f95e68ba5b4a",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/49078ece048d0871508218203744f95e68ba5b4a/comments",
  "author": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "amodra",
    "id": 6006325,
    "node_id": "MDQ6VXNlcjYwMDYzMjU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/amodra",
    "html_url": "https://github.com/amodra",
    "followers_url": "https://api.github.com/users/amodra/followers",
    "following_url": "https://api.github.com/users/amodra/following{/other_user}",
    "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/amodra/subscriptions",
    "organizations_url": "https://api.github.com/users/amodra/orgs",
    "repos_url": "https://api.github.com/users/amodra/repos",
    "events_url": "https://api.github.com/users/amodra/events{/privacy}",
    "received_events_url": "https://api.github.com/users/amodra/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "ab356be74c0a74d3baf24e24aadfc0a2051a077c",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ab356be74c0a74d3baf24e24aadfc0a2051a077c",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/ab356be74c0a74d3baf24e24aadfc0a2051a077c"
    }
  ],
  "stats": {
    "total": 14,
    "additions": 6,
    "deletions": 8
  },
  "files": [
    {
      "sha": "97c9309616d50c285710acfdcec13691725182b1",
      "filename": "bfd/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/49078ece048d0871508218203744f95e68ba5b4a/bfd/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/49078ece048d0871508218203744f95e68ba5b4a/bfd/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/ChangeLog?ref=49078ece048d0871508218203744f95e68ba5b4a",
      "patch": "@@ -1,3 +1,9 @@\n+2020-01-06  Alan Modra  <amodra@gmail.com>\n+\n+\t* format.c (bfd_check_format_matches): Ignore bfd_error on target\n+\tmatch failures.  Don't init to bfd_error_wrong_format before\n+\tcalling _bfd_check_format.\n+\n 2020-01-06  Alan Modra  <amodra@gmail.com>\n \n \t* vms-alpha.c (_bfd_vms_push, _bfd_vms_pop): Return pass/fail"
    },
    {
      "sha": "a80a175b8ae90b9c377a9f0bd5a3d578c1d36ec0",
      "filename": "bfd/format.c",
      "status": "modified",
      "additions": 0,
      "deletions": 8,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/49078ece048d0871508218203744f95e68ba5b4a/bfd/format.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/49078ece048d0871508218203744f95e68ba5b4a/bfd/format.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/format.c?ref=49078ece048d0871508218203744f95e68ba5b4a",
      "patch": "@@ -325,12 +325,6 @@ bfd_check_format_matches (bfd *abfd, bfd_format format, char ***matching)\n       if (bfd_seek (abfd, (file_ptr) 0, SEEK_SET) != 0)\n \tgoto err_ret;\n \n-      /* If _bfd_check_format neglects to set bfd_error, assume\n-\t bfd_error_wrong_format.  We didn't used to even pay any\n-\t attention to bfd_error, so I suspect that some\n-\t _bfd_check_format might have this problem.  */\n-      bfd_set_error (bfd_error_wrong_format);\n-\n       temp = BFD_SEND_FMT (abfd, _bfd_check_format, (abfd));\n       if (temp)\n \t{\n@@ -389,8 +383,6 @@ bfd_check_format_matches (bfd *abfd, bfd_format format, char ***matching)\n \t\tgoto err_ret;\n \t    }\n \t}\n-      else if (bfd_get_error () != bfd_error_wrong_format)\n-\tgoto err_ret;\n     }\n \n   if (best_count == 1)"
    }
  ]
}