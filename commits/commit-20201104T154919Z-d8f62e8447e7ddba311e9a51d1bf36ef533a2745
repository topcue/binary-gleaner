{
  "sha": "d8f62e8447e7ddba311e9a51d1bf36ef533a2745",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZDhmNjJlODQ0N2U3ZGRiYTMxMWU5YTUxZDFiZjM2ZWY1MzNhMjc0NQ==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2020-11-04T15:49:16Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2020-11-04T15:49:19Z"
    },
    "message": "Recognize names of array types\n\nWith -fgnat-encodings=minimal, Gnat will emit DW_TAG_array_type that\nhas a name -- and this is the only time the name is emitted for the\ntype.  (For comparison, in C a typedef would be emitted in this\nsituation.)\n\nThis patch changes gdb to recognize the name of an array type.  This\nis limited to Ada, to avoid any potential problems if some rogue DWARF\nhappens to name an array type in some other language, and to avoid\nloading unnecessary partial DIEs.\n\ngdb/ChangeLog\n2020-11-04  Tom Tromey  <tromey@adacore.com>\n\n\t* dwarf2/read.c (add_partial_symbol, process_die):\n\tHandle DW_TAG_array_type.\n\t(is_type_tag_for_partial): Add \"lang\" parameter.\n\t(load_partial_dies, new_symbol): Handle DW_TAG_array_type.\n\ngdb/testsuite/ChangeLog\n2020-11-04  Tom Tromey  <tromey@adacore.com>\n\n\t* gdb.ada/tick_length_array_enum_idx.exp: Add ptype test.\n\t* gdb.ada/tick_length_array_enum_idx/foo_n207_004.adb\n\t(PT_Full): New variable.\n\t* gdb.ada/tick_length_array_enum_idx/pck.adb\n\t(Full_PT): New type.",
    "tree": {
      "sha": "48470d5feac3458a64216979d061fa730602be1d",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/48470d5feac3458a64216979d061fa730602be1d"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/d8f62e8447e7ddba311e9a51d1bf36ef533a2745",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d8f62e8447e7ddba311e9a51d1bf36ef533a2745",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/d8f62e8447e7ddba311e9a51d1bf36ef533a2745",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d8f62e8447e7ddba311e9a51d1bf36ef533a2745/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "7ff5b9370f4f7c0c75d734aa19b8f020429d4bb5",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/7ff5b9370f4f7c0c75d734aa19b8f020429d4bb5",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/7ff5b9370f4f7c0c75d734aa19b8f020429d4bb5"
    }
  ],
  "stats": {
    "total": 47,
    "additions": 42,
    "deletions": 5
  },
  "files": [
    {
      "sha": "913b7ecc5e15958d3a6d941d12eb8c343b3d5cb0",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d8f62e8447e7ddba311e9a51d1bf36ef533a2745/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d8f62e8447e7ddba311e9a51d1bf36ef533a2745/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=d8f62e8447e7ddba311e9a51d1bf36ef533a2745",
      "patch": "@@ -1,3 +1,10 @@\n+2020-11-04  Tom Tromey  <tromey@adacore.com>\n+\n+\t* dwarf2/read.c (add_partial_symbol, process_die):\n+\tHandle DW_TAG_array_type.\n+\t(is_type_tag_for_partial): Add \"lang\" parameter.\n+\t(load_partial_dies, new_symbol): Handle DW_TAG_array_type.\n+\n 2020-11-04  Tom Tromey  <tromey@adacore.com>\n \n \t* ada-lang.c (ada_value_slice_from_ptr): Use bit size."
    },
    {
      "sha": "57db648061e538434fe08b2e574f214131ef281b",
      "filename": "gdb/dwarf2/read.c",
      "status": "modified",
      "additions": 21,
      "deletions": 5,
      "changes": 26,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d8f62e8447e7ddba311e9a51d1bf36ef533a2745/gdb/dwarf2/read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d8f62e8447e7ddba311e9a51d1bf36ef533a2745/gdb/dwarf2/read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2/read.c?ref=d8f62e8447e7ddba311e9a51d1bf36ef533a2745",
      "patch": "@@ -8575,6 +8575,7 @@ add_partial_symbol (struct partial_die_info *pdi, struct dwarf2_cu *cu)\n \t  where = psymbol_placement::STATIC;\n \t}\n       break;\n+    case DW_TAG_array_type:\n     case DW_TAG_typedef:\n     case DW_TAG_base_type:\n     case DW_TAG_subrange_type:\n@@ -10202,14 +10203,20 @@ process_die (struct die_info *die, struct dwarf2_cu *cu)\n        read them on-demand through read_type_die.  */\n     case DW_TAG_subroutine_type:\n     case DW_TAG_set_type:\n-    case DW_TAG_array_type:\n     case DW_TAG_pointer_type:\n     case DW_TAG_ptr_to_member_type:\n     case DW_TAG_reference_type:\n     case DW_TAG_rvalue_reference_type:\n     case DW_TAG_string_type:\n       break;\n \n+    case DW_TAG_array_type:\n+      /* We only need to handle this case for Ada -- in other\n+\t languages, it's normal for the compiler to emit a typedef\n+\t instead.  */\n+      if (cu->language != language_ada)\n+\tbreak;\n+      /* FALLTHROUGH */\n     case DW_TAG_base_type:\n     case DW_TAG_subrange_type:\n     case DW_TAG_typedef:\n@@ -18984,20 +18991,27 @@ read_full_die (const struct die_reader_specs *reader,\n    symbol for.  */\n \n static int\n-is_type_tag_for_partial (int tag)\n+is_type_tag_for_partial (int tag, enum language lang)\n {\n   switch (tag)\n     {\n #if 0\n     /* Some types that would be reasonable to generate partial symbols for,\n-       that we don't at present.  */\n-    case DW_TAG_array_type:\n+       that we don't at present.  Note that normally this does not\n+       matter, mainly because C compilers don't give names to these\n+       types, but instead emit DW_TAG_typedef.  */\n     case DW_TAG_file_type:\n     case DW_TAG_ptr_to_member_type:\n     case DW_TAG_set_type:\n     case DW_TAG_string_type:\n     case DW_TAG_subroutine_type:\n #endif\n+\n+      /* GNAT may emit an array with a name, but no typedef, so we\n+\t need to make a symbol in this case.  */\n+    case DW_TAG_array_type:\n+      return lang == language_ada;\n+\n     case DW_TAG_base_type:\n     case DW_TAG_class_type:\n     case DW_TAG_interface_type:\n@@ -19091,7 +19105,7 @@ load_partial_dies (const struct die_reader_specs *reader,\n \t later variables referencing them via DW_AT_specification (for\n \t static members).  */\n       if (!load_all\n-\t  && !is_type_tag_for_partial (abbrev->tag)\n+\t  && !is_type_tag_for_partial (abbrev->tag, cu->language)\n \t  && abbrev->tag != DW_TAG_constant\n \t  && abbrev->tag != DW_TAG_enumerator\n \t  && abbrev->tag != DW_TAG_subprogram\n@@ -19135,6 +19149,7 @@ load_partial_dies (const struct die_reader_specs *reader,\n \t  && pdi.is_declaration == 0\n \t  && ((pdi.tag == DW_TAG_typedef && !pdi.has_children)\n \t      || pdi.tag == DW_TAG_base_type\n+\t      || pdi.tag == DW_TAG_array_type\n \t      || pdi.tag == DW_TAG_subrange_type))\n \t{\n \t  if (building_psymtab && pdi.raw_name != NULL)\n@@ -22028,6 +22043,7 @@ new_symbol (struct die_info *die, struct type *type, struct dwarf2_cu *cu,\n \t  SYMBOL_DOMAIN (sym) = VAR_DOMAIN;\n \t  list_to_add = cu->list_in_scope;\n \t  break;\n+\tcase DW_TAG_array_type:\n \tcase DW_TAG_base_type:\n \tcase DW_TAG_subrange_type:\n \t  SYMBOL_ACLASS_INDEX (sym) = LOC_TYPEDEF;"
    },
    {
      "sha": "745413a2e7a8074026c2b6e835191bc9f4357529",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d8f62e8447e7ddba311e9a51d1bf36ef533a2745/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d8f62e8447e7ddba311e9a51d1bf36ef533a2745/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=d8f62e8447e7ddba311e9a51d1bf36ef533a2745",
      "patch": "@@ -1,3 +1,11 @@\n+2020-11-04  Tom Tromey  <tromey@adacore.com>\n+\n+\t* gdb.ada/tick_length_array_enum_idx.exp: Add ptype test.\n+\t* gdb.ada/tick_length_array_enum_idx/foo_n207_004.adb\n+\t(PT_Full): New variable.\n+\t* gdb.ada/tick_length_array_enum_idx/pck.adb\n+\t(Full_PT): New type.\n+\n 2020-11-04  Tom Tromey  <tromey@adacore.com>\n \n \t* gdb.ada/array_of_variant.exp: New file."
    },
    {
      "sha": "6dd01aca2b63ee3245c1fa603ad5faa6ac34fe46",
      "filename": "gdb/testsuite/gdb.ada/tick_length_array_enum_idx.exp",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d8f62e8447e7ddba311e9a51d1bf36ef533a2745/gdb/testsuite/gdb.ada/tick_length_array_enum_idx.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d8f62e8447e7ddba311e9a51d1bf36ef533a2745/gdb/testsuite/gdb.ada/tick_length_array_enum_idx.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.ada/tick_length_array_enum_idx.exp?ref=d8f62e8447e7ddba311e9a51d1bf36ef533a2745",
      "patch": "@@ -41,3 +41,4 @@ gdb_test \"ptype vars'length\" \"type = <$decimal-byte integer>\"\n gdb_test \"ptype full_table'length\" \"type = <$decimal-byte integer>\"\n gdb_test \"ptype primary_table'length\" \"type = <$decimal-byte integer>\"\n gdb_test \"ptype variable_table'length\" \"type = <$decimal-byte integer>\"\n+gdb_test \"ptype full_pt'length\" \"type = <$decimal-byte integer>\""
    },
    {
      "sha": "0b2584fa73c8d56058d5ddbff23d569532a40648",
      "filename": "gdb/testsuite/gdb.ada/tick_length_array_enum_idx/foo_n207_004.adb",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d8f62e8447e7ddba311e9a51d1bf36ef533a2745/gdb/testsuite/gdb.ada/tick_length_array_enum_idx/foo_n207_004.adb",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d8f62e8447e7ddba311e9a51d1bf36ef533a2745/gdb/testsuite/gdb.ada/tick_length_array_enum_idx/foo_n207_004.adb",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.ada/tick_length_array_enum_idx/foo_n207_004.adb?ref=d8f62e8447e7ddba311e9a51d1bf36ef533a2745",
      "patch": "@@ -20,9 +20,11 @@ procedure Foo_n207_004 is\n    Prim : Primary_Table := (True, False, False);\n    Cold : Variable_Table := (Green => False, Blue => True, White => True);\n    Vars : Variable_Table :=  New_Variable_Table (Low => Red, High => Green);\n+   PT_Full : Full_PT := (False, True, False, True, False);\n begin\n    Do_Nothing (Full'Address);  -- STOP\n    Do_Nothing (Prim'Address);\n    Do_Nothing (Cold'Address);\n    Do_Nothing (Vars'Address);\n+   Do_Nothing (PT_Full'Address);\n end Foo_n207_004;"
    },
    {
      "sha": "461bee5377a8f7c186b2c3aefc61395bdca3feb9",
      "filename": "gdb/testsuite/gdb.ada/tick_length_array_enum_idx/pck.ads",
      "status": "modified",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d8f62e8447e7ddba311e9a51d1bf36ef533a2745/gdb/testsuite/gdb.ada/tick_length_array_enum_idx/pck.ads",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d8f62e8447e7ddba311e9a51d1bf36ef533a2745/gdb/testsuite/gdb.ada/tick_length_array_enum_idx/pck.ads",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.ada/tick_length_array_enum_idx/pck.ads?ref=d8f62e8447e7ddba311e9a51d1bf36ef533a2745",
      "patch": "@@ -21,6 +21,9 @@ package Pck is\n    type Primary_Table is array (Color range Red .. Blue) of Boolean;\n    type Variable_Table is array (Color range <>) of Boolean;\n \n+   type Full_PT is array (Color) of Boolean;\n+   pragma Pack (Full_PT);\n+\n    function New_Variable_Table (Low: Color; High: Color) return Variable_Table;\n \n    procedure Do_Nothing (A : System.Address);"
    }
  ]
}