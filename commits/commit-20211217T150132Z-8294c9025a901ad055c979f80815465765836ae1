{
  "sha": "8294c9025a901ad055c979f80815465765836ae1",
  "node_id": "C_kwDOANOeidoAKDgyOTRjOTAyNWE5MDFhZDA1NWM5NzlmODA4MTU0NjU3NjU4MzZhZTE",
  "commit": {
    "author": {
      "name": "Maciej W. Rozycki",
      "email": "macro@embecosm.com",
      "date": "2021-12-17T15:01:32Z"
    },
    "committer": {
      "name": "Maciej W. Rozycki",
      "email": "macro@embecosm.com",
      "date": "2021-12-17T15:01:32Z"
    },
    "message": "Avoid redundant operations in `fortran_array_walker'\n\nMove inner dimension's element type determination outside the respective\nloops in `fortran_array_walker'.  The operation is exactly the same with\neach iteration, so there is no point in redoing it for each element and\nwhile a smart compiler might be able to move it outside the loop it is\nregardless a bad coding style.  No functional change.",
    "tree": {
      "sha": "65a359308adb1e769184a6f165c4c5fd8a7a12fa",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/65a359308adb1e769184a6f165c4c5fd8a7a12fa"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/8294c9025a901ad055c979f80815465765836ae1",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8294c9025a901ad055c979f80815465765836ae1",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/8294c9025a901ad055c979f80815465765836ae1",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8294c9025a901ad055c979f80815465765836ae1/comments",
  "author": null,
  "committer": null,
  "parents": [
    {
      "sha": "c12d6b570d929eabbe56160baaf85348b0fdf521",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c12d6b570d929eabbe56160baaf85348b0fdf521",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/c12d6b570d929eabbe56160baaf85348b0fdf521"
    }
  ],
  "stats": {
    "total": 7,
    "additions": 4,
    "deletions": 3
  },
  "files": [
    {
      "sha": "646f4cbe7be8f2af78444d47f2a47a1422f76ceb",
      "filename": "gdb/f-array-walker.h",
      "status": "modified",
      "additions": 4,
      "deletions": 3,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8294c9025a901ad055c979f80815465765836ae1/gdb/f-array-walker.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8294c9025a901ad055c979f80815465765836ae1/gdb/f-array-walker.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/f-array-walker.h?ref=8294c9025a901ad055c979f80815465765836ae1",
      "patch": "@@ -208,6 +208,8 @@ class fortran_array_walker\n \n     if (nss != m_ndimensions)\n       {\n+\tstruct type *subarray_type = TYPE_TARGET_TYPE (check_typedef (type));\n+\n \t/* For dimensions other than the inner most, walk each element and\n \t   recurse while peeling off one more dimension of the array.  */\n \tfor (LONGEST i = lowerbound;\n@@ -218,13 +220,13 @@ class fortran_array_walker\n \t    LONGEST new_offset = offset + calc.index_offset (i);\n \n \t    /* Now print the lower dimension.  */\n-\t    struct type *subarray_type\n-\t      = TYPE_TARGET_TYPE (check_typedef (type));\n \t    walk_1 (nss + 1, subarray_type, new_offset, (i == upperbound));\n \t  }\n       }\n     else\n       {\n+\tstruct type *elt_type = check_typedef (TYPE_TARGET_TYPE (type));\n+\n \t/* For the inner most dimension of the array, process each element\n \t   within this dimension.  */\n \tfor (LONGEST i = lowerbound;\n@@ -233,7 +235,6 @@ class fortran_array_walker\n \t  {\n \t    LONGEST elt_off = offset + calc.index_offset (i);\n \n-\t    struct type *elt_type = check_typedef (TYPE_TARGET_TYPE (type));\n \t    if (is_dynamic_type (elt_type))\n \t      {\n \t\tCORE_ADDR e_address = m_address + elt_off;"
    }
  ]
}