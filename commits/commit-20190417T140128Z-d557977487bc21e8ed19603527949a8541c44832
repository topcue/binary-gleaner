{
  "sha": "d557977487bc21e8ed19603527949a8541c44832",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZDU1Nzk3NzQ4N2JjMjFlOGVkMTk2MDM1Mjc5NDlhODU0MWM0NDgzMg==",
  "commit": {
    "author": {
      "name": "Jozef Lawrynowicz",
      "email": "jozef.l@mittosystems.com",
      "date": "2019-04-17T14:01:28Z"
    },
    "committer": {
      "name": "Nick Clifton",
      "email": "nickc@redhat.com",
      "date": "2019-04-17T14:01:28Z"
    },
    "message": "MSP420 assembler:  Add -m{u,U} options to enable/disable NOP warnings for unknown interrupt state changes\n\ngas\t* config/tc-msp430.c (options): New OPTION_UNKNOWN_INTR_NOPS,\n\tOPTION_NO_UNKNOWN_INTR_NOPS and do_unknown_interrupt_nops.\n\t(md_parse_option): Handle OPTION_UNKNOWN_INTR_NOPS and\n\tOPTION_NO_UNKNOWN_INTR_NOPS by setting do_unknown_interrupt_nops\n\taccordingly.\n\t(md_show_usage): Likewise.\n\t(md_shortopts): Add \"mu\" for OPTION_UNKNOWN_INTR_NOPS and\n\t\"mU\" for OPTION_NO_UNKNOWN_INTR_NOPS.\n\t(md_longopts): Likewise.\n\t(warn_eint_nop): Update comment.\n\t(warn_unsure_interrupt): Don't warn if prev_insn_is_nop or\n\tprev_insn_is_dint or we are assembling for 430 ISA.\n\t(msp430_operands): Only call warn_unsure_interrupt if\n\tdo_unknown_interrupt_nops == TRUE.\n\t* testsuite/gas/msp430/nop-unknown-intr.s: New test source file.\n\t* testsuite/gas/msp430/nop-unknown-intr-430.d: New test.\n\t* testsuite/gas/msp430/nop-unknown-intr-430x.d: New test.\n\t* testsuite/gas/msp430/nop-unknown-intr-430x-ignore.d: New test.\n\t* testsuite/gas/msp430/nop-unknown-intr-430.l: Warning output for new\n\ttest.\n\t* testsuite/gas/msp430/nop-unknown-intr-430x.l: Likewise.\n\t* testsuite/gas/msp430/msp430.exp: Add new tests to driver.",
    "tree": {
      "sha": "66864e66dc2eeca1c8ede8ac95232b39b3533f57",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/66864e66dc2eeca1c8ede8ac95232b39b3533f57"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/d557977487bc21e8ed19603527949a8541c44832",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d557977487bc21e8ed19603527949a8541c44832",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/d557977487bc21e8ed19603527949a8541c44832",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d557977487bc21e8ed19603527949a8541c44832/comments",
  "author": {
    "login": "jozefl-mitto",
    "id": 36524004,
    "node_id": "MDQ6VXNlcjM2NTI0MDA0",
    "avatar_url": "https://avatars.githubusercontent.com/u/36524004?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/jozefl-mitto",
    "html_url": "https://github.com/jozefl-mitto",
    "followers_url": "https://api.github.com/users/jozefl-mitto/followers",
    "following_url": "https://api.github.com/users/jozefl-mitto/following{/other_user}",
    "gists_url": "https://api.github.com/users/jozefl-mitto/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/jozefl-mitto/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/jozefl-mitto/subscriptions",
    "organizations_url": "https://api.github.com/users/jozefl-mitto/orgs",
    "repos_url": "https://api.github.com/users/jozefl-mitto/repos",
    "events_url": "https://api.github.com/users/jozefl-mitto/events{/privacy}",
    "received_events_url": "https://api.github.com/users/jozefl-mitto/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "nickclifton",
    "id": 31441682,
    "node_id": "MDQ6VXNlcjMxNDQxNjgy",
    "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickclifton",
    "html_url": "https://github.com/nickclifton",
    "followers_url": "https://api.github.com/users/nickclifton/followers",
    "following_url": "https://api.github.com/users/nickclifton/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions",
    "organizations_url": "https://api.github.com/users/nickclifton/orgs",
    "repos_url": "https://api.github.com/users/nickclifton/repos",
    "events_url": "https://api.github.com/users/nickclifton/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickclifton/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "a12e57448ecf2644e3ddc98bbd4bbb914a5f8c92",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a12e57448ecf2644e3ddc98bbd4bbb914a5f8c92",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/a12e57448ecf2644e3ddc98bbd4bbb914a5f8c92"
    }
  ],
  "stats": {
    "total": 208,
    "additions": 198,
    "deletions": 10
  },
  "files": [
    {
      "sha": "d6c80cb45e47e4a9d66235e179428611e002981e",
      "filename": "gas/ChangeLog",
      "status": "modified",
      "additions": 25,
      "deletions": 0,
      "changes": 25,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d557977487bc21e8ed19603527949a8541c44832/gas/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d557977487bc21e8ed19603527949a8541c44832/gas/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/ChangeLog?ref=d557977487bc21e8ed19603527949a8541c44832",
      "patch": "@@ -1,3 +1,28 @@\n+2019-04-17  Jozef Lawrynowicz  <jozef.l@mittosystems.com>\n+\n+\t* config/tc-msp430.c (options): New OPTION_UNKNOWN_INTR_NOPS,\n+\tOPTION_NO_UNKNOWN_INTR_NOPS and do_unknown_interrupt_nops.\n+\t(md_parse_option): Handle OPTION_UNKNOWN_INTR_NOPS and\n+\tOPTION_NO_UNKNOWN_INTR_NOPS by setting do_unknown_interrupt_nops\n+\taccordingly.\n+\t(md_show_usage): Likewise.\n+\t(md_shortopts): Add \"mu\" for OPTION_UNKNOWN_INTR_NOPS and\n+\t\"mU\" for OPTION_NO_UNKNOWN_INTR_NOPS.\n+\t(md_longopts): Likewise.\n+\t(warn_eint_nop): Update comment.\n+\t(warn_unsure_interrupt): Don't warn if prev_insn_is_nop or\n+\tprev_insn_is_dint or we are assembling for 430 ISA.\n+\t(msp430_operands): Only call warn_unsure_interrupt if\n+\tdo_unknown_interrupt_nops == TRUE.\n+\t* testsuite/gas/msp430/nop-unknown-intr.s: New test source file.\n+\t* testsuite/gas/msp430/nop-unknown-intr-430.d: New test.\n+\t* testsuite/gas/msp430/nop-unknown-intr-430x.d: New test.\n+\t* testsuite/gas/msp430/nop-unknown-intr-430x-ignore.d: New test.\n+\t* testsuite/gas/msp430/nop-unknown-intr-430.l: Warning output for new\n+\ttest.\n+\t* testsuite/gas/msp430/nop-unknown-intr-430x.l: Likewise.\n+\t* testsuite/gas/msp430/msp430.exp: Add new tests to driver.\n+\n 2019-04-16  Alan Modra  <amodra@gmail.com>\n \n \t* testsuite/gas/all/weakref1.d: xfail nds32."
    },
    {
      "sha": "7868331bb9f5f861a0428790b8ad4c8777c53fe6",
      "filename": "gas/config/tc-msp430.c",
      "status": "modified",
      "additions": 37,
      "deletions": 8,
      "changes": 45,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d557977487bc21e8ed19603527949a8541c44832/gas/config/tc-msp430.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d557977487bc21e8ed19603527949a8541c44832/gas/config/tc-msp430.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/config/tc-msp430.c?ref=d557977487bc21e8ed19603527949a8541c44832",
      "patch": "@@ -680,6 +680,9 @@ static bfd_boolean gen_interrupt_nops = FALSE;\n #define OPTION_WARN_INTR_NOPS 'y'\n #define OPTION_NO_WARN_INTR_NOPS 'Y'\n static bfd_boolean warn_interrupt_nops = TRUE;\n+#define OPTION_UNKNOWN_INTR_NOPS 'u'\n+#define OPTION_NO_UNKNOWN_INTR_NOPS 'U'\n+static bfd_boolean do_unknown_interrupt_nops = TRUE;\n #define OPTION_MCPU 'c'\n #define OPTION_MOVE_DATA 'd'\n static bfd_boolean move_data = FALSE;\n@@ -1454,6 +1457,13 @@ md_parse_option (int c, const char * arg)\n       warn_interrupt_nops = FALSE;\n       return 1;\n \n+    case OPTION_UNKNOWN_INTR_NOPS:\n+      do_unknown_interrupt_nops = TRUE;\n+      return 1;\n+    case OPTION_NO_UNKNOWN_INTR_NOPS:\n+      do_unknown_interrupt_nops = FALSE;\n+      return 1;\n+\n     case OPTION_MOVE_DATA:\n       move_data = TRUE;\n       return 1;\n@@ -1484,13 +1494,16 @@ static void\n msp430_make_init_symbols (const char * name)\n {\n   if (strncmp (name, \".bss\", 4) == 0\n+      || strncmp (name, \".lower.bss\", 10) == 0\n+      || strncmp (name, \".either.bss\", 11) == 0\n       || strncmp (name, \".gnu.linkonce.b.\", 16) == 0)\n     (void) symbol_find_or_make (\"__crt0_init_bss\");\n \n   if (strncmp (name, \".data\", 5) == 0\n+      || strncmp (name, \".lower.data\", 11) == 0\n+      || strncmp (name, \".either.data\", 12) == 0\n       || strncmp (name, \".gnu.linkonce.d.\", 16) == 0)\n     (void) symbol_find_or_make (\"__crt0_movedata\");\n-\n   /* Note - data assigned to the .either.data section may end up being\n      placed in the .upper.data section if the .lower.data section is\n      full.  Hence the need to define the crt0 symbol.\n@@ -1574,7 +1587,7 @@ const pseudo_typeS md_pseudo_table[] =\n   {NULL, NULL, 0}\n };\n \n-const char *md_shortopts = \"mm:,mP,mQ,ml,mN,mn,my,mY\";\n+const char *md_shortopts = \"mm:,mP,mQ,ml,mN,mn,my,mY,mu,mU\";\n \n struct option md_longopts[] =\n {\n@@ -1589,6 +1602,8 @@ struct option md_longopts[] =\n   {\"mn\", no_argument, NULL, OPTION_INTR_NOPS},\n   {\"mY\", no_argument, NULL, OPTION_NO_WARN_INTR_NOPS},\n   {\"my\", no_argument, NULL, OPTION_WARN_INTR_NOPS},\n+  {\"mu\", no_argument, NULL, OPTION_UNKNOWN_INTR_NOPS},\n+  {\"mU\", no_argument, NULL, OPTION_NO_UNKNOWN_INTR_NOPS},\n   {\"md\", no_argument, NULL, OPTION_MOVE_DATA},\n   {\"mdata-region\", required_argument, NULL, OPTION_DATA_REGION},\n   {NULL, no_argument, NULL, 0}\n@@ -1620,6 +1635,13 @@ md_show_usage (FILE * stream)\n \t   _(\"  -mY - do not warn about missing NOPs after changing interrupts\\n\"));\n   fprintf (stream,\n \t   _(\"  -my - warn about missing NOPs after changing interrupts (default)\\n\"));\n+  fprintf (stream,\n+\t   _(\"  -mU - for an instruction which changes interrupt state, but where it is not\\n\"\n+\t     \"        known how the state is changed, do not warn/insert NOPs\\n\"));\n+  fprintf (stream,\n+\t   _(\"  -mu - for an instruction which changes interrupt state, but where it is not\\n\"\n+\t     \"        known how the state is changed, warn/insert NOPs (default)\\n\"\n+\t     \"        -mn and/or -my are required for this to have any effect\\n\"));\n   fprintf (stream,\n \t   _(\"  -md - Force copying of data from ROM to RAM at startup\\n\"));\n   fprintf (stream,\n@@ -2536,7 +2558,8 @@ static void\n warn_eint_nop (bfd_boolean prev_insn_is_nop, bfd_boolean prev_insn_is_dint)\n {\n   if (prev_insn_is_nop\n-      /* Prevent double warning for DINT immediately before EINT.  */\n+      /* If the last insn was a DINT, we will have already warned that a NOP is\n+\t required after it.  */\n       || prev_insn_is_dint\n       /* 430 ISA does not require a NOP before EINT.  */\n       || (! target_is_430x ()))\n@@ -2554,10 +2577,16 @@ warn_eint_nop (bfd_boolean prev_insn_is_nop, bfd_boolean prev_insn_is_dint)\n /* Use when unsure what effect the insn will have on the interrupt status,\n    to insert/warn about adding a NOP before the current insn.  */\n static void\n-warn_unsure_interrupt (void)\n+warn_unsure_interrupt (bfd_boolean prev_insn_is_nop,\n+\t\t       bfd_boolean prev_insn_is_dint)\n {\n-  /* Since this could enable or disable interrupts, need to add/warn about\n-     adding a NOP before and after this insn.  */\n+  if (prev_insn_is_nop\n+      /* If the last insn was a DINT, we will have already warned that a NOP is\n+\t required after it.  */\n+      || prev_insn_is_dint\n+      /* 430 ISA does not require a NOP before EINT or DINT.  */\n+      || (! target_is_430x ()))\n+    return;\n   if (gen_interrupt_nops)\n     {\n       gen_nop ();\n@@ -3646,12 +3675,12 @@ msp430_operands (struct msp430_opcode_s * opcode, char * line)\n \t  else if (op1.mode == OP_REG\n \t\t   && (op1.reg == 2 || op1.reg == 3))\n \t    this_insn_is_dint = TRUE;\n-\t  else\n+\t  else if (do_unknown_interrupt_nops)\n \t    {\n \t      /* FIXME: Couldn't work out whether the insn is enabling or\n \t\t disabling interrupts, so for safety need to treat it as both\n \t\t a DINT and EINT.  */\n-\t      warn_unsure_interrupt ();\n+\t      warn_unsure_interrupt (prev_insn_is_nop, prev_insn_is_dint);\n \t      check_for_nop |= NOP_CHECK_INTERRUPT;\n \t    }\n \t}"
    },
    {
      "sha": "9e4154fe9571b837f8e50272bd4aee8abe57b7d1",
      "filename": "gas/testsuite/gas/msp430/either-data-bss-sym.d",
      "status": "added",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d557977487bc21e8ed19603527949a8541c44832/gas/testsuite/gas/msp430/either-data-bss-sym.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d557977487bc21e8ed19603527949a8541c44832/gas/testsuite/gas/msp430/either-data-bss-sym.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/msp430/either-data-bss-sym.d?ref=d557977487bc21e8ed19603527949a8541c44832",
      "patch": "@@ -0,0 +1,9 @@\n+#objdump: -t\n+#name: Check symbols to initialise data and bss have been defined for .either sections\n+#...\n+.*__crt0_movedata.*\n+.*__crt0_move_highdata.*\n+#...\n+.*__crt0_init_bss.*\n+.*__crt0_init_highbss.*\n+#pass"
    },
    {
      "sha": "c847d9e2ce304a35715041409a82e61e6db86599",
      "filename": "gas/testsuite/gas/msp430/either-data-bss-sym.s",
      "status": "added",
      "additions": 24,
      "deletions": 0,
      "changes": 24,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d557977487bc21e8ed19603527949a8541c44832/gas/testsuite/gas/msp430/either-data-bss-sym.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d557977487bc21e8ed19603527949a8541c44832/gas/testsuite/gas/msp430/either-data-bss-sym.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/msp430/either-data-bss-sym.s?ref=d557977487bc21e8ed19603527949a8541c44832",
      "patch": "@@ -0,0 +1,24 @@\n+\t.file\t\"main.c\"\n+.text\n+\t.global\ta\n+\t.section\t.either.data,\"aw\"\n+\t.balign 2\n+\t.type\ta, @object\n+\t.size\ta, 2\n+a:\n+\t.short\t42\n+\t.global\tb\n+\t.section\t.either.bss,\"aw\",@nobits\n+\t.balign 2\n+\t.type\tb, @object\n+\t.size\tb, 2\n+b:\n+\t.zero\t2\n+.text\n+\t.balign 2\n+\t.global\tmain\n+\t.type\tmain, @function\n+main:\n+.L2:\n+\tBR\t#.L2\n+\t.size\tmain, .-main"
    },
    {
      "sha": "0ed57c6d694dc04019b8fb2fcdb137f965bbad29",
      "filename": "gas/testsuite/gas/msp430/low-data-bss-sym.d",
      "status": "added",
      "additions": 7,
      "deletions": 0,
      "changes": 7,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d557977487bc21e8ed19603527949a8541c44832/gas/testsuite/gas/msp430/low-data-bss-sym.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d557977487bc21e8ed19603527949a8541c44832/gas/testsuite/gas/msp430/low-data-bss-sym.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/msp430/low-data-bss-sym.d?ref=d557977487bc21e8ed19603527949a8541c44832",
      "patch": "@@ -0,0 +1,7 @@\n+#objdump: -t\n+#name: Check symbols to initialise data and bss have been defined for .lower sections\n+#...\n+.*__crt0_movedata.*\n+#...\n+.*__crt0_init_bss.*\n+#pass"
    },
    {
      "sha": "317fb175a1850108c4d50f4b684542f279d9d80c",
      "filename": "gas/testsuite/gas/msp430/low-data-bss-sym.s",
      "status": "added",
      "additions": 24,
      "deletions": 0,
      "changes": 24,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d557977487bc21e8ed19603527949a8541c44832/gas/testsuite/gas/msp430/low-data-bss-sym.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d557977487bc21e8ed19603527949a8541c44832/gas/testsuite/gas/msp430/low-data-bss-sym.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/msp430/low-data-bss-sym.s?ref=d557977487bc21e8ed19603527949a8541c44832",
      "patch": "@@ -0,0 +1,24 @@\n+\t.file\t\"main.c\"\n+.text\n+\t.global\ta\n+\t.section\t.lower.data,\"aw\"\n+\t.balign 2\n+\t.type\ta, @object\n+\t.size\ta, 2\n+a:\n+\t.short\t42\n+\t.global\tb\n+\t.section\t.lower.bss,\"aw\",@nobits\n+\t.balign 2\n+\t.type\tb, @object\n+\t.size\tb, 2\n+b:\n+\t.zero\t2\n+.text\n+\t.balign 2\n+\t.global\tmain\n+\t.type\tmain, @function\n+main:\n+.L2:\n+\tBR\t#.L2\n+\t.size\tmain, .-main"
    },
    {
      "sha": "0f7805da3e8e29872c3582a6aa310143b5da4291",
      "filename": "gas/testsuite/gas/msp430/msp430.exp",
      "status": "modified",
      "additions": 7,
      "deletions": 2,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d557977487bc21e8ed19603527949a8541c44832/gas/testsuite/gas/msp430/msp430.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d557977487bc21e8ed19603527949a8541c44832/gas/testsuite/gas/msp430/msp430.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/msp430/msp430.exp?ref=d557977487bc21e8ed19603527949a8541c44832",
      "patch": "@@ -24,8 +24,10 @@ if [expr [istarget \"msp430-*-*\"]]  then {\n     run_dump_test \"bad\"\n     run_dump_test \"errata_warns\"\n     run_dump_test \"errata_fixes\"\n-    run_dump_test \"high-data-bss-sym\" { { as \"-mdata-region=upper\" } }\n-    run_dump_test \"high-data-bss-sym\" { { as \"-mdata-region=either\" } }\n+    run_dump_test \"low-data-bss-sym\"\n+    run_dump_test \"either-data-bss-sym\"\n+    run_dump_test \"high-data-bss-sym\" { { as \"-ml -mdata-region=upper\" } }\n+    run_dump_test \"high-data-bss-sym\" { { as \"-ml -mdata-region=either\" } }\n     run_dump_test \"pr22133\"\n     run_dump_test \"nop-int-430\"\n     run_dump_test \"nop-int-430x\"\n@@ -38,4 +40,7 @@ if [expr [istarget \"msp430-*-*\"]]  then {\n     run_dump_test \"nop-dint-430x\"\n     run_dump_test \"nop-dint-430x-silent\"\n     run_dump_test \"nop-dint-430x-ignore\"\n+    run_dump_test \"nop-unknown-intr-430\"\n+    run_dump_test \"nop-unknown-intr-430x\"\n+    run_dump_test \"nop-unknown-intr-430x-ignore\"\n }"
    },
    {
      "sha": "ac75f6c318caf9117d99d91ce1ecd7a0a741b5c8",
      "filename": "gas/testsuite/gas/msp430/nop-unknown-intr-430.d",
      "status": "added",
      "additions": 14,
      "deletions": 0,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d557977487bc21e8ed19603527949a8541c44832/gas/testsuite/gas/msp430/nop-unknown-intr-430.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d557977487bc21e8ed19603527949a8541c44832/gas/testsuite/gas/msp430/nop-unknown-intr-430.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/msp430/nop-unknown-intr-430.d?ref=d557977487bc21e8ed19603527949a8541c44832",
      "patch": "@@ -0,0 +1,14 @@\n+#name: Unknown Interrupt State NOP Insertions (MSP430 CPU)\n+#source: nop-unknown-intr.s\n+#as: -my -mu -mcpu=430\n+#warning_output: nop-unknown-intr-430.l\n+#objdump: -d --prefix-addresses --show-raw-insn\n+\n+.*: +file format .*msp.*\n+\n+\n+Disassembly of section .text:\n+0x0+0000 12 42 00 00[ \t]+mov[ \t]+&0x0000,r2[ \t]+;0x0000\n+0x0+0004 1a 42 00 00[ \t]+mov[ \t]+&0x0000,r10[ \t]+;0x0000\n+0x0+0008 02 47[ \t]+mov[ \t]+r7,[ \t]+r2[ \t]+;\n+0x0+000a 1a 42 00 00[ \t]+mov[ \t]+&0x0000,r10[ \t]+;0x0000"
    },
    {
      "sha": "9727572d44206f4c6706ba045371f8a440a56b7d",
      "filename": "gas/testsuite/gas/msp430/nop-unknown-intr-430.l",
      "status": "added",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d557977487bc21e8ed19603527949a8541c44832/gas/testsuite/gas/msp430/nop-unknown-intr-430.l",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d557977487bc21e8ed19603527949a8541c44832/gas/testsuite/gas/msp430/nop-unknown-intr-430.l",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/msp430/nop-unknown-intr-430.l?ref=d557977487bc21e8ed19603527949a8541c44832",
      "patch": "@@ -0,0 +1,3 @@\n+[^:]*: Assembler messages:\n+[^:]*:11: Warning: a NOP might also be needed here, after the instruction that changed interrupt state\n+[^:]*:16: Warning: a NOP might also be needed here, after the instruction that changed interrupt state"
    },
    {
      "sha": "6c2f36adb9659dea729d588ccd12048fab557a88",
      "filename": "gas/testsuite/gas/msp430/nop-unknown-intr-430x-ignore.d",
      "status": "added",
      "additions": 13,
      "deletions": 0,
      "changes": 13,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d557977487bc21e8ed19603527949a8541c44832/gas/testsuite/gas/msp430/nop-unknown-intr-430x-ignore.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d557977487bc21e8ed19603527949a8541c44832/gas/testsuite/gas/msp430/nop-unknown-intr-430x-ignore.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/msp430/nop-unknown-intr-430x-ignore.d?ref=d557977487bc21e8ed19603527949a8541c44832",
      "patch": "@@ -0,0 +1,13 @@\n+#name: Ignore Unknown Interrupt State NOP Insertions (MSP430X CPU)\n+#source: nop-unknown-intr.s\n+#as: -my -mU -mcpu=430x\n+#objdump: -d --prefix-addresses --show-raw-insn\n+\n+.*: +file format .*msp.*\n+\n+\n+Disassembly of section .text:\n+0x0+0000 12 42 00 00[ \t]+mov[ \t]+&0x0000,r2[ \t]+;0x0000\n+0x0+0004 1a 42 00 00[ \t]+mov[ \t]+&0x0000,r10[ \t]+;0x0000\n+0x0+0008 02 47[ \t]+mov[ \t]+r7,[ \t]+r2[ \t]+;\n+0x0+000a 1a 42 00 00[ \t]+mov[ \t]+&0x0000,r10[ \t]+;0x0000"
    },
    {
      "sha": "8141bd52a582f18fac94ee38cd8fdebbf848883c",
      "filename": "gas/testsuite/gas/msp430/nop-unknown-intr-430x.d",
      "status": "added",
      "additions": 14,
      "deletions": 0,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d557977487bc21e8ed19603527949a8541c44832/gas/testsuite/gas/msp430/nop-unknown-intr-430x.d",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d557977487bc21e8ed19603527949a8541c44832/gas/testsuite/gas/msp430/nop-unknown-intr-430x.d",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/msp430/nop-unknown-intr-430x.d?ref=d557977487bc21e8ed19603527949a8541c44832",
      "patch": "@@ -0,0 +1,14 @@\n+#name: Unknown Interrupt State NOP Insertions (MSP430X CPU)\n+#source: nop-unknown-intr.s\n+#as: -my -mu -mcpu=430x\n+#warning_output: nop-unknown-intr-430x.l\n+#objdump: -d --prefix-addresses --show-raw-insn\n+\n+.*: +file format .*msp.*\n+\n+\n+Disassembly of section .text:\n+0x0+0000 12 42 00 00[ \t]+mov[ \t]+&0x0000,r2[ \t]+;0x0000\n+0x0+0004 1a 42 00 00[ \t]+mov[ \t]+&0x0000,r10[ \t]+;0x0000\n+0x0+0008 02 47[ \t]+mov[ \t]+r7,[ \t]+r2[ \t]+;\n+0x0+000a 1a 42 00 00[ \t]+mov[ \t]+&0x0000,r10[ \t]+;0x0000"
    },
    {
      "sha": "af27c2ba138d941e8719bc7710348cfbc8b824bf",
      "filename": "gas/testsuite/gas/msp430/nop-unknown-intr-430x.l",
      "status": "added",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d557977487bc21e8ed19603527949a8541c44832/gas/testsuite/gas/msp430/nop-unknown-intr-430x.l",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d557977487bc21e8ed19603527949a8541c44832/gas/testsuite/gas/msp430/nop-unknown-intr-430x.l",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/msp430/nop-unknown-intr-430x.l?ref=d557977487bc21e8ed19603527949a8541c44832",
      "patch": "@@ -0,0 +1,5 @@\n+[^:]*: Assembler messages:\n+[^:]*:9: Warning: a NOP might be needed here, before this interrupt state change\n+[^:]*:11: Warning: a NOP might also be needed here, after the instruction that changed interrupt state\n+[^:]*:14: Warning: a NOP might be needed here, before this interrupt state change\n+[^:]*:16: Warning: a NOP might also be needed here, after the instruction that changed interrupt state"
    },
    {
      "sha": "df21b6e80b6cc0044807b11de6278f56e8f9a41b",
      "filename": "gas/testsuite/gas/msp430/nop-unknown-intr.s",
      "status": "added",
      "additions": 16,
      "deletions": 0,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d557977487bc21e8ed19603527949a8541c44832/gas/testsuite/gas/msp430/nop-unknown-intr.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d557977487bc21e8ed19603527949a8541c44832/gas/testsuite/gas/msp430/nop-unknown-intr.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gas/testsuite/gas/msp430/nop-unknown-intr.s?ref=d557977487bc21e8ed19603527949a8541c44832",
      "patch": "@@ -0,0 +1,16 @@\n+\t.text\n+\n+;;; Test for warnings when an instruction might change interrupt state, but\n+;;; the assembler doesn't know whether interrupts will be enabled or disabled.\n+;;; \"MOV &FOO,R10\" is used as an artbitrary statement which isn't a NOP, to\n+;;; break up the instructions being tested.\n+\n+;;; Moving a value in memory into SR might change interrupt state\n+\tMOV &FOO,R2\n+\n+\tMOV &FOO,R10\n+\n+;;; Moving a value from a register into SR might change interrupt state\n+\tMOV R7,R2\n+\n+\tMOV &FOO,R10"
    }
  ]
}