{
  "sha": "e05a3e5a491a8ef2079eef558bbe8e9feb0b3c03",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZTA1YTNlNWE0OTFhOGVmMjA3OWVlZjU1OGJiZThlOWZlYjBiM2MwMw==",
  "commit": {
    "author": {
      "name": "Nick Alcock",
      "email": "nick.alcock@oracle.com",
      "date": "2021-01-19T12:45:18Z"
    },
    "committer": {
      "name": "Nick Alcock",
      "email": "nick.alcock@oracle.com",
      "date": "2021-01-19T12:45:19Z"
    },
    "message": "libctf: lookup_by_name: do not return success for nonexistent pointer types\n\nThe recent work allowing lookups of pointers in child dicts when the\npointed-to type is in the parent dict broke the case where a pointer\ntype that does not exist at all is looked up: we mistakenly return the\npointed-to type, which is likely not a pointer at all.  This causes\nconsiderable confusion.\n\nFixed, with a new testcase.\n\nlibctf/ChangeLog\n2021-01-19  Nick Alcock  <nick.alcock@oracle.com>\n\n\t* ctf-lookup.c (ctf_lookup_by_name_internal): Do not return the\n\tbase type if looking up a nonexistent pointer type.\n\t* testsuite/libctf-regression/pptrtab*: Test it.",
    "tree": {
      "sha": "8b1526e2272d3ed24e412425e7979fef15bdf4e4",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/8b1526e2272d3ed24e412425e7979fef15bdf4e4"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/e05a3e5a491a8ef2079eef558bbe8e9feb0b3c03",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e05a3e5a491a8ef2079eef558bbe8e9feb0b3c03",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/e05a3e5a491a8ef2079eef558bbe8e9feb0b3c03",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e05a3e5a491a8ef2079eef558bbe8e9feb0b3c03/comments",
  "author": {
    "login": "nickalcock",
    "id": 6503005,
    "node_id": "MDQ6VXNlcjY1MDMwMDU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6503005?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickalcock",
    "html_url": "https://github.com/nickalcock",
    "followers_url": "https://api.github.com/users/nickalcock/followers",
    "following_url": "https://api.github.com/users/nickalcock/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickalcock/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickalcock/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickalcock/subscriptions",
    "organizations_url": "https://api.github.com/users/nickalcock/orgs",
    "repos_url": "https://api.github.com/users/nickalcock/repos",
    "events_url": "https://api.github.com/users/nickalcock/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickalcock/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "nickalcock",
    "id": 6503005,
    "node_id": "MDQ6VXNlcjY1MDMwMDU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6503005?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickalcock",
    "html_url": "https://github.com/nickalcock",
    "followers_url": "https://api.github.com/users/nickalcock/followers",
    "following_url": "https://api.github.com/users/nickalcock/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickalcock/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickalcock/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickalcock/subscriptions",
    "organizations_url": "https://api.github.com/users/nickalcock/orgs",
    "repos_url": "https://api.github.com/users/nickalcock/repos",
    "events_url": "https://api.github.com/users/nickalcock/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickalcock/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "c98de297b37ffee7bdb48682eec73e4a608c3974",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c98de297b37ffee7bdb48682eec73e4a608c3974",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/c98de297b37ffee7bdb48682eec73e4a608c3974"
    }
  ],
  "stats": {
    "total": 55,
    "additions": 45,
    "deletions": 10
  },
  "files": [
    {
      "sha": "b48cc0504062b229dae0a97aa9830b20fb8e3157",
      "filename": "libctf/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e05a3e5a491a8ef2079eef558bbe8e9feb0b3c03/libctf/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e05a3e5a491a8ef2079eef558bbe8e9feb0b3c03/libctf/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libctf/ChangeLog?ref=e05a3e5a491a8ef2079eef558bbe8e9feb0b3c03",
      "patch": "@@ -1,3 +1,9 @@\n+2021-01-19  Nick Alcock  <nick.alcock@oracle.com>\n+\n+\t* ctf-lookup.c (ctf_lookup_by_name_internal): Do not return the\n+\tbase type if looking up a nonexistent pointer type.\n+\t* testsuite/libctf-regression/pptrtab*: Test it.\n+\n 2021-01-13  Alan Modra  <amodra@gmail.com>\n \n \t* Makefile.in: Regenerate."
    },
    {
      "sha": "6d4e085838c0b205cc75dadf38042c573042c7d3",
      "filename": "libctf/ctf-lookup.c",
      "status": "modified",
      "additions": 26,
      "deletions": 8,
      "changes": 34,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e05a3e5a491a8ef2079eef558bbe8e9feb0b3c03/libctf/ctf-lookup.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e05a3e5a491a8ef2079eef558bbe8e9feb0b3c03/libctf/ctf-lookup.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libctf/ctf-lookup.c?ref=e05a3e5a491a8ef2079eef558bbe8e9feb0b3c03",
      "patch": "@@ -184,24 +184,36 @@ ctf_lookup_by_name_internal (ctf_dict_t *fp, ctf_dict_t *child,\n \t     from resolving the type down to its base type and use that instead.\n \t     This helps with cases where the CTF data includes \"struct foo *\"\n \t     but not \"foo_t *\" and the user tries to access \"foo_t *\" in the\n-\t     debugger.  */\n+\t     debugger.\n+\n+\t     There is extra complexity here because uninitialized elements in\n+\t     the pptrtab and ptrtab are set to zero, but zero (as the type ID\n+\t     meaning the unimplemented type) is a valid return type from\n+\t     ctf_lookup_by_name.  (Pointers to types are never of type 0, so\n+\t     this is unambiguous, just fiddly to deal with.)  */\n \n \t  uint32_t idx = LCTF_TYPE_TO_INDEX (fp, type);\n \t  int in_child = 0;\n \n-\t  ntype = type;\n+\t  ntype = CTF_ERR;\n \t  if (child && idx <= child->ctf_pptrtab_len)\n \t    {\n \t      ntype = child->ctf_pptrtab[idx];\n \t      if (ntype)\n \t\tin_child = 1;\n+\t      else\n+\t\tntype = CTF_ERR;\n \t    }\n \n-\t  if (ntype == 0)\n-\t    ntype = fp->ctf_ptrtab[idx];\n+\t  if (ntype == CTF_ERR)\n+\t    {\n+\t      ntype = fp->ctf_ptrtab[idx];\n+\t      if (ntype == 0)\n+\t\tntype = CTF_ERR;\n+\t    }\n \n \t  /* Try resolving to its base type and check again.  */\n-\t  if (ntype == 0)\n+\t  if (ntype == CTF_ERR)\n \t    {\n \t      if (child)\n \t\tntype = ctf_type_resolve_unsliced (child, type);\n@@ -213,16 +225,22 @@ ctf_lookup_by_name_internal (ctf_dict_t *fp, ctf_dict_t *child,\n \n \t      idx = LCTF_TYPE_TO_INDEX (fp, ntype);\n \n-\t      ntype = 0;\n+\t      ntype = CTF_ERR;\n \t      if (child && idx <= child->ctf_pptrtab_len)\n \t\t{\n \t\t  ntype = child->ctf_pptrtab[idx];\n \t\t  if (ntype)\n \t\t    in_child = 1;\n+\t\t  else\n+\t\t    ntype = CTF_ERR;\n \t\t}\n \n-\t      if (ntype == 0)\n-\t\tntype = fp->ctf_ptrtab[idx];\n+\t      if (ntype == CTF_ERR)\n+\t\t{\n+\t\t  ntype = fp->ctf_ptrtab[idx];\n+\t\t  if (ntype == 0)\n+\t\t    ntype = CTF_ERR;\n+\t\t}\n \t      if (ntype == CTF_ERR)\n \t\tgoto notype;\n \t    }"
    },
    {
      "sha": "654148771149bae5a4160255feee21306c03934d",
      "filename": "libctf/testsuite/libctf-regression/pptrtab-a.c",
      "status": "modified",
      "additions": 2,
      "deletions": 0,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e05a3e5a491a8ef2079eef558bbe8e9feb0b3c03/libctf/testsuite/libctf-regression/pptrtab-a.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e05a3e5a491a8ef2079eef558bbe8e9feb0b3c03/libctf/testsuite/libctf-regression/pptrtab-a.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libctf/testsuite/libctf-regression/pptrtab-a.c?ref=e05a3e5a491a8ef2079eef558bbe8e9feb0b3c03",
      "patch": "@@ -1,3 +1,5 @@\n typedef long a_t;\n+typedef long b_t;\n \n a_t *a;\n+b_t ignore2;"
    },
    {
      "sha": "e458021efb13b4b2bff65e9fe30b258030a6dd9d",
      "filename": "libctf/testsuite/libctf-regression/pptrtab-b.c",
      "status": "modified",
      "additions": 2,
      "deletions": 1,
      "changes": 3,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e05a3e5a491a8ef2079eef558bbe8e9feb0b3c03/libctf/testsuite/libctf-regression/pptrtab-b.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e05a3e5a491a8ef2079eef558bbe8e9feb0b3c03/libctf/testsuite/libctf-regression/pptrtab-b.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libctf/testsuite/libctf-regression/pptrtab-b.c?ref=e05a3e5a491a8ef2079eef558bbe8e9feb0b3c03",
      "patch": "@@ -1,4 +1,5 @@\n typedef long a_t;\n+typedef long b_t;\n \n a_t b;\n-\n+b_t ignore1;"
    },
    {
      "sha": "fe1b8fe2b4344f676237417614e505f110f74a98",
      "filename": "libctf/testsuite/libctf-regression/pptrtab.c",
      "status": "modified",
      "additions": 9,
      "deletions": 1,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e05a3e5a491a8ef2079eef558bbe8e9feb0b3c03/libctf/testsuite/libctf-regression/pptrtab.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e05a3e5a491a8ef2079eef558bbe8e9feb0b3c03/libctf/testsuite/libctf-regression/pptrtab.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/libctf/testsuite/libctf-regression/pptrtab.c?ref=e05a3e5a491a8ef2079eef558bbe8e9feb0b3c03",
      "patch": "@@ -23,13 +23,18 @@ main (int argc, char *argv[])\n     goto open_err;\n \n   /* Make sure we can look up a_t * by name in all non-parent dicts, even though\n-     the a_t * and the type it points to are in distinct dicts.  */\n+     the a_t * and the type it points to are in distinct dicts; make sure we\n+     cannot look up b_t *.  */\n \n   while ((fp = ctf_archive_next (ctf, &i, &arcname, 1, &err)) != NULL)\n     {\n       if ((type = ctf_lookup_by_name (fp, \"a_t *\")) == CTF_ERR)\n \tgoto err;\n \n+      if ((ctf_lookup_by_name (fp, \"b_t *\")) != CTF_ERR ||\n+          ctf_errno (fp) != ECTF_NOTYPE)\n+\tgoto noerr;\n+\n       if (ctf_type_reference (fp, type) == CTF_ERR)\n \tgoto err;\n \n@@ -51,4 +56,7 @@ main (int argc, char *argv[])\n  err:\n   fprintf (stderr, \"Lookup failed in %s: %s\\n\", arcname, ctf_errmsg (ctf_errno (fp)));\n   return 1;\n+ noerr:\n+  fprintf (stderr, \"Lookup unexpectedly succeeded in %s\\n\", arcname);\n+  return 1;\n }"
    }
  ]
}