{
  "sha": "e0f7ea91436dd308a094c4c101fd4169e8245a91",
  "node_id": "C_kwDOANOeidoAKGUwZjdlYTkxNDM2ZGQzMDhhMDk0YzRjMTAxZmQ0MTY5ZTgyNDVhOTE",
  "commit": {
    "author": {
      "name": "H.J. Lu",
      "email": "hjl.tools@gmail.com",
      "date": "2021-11-04T13:27:16Z"
    },
    "committer": {
      "name": "H.J. Lu",
      "email": "hjl.tools@gmail.com",
      "date": "2021-11-04T13:57:32Z"
    },
    "message": "bfd: Always check sections with the corrupt size\n\nAlways check sections with the corrupt size for non-MMO files.  Skip MMO\nfiles for compress_status == COMPRESS_SECTION_NONE since MMO has special\nhandling for COMPRESS_SECTION_NONE.\n\n\tPR binutils/28530\n\t* compress.c (bfd_get_full_section_contents): Always check\n\tsections with the corrupt size.",
    "tree": {
      "sha": "9ba4e0886bf3f47f8e982670557d62b9647c5686",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/9ba4e0886bf3f47f8e982670557d62b9647c5686"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/e0f7ea91436dd308a094c4c101fd4169e8245a91",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e0f7ea91436dd308a094c4c101fd4169e8245a91",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/e0f7ea91436dd308a094c4c101fd4169e8245a91",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e0f7ea91436dd308a094c4c101fd4169e8245a91/comments",
  "author": {
    "login": "hjl-tools",
    "id": 1072356,
    "node_id": "MDQ6VXNlcjEwNzIzNTY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/hjl-tools",
    "html_url": "https://github.com/hjl-tools",
    "followers_url": "https://api.github.com/users/hjl-tools/followers",
    "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}",
    "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions",
    "organizations_url": "https://api.github.com/users/hjl-tools/orgs",
    "repos_url": "https://api.github.com/users/hjl-tools/repos",
    "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}",
    "received_events_url": "https://api.github.com/users/hjl-tools/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "hjl-tools",
    "id": 1072356,
    "node_id": "MDQ6VXNlcjEwNzIzNTY=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/hjl-tools",
    "html_url": "https://github.com/hjl-tools",
    "followers_url": "https://api.github.com/users/hjl-tools/followers",
    "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}",
    "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions",
    "organizations_url": "https://api.github.com/users/hjl-tools/orgs",
    "repos_url": "https://api.github.com/users/hjl-tools/repos",
    "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}",
    "received_events_url": "https://api.github.com/users/hjl-tools/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "edc77c591add0a9c7740a9ed9f7e40358bf65dbf",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/edc77c591add0a9c7740a9ed9f7e40358bf65dbf",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/edc77c591add0a9c7740a9ed9f7e40358bf65dbf"
    }
  ],
  "stats": {
    "total": 50,
    "additions": 27,
    "deletions": 23
  },
  "files": [
    {
      "sha": "a3adb8d82500c4e9676d58020413eb76d3e9793e",
      "filename": "bfd/compress.c",
      "status": "modified",
      "additions": 27,
      "deletions": 23,
      "changes": 50,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/e0f7ea91436dd308a094c4c101fd4169e8245a91/bfd/compress.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/e0f7ea91436dd308a094c4c101fd4169e8245a91/bfd/compress.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/bfd/compress.c?ref=e0f7ea91436dd308a094c4c101fd4169e8245a91",
      "patch": "@@ -232,6 +232,7 @@ bfd_get_full_section_contents (bfd *abfd, sec_ptr sec, bfd_byte **ptr)\n   bfd_size_type save_rawsize;\n   bfd_byte *compressed_buffer;\n   unsigned int compression_header_size;\n+  ufile_ptr filesize;\n \n   if (abfd->direction != write_direction && sec->rawsize != 0)\n     sz = sec->rawsize;\n@@ -243,34 +244,37 @@ bfd_get_full_section_contents (bfd *abfd, sec_ptr sec, bfd_byte **ptr)\n       return true;\n     }\n \n+  filesize = bfd_get_file_size (abfd);\n+  if (filesize > 0\n+      && filesize < sz\n+      /* PR 24753: Linker created sections can be larger than\n+\t the file size, eg if they are being used to hold stubs.  */\n+      && (bfd_section_flags (sec) & SEC_LINKER_CREATED) == 0\n+      /* PR 24753: Sections which have no content should also be\n+\t excluded as they contain no size on disk.  */\n+      && (bfd_section_flags (sec) & SEC_HAS_CONTENTS) != 0\n+      /* PR 28530: Check compressed sections with the corrupt size.  */\n+      && (sec->compress_status != COMPRESS_SECTION_NONE\n+      /* The MMO file format supports its own special compression\n+\t technique, but it uses COMPRESS_SECTION_NONE when loading\n+\t a section's contents.  */\n+\t  || bfd_get_flavour (abfd) != bfd_target_mmo_flavour))\n+    {\n+      /* PR 24708: Avoid attempts to allocate a ridiculous amount\n+\t of memory.  */\n+      bfd_set_error (bfd_error_file_truncated);\n+      _bfd_error_handler\n+\t/* xgettext:c-format */\n+\t(_(\"error: %pB(%pA) section size (%#\" PRIx64 \" bytes) is larger than file size (%#\" PRIx64 \" bytes)\"),\n+\t abfd, sec, (uint64_t) sz, (uint64_t) filesize);\n+      return false;\n+    }\n+\n   switch (sec->compress_status)\n     {\n     case COMPRESS_SECTION_NONE:\n       if (p == NULL)\n \t{\n-\t  ufile_ptr filesize = bfd_get_file_size (abfd);\n-\t  if (filesize > 0\n-\t      && filesize < sz\n-\t      /* PR 24753: Linker created sections can be larger than\n-\t\t the file size, eg if they are being used to hold stubs.  */\n-\t      && (bfd_section_flags (sec) & SEC_LINKER_CREATED) == 0\n-\t      /* PR 24753: Sections which have no content should also be\n-\t\t excluded as they contain no size on disk.  */\n-\t      && (bfd_section_flags (sec) & SEC_HAS_CONTENTS) != 0\n-\t      /* The MMO file format supports its own special compression\n-\t\t technique, but it uses COMPRESS_SECTION_NONE when loading\n-\t\t a section's contents.  */\n-\t      && bfd_get_flavour (abfd) != bfd_target_mmo_flavour)\n-\t    {\n-\t      /* PR 24708: Avoid attempts to allocate a ridiculous amount\n-\t\t of memory.  */\n-\t      bfd_set_error (bfd_error_file_truncated);\n-\t      _bfd_error_handler\n-\t\t/* xgettext:c-format */\n-\t\t(_(\"error: %pB(%pA) section size (%#\" PRIx64 \" bytes) is larger than file size (%#\" PRIx64 \" bytes)\"),\n-\t\t abfd, sec, (uint64_t) sz, (uint64_t) filesize);\n-\t      return false;\n-\t    }\n \t  p = (bfd_byte *) bfd_malloc (sz);\n \t  if (p == NULL)\n \t    {"
    }
  ]
}