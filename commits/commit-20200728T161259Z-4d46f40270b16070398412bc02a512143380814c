{
  "sha": "4d46f40270b16070398412bc02a512143380814c",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NGQ0NmY0MDI3MGIxNjA3MDM5ODQxMmJjMDJhNTEyMTQzMzgwODE0Yw==",
  "commit": {
    "author": {
      "name": "Kamil Rytarowski",
      "email": "n54@gmx.com",
      "date": "2020-07-26T12:10:56Z"
    },
    "committer": {
      "name": "Kamil Rytarowski",
      "email": "n54@gmx.com",
      "date": "2020-07-28T16:12:59Z"
    },
    "message": "Implement xfer_partial TARGET_OBJECT_SIGNAL_INFO for NetBSD\n\nNetBSD implements reading and overwriting siginfo_t received by the\ntracee. With TARGET_OBJECT_SIGNAL_INFO signal information can be\nexamined and modified through the special variable $_siginfo.\n\nImplement the \"get_siginfo_type\" gdbarch method for NetBSD architectures.\n\nAs with Linux architectures, cache the created type in the gdbarch when it\nis first created.  Currently NetBSD uses an identical siginfo type on\nall architectures, so there is no support for architecture-specific fields.\n\ngdb/ChangeLog:\n\n\t* nbsd-nat.h (nbsd_nat_target::xfer_partial): New declaration.\n\t* nbsd-nat.c (nbsd_nat_target::xfer_partial): New function.\n\t* nbsd-tdep.c (nbsd_gdbarch_data_handle, struct nbsd_gdbarch_data)\n\t(init_nbsd_gdbarch_data, get_nbsd_gdbarch_data)\n\t(nbsd_get_siginfo_type): New.\n\t(nbsd_init_abi): Install gdbarch \"get_siginfo_type\" method.\n\t(_initialize_nbsd_tdep): New",
    "tree": {
      "sha": "ac62a1f14be4cc8751cedbd445ea8c64716fcbe6",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/ac62a1f14be4cc8751cedbd445ea8c64716fcbe6"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/4d46f40270b16070398412bc02a512143380814c",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4d46f40270b16070398412bc02a512143380814c",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/4d46f40270b16070398412bc02a512143380814c",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4d46f40270b16070398412bc02a512143380814c/comments",
  "author": {
    "login": "krytarowski",
    "id": 6665730,
    "node_id": "MDQ6VXNlcjY2NjU3MzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6665730?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/krytarowski",
    "html_url": "https://github.com/krytarowski",
    "followers_url": "https://api.github.com/users/krytarowski/followers",
    "following_url": "https://api.github.com/users/krytarowski/following{/other_user}",
    "gists_url": "https://api.github.com/users/krytarowski/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/krytarowski/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/krytarowski/subscriptions",
    "organizations_url": "https://api.github.com/users/krytarowski/orgs",
    "repos_url": "https://api.github.com/users/krytarowski/repos",
    "events_url": "https://api.github.com/users/krytarowski/events{/privacy}",
    "received_events_url": "https://api.github.com/users/krytarowski/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "krytarowski",
    "id": 6665730,
    "node_id": "MDQ6VXNlcjY2NjU3MzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/6665730?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/krytarowski",
    "html_url": "https://github.com/krytarowski",
    "followers_url": "https://api.github.com/users/krytarowski/followers",
    "following_url": "https://api.github.com/users/krytarowski/following{/other_user}",
    "gists_url": "https://api.github.com/users/krytarowski/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/krytarowski/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/krytarowski/subscriptions",
    "organizations_url": "https://api.github.com/users/krytarowski/orgs",
    "repos_url": "https://api.github.com/users/krytarowski/repos",
    "events_url": "https://api.github.com/users/krytarowski/events{/privacy}",
    "received_events_url": "https://api.github.com/users/krytarowski/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "377170fa319d39d5442b674fc978adc8f24db5e9",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/377170fa319d39d5442b674fc978adc8f24db5e9",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/377170fa319d39d5442b674fc978adc8f24db5e9"
    }
  ],
  "stats": {
    "total": 217,
    "additions": 217,
    "deletions": 0
  },
  "files": [
    {
      "sha": "bc05eeaea30d435a5eedc8e7ea6bdf0721f6c68c",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4d46f40270b16070398412bc02a512143380814c/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4d46f40270b16070398412bc02a512143380814c/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=4d46f40270b16070398412bc02a512143380814c",
      "patch": "@@ -1,3 +1,13 @@\n+2020-07-28  Kamil Rytarowski  <n54@gmx.com>\n+\n+\t* nbsd-nat.h (nbsd_nat_target::xfer_partial): New declaration.\n+\t* nbsd-nat.c (nbsd_nat_target::xfer_partial): New function.\n+\t* nbsd-tdep.c (nbsd_gdbarch_data_handle, struct nbsd_gdbarch_data)\n+\t(init_nbsd_gdbarch_data, get_nbsd_gdbarch_data)\n+\t(nbsd_get_siginfo_type): New.\n+\t(nbsd_init_abi): Install gdbarch \"get_siginfo_type\" method.\n+\t(_initialize_nbsd_tdep): New.\n+\n 2020-07-28  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR binutils/26301"
    },
    {
      "sha": "5b59f2130d770774b9e4ed32602b89742fde400a",
      "filename": "gdb/nbsd-nat.c",
      "status": "modified",
      "additions": 45,
      "deletions": 0,
      "changes": 45,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4d46f40270b16070398412bc02a512143380814c/gdb/nbsd-nat.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4d46f40270b16070398412bc02a512143380814c/gdb/nbsd-nat.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/nbsd-nat.c?ref=4d46f40270b16070398412bc02a512143380814c",
      "patch": "@@ -845,3 +845,48 @@ nbsd_nat_target::supports_multi_process ()\n {\n   return true;\n }\n+\n+/* Implement the \"xfer_partial\" target_ops method.  */\n+\n+enum target_xfer_status\n+nbsd_nat_target::xfer_partial (enum target_object object,\n+\t\t\t       const char *annex, gdb_byte *readbuf,\n+\t\t\t       const gdb_byte *writebuf,\n+\t\t\t       ULONGEST offset, ULONGEST len,\n+\t\t\t       ULONGEST *xfered_len)\n+{\n+  pid_t pid = inferior_ptid.pid ();\n+\n+  switch (object)\n+    {\n+    case TARGET_OBJECT_SIGNAL_INFO:\n+      {\n+\tptrace_siginfo_t psi;\n+\n+\tif (offset > sizeof (siginfo_t))\n+\t  return TARGET_XFER_E_IO;\n+\n+\tif (ptrace (PT_GET_SIGINFO, pid, &psi, sizeof (psi)) == -1)\n+\t  return TARGET_XFER_E_IO;\n+\n+\tif (offset + len > sizeof (siginfo_t))\n+\t  len = sizeof (siginfo_t) - offset;\n+\n+\tif (readbuf != NULL)\n+\t  memcpy (readbuf, ((gdb_byte *) &psi.psi_siginfo) + offset, len);\n+\telse\n+\t  {\n+\t    memcpy (((gdb_byte *) &psi.psi_siginfo) + offset, writebuf, len);\n+\n+\t    if (ptrace (PT_SET_SIGINFO, pid, &psi, sizeof (psi)) == -1)\n+\t      return TARGET_XFER_E_IO;\n+\t  }\n+\t*xfered_len = len;\n+\treturn TARGET_XFER_OK;\n+      }\n+    default:\n+      return inf_ptrace_target::xfer_partial (object, annex,\n+\t\t\t\t\t      readbuf, writebuf, offset,\n+\t\t\t\t\t      len, xfered_len);\n+    }\n+}"
    },
    {
      "sha": "665a71a0f7804e1837b932b185b4dfc57b449db0",
      "filename": "gdb/nbsd-nat.h",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4d46f40270b16070398412bc02a512143380814c/gdb/nbsd-nat.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4d46f40270b16070398412bc02a512143380814c/gdb/nbsd-nat.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/nbsd-nat.h?ref=4d46f40270b16070398412bc02a512143380814c",
      "patch": "@@ -49,6 +49,12 @@ struct nbsd_nat_target : public inf_ptrace_target\n     override;\n \n   bool supports_multi_process () override;\n+  enum target_xfer_status xfer_partial (enum target_object object,\n+\t\t\t\t\tconst char *annex,\n+\t\t\t\t\tgdb_byte *readbuf,\n+\t\t\t\t\tconst gdb_byte *writebuf,\n+\t\t\t\t\tULONGEST offset, ULONGEST len,\n+\t\t\t\t\tULONGEST *xfered_len) override;\n };\n \n #endif /* nbsd-nat.h */"
    },
    {
      "sha": "2db994af21811f82183cb9d2f342a8f3806deb51",
      "filename": "gdb/nbsd-tdep.c",
      "status": "modified",
      "additions": 156,
      "deletions": 0,
      "changes": 156,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/4d46f40270b16070398412bc02a512143380814c/gdb/nbsd-tdep.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/4d46f40270b16070398412bc02a512143380814c/gdb/nbsd-tdep.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/nbsd-tdep.c?ref=4d46f40270b16070398412bc02a512143380814c",
      "patch": "@@ -373,6 +373,153 @@ nbsd_skip_solib_resolver (struct gdbarch *gdbarch, CORE_ADDR pc)\n     return find_solib_trampoline_target (get_current_frame (), pc);\n }\n \n+static struct gdbarch_data *nbsd_gdbarch_data_handle;\n+\n+struct nbsd_gdbarch_data\n+{\n+  struct type *siginfo_type;\n+};\n+\n+static void *\n+init_nbsd_gdbarch_data (struct gdbarch *gdbarch)\n+{\n+  return GDBARCH_OBSTACK_ZALLOC (gdbarch, struct nbsd_gdbarch_data);\n+}\n+\n+static struct nbsd_gdbarch_data *\n+get_nbsd_gdbarch_data (struct gdbarch *gdbarch)\n+{\n+  return ((struct nbsd_gdbarch_data *)\n+\t  gdbarch_data (gdbarch, nbsd_gdbarch_data_handle));\n+}\n+\n+/* Implement the \"get_siginfo_type\" gdbarch method.  */\n+\n+static struct type *\n+nbsd_get_siginfo_type (struct gdbarch *gdbarch)\n+{\n+  nbsd_gdbarch_data *nbsd_gdbarch_data = get_nbsd_gdbarch_data (gdbarch);\n+  if (nbsd_gdbarch_data->siginfo_type != NULL)\n+    return nbsd_gdbarch_data->siginfo_type;\n+\n+  type *char_type = builtin_type (gdbarch)->builtin_char;\n+  type *int_type = builtin_type (gdbarch)->builtin_int;\n+  type *long_type = builtin_type (gdbarch)->builtin_long;\n+\n+  type *void_ptr_type\n+    = lookup_pointer_type (builtin_type (gdbarch)->builtin_void);\n+\n+  type *int32_type = builtin_type (gdbarch)->builtin_int32;\n+  type *uint32_type = builtin_type (gdbarch)->builtin_uint32;\n+  type *uint64_type = builtin_type (gdbarch)->builtin_uint64;\n+\n+  bool lp64 = TYPE_LENGTH (void_ptr_type) == 8;\n+  size_t char_bits = gdbarch_addressable_memory_unit_size (gdbarch) * 8;\n+\n+  /* pid_t */\n+  type *pid_type = arch_type (gdbarch, TYPE_CODE_TYPEDEF,\n+\t\t\t      TYPE_LENGTH (int32_type) * char_bits, \"pid_t\");\n+  TYPE_TARGET_TYPE (pid_type) = int32_type;\n+\n+  /* uid_t */\n+  type *uid_type = arch_type (gdbarch, TYPE_CODE_TYPEDEF,\n+\t\t\t      TYPE_LENGTH (uint32_type) * char_bits, \"uid_t\");\n+  TYPE_TARGET_TYPE (uid_type) = uint32_type;\n+\n+  /* clock_t */\n+  type *clock_type = arch_type (gdbarch, TYPE_CODE_TYPEDEF,\n+\t\t\t\tTYPE_LENGTH (int_type) * char_bits, \"clock_t\");\n+  TYPE_TARGET_TYPE (clock_type) = int_type;\n+\n+  /* lwpid_t */\n+  type *lwpid_type = arch_type (gdbarch, TYPE_CODE_TYPEDEF,\n+\t\t\t\tTYPE_LENGTH (int32_type) * char_bits,\n+\t\t\t\t\"lwpid_t\");\n+  TYPE_TARGET_TYPE (lwpid_type) = int32_type;\n+\n+  /* union sigval */\n+  type *sigval_type = arch_composite_type (gdbarch, NULL, TYPE_CODE_UNION);\n+  sigval_type->set_name (gdbarch_obstack_strdup (gdbarch, \"sigval\"));\n+  append_composite_type_field (sigval_type, \"sival_int\", int_type);\n+  append_composite_type_field (sigval_type, \"sival_ptr\", void_ptr_type);\n+\n+  /* union _option */\n+  type *option_type = arch_composite_type (gdbarch, NULL, TYPE_CODE_UNION);\n+  option_type->set_name (gdbarch_obstack_strdup (gdbarch, \"_option\"));\n+  append_composite_type_field (option_type, \"_pe_other_pid\", pid_type);\n+  append_composite_type_field (option_type, \"_pe_lwp\", lwpid_type);\n+\n+  /* union _reason */\n+  type *reason_type = arch_composite_type (gdbarch, NULL, TYPE_CODE_UNION);\n+\n+  /* _rt */\n+  type *t = arch_composite_type (gdbarch, NULL, TYPE_CODE_STRUCT);\n+  append_composite_type_field (t, \"_pid\", pid_type);\n+  append_composite_type_field (t, \"_uid\", uid_type);\n+  append_composite_type_field (t, \"_value\", sigval_type);\n+  append_composite_type_field (reason_type, \"_rt\", t);\n+\n+  /* _child */\n+  t = arch_composite_type (gdbarch, NULL, TYPE_CODE_STRUCT);\n+  append_composite_type_field (t, \"_pid\", pid_type);\n+  append_composite_type_field (t, \"_uid\", uid_type);\n+  append_composite_type_field (t, \"_status\", int_type);\n+  append_composite_type_field (t, \"_utime\", clock_type);\n+  append_composite_type_field (t, \"_stime\", clock_type);\n+  append_composite_type_field (reason_type, \"_child\", t);\n+\n+  /* _fault */\n+  t = arch_composite_type (gdbarch, NULL, TYPE_CODE_STRUCT);\n+  append_composite_type_field (t, \"_addr\", void_ptr_type);\n+  append_composite_type_field (t, \"_trap\", int_type);\n+  append_composite_type_field (t, \"_trap2\", int_type);\n+  append_composite_type_field (t, \"_trap3\", int_type);\n+  append_composite_type_field (reason_type, \"_fault\", t);\n+\n+  /* _poll */\n+  t = arch_composite_type (gdbarch, NULL, TYPE_CODE_STRUCT);\n+  append_composite_type_field (t, \"_band\", long_type);\n+  append_composite_type_field (t, \"_fd\", int_type);\n+  append_composite_type_field (reason_type, \"_poll\", t);\n+\n+  /* _syscall */\n+  t = arch_composite_type (gdbarch, NULL, TYPE_CODE_STRUCT);\n+  append_composite_type_field (t, \"_sysnum\", int_type);\n+  append_composite_type_field (t, \"_retval\",\n+\t\t\t       init_vector_type (int_type, 2));\n+  append_composite_type_field (t, \"_error\", int_type);\n+  append_composite_type_field (t, \"_args\",\n+\t\t\t       init_vector_type (uint64_type, 8));\n+  append_composite_type_field (reason_type, \"_syscall\", t);\n+\n+  /* _ptrace_state */\n+  t = arch_composite_type (gdbarch, NULL, TYPE_CODE_STRUCT);\n+  append_composite_type_field (t, \"_pe_report_event\", int_type);\n+  append_composite_type_field (t, \"_option\", option_type);\n+  append_composite_type_field (reason_type, \"_ptrace_state\", t);\n+\n+  /* struct _ksiginfo */\n+  type *ksiginfo_type = arch_composite_type (gdbarch, NULL, TYPE_CODE_STRUCT);\n+  ksiginfo_type->set_name (gdbarch_obstack_strdup (gdbarch, \"_ksiginfo\"));\n+  append_composite_type_field (ksiginfo_type, \"_signo\", int_type);\n+  append_composite_type_field (ksiginfo_type, \"_code\", int_type);\n+  append_composite_type_field (ksiginfo_type, \"_errno\", int_type);\n+  if (lp64)\n+    append_composite_type_field (ksiginfo_type, \"_pad\", int_type);\n+  append_composite_type_field (ksiginfo_type, \"_reason\", reason_type);\n+\n+  /* union siginfo */\n+  type *siginfo_type = arch_composite_type (gdbarch, NULL, TYPE_CODE_UNION);\n+  siginfo_type->set_name (gdbarch_obstack_strdup (gdbarch, \"siginfo\"));\n+  append_composite_type_field (siginfo_type, \"si_pad\",\n+\t\t\t       init_vector_type (char_type, 128));\n+  append_composite_type_field (siginfo_type, \"_info\", ksiginfo_type);\n+\n+  nbsd_gdbarch_data->siginfo_type = siginfo_type;\n+\n+  return siginfo_type;\n+}\n+\n /* See nbsd-tdep.h.  */\n \n void\n@@ -469,8 +616,17 @@ nbsd_init_abi (struct gdbarch_info info, struct gdbarch *gdbarch)\n   set_gdbarch_gdb_signal_to_target (gdbarch, nbsd_gdb_signal_to_target);\n   set_gdbarch_skip_solib_resolver (gdbarch, nbsd_skip_solib_resolver);\n   set_gdbarch_auxv_parse (gdbarch, svr4_auxv_parse);\n+  set_gdbarch_get_siginfo_type (gdbarch, nbsd_get_siginfo_type);\n \n   /* `catch syscall' */\n   set_xml_syscall_file_name (gdbarch, \"syscalls/netbsd.xml\");\n   set_gdbarch_get_syscall_number (gdbarch, nbsd_get_syscall_number);\n }\n+\n+void _initialize_nbsd_tdep ();\n+void\n+_initialize_nbsd_tdep ()\n+{\n+  nbsd_gdbarch_data_handle\n+    = gdbarch_data_register_post_init (init_nbsd_gdbarch_data);\n+}"
    }
  ]
}