{
  "sha": "a33fc9aed4b3b4384df63850c6fc9046ecbd97f4",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YTMzZmM5YWVkNGIzYjQzODRkZjYzODUwYzZmYzkwNDZlY2JkOTdmNA==",
  "commit": {
    "author": {
      "name": "Rae Kim",
      "email": "raekim@gmail.com",
      "date": "2020-12-16T03:51:09Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2020-12-16T04:04:04Z"
    },
    "message": "gdb: multi-line support for \"document\" command\n\n\"document\" command executed in python, gdb.execute(\"document\n<comname>\\n...\\nend\\n\"), will wait for user input. Python extension stops\nworking from that point.\n\nmulti-line suport was introduced in commit 56bcdbea2. But \"document\" support\nseem to be implemented.\n\ngdb/ChangeLog:\n\n2020-12-02  Rae Kim  <rae.kim@gmail.com>\n\n\t* cli/cli-script.c (do_document_command): Rename from\n\tdocument_command. Handle multi-line input.\n\t(multi_line_command_p): Handle document_control.\n\t(build_command_line): Likewise.\n\t(execute_control_command_1): Likewise.\n\t(process_next_line): Likewise.\n\t(document_command): Call do_document_command.\n\t* cli/cli-script.h (enum command_control_type): Add\n\tdocument_control.\n\ngdb/testsuite/ChangeLog:\n\n2020-12-02  Rae Kim  <rae.kim@gmail.com>\n\t* gdb.base/document.exp: New test.\n\nChange-Id: Ice262b980c05051de4c106af9f3fde5b2a6df6fe",
    "tree": {
      "sha": "45e6f3aa85c3f279c0adf8c3bc5ee59b92a25409",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/45e6f3aa85c3f279c0adf8c3bc5ee59b92a25409"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/a33fc9aed4b3b4384df63850c6fc9046ecbd97f4",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a33fc9aed4b3b4384df63850c6fc9046ecbd97f4",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/a33fc9aed4b3b4384df63850c6fc9046ecbd97f4",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a33fc9aed4b3b4384df63850c6fc9046ecbd97f4/comments",
  "author": null,
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "efd7ff149a42c865cac422e3bafdf386c91c5373",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/efd7ff149a42c865cac422e3bafdf386c91c5373",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/efd7ff149a42c865cac422e3bafdf386c91c5373"
    }
  ],
  "stats": {
    "total": 96,
    "additions": 89,
    "deletions": 7
  },
  "files": [
    {
      "sha": "979d26eee2a671f567af0dcb059fad657247add8",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 12,
      "deletions": 0,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a33fc9aed4b3b4384df63850c6fc9046ecbd97f4/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a33fc9aed4b3b4384df63850c6fc9046ecbd97f4/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=a33fc9aed4b3b4384df63850c6fc9046ecbd97f4",
      "patch": "@@ -1,3 +1,15 @@\n+2020-12-15  Rae Kim  <rae.kim@gmail.com>\n+\n+\t* cli/cli-script.c (do_document_command): Rename from\n+\tdocument_command. Handle multi-line input.\n+\t(multi_line_command_p): Handle document_control.\n+\t(build_command_line): Likewise.\n+\t(execute_control_command_1): Likewise.\n+\t(process_next_line): Likewise.\n+\t(document_command): Call do_document_command.\n+\t* cli/cli-script.h (enum command_control_type): Add\n+\tdocument_control.\n+\n 2020-12-15  Tom Tromey  <tom@tromey.com>\n \n \t* stap-probe.c (stap_probe::evaluate_argument): Use"
    },
    {
      "sha": "c9c4a713de7f7188167fc86f8502926cf42ab9a9",
      "filename": "gdb/cli/cli-script.c",
      "status": "modified",
      "additions": 42,
      "deletions": 7,
      "changes": 49,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a33fc9aed4b3b4384df63850c6fc9046ecbd97f4/gdb/cli/cli-script.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a33fc9aed4b3b4384df63850c6fc9046ecbd97f4/gdb/cli/cli-script.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/cli/cli-script.c?ref=a33fc9aed4b3b4384df63850c6fc9046ecbd97f4",
      "patch": "@@ -51,6 +51,9 @@ recurse_read_control_structure\n static void do_define_command (const char *comname, int from_tty,\n \t\t\t       const counted_command_line *commands);\n \n+static void do_document_command (const char *comname, int from_tty,\n+                                 const counted_command_line *commands);\n+\n static const char *read_next_line ();\n \n /* Level of control structure when reading.  */\n@@ -71,6 +74,9 @@ static cmd_list_element *if_cmd_element = nullptr;\n /* Command element for the 'define' command.  */\n static cmd_list_element *define_cmd_element = nullptr;\n \n+/* Command element for the 'document' command.  */\n+static cmd_list_element *document_cmd_element = nullptr;\n+\n /* Structure for arguments to user defined functions.  */\n \n class user_args\n@@ -139,6 +145,7 @@ multi_line_command_p (enum command_control_type type)\n     case python_control:\n     case guile_control:\n     case define_control:\n+    case document_control:\n       return 1;\n     default:\n       return 0;\n@@ -159,6 +166,8 @@ build_command_line (enum command_control_type type, const char *args)\n \terror (_(\"while command requires an argument.\"));\n       else if (type == define_control)\n \terror (_(\"define command requires an argument.\"));\n+      else if (type == document_control)\n+\terror (_(\"document command requires an argument.\"));\n     }\n   gdb_assert (args != NULL);\n \n@@ -679,6 +688,12 @@ execute_control_command_1 (struct command_line *cmd, int from_tty)\n       ret = simple_control;\n       break;\n \n+    case document_control:\n+      print_command_trace (\"document %s\", cmd->line);\n+      do_document_command (cmd->line, 0, &cmd->body_list_0);\n+      ret = simple_control;\n+      break;\n+\n     case python_control:\n     case guile_control:\n       {\n@@ -1019,6 +1034,8 @@ process_next_line (const char *p, struct command_line **command,\n \t*command = build_command_line (commands_control, line_first_arg (p));\n       else if (cmd == define_cmd_element)\n \t*command = build_command_line (define_control, line_first_arg (p));\n+      else if (cmd == document_cmd_element)\n+\t*command = build_command_line (document_control, line_first_arg (p));\n       else if (cmd == python_cmd_element && !inline_cmd)\n \t{\n \t  /* Note that we ignore the inline \"python command\" form\n@@ -1508,8 +1525,13 @@ define_command (const char *comname, int from_tty)\n   do_define_command (comname, from_tty, nullptr);\n }\n \n+/* Document a user-defined command.  If COMMANDS is NULL, then this is a\n+   top-level call and the document will be read using read_command_lines.\n+   Otherwise, it is a \"document\" command in an existing command and the\n+   commands are provided.  */\n static void\n-document_command (const char *comname, int from_tty)\n+do_document_command (const char *comname, int from_tty,\n+                     const counted_command_line *commands)\n {\n   struct cmd_list_element *c, **list;\n   const char *tem;\n@@ -1524,10 +1546,16 @@ document_command (const char *comname, int from_tty)\n   if (c->theclass != class_user)\n     error (_(\"Command \\\"%s\\\" is built-in.\"), comfull);\n \n-  std::string prompt = string_printf (\"Type documentation for \\\"%s\\\".\",\n-\t\t\t\t      comfull);\n-  counted_command_line doclines = read_command_lines (prompt.c_str (),\n-\t\t\t\t\t\t      from_tty, 0, 0);\n+  counted_command_line doclines;\n+\n+  if (commands == nullptr)\n+    {\n+      std::string prompt \n+        = string_printf (\"Type documentation for \\\"%s\\\".\", comfull);\n+      doclines = read_command_lines (prompt.c_str (), from_tty, 0, 0);\n+    }\n+  else\n+    doclines = *commands;\n \n   xfree ((char *) c->doc);\n \n@@ -1553,6 +1581,12 @@ document_command (const char *comname, int from_tty)\n   }\n }\n \n+static void\n+document_command (const char *comname, int from_tty)\n+{\n+  do_document_command (comname, from_tty, nullptr);\n+}\n+\n /* Implementation of the \"define-prefix\" command.  */\n \n static void\n@@ -1676,11 +1710,12 @@ _initialize_cli_script ()\n   /* \"document\", \"define\" and \"define-prefix\" use command_completer,\n      as this helps the user to either type the command name and/or\n      its prefixes.  */\n-  c = add_com (\"document\", class_support, document_command, _(\"\\\n+  document_cmd_element = add_com (\"document\", class_support, document_command,\n+                                  _(\"\\\n Document a user-defined command.\\n\\\n Give command name as argument.  Give documentation on following lines.\\n\\\n End with a line of just \\\"end\\\".\"));\n-  set_cmd_completer (c, command_completer);\n+  set_cmd_completer (document_cmd_element, command_completer);\n   define_cmd_element = add_com (\"define\", class_support, define_command, _(\"\\\n Define a new command name.  Command name is argument.\\n\\\n Definition appears on following lines, one command per line.\\n\\"
    },
    {
      "sha": "6ad6e61fb4324055502bdc66b3c4afb581093a68",
      "filename": "gdb/cli/cli-script.h",
      "status": "modified",
      "additions": 1,
      "deletions": 0,
      "changes": 1,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a33fc9aed4b3b4384df63850c6fc9046ecbd97f4/gdb/cli/cli-script.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a33fc9aed4b3b4384df63850c6fc9046ecbd97f4/gdb/cli/cli-script.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/cli/cli-script.h?ref=a33fc9aed4b3b4384df63850c6fc9046ecbd97f4",
      "patch": "@@ -45,6 +45,7 @@ enum command_control_type\n   guile_control,\n   while_stepping_control,\n   define_control,\n+  document_control,\n   invalid_control\n };\n "
    },
    {
      "sha": "549475a75f34d24aaca91ec181facbd31e3ac6ee",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a33fc9aed4b3b4384df63850c6fc9046ecbd97f4/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a33fc9aed4b3b4384df63850c6fc9046ecbd97f4/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=a33fc9aed4b3b4384df63850c6fc9046ecbd97f4",
      "patch": "@@ -1,3 +1,7 @@\n+2020-12-15  Rae Kim  <rae.kim@gmail.com>\n+\n+\t* gdb.base/document.exp: New test.\n+\n 2020-12-15  Tom Tromey  <tromey@adacore.com>\n \n \t* gdb.base/style.exp: Add deprecation tests."
    },
    {
      "sha": "7e183f8f3af74e6f95f76db85a243c87acb2b437",
      "filename": "gdb/testsuite/gdb.base/document.exp",
      "status": "added",
      "additions": 30,
      "deletions": 0,
      "changes": 30,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/a33fc9aed4b3b4384df63850c6fc9046ecbd97f4/gdb/testsuite/gdb.base/document.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/a33fc9aed4b3b4384df63850c6fc9046ecbd97f4/gdb/testsuite/gdb.base/document.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.base/document.exp?ref=a33fc9aed4b3b4384df63850c6fc9046ecbd97f4",
      "patch": "@@ -0,0 +1,30 @@\n+# Copyright 1998-2020 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+standard_testfile break.c break1.c\n+\n+if {[prepare_for_testing \"failed to prepare\" ${testfile} \\\n+\t [list $srcfile $srcfile2] {debug nowarnings}]} {\n+    return -1\n+}\n+\n+# test document command used within user command.\n+gdb_test_multiple \"define do-document\" \"\" {\n+    -re \"Type commands for definition of \\\"do-document\\\".\\r\\nEnd with a line saying just \\\"end\\\".\\r\\n>$\" {\n+\tgdb_test \"document do-document\\nusage: do-document\\nend\\nend\" \"\" \"define do-document\"\n+    }\n+}\n+gdb_test_no_output \"do-document\" \"invoke do-document\"\n+gdb_test \"help do-document\" \"usage: do-document\" \"invoke help do-document\""
    }
  ]
}