{
  "sha": "1b40d569a861eb8b290faaad05ae8a6152e0b2ee",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MWI0MGQ1NjlhODYxZWI4YjI5MGZhYWFkMDVhZThhNjE1MmUwYjJlZQ==",
  "commit": {
    "author": {
      "name": "Mike Frysinger",
      "email": "vapier@gentoo.org",
      "date": "2021-06-20T16:32:27Z"
    },
    "committer": {
      "name": "Mike Frysinger",
      "email": "vapier@gentoo.org",
      "date": "2021-06-21T03:45:24Z"
    },
    "message": "sim: cris: clean up printf & abort usage a bit\n\nInline the stats printf calls to avoid compiler warnings about\nnon-literal format strings.  This in turn highlights bad type\nsizes being passed in, so fix the strings to use the right size\ntype.  This in turn highlights the rest of the func using casts\nrather than the right type directly, so adjust all of those.\n\nFinally, replace a few abort+sim_engine_halt calls with the\ncommon sim_engine_abort.  This provides good output while still\naborting as we want.",
    "tree": {
      "sha": "3747a4952c1ce3455fa9d6dd7ee5894b0d84cde5",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/3747a4952c1ce3455fa9d6dd7ee5894b0d84cde5"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/1b40d569a861eb8b290faaad05ae8a6152e0b2ee",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1b40d569a861eb8b290faaad05ae8a6152e0b2ee",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/1b40d569a861eb8b290faaad05ae8a6152e0b2ee",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/1b40d569a861eb8b290faaad05ae8a6152e0b2ee/comments",
  "author": {
    "login": "vapier",
    "id": 176950,
    "node_id": "MDQ6VXNlcjE3Njk1MA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/176950?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vapier",
    "html_url": "https://github.com/vapier",
    "followers_url": "https://api.github.com/users/vapier/followers",
    "following_url": "https://api.github.com/users/vapier/following{/other_user}",
    "gists_url": "https://api.github.com/users/vapier/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vapier/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vapier/subscriptions",
    "organizations_url": "https://api.github.com/users/vapier/orgs",
    "repos_url": "https://api.github.com/users/vapier/repos",
    "events_url": "https://api.github.com/users/vapier/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vapier/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "vapier",
    "id": 176950,
    "node_id": "MDQ6VXNlcjE3Njk1MA==",
    "avatar_url": "https://avatars.githubusercontent.com/u/176950?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vapier",
    "html_url": "https://github.com/vapier",
    "followers_url": "https://api.github.com/users/vapier/followers",
    "following_url": "https://api.github.com/users/vapier/following{/other_user}",
    "gists_url": "https://api.github.com/users/vapier/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vapier/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vapier/subscriptions",
    "organizations_url": "https://api.github.com/users/vapier/orgs",
    "repos_url": "https://api.github.com/users/vapier/repos",
    "events_url": "https://api.github.com/users/vapier/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vapier/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "e27c0d7ae3b154b9e753646c6d1400b7c329d0ce",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e27c0d7ae3b154b9e753646c6d1400b7c329d0ce",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/e27c0d7ae3b154b9e753646c6d1400b7c329d0ce"
    }
  ],
  "stats": {
    "total": 83,
    "additions": 43,
    "deletions": 40
  },
  "files": [
    {
      "sha": "7f2b465c28079a435c8ebfcf113a32fa655ba577",
      "filename": "sim/cris/ChangeLog",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1b40d569a861eb8b290faaad05ae8a6152e0b2ee/sim/cris/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1b40d569a861eb8b290faaad05ae8a6152e0b2ee/sim/cris/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/cris/ChangeLog?ref=1b40d569a861eb8b290faaad05ae8a6152e0b2ee",
      "patch": "@@ -1,3 +1,9 @@\n+2021-06-20  Mike Frysinger  <vapier@gentoo.org>\n+\n+\t* traps.c (dump_statistics): Clean up sim_io_eprintf calls, and\n+\treplace raw abort with sim engine abort.\n+\t(cris_break_13_handler): Likewise.\n+\n 2021-06-20  Mike Frysinger  <vapier@gentoo.org>\n \n \t* configure.ac (SIM_AC_COMMON): Delete."
    },
    {
      "sha": "f92bb7cdebe2b63d2bac51567ebedc0af2bb679d",
      "filename": "sim/cris/traps.c",
      "status": "modified",
      "additions": 37,
      "deletions": 40,
      "changes": 77,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/1b40d569a861eb8b290faaad05ae8a6152e0b2ee/sim/cris/traps.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/1b40d569a861eb8b290faaad05ae8a6152e0b2ee/sim/cris/traps.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/sim/cris/traps.c?ref=1b40d569a861eb8b290faaad05ae8a6152e0b2ee",
      "patch": "@@ -804,24 +804,29 @@ dump_statistics (SIM_CPU *current_cpu)\n   CRIS_MISC_PROFILE *profp\n     = CPU_CRIS_MISC_PROFILE (current_cpu);\n   unsigned64 total = profp->basic_cycle_count;\n-  const char *textmsg = \"Basic clock cycles, total @: %llu\\n\";\n+\n+  /* Historically, these messages have gone to stderr, so we'll keep it\n+     that way.  It's also easier to then tell it from normal program\n+     output.  FIXME: Add redirect option like \"run -e file\".  */\n \n   /* The --cris-stats={basic|unaligned|schedulable|all} counts affect\n      what's included in the \"total\" count only.  */\n   switch (CPU_CRIS_MISC_PROFILE (current_cpu)->flags\n \t  & FLAG_CRIS_MISC_PROFILE_ALL)\n     {\n     case FLAG_CRIS_MISC_PROFILE_SIMPLE:\n+      sim_io_eprintf (sd, \"Basic clock cycles, total @: %\" PRIu64 \"\\n\", total);\n       break;\n \n     case (FLAG_CRIS_MISC_PROFILE_UNALIGNED | FLAG_CRIS_MISC_PROFILE_SIMPLE):\n-      textmsg\n-\t= \"Clock cycles including stall cycles for unaligned accesses @: %llu\\n\";\n       total += profp->unaligned_mem_dword_count;\n+      sim_io_eprintf (sd,\n+\t\t      \"Clock cycles including stall cycles for unaligned \"\n+\t\t      \"accesses @: %\" PRIu64 \"\\n\",\n+\t\t      total);\n       break;\n \n     case (FLAG_CRIS_MISC_PROFILE_SCHEDULABLE | FLAG_CRIS_MISC_PROFILE_SIMPLE):\n-      textmsg = \"Schedulable clock cycles, total @: %llu\\n\";\n       total\n \t+= (profp->memsrc_stall_count\n \t    + profp->memraw_stall_count\n@@ -830,10 +835,11 @@ dump_statistics (SIM_CPU *current_cpu)\n \t    + profp->mulsrc_stall_count\n \t    + profp->jumpsrc_stall_count\n \t    + profp->unaligned_mem_dword_count);\n+      sim_io_eprintf (sd, \"Schedulable clock cycles, total @: %\" PRIu64 \"\\n\",\n+\t\t      total);\n       break;\n \n     case FLAG_CRIS_MISC_PROFILE_ALL:\n-      textmsg = \"All accounted clock cycles, total @: %llu\\n\";\n       total\n \t+= (profp->memsrc_stall_count\n \t    + profp->memraw_stall_count\n@@ -845,44 +851,36 @@ dump_statistics (SIM_CPU *current_cpu)\n \t    + profp->branch_stall_count\n \t    + profp->jumptarget_stall_count\n \t    + profp->unaligned_mem_dword_count);\n+      sim_io_eprintf (sd, \"All accounted clock cycles, total @: %\" PRIu64 \"\\n\",\n+\t\t      total);\n       break;\n \n     default:\n-      abort ();\n-\n-      sim_io_eprintf (sd,\n-\t\t      \"Internal inconsistency at %s:%d\",\n-\t\t      __FILE__, __LINE__);\n-      sim_engine_halt (sd, current_cpu, NULL, 0,\n-\t\t       sim_stopped, SIM_SIGILL);\n+      sim_engine_abort (sd, current_cpu, 0,\n+\t\t\t\"Internal inconsistency at %s:%d\",\n+\t\t\t__FILE__, __LINE__);\n     }\n \n-  /* Historically, these messages have gone to stderr, so we'll keep it\n-     that way.  It's also easier to then tell it from normal program\n-     output.  FIXME: Add redirect option like \"run -e file\".  */\n-  sim_io_eprintf (sd, textmsg, total);\n-\n   /* For v32, unaligned_mem_dword_count should always be 0.  For\n      v10, memsrc_stall_count should always be 0.  */\n-  sim_io_eprintf (sd, \"Memory source stall cycles: %llu\\n\",\n-\t\t  (unsigned long long) (profp->memsrc_stall_count\n-\t\t\t\t\t+ profp->unaligned_mem_dword_count));\n-  sim_io_eprintf (sd, \"Memory read-after-write stall cycles: %llu\\n\",\n-\t\t  (unsigned long long) profp->memraw_stall_count);\n-  sim_io_eprintf (sd, \"Movem source stall cycles: %llu\\n\",\n-\t\t  (unsigned long long) profp->movemsrc_stall_count);\n-  sim_io_eprintf (sd, \"Movem destination stall cycles: %llu\\n\",\n-\t\t  (unsigned long long) profp->movemdst_stall_count);\n-  sim_io_eprintf (sd, \"Movem address stall cycles: %llu\\n\",\n-\t\t  (unsigned long long) profp->movemaddr_stall_count);\n-  sim_io_eprintf (sd, \"Multiplication source stall cycles: %llu\\n\",\n-\t\t  (unsigned long long) profp->mulsrc_stall_count);\n-  sim_io_eprintf (sd, \"Jump source stall cycles: %llu\\n\",\n-\t\t  (unsigned long long) profp->jumpsrc_stall_count);\n-  sim_io_eprintf (sd, \"Branch misprediction stall cycles: %llu\\n\",\n-\t\t  (unsigned long long) profp->branch_stall_count);\n-  sim_io_eprintf (sd, \"Jump target stall cycles: %llu\\n\",\n-\t\t  (unsigned long long) profp->jumptarget_stall_count);\n+  sim_io_eprintf (sd, \"Memory source stall cycles: %\" PRIu64 \"\\n\",\n+\t\t  profp->memsrc_stall_count + profp->unaligned_mem_dword_count);\n+  sim_io_eprintf (sd, \"Memory read-after-write stall cycles: %\" PRIu64 \"\\n\",\n+\t\t  profp->memraw_stall_count);\n+  sim_io_eprintf (sd, \"Movem source stall cycles: %\" PRIu64 \"\\n\",\n+\t\t  profp->movemsrc_stall_count);\n+  sim_io_eprintf (sd, \"Movem destination stall cycles: %\" PRIu64 \"\\n\",\n+\t\t  profp->movemdst_stall_count);\n+  sim_io_eprintf (sd, \"Movem address stall cycles: %\" PRIu64 \"\\n\",\n+\t\t  profp->movemaddr_stall_count);\n+  sim_io_eprintf (sd, \"Multiplication source stall cycles: %\" PRIu64 \"\\n\",\n+\t\t  profp->mulsrc_stall_count);\n+  sim_io_eprintf (sd, \"Jump source stall cycles: %\" PRIu64 \"\\n\",\n+\t\t  profp->jumpsrc_stall_count);\n+  sim_io_eprintf (sd, \"Branch misprediction stall cycles: %\" PRIu64 \"\\n\",\n+\t\t  profp->branch_stall_count);\n+  sim_io_eprintf (sd, \"Jump target stall cycles: %\" PRIu64 \"\\n\",\n+\t\t  profp->jumptarget_stall_count);\n }\n \n /* Check whether any part of [addr .. addr + len - 1] is already mapped.\n@@ -1481,10 +1479,9 @@ cris_break_13_handler (SIM_CPU *current_cpu, USI callnum, USI arg1,\n \n   if (cb_syscall (cb, &s) != CB_RC_OK)\n     {\n-      abort ();\n-      sim_io_eprintf (sd, \"Break 13: invalid %d?  Returned %ld\\n\", callnum,\n-\t\t      s.result);\n-      sim_engine_halt (sd, current_cpu, NULL, pc, sim_stopped, SIM_SIGILL);\n+      sim_engine_abort (sd, current_cpu, pc,\n+\t\t\t\"Break 13: invalid %d?  Returned %ld\\n\", callnum,\n+\t\t\ts.result);\n     }\n \n   retval = s.result == -1 ? -s.errcode : s.result;"
    }
  ]
}