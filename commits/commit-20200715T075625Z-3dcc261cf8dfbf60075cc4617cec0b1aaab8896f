{
  "sha": "3dcc261cf8dfbf60075cc4617cec0b1aaab8896f",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6M2RjYzI2MWNmOGRmYmY2MDA3NWNjNDYxN2NlYzBiMWFhYWI4ODk2Zg==",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2020-07-14T09:10:07Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2020-07-15T07:56:25Z"
    },
    "message": "gdb/fortran: Handle dynamic string types when printing types\n\nAfter commit:\n\n  commit 8c2e4e0689ea244d0ed979171a3d09c9176b8175\n  Date:   Sun Jul 12 22:58:51 2020 -0400\n\n      gdb: add accessors to struct dynamic_prop\n\nAn existing bug was exposed in the Fortran type printing code.  When\nGDB is asked to print the type of a function that takes a dynamic\nstring argument GDB will try to read the upper bound of the string.\n\nThe read of the upper bound is written as:\n\n    if (type->bounds ()->high.kind () == PROP_UNDEFINED)\n      // Treat the upper bound as unknown.\n    else\n      // Treat the upper bound as known and constant.\n\nHowever, this is not good enough.  When printing a function type the\ndynamic argument types will not have been resolved.  As a result the\ndynamic property is not PROP_UNDEFINED, but nor is it constant.\n\nBy rewriting this code to specifically check for the PROP_CONST case,\nand treating all other cases as the upper bound being unknown we avoid\nincorrectly treating the dynamic property as being constant.\n\ngdb/ChangeLog:\n\n\t* f-typeprint.c (f_type_print_base): Allow for dynamic types not\n\tbeing resolved.\n\ngdb/testsuite/ChangeLog:\n\n\t* gdb.fortran/ptype-on-functions.exp: Add more tests.\n\t* gdb.fortran/ptype-on-functions.f90: Likewise.",
    "tree": {
      "sha": "2214ba625e4a73450af5963507ead0f391187a37",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/2214ba625e4a73450af5963507ead0f391187a37"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/3dcc261cf8dfbf60075cc4617cec0b1aaab8896f",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3dcc261cf8dfbf60075cc4617cec0b1aaab8896f",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/3dcc261cf8dfbf60075cc4617cec0b1aaab8896f",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3dcc261cf8dfbf60075cc4617cec0b1aaab8896f/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "f0e8d0bae403e33b8a3e8de5817d8f920e063f84",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f0e8d0bae403e33b8a3e8de5817d8f920e063f84",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/f0e8d0bae403e33b8a3e8de5817d8f920e063f84"
    }
  ],
  "stats": {
    "total": 51,
    "additions": 47,
    "deletions": 4
  },
  "files": [
    {
      "sha": "f30edafdf92b3c6d134bf9e2695fedb20fd42893",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3dcc261cf8dfbf60075cc4617cec0b1aaab8896f/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3dcc261cf8dfbf60075cc4617cec0b1aaab8896f/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=3dcc261cf8dfbf60075cc4617cec0b1aaab8896f",
      "patch": "@@ -1,3 +1,8 @@\n+2020-07-15  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* f-typeprint.c (f_type_print_base): Allow for dynamic types not\n+\tbeing resolved.\n+\n 2020-07-14  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* arch-utils.c (show_architecture): Update formatting of messages."
    },
    {
      "sha": "65ec93af9f419c03674bc6aa6e9bf4057934d656",
      "filename": "gdb/f-typeprint.c",
      "status": "modified",
      "additions": 8,
      "deletions": 4,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3dcc261cf8dfbf60075cc4617cec0b1aaab8896f/gdb/f-typeprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3dcc261cf8dfbf60075cc4617cec0b1aaab8896f/gdb/f-typeprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/f-typeprint.c?ref=3dcc261cf8dfbf60075cc4617cec0b1aaab8896f",
      "patch": "@@ -406,16 +406,20 @@ f_type_print_base (struct type *type, struct ui_file *stream, int show,\n       break;\n \n     case TYPE_CODE_STRING:\n-      /* Strings may have dynamic upperbounds (lengths) like arrays.  */\n+      /* Strings may have dynamic upperbounds (lengths) like arrays.  We\n+\t check specifically for the PROP_CONST case to indicate that the\n+\t dynamic type has been resolved.  If we arrive here having been\n+\t asked to print the type of a value with a dynamic type then the\n+\t bounds will not have been resolved.  */\n \n-      if (type->bounds ()->high.kind () == PROP_UNDEFINED)\n-\tfprintfi_filtered (level, stream, \"character*(*)\");\n-      else\n+      if (type->bounds ()->high.kind () == PROP_CONST)\n \t{\n \t  LONGEST upper_bound = f77_get_upperbound (type);\n \n \t  fprintf_filtered (stream, \"character*%s\", pulongest (upper_bound));\n \t}\n+      else\n+\tfprintfi_filtered (level, stream, \"character*(*)\");\n       break;\n \n     case TYPE_CODE_STRUCT:"
    },
    {
      "sha": "e24b066fb1535ab3cf590c5fce82cb1b658446e4",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3dcc261cf8dfbf60075cc4617cec0b1aaab8896f/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3dcc261cf8dfbf60075cc4617cec0b1aaab8896f/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=3dcc261cf8dfbf60075cc4617cec0b1aaab8896f",
      "patch": "@@ -1,3 +1,8 @@\n+2020-07-15  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* gdb.fortran/ptype-on-functions.exp: Add more tests.\n+\t* gdb.fortran/ptype-on-functions.f90: Likewise.\n+\n 2020-07-14  Simon Marchi  <simon.marchi@polymtl.ca>\n \n \t* lib/dwarf.exp (Dwarf::cu, Dwarf::tu, Dwarf::lines): Change valid"
    },
    {
      "sha": "dde6f48b85374ef668d5c65b724da730b61a63a9",
      "filename": "gdb/testsuite/gdb.fortran/ptype-on-functions.exp",
      "status": "modified",
      "additions": 6,
      "deletions": 0,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3dcc261cf8dfbf60075cc4617cec0b1aaab8896f/gdb/testsuite/gdb.fortran/ptype-on-functions.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3dcc261cf8dfbf60075cc4617cec0b1aaab8896f/gdb/testsuite/gdb.fortran/ptype-on-functions.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.fortran/ptype-on-functions.exp?ref=3dcc261cf8dfbf60075cc4617cec0b1aaab8896f",
      "patch": "@@ -43,3 +43,9 @@ gdb_test \"ptype say_numbers\" \\\n \n gdb_test \"ptype fun_ptr\" \\\n     \"type = PTR TO -> \\\\( integer\\\\(kind=4\\\\) \\\\(\\\\) \\\\(REF TO -> \\\\( integer\\\\(kind=4\\\\) \\\\)\\\\) \\\\)\"\n+\n+gdb_test \"ptype say_string\" \\\n+    \"type = void \\\\(character\\\\*\\\\(\\\\*\\\\), integer\\\\(kind=8\\\\)\\\\)\"\n+\n+gdb_test \"ptype say_array\" \\\n+    \"type = void \\\\(integer\\\\(kind=4\\\\) \\\\(:,:\\\\)\\\\)\""
    },
    {
      "sha": "adf79e325917d98071a6cce1a866254c21cd09c6",
      "filename": "gdb/testsuite/gdb.fortran/ptype-on-functions.f90",
      "status": "modified",
      "additions": 23,
      "deletions": 0,
      "changes": 23,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/3dcc261cf8dfbf60075cc4617cec0b1aaab8896f/gdb/testsuite/gdb.fortran/ptype-on-functions.f90",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/3dcc261cf8dfbf60075cc4617cec0b1aaab8896f/gdb/testsuite/gdb.fortran/ptype-on-functions.f90",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.fortran/ptype-on-functions.f90?ref=3dcc261cf8dfbf60075cc4617cec0b1aaab8896f",
      "patch": "@@ -63,14 +63,23 @@ end function fun1\n      integer function fun2 (x)\n        integer :: x\n      end function fun2\n+\n+     subroutine say_array (arr)\n+       integer, dimension (:,:) :: arr\n+     end subroutine say_array\n   end interface\n \n   type (Number) :: n1\n   type (Number) :: n2\n \n   procedure(fun1), pointer:: fun_ptr => NULL()\n \n+  integer, dimension (5,5) :: array\n+  array = 0\n+\n   call say_numbers (1,2,3)\t! stop here\n+  call say_string ('hello world')\n+  call say_array (array (2:3, 2:4))\n   print *, fun_ptr (3)\n \n end program test\n@@ -87,3 +96,17 @@ integer function fun2 (x)\n   fun2 = x + 2\n end function fun2\n \n+subroutine say_string (str)\n+  character(len=*) :: str\n+  print *, str\n+end subroutine say_string\n+\n+subroutine say_array (arr)\n+  integer, dimension (:,:) :: arr\n+  do i=LBOUND (arr, 2), UBOUND (arr, 2), 1\n+     do j=LBOUND (arr, 1), UBOUND (arr, 1), 1\n+        write(*, fmt=\"(i4)\", advance=\"no\") arr (j, i)\n+     end do\n+     print *, \"\"\n+  end do\n+end subroutine say_array"
    }
  ]
}