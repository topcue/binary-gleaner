{
  "sha": "26f42329caf1dcd4a410de61045208024156169f",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MjZmNDIzMjljYWYxZGNkNGE0MTBkZTYxMDQ1MjA4MDI0MTU2MTY5Zg==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-01-17T14:58:57Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-01-17T14:59:10Z"
    },
    "message": "gdb: remove uses of iterate_over_inferiors in top.c\n\nReplace with range-based for loops.\n\ngdb/ChangeLog:\n\n\t* top.c (struct qt_args): Remove.\n\t(kill_or_detach): Change return type to void, replace `void *`\n\tparameter with a proper one.\n\t(print_inferior_quit_action):  Likewise.\n\t(quit_confirm): Use range-based for loop to iterate over inferiors.\n\t(quit_force): Likewise.",
    "tree": {
      "sha": "f602eb1a02fc6843c9ea74c767f2d2426d92c984",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/f602eb1a02fc6843c9ea74c767f2d2426d92c984"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/26f42329caf1dcd4a410de61045208024156169f",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/26f42329caf1dcd4a410de61045208024156169f",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/26f42329caf1dcd4a410de61045208024156169f",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/26f42329caf1dcd4a410de61045208024156169f/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "a9ac81b1a7902a4c41f5653032e2971a767accc4",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/a9ac81b1a7902a4c41f5653032e2971a767accc4",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/a9ac81b1a7902a4c41f5653032e2971a767accc4"
    }
  ],
  "stats": {
    "total": 60,
    "additions": 28,
    "deletions": 32
  },
  "files": [
    {
      "sha": "abe7ab76621a70659c107246c7221f6f00a0b973",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 9,
      "deletions": 0,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/26f42329caf1dcd4a410de61045208024156169f/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/26f42329caf1dcd4a410de61045208024156169f/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=26f42329caf1dcd4a410de61045208024156169f",
      "patch": "@@ -1,3 +1,12 @@\n+2020-01-17  Simon Marchi  <simon.marchi@efficios.com>\n+\n+\t* top.c (struct qt_args): Remove.\n+\t(kill_or_detach): Change return type to void, replace `void *`\n+\tparameter with a proper one.\n+\t(print_inferior_quit_action):  Likewise.\n+\t(quit_confirm): Use range-based for loop to iterate over inferiors.\n+\t(quit_force): Likewise.\n+\n 2020-01-17  Simon Marchi  <simon.marchi@efficios.com>\n \n \t* mi/mi-main.c (run_one_inferior): Change return type to void, replace"
    },
    {
      "sha": "f702af9acd34a766dd71627ec13e17e9d9bd1a63",
      "filename": "gdb/top.c",
      "status": "modified",
      "additions": 19,
      "deletions": 32,
      "changes": 51,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/26f42329caf1dcd4a410de61045208024156169f/gdb/top.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/26f42329caf1dcd4a410de61045208024156169f/gdb/top.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/top.c?ref=26f42329caf1dcd4a410de61045208024156169f",
      "patch": "@@ -1607,21 +1607,14 @@ set_prompt (const char *s)\n }\n \f\n \n-struct qt_args\n-{\n-  int from_tty;\n-};\n-\n-/* Callback for iterate_over_inferiors.  Kills or detaches the given\n-   inferior, depending on how we originally gained control of it.  */\n+/* Kills or detaches the given inferior, depending on how we originally\n+   gained control of it.  */\n \n-static int\n-kill_or_detach (struct inferior *inf, void *args)\n+static void\n+kill_or_detach (inferior *inf, int from_tty)\n {\n-  struct qt_args *qt = (struct qt_args *) args;\n-\n   if (inf->pid == 0)\n-    return 0;\n+    return;\n \n   thread_info *thread = any_thread_of_inferior (inf);\n   if (thread != NULL)\n@@ -1632,37 +1625,30 @@ kill_or_detach (struct inferior *inf, void *args)\n       if (target_has_execution)\n \t{\n \t  if (inf->attach_flag)\n-\t    target_detach (inf, qt->from_tty);\n+\t    target_detach (inf, from_tty);\n \t  else\n \t    target_kill ();\n \t}\n     }\n-\n-  return 0;\n }\n \n-/* Callback for iterate_over_inferiors.  Prints info about what GDB\n-   will do to each inferior on a \"quit\".  ARG points to a struct\n-   ui_out where output is to be collected.  */\n+/* Prints info about what GDB will do to inferior INF on a \"quit\".  OUT is\n+   where to collect the output.  */\n \n-static int\n-print_inferior_quit_action (struct inferior *inf, void *arg)\n+static void\n+print_inferior_quit_action (inferior *inf, ui_file *out)\n {\n-  struct ui_file *stb = (struct ui_file *) arg;\n-\n   if (inf->pid == 0)\n-    return 0;\n+    return;\n \n   if (inf->attach_flag)\n-    fprintf_filtered (stb,\n+    fprintf_filtered (out,\n \t\t      _(\"\\tInferior %d [%s] will be detached.\\n\"), inf->num,\n \t\t      target_pid_to_str (ptid_t (inf->pid)).c_str ());\n   else\n-    fprintf_filtered (stb,\n+    fprintf_filtered (out,\n \t\t      _(\"\\tInferior %d [%s] will be killed.\\n\"), inf->num,\n \t\t      target_pid_to_str (ptid_t (inf->pid)).c_str ());\n-\n-  return 0;\n }\n \n /* If necessary, make the user confirm that we should quit.  Return\n@@ -1679,7 +1665,10 @@ quit_confirm (void)\n   string_file stb;\n \n   stb.puts (_(\"A debugging session is active.\\n\\n\"));\n-  iterate_over_inferiors (print_inferior_quit_action, &stb);\n+\n+  for (inferior *inf : all_inferiors ())\n+    print_inferior_quit_action (inf, &stb);\n+\n   stb.puts (_(\"\\nQuit anyway? \"));\n \n   return query (\"%s\", stb.c_str ());\n@@ -1712,7 +1701,6 @@ void\n quit_force (int *exit_arg, int from_tty)\n {\n   int exit_code = 0;\n-  struct qt_args qt;\n \n   undo_terminal_modifications_before_exit ();\n \n@@ -1723,15 +1711,14 @@ quit_force (int *exit_arg, int from_tty)\n   else if (return_child_result)\n     exit_code = return_child_result_value;\n \n-  qt.from_tty = from_tty;\n-\n   /* We want to handle any quit errors and exit regardless.  */\n \n   /* Get out of tfind mode, and kill or detach all inferiors.  */\n   try\n     {\n       disconnect_tracing ();\n-      iterate_over_inferiors (kill_or_detach, &qt);\n+      for (inferior *inf : all_inferiors ())\n+\tkill_or_detach (inf, from_tty);\n     }\n   catch (const gdb_exception &ex)\n     {"
    }
  ]
}