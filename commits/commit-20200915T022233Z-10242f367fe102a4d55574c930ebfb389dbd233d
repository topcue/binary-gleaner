{
  "sha": "10242f367fe102a4d55574c930ebfb389dbd233d",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MTAyNDJmMzY3ZmUxMDJhNGQ1NTU3NGM5MzBlYmZiMzg5ZGJkMjMzZA==",
  "commit": {
    "author": {
      "name": "Simon Marchi",
      "email": "simon.marchi@efficios.com",
      "date": "2020-09-15T02:22:33Z"
    },
    "committer": {
      "name": "Simon Marchi",
      "email": "simon.marchi@polymtl.ca",
      "date": "2020-09-15T02:22:33Z"
    },
    "message": "gdb: remove TYPE_INSTANCE_FLAGS\n\nRemove it, use the `type::instance_flags` method everywhere.\n\ngdb/ChangeLog:\n\n\t* gdbtypes.h (TYPE_INSTANCE_FLAGS): Remove, replace all uses\n\twith `type::instance_flags`.\n\nChange-Id: I3653108b712e6186529cb0102e2b70247bbcabbe",
    "tree": {
      "sha": "a1d1f91f5739cf0614533b97dea590f0d5faba0f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/a1d1f91f5739cf0614533b97dea590f0d5faba0f"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/10242f367fe102a4d55574c930ebfb389dbd233d",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/10242f367fe102a4d55574c930ebfb389dbd233d",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/10242f367fe102a4d55574c930ebfb389dbd233d",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/10242f367fe102a4d55574c930ebfb389dbd233d/comments",
  "author": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "simark",
    "id": 1758287,
    "node_id": "MDQ6VXNlcjE3NTgyODc=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1758287?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/simark",
    "html_url": "https://github.com/simark",
    "followers_url": "https://api.github.com/users/simark/followers",
    "following_url": "https://api.github.com/users/simark/following{/other_user}",
    "gists_url": "https://api.github.com/users/simark/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/simark/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/simark/subscriptions",
    "organizations_url": "https://api.github.com/users/simark/orgs",
    "repos_url": "https://api.github.com/users/simark/repos",
    "events_url": "https://api.github.com/users/simark/events{/privacy}",
    "received_events_url": "https://api.github.com/users/simark/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "4a8f181d196f85ca153fe51ca6bb40942e0e1ed7",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/4a8f181d196f85ca153fe51ca6bb40942e0e1ed7",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/4a8f181d196f85ca153fe51ca6bb40942e0e1ed7"
    }
  ],
  "stats": {
    "total": 70,
    "additions": 35,
    "deletions": 35
  },
  "files": [
    {
      "sha": "a68c1ab248a7d3bbe4917a2d372bcb44445d557c",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/10242f367fe102a4d55574c930ebfb389dbd233d/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/10242f367fe102a4d55574c930ebfb389dbd233d/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=10242f367fe102a4d55574c930ebfb389dbd233d",
      "patch": "@@ -1,3 +1,8 @@\n+2020-09-14  Simon Marchi  <simon.marchi@efficios.com>\n+\n+\t* gdbtypes.h (TYPE_INSTANCE_FLAGS): Remove, replace all uses\n+\twith `type::instance_flags`.\n+\n 2020-09-14  Michael Mullin  <masmullin@gmail.com>\n \n \t* xml-tdesc.c [!defined(HAVE_LIBEXPAT)] (tdesc_parse_xml):"
    },
    {
      "sha": "d89c420add6bd001dd485442827cba5c25c470f4",
      "filename": "gdb/c-typeprint.c",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/10242f367fe102a4d55574c930ebfb389dbd233d/gdb/c-typeprint.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/10242f367fe102a4d55574c930ebfb389dbd233d/gdb/c-typeprint.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/c-typeprint.c?ref=10242f367fe102a4d55574c930ebfb389dbd233d",
      "patch": "@@ -528,7 +528,7 @@ c_type_print_modifier (struct type *type, struct ui_file *stream,\n \n   address_space_id\n     = address_space_type_instance_flags_to_name (get_type_arch (type),\n-\t\t\t\t\t\t TYPE_INSTANCE_FLAGS (type));\n+\t\t\t\t\t\t type->instance_flags ());\n   if (address_space_id)\n     {\n       if (did_print_modifier || need_pre_space)"
    },
    {
      "sha": "585f6c89435baf316e5f731beda57e5acde93bcf",
      "filename": "gdb/compile/compile-c-types.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/10242f367fe102a4d55574c930ebfb389dbd233d/gdb/compile/compile-c-types.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/10242f367fe102a4d55574c930ebfb389dbd233d/gdb/compile/compile-c-types.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/compile/compile-c-types.c?ref=10242f367fe102a4d55574c930ebfb389dbd233d",
      "patch": "@@ -278,9 +278,9 @@ convert_type_basic (compile_c_instance *context, struct type *type)\n {\n   /* If we are converting a qualified type, first convert the\n      unqualified type and then apply the qualifiers.  */\n-  if ((TYPE_INSTANCE_FLAGS (type) & (TYPE_INSTANCE_FLAG_CONST\n-\t\t\t\t     | TYPE_INSTANCE_FLAG_VOLATILE\n-\t\t\t\t     | TYPE_INSTANCE_FLAG_RESTRICT)) != 0)\n+  if ((type->instance_flags () & (TYPE_INSTANCE_FLAG_CONST\n+\t\t\t\t  | TYPE_INSTANCE_FLAG_VOLATILE\n+\t\t\t\t  | TYPE_INSTANCE_FLAG_RESTRICT)) != 0)\n     return convert_qualified (context, type);\n \n   switch (type->code ())"
    },
    {
      "sha": "a0945683e474ff0cbefdf247a8512959754674ae",
      "filename": "gdb/compile/compile-cplus-types.c",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/10242f367fe102a4d55574c930ebfb389dbd233d/gdb/compile/compile-cplus-types.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/10242f367fe102a4d55574c930ebfb389dbd233d/gdb/compile/compile-cplus-types.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/compile/compile-cplus-types.c?ref=10242f367fe102a4d55574c930ebfb389dbd233d",
      "patch": "@@ -1135,9 +1135,9 @@ convert_type_cplus_basic (compile_cplus_instance *instance,\n {\n   /* If we are converting a qualified type, first convert the\n      unqualified type and then apply the qualifiers.  */\n-  if ((TYPE_INSTANCE_FLAGS (type) & (TYPE_INSTANCE_FLAG_CONST\n-\t\t\t\t     | TYPE_INSTANCE_FLAG_VOLATILE\n-\t\t\t\t     | TYPE_INSTANCE_FLAG_RESTRICT)) != 0)\n+  if ((type->instance_flags () & (TYPE_INSTANCE_FLAG_CONST\n+\t\t\t\t  | TYPE_INSTANCE_FLAG_VOLATILE\n+\t\t\t\t  | TYPE_INSTANCE_FLAG_RESTRICT)) != 0)\n     return compile_cplus_convert_qualified (instance, type);\n \n   switch (type->code ())"
    },
    {
      "sha": "f1f4ec52c7bbeb0928aaa36b314d99282c60dfd5",
      "filename": "gdb/gdbtypes.c",
      "status": "modified",
      "additions": 9,
      "deletions": 12,
      "changes": 21,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/10242f367fe102a4d55574c930ebfb389dbd233d/gdb/gdbtypes.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/10242f367fe102a4d55574c930ebfb389dbd233d/gdb/gdbtypes.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbtypes.c?ref=10242f367fe102a4d55574c930ebfb389dbd233d",
      "patch": "@@ -630,7 +630,7 @@ make_qualified_type (struct type *type, type_instance_flags new_flags,\n   ntype = type;\n   do\n     {\n-      if (TYPE_INSTANCE_FLAGS (ntype) == new_flags)\n+      if (ntype->instance_flags () == new_flags)\n \treturn ntype;\n       ntype = TYPE_CHAIN (ntype);\n     }\n@@ -753,7 +753,7 @@ struct type *\n make_restrict_type (struct type *type)\n {\n   return make_qualified_type (type,\n-\t\t\t      (TYPE_INSTANCE_FLAGS (type)\n+\t\t\t      (type->instance_flags ()\n \t\t\t       | TYPE_INSTANCE_FLAG_RESTRICT),\n \t\t\t      NULL);\n }\n@@ -764,7 +764,7 @@ struct type *\n make_unqualified_type (struct type *type)\n {\n   return make_qualified_type (type,\n-\t\t\t      (TYPE_INSTANCE_FLAGS (type)\n+\t\t\t      (type->instance_flags ()\n \t\t\t       & ~(TYPE_INSTANCE_FLAG_CONST\n \t\t\t\t   | TYPE_INSTANCE_FLAG_VOLATILE\n \t\t\t\t   | TYPE_INSTANCE_FLAG_RESTRICT)),\n@@ -777,7 +777,7 @@ struct type *\n make_atomic_type (struct type *type)\n {\n   return make_qualified_type (type,\n-\t\t\t      (TYPE_INSTANCE_FLAGS (type)\n+\t\t\t      (type->instance_flags ()\n \t\t\t       | TYPE_INSTANCE_FLAG_ATOMIC),\n \t\t\t      NULL);\n }\n@@ -825,7 +825,7 @@ replace_type (struct type *ntype, struct type *type)\n \n   /* Assert that the two types have equivalent instance qualifiers.\n      This should be true for at least all of our debug readers.  */\n-  gdb_assert (TYPE_INSTANCE_FLAGS (ntype) == TYPE_INSTANCE_FLAGS (type));\n+  gdb_assert (ntype->instance_flags () == type->instance_flags ());\n }\n \n /* Implement direct support for MEMBER_TYPE in GNU C++.\n@@ -2834,9 +2834,7 @@ check_typedef (struct type *type)\n \t     move over any other types NEWTYPE refers to, which could\n \t     be an unbounded amount of stuff.  */\n \t  if (TYPE_OBJFILE (newtype) == TYPE_OBJFILE (type))\n-\t    type = make_qualified_type (newtype,\n-\t\t\t\t\tTYPE_INSTANCE_FLAGS (type),\n-\t\t\t\t\ttype);\n+\t    type = make_qualified_type (newtype, type->instance_flags (), type);\n \t  else\n \t    type = newtype;\n \t}\n@@ -2862,9 +2860,8 @@ check_typedef (struct type *type)\n              with the complete type only if they are in the same\n              objfile.  */\n \t  if (TYPE_OBJFILE (SYMBOL_TYPE (sym)) == TYPE_OBJFILE (type))\n-            type = make_qualified_type (SYMBOL_TYPE (sym),\n-\t\t\t\t\tTYPE_INSTANCE_FLAGS (type),\n-\t\t\t\t\ttype);\n+\t    type = make_qualified_type (SYMBOL_TYPE (sym),\n+\t\t\t\t\ttype->instance_flags (), type);\n \t  else\n \t    type = SYMBOL_TYPE (sym);\n         }\n@@ -4001,7 +3998,7 @@ check_types_equal (struct type *type1, struct type *type2,\n       || type1->has_varargs () != type2->has_varargs ()\n       || type1->is_vector () != type2->is_vector ()\n       || TYPE_NOTTEXT (type1) != TYPE_NOTTEXT (type2)\n-      || TYPE_INSTANCE_FLAGS (type1) != TYPE_INSTANCE_FLAGS (type2)\n+      || type1->instance_flags () != type2->instance_flags ()\n       || type1->num_fields () != type2->num_fields ())\n     return false;\n "
    },
    {
      "sha": "d28622d46cead7b03bf165dbdb02589591f9c08f",
      "filename": "gdb/gdbtypes.h",
      "status": "modified",
      "additions": 10,
      "deletions": 11,
      "changes": 21,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/10242f367fe102a4d55574c930ebfb389dbd233d/gdb/gdbtypes.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/10242f367fe102a4d55574c930ebfb389dbd233d/gdb/gdbtypes.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/gdbtypes.h?ref=10242f367fe102a4d55574c930ebfb389dbd233d",
      "patch": "@@ -213,7 +213,7 @@ DEF_ENUM_FLAGS_TYPE (enum type_instance_flag_value, type_instance_flags);\n /* * Not textual.  By default, GDB treats all single byte integers as\n    characters (or elements of strings) unless this flag is set.  */\n \n-#define TYPE_NOTTEXT(t)\t(TYPE_INSTANCE_FLAGS (t) & TYPE_INSTANCE_FLAG_NOTTEXT)\n+#define TYPE_NOTTEXT(t)\t(((t)->instance_flags ()) & TYPE_INSTANCE_FLAG_NOTTEXT)\n \n /* * Type owner.  If TYPE_OBJFILE_OWNED is true, the type is owned by\n    the objfile retrieved as TYPE_OBJFILE.  Otherwise, the type is\n@@ -240,25 +240,25 @@ DEF_ENUM_FLAGS_TYPE (enum type_instance_flag_value, type_instance_flags);\n /* * Constant type.  If this is set, the corresponding type has a\n    const modifier.  */\n \n-#define TYPE_CONST(t) ((TYPE_INSTANCE_FLAGS (t) & TYPE_INSTANCE_FLAG_CONST) != 0)\n+#define TYPE_CONST(t) ((((t)->instance_flags ()) & TYPE_INSTANCE_FLAG_CONST) != 0)\n \n /* * Volatile type.  If this is set, the corresponding type has a\n    volatile modifier.  */\n \n #define TYPE_VOLATILE(t) \\\n-  ((TYPE_INSTANCE_FLAGS (t) & TYPE_INSTANCE_FLAG_VOLATILE) != 0)\n+  ((((t)->instance_flags ()) & TYPE_INSTANCE_FLAG_VOLATILE) != 0)\n \n /* * Restrict type.  If this is set, the corresponding type has a\n    restrict modifier.  */\n \n #define TYPE_RESTRICT(t) \\\n-  ((TYPE_INSTANCE_FLAGS (t) & TYPE_INSTANCE_FLAG_RESTRICT) != 0)\n+  ((((t)->instance_flags ()) & TYPE_INSTANCE_FLAG_RESTRICT) != 0)\n \n /* * Atomic type.  If this is set, the corresponding type has an\n    _Atomic modifier.  */\n \n #define TYPE_ATOMIC(t) \\\n-  ((TYPE_INSTANCE_FLAGS (t) & TYPE_INSTANCE_FLAG_ATOMIC) != 0)\n+  ((((t)->instance_flags ()) & TYPE_INSTANCE_FLAG_ATOMIC) != 0)\n \n /* * True if this type represents either an lvalue or lvalue reference type.  */\n \n@@ -297,10 +297,10 @@ DEF_ENUM_FLAGS_TYPE (enum type_instance_flag_value, type_instance_flags);\n    is instruction space, and for data objects is data memory.  */\n \n #define TYPE_CODE_SPACE(t) \\\n-  ((TYPE_INSTANCE_FLAGS (t) & TYPE_INSTANCE_FLAG_CODE_SPACE) != 0)\n+  ((((t)->instance_flags ()) & TYPE_INSTANCE_FLAG_CODE_SPACE) != 0)\n \n #define TYPE_DATA_SPACE(t) \\\n-  ((TYPE_INSTANCE_FLAGS (t) & TYPE_INSTANCE_FLAG_DATA_SPACE) != 0)\n+  ((((t)->instance_flags ()) & TYPE_INSTANCE_FLAG_DATA_SPACE) != 0)\n \n /* * Address class flags.  Some environments provide for pointers\n    whose size is different from that of a normal pointer or address\n@@ -309,13 +309,13 @@ DEF_ENUM_FLAGS_TYPE (enum type_instance_flag_value, type_instance_flags);\n    target specific ways to represent these different types of address\n    classes.  */\n \n-#define TYPE_ADDRESS_CLASS_1(t) (TYPE_INSTANCE_FLAGS(t) \\\n+#define TYPE_ADDRESS_CLASS_1(t) (((t)->instance_flags ()) \\\n                                  & TYPE_INSTANCE_FLAG_ADDRESS_CLASS_1)\n-#define TYPE_ADDRESS_CLASS_2(t) (TYPE_INSTANCE_FLAGS(t) \\\n+#define TYPE_ADDRESS_CLASS_2(t) (((t)->instance_flags ()) \\\n \t\t\t\t & TYPE_INSTANCE_FLAG_ADDRESS_CLASS_2)\n #define TYPE_INSTANCE_FLAG_ADDRESS_CLASS_ALL \\\n   (TYPE_INSTANCE_FLAG_ADDRESS_CLASS_1 | TYPE_INSTANCE_FLAG_ADDRESS_CLASS_2)\n-#define TYPE_ADDRESS_CLASS_ALL(t) (TYPE_INSTANCE_FLAGS(t) \\\n+#define TYPE_ADDRESS_CLASS_ALL(t) (((t)->instance_flags ()) \\\n \t\t\t\t   & TYPE_INSTANCE_FLAG_ADDRESS_CLASS_ALL)\n \n /* * Information about a single discriminant.  */\n@@ -1684,7 +1684,6 @@ extern void allocate_gnat_aux_type (struct type *);\n      TYPE_ZALLOC (type,\t\t\t\t\t\t\t       \\\n \t\t  sizeof (*TYPE_MAIN_TYPE (type)->type_specific.func_stuff)))\n \n-#define TYPE_INSTANCE_FLAGS(thistype) ((thistype)->instance_flags ())\n #define TYPE_MAIN_TYPE(thistype) (thistype)->main_type\n #define TYPE_TARGET_TYPE(thistype) TYPE_MAIN_TYPE(thistype)->target_type\n #define TYPE_POINTER_TYPE(thistype) (thistype)->pointer_type"
    },
    {
      "sha": "4b1e3b2857aa8b02d3715c35b589bcc9d5865aaf",
      "filename": "gdb/stabsread.c",
      "status": "modified",
      "additions": 4,
      "deletions": 5,
      "changes": 9,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/10242f367fe102a4d55574c930ebfb389dbd233d/gdb/stabsread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/10242f367fe102a4d55574c930ebfb389dbd233d/gdb/stabsread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/stabsread.c?ref=10242f367fe102a4d55574c930ebfb389dbd233d",
      "patch": "@@ -4473,12 +4473,11 @@ cleanup_undefined_types_1 (void)\n \n \t\t\tif (SYMBOL_CLASS (sym) == LOC_TYPEDEF\n \t\t\t    && SYMBOL_DOMAIN (sym) == STRUCT_DOMAIN\n-\t\t\t    && (SYMBOL_TYPE (sym)->code () ==\n-\t\t\t\t(*type)->code ())\n-\t\t\t    && (TYPE_INSTANCE_FLAGS (*type) ==\n-\t\t\t\tTYPE_INSTANCE_FLAGS (SYMBOL_TYPE (sym)))\n+\t\t\t    && (SYMBOL_TYPE (sym)->code () == (*type)->code ())\n+\t\t\t    && ((*type)->instance_flags ()\n+\t\t\t\t== SYMBOL_TYPE (sym)->instance_flags ())\n \t\t\t    && strcmp (sym->linkage_name (), type_name) == 0)\n-                          replace_type (*type, SYMBOL_TYPE (sym));\n+\t\t\t  replace_type (*type, SYMBOL_TYPE (sym));\n \t\t      }\n \t\t  }\n \t      }"
    }
  ]
}