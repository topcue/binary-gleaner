{
  "sha": "5947d337d6061b884073a3a684aff2825c4a05f9",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NTk0N2QzMzdkNjA2MWI4ODQwNzNhM2E2ODRhZmYyODI1YzRhMDVmOQ==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-03-08T14:27:57Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2021-03-08T14:28:27Z"
    },
    "message": "Introduce rust_aggregate_operation\n\nThis adds class rust_aggregate_operation, which implements\nOP_AGGREGATE for Rust.\n\ngdb/ChangeLog\n2021-03-08  Tom Tromey  <tom@tromey.com>\n\n\t* rust-lang.c (rust_aggregate_operation::evaluate): New method.\n\t* rust-exp.h (class rust_aggregate_operation): New.",
    "tree": {
      "sha": "672e421f087f5c858c7b9bfc0cabca22066f4c51",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/672e421f087f5c858c7b9bfc0cabca22066f4c51"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/5947d337d6061b884073a3a684aff2825c4a05f9",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5947d337d6061b884073a3a684aff2825c4a05f9",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/5947d337d6061b884073a3a684aff2825c4a05f9",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/5947d337d6061b884073a3a684aff2825c4a05f9/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "e4407a202d31a6873ea240b13125bf1ae8d20401",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e4407a202d31a6873ea240b13125bf1ae8d20401",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/e4407a202d31a6873ea240b13125bf1ae8d20401"
    }
  ],
  "stats": {
    "total": 81,
    "additions": 81,
    "deletions": 0
  },
  "files": [
    {
      "sha": "ccd8d4601aabfed7182e8ba5e2aa6f1aa1d4e1b6",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5947d337d6061b884073a3a684aff2825c4a05f9/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5947d337d6061b884073a3a684aff2825c4a05f9/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=5947d337d6061b884073a3a684aff2825c4a05f9",
      "patch": "@@ -1,3 +1,8 @@\n+2021-03-08  Tom Tromey  <tom@tromey.com>\n+\n+\t* rust-lang.c (rust_aggregate_operation::evaluate): New method.\n+\t* rust-exp.h (class rust_aggregate_operation): New.\n+\n 2021-03-08  Tom Tromey  <tom@tromey.com>\n \n \t* rust-lang.c (eval_op_rust_struct_anon, eval_op_rust_structop):"
    },
    {
      "sha": "6e529f8e600149208583c490ebf65815e1aa2565",
      "filename": "gdb/rust-exp.h",
      "status": "modified",
      "additions": 18,
      "deletions": 0,
      "changes": 18,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5947d337d6061b884073a3a684aff2825c4a05f9/gdb/rust-exp.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5947d337d6061b884073a3a684aff2825c4a05f9/gdb/rust-exp.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/rust-exp.h?ref=5947d337d6061b884073a3a684aff2825c4a05f9",
      "patch": "@@ -207,6 +207,24 @@ class rust_structop\n   { return STRUCTOP_STRUCT; }\n };\n \n+/* Rust aggregate initialization.  */\n+class rust_aggregate_operation\n+  : public tuple_holding_operation<struct type *, operation_up,\n+\t\t\t\t   std::vector<std::pair<std::string,\n+\t\t\t\t\t\t\t operation_up>>>\n+{\n+public:\n+\n+  using tuple_holding_operation::tuple_holding_operation;\n+\n+  value *evaluate (struct type *expect_type,\n+\t\t   struct expression *exp,\n+\t\t   enum noside noside) override;\n+\n+  enum exp_opcode opcode () const override\n+  { return OP_AGGREGATE; }\n+};\n+\n } /* namespace expr */\n \n #endif /* RUST_EXP_H */"
    },
    {
      "sha": "3604535209deac43945a3959a7e9f5dcec9ab0d4",
      "filename": "gdb/rust-lang.c",
      "status": "modified",
      "additions": 58,
      "deletions": 0,
      "changes": 58,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/5947d337d6061b884073a3a684aff2825c4a05f9/gdb/rust-lang.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/5947d337d6061b884073a3a684aff2825c4a05f9/gdb/rust-lang.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/rust-lang.c?ref=5947d337d6061b884073a3a684aff2825c4a05f9",
      "patch": "@@ -1700,6 +1700,64 @@ rust_evaluate_subexp (struct type *expect_type, struct expression *exp,\n   return result;\n }\n \n+namespace expr\n+{\n+\n+value *\n+rust_aggregate_operation::evaluate (struct type *expect_type,\n+\t\t\t\t    struct expression *exp,\n+\t\t\t\t    enum noside noside)\n+{\n+  struct type *type = std::get<0> (m_storage);\n+  CORE_ADDR addr = 0;\n+  struct value *addrval = NULL;\n+  value *result;\n+\n+  if (noside == EVAL_NORMAL)\n+    {\n+      addrval = value_allocate_space_in_inferior (TYPE_LENGTH (type));\n+      addr = value_as_long (addrval);\n+      result = value_at_lazy (type, addr);\n+    }\n+\n+  if (std::get<1> (m_storage) != nullptr)\n+    {\n+      struct value *init = std::get<1> (m_storage)->evaluate (nullptr, exp,\n+\t\t\t\t\t\t\t      noside);\n+\n+      if (noside == EVAL_NORMAL)\n+\t{\n+\t  /* This isn't quite right but will do for the time\n+\t     being, seeing that we can't implement the Copy\n+\t     trait anyway.  */\n+\t  value_assign (result, init);\n+\t}\n+    }\n+\n+  for (const auto &item : std::get<2> (m_storage))\n+    {\n+      value *val = item.second->evaluate (nullptr, exp, noside);\n+      if (noside == EVAL_NORMAL)\n+\t{\n+\t  const char *fieldname = item.first.c_str ();\n+\t  value *field = value_struct_elt (&result, nullptr, fieldname,\n+\t\t\t\t\t   nullptr, \"structure\");\n+\t  value_assign (field, val);\n+\t}\n+    }\n+\n+  if (noside == EVAL_SKIP)\n+    result = value_from_longest (builtin_type (exp->gdbarch)->builtin_int, 1);\n+  else if (noside == EVAL_AVOID_SIDE_EFFECTS)\n+    result = allocate_value (type);\n+  else\n+    result = value_at_lazy (type, addr);\n+\n+  return result;\n+}\n+\n+}\n+\n /* operator_length implementation for Rust.  */\n \n static void"
    }
  ]
}