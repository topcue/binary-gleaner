{
  "sha": "c22fef7e4cf9d3cb6d7062d248b0cc148dc76137",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YzIyZmVmN2U0Y2Y5ZDNjYjZkNzA2MmQyNDhiMGNjMTQ4ZGM3NjEzNw==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-02-22T18:48:26Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tom@tromey.com",
      "date": "2020-02-22T18:48:32Z"
    },
    "message": "Allow TUI sub-layouts in \"new-layout\" command\n\nThe new TUI layout engine has support for \"sub-layouts\" -- this is a\nlayout that includes another layout as a child.  A sub-layout is\ntreated as a unit when allocating space.\n\nThere's not a very strong reason to use sub-layouts currently.  This\npatch exists to introduce the idea, and to simplify the subsequent\npatch that adds horizontal layouts -- where sub-layouts are needed.\n\nBecause this patch won't go in on its own, I chose to defer\ndocumenting this change until the subsequent horizontal layout patch.\n\ngdb/ChangeLog\n2020-02-22  Tom Tromey  <tom@tromey.com>\n\n\t* tui/tui-layout.h (class tui_layout_split) <add_split>: Change\n\tparameter and return types.\n\t(class tui_layout_base) <specification>: Add \"depth\".\n\t(class tui_layout_window) <specification>: Add \"depth\".\n\t(class tui_layout_split) <specification>: Add \"depth\".\n\t* tui/tui-layout.c (tui_layout_split::add_split): Change parameter\n\tand return types.\n\t(tui_new_layout_command): Parse sub-layouts.\n\t(_initialize_tui_layout): Update help string.\n\t(tui_layout_window::specification): Add \"depth\".\n\t(add_layout_command): Update.\n\ngdb/testsuite/ChangeLog\n2020-02-22  Tom Tromey  <tom@tromey.com>\n\n\t* gdb.tui/new-layout.exp: Add sub-layout tests.\n\nChange-Id: Iddf52d067a552c168b8a67f29caf7ac86404b10c",
    "tree": {
      "sha": "2295fbbb70ac4b3d646269a08bb6437b46420555",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/2295fbbb70ac4b3d646269a08bb6437b46420555"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/c22fef7e4cf9d3cb6d7062d248b0cc148dc76137",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c22fef7e4cf9d3cb6d7062d248b0cc148dc76137",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/c22fef7e4cf9d3cb6d7062d248b0cc148dc76137",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/c22fef7e4cf9d3cb6d7062d248b0cc148dc76137/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "ee325b61cd4389506d2dd63294c1ce1c64cb9d9f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/ee325b61cd4389506d2dd63294c1ce1c64cb9d9f",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/ee325b61cd4389506d2dd63294c1ce1c64cb9d9f"
    }
  ],
  "stats": {
    "total": 124,
    "additions": 100,
    "deletions": 24
  },
  "files": [
    {
      "sha": "dc5ed675b873231bfa6d5e22d9d4f1cc9a169c92",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 14,
      "deletions": 0,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c22fef7e4cf9d3cb6d7062d248b0cc148dc76137/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c22fef7e4cf9d3cb6d7062d248b0cc148dc76137/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=c22fef7e4cf9d3cb6d7062d248b0cc148dc76137",
      "patch": "@@ -1,3 +1,17 @@\n+2020-02-22  Tom Tromey  <tom@tromey.com>\n+\n+\t* tui/tui-layout.h (class tui_layout_split) <add_split>: Change\n+\tparameter and return types.\n+\t(class tui_layout_base) <specification>: Add \"depth\".\n+\t(class tui_layout_window) <specification>: Add \"depth\".\n+\t(class tui_layout_split) <specification>: Add \"depth\".\n+\t* tui/tui-layout.c (tui_layout_split::add_split): Change parameter\n+\tand return types.\n+\t(tui_new_layout_command): Parse sub-layouts.\n+\t(_initialize_tui_layout): Update help string.\n+\t(tui_layout_window::specification): Add \"depth\".\n+\t(add_layout_command): Update.\n+\n 2020-02-22  Tom Tromey  <tom@tromey.com>\n \n \t* NEWS: Add \"tui new-layout\" item."
    },
    {
      "sha": "9e825fbd53c2592aaa9f9962f25752b6a28f0edb",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 4,
      "deletions": 0,
      "changes": 4,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c22fef7e4cf9d3cb6d7062d248b0cc148dc76137/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c22fef7e4cf9d3cb6d7062d248b0cc148dc76137/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=c22fef7e4cf9d3cb6d7062d248b0cc148dc76137",
      "patch": "@@ -1,3 +1,7 @@\n+2020-02-22  Tom Tromey  <tom@tromey.com>\n+\n+\t* gdb.tui/new-layout.exp: Add sub-layout tests.\n+\n 2020-02-22  Tom Tromey  <tom@tromey.com>\n \n \t* gdb.tui/new-layout.exp: New file."
    },
    {
      "sha": "83823229bd43a33552a970840265f5b2f931febf",
      "filename": "gdb/testsuite/gdb.tui/new-layout.exp",
      "status": "modified",
      "additions": 11,
      "deletions": 0,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c22fef7e4cf9d3cb6d7062d248b0cc148dc76137/gdb/testsuite/gdb.tui/new-layout.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c22fef7e4cf9d3cb6d7062d248b0cc148dc76137/gdb/testsuite/gdb.tui/new-layout.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.tui/new-layout.exp?ref=c22fef7e4cf9d3cb6d7062d248b0cc148dc76137",
      "patch": "@@ -35,12 +35,23 @@ gdb_test \"tui new-layout example src 1 src 1\" \\\n     \"Window \\\"src\\\" seen twice in layout\"\n gdb_test \"tui new-layout example src 1\" \\\n     \"New layout does not contain the \\\"cmd\\\" window\"\n+gdb_test \"tui new-layout example src 1}\" \\\n+    \"Extra '}' in layout specification\"\n+gdb_test \"tui new-layout example {src 1} 1}\" \\\n+    \"Extra '}' in layout specification\"\n+gdb_test \"tui new-layout example {src 1\" \\\n+    \"Missing '}' in layout specification\"\n \n gdb_test_no_output \"tui new-layout example asm 1 status 0 cmd 1\"\n \n gdb_test \"help layout example\" \\\n     \"Apply the \\\"example\\\" layout.*tui new-layout example asm 1 status 0 cmd 1\"\n \n+gdb_test_no_output \"tui new-layout example2 {asm 1 status 0} 1 cmd 1\"\n+\n+gdb_test \"help layout example2\" \\\n+    \"Apply the \\\"example2\\\" layout.*tui new-layout example2 {asm 1 status 0} 1 cmd 1\"\n+\n if {![Term::enter_tui]} {\n     unsupported \"TUI not supported\"\n }"
    },
    {
      "sha": "6077a9cc68c02e11349180e3ed2c55dae63d1de8",
      "filename": "gdb/tui/tui-layout.c",
      "status": "modified",
      "additions": 65,
      "deletions": 19,
      "changes": 84,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c22fef7e4cf9d3cb6d7062d248b0cc148dc76137/gdb/tui/tui-layout.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c22fef7e4cf9d3cb6d7062d248b0cc148dc76137/gdb/tui/tui-layout.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-layout.c?ref=c22fef7e4cf9d3cb6d7062d248b0cc148dc76137",
      "patch": "@@ -400,20 +400,19 @@ tui_layout_window::replace_window (const char *name, const char *new_window)\n /* See tui-layout.h.  */\n \n void\n-tui_layout_window::specification (ui_file *output)\n+tui_layout_window::specification (ui_file *output, int depth)\n {\n   fputs_unfiltered (get_name (), output);\n }\n \n /* See tui-layout.h.  */\n \n-tui_layout_split *\n-tui_layout_split::add_split (int weight)\n+void\n+tui_layout_split::add_split (std::unique_ptr<tui_layout_split> &&layout,\n+\t\t\t     int weight)\n {\n-  tui_layout_split *result = new tui_layout_split ();\n-  split s = {weight, std::unique_ptr<tui_layout_base> (result)};\n+  split s = {weight, std::move (layout)};\n   m_splits.push_back (std::move (s));\n-  return result;\n }\n \n /* See tui-layout.h.  */\n@@ -711,17 +710,23 @@ tui_layout_split::replace_window (const char *name, const char *new_window)\n /* See tui-layout.h.  */\n \n void\n-tui_layout_split::specification (ui_file *output)\n+tui_layout_split::specification (ui_file *output, int depth)\n {\n+  if (depth > 0)\n+    fputs_unfiltered (\"{\", output);\n+\n   bool first = true;\n   for (auto &item : m_splits)\n     {\n       if (!first)\n \tfputs_unfiltered (\" \", output);\n       first = false;\n-      item.layout->specification (output);\n+      item.layout->specification (output, depth + 1);\n       fprintf_unfiltered (output, \" %d\", item.weight);\n     }\n+\n+  if (depth > 0)\n+    fputs_unfiltered (\"}\", output);\n }\n \n /* Destroy the layout associated with SELF.  */\n@@ -746,7 +751,7 @@ add_layout_command (const char *name, tui_layout_split *layout)\n   struct cmd_list_element *cmd;\n \n   string_file spec;\n-  layout->specification (&spec);\n+  layout->specification (&spec, 0);\n \n   gdb::unique_xmalloc_ptr<char> doc\n     (xstrprintf (_(\"Apply the \\\"%s\\\" layout.\\n\\\n@@ -833,30 +838,68 @@ tui_new_layout_command (const char *spec, int from_tty)\n   if (new_name[0] == '-')\n     error (_(\"Layout name cannot start with '-'\"));\n \n-  std::unique_ptr<tui_layout_split> new_layout (new tui_layout_split);\n+  std::vector<std::unique_ptr<tui_layout_split>> splits;\n+  splits.emplace_back (new tui_layout_split);\n   std::unordered_set<std::string> seen_windows;\n   while (true)\n     {\n-      std::string name = extract_arg (&spec);\n-      if (name.empty ())\n+      spec = skip_spaces (spec);\n+      if (spec[0] == '\\0')\n \tbreak;\n-      if (!validate_window_name (name))\n-\terror (_(\"Unknown window \\\"%s\\\"\"), name.c_str ());\n-      if (seen_windows.find (name) != seen_windows.end ())\n-\terror (_(\"Window \\\"%s\\\" seen twice in layout\"), name.c_str ());\n-      ULONGEST weight = get_ulongest (&spec);\n+\n+      if (spec[0] == '{')\n+\t{\n+\t  splits.emplace_back (new tui_layout_split);\n+\t  ++spec;\n+\t  continue;\n+\t}\n+\n+      bool is_close = false;\n+      std::string name;\n+      if (spec[0] == '}')\n+\t{\n+\t  is_close = true;\n+\t  ++spec;\n+\t  if (splits.size () == 1)\n+\t    error (_(\"Extra '}' in layout specification\"));\n+\t}\n+      else\n+\t{\n+\t  name = extract_arg (&spec);\n+\t  if (name.empty ())\n+\t    break;\n+\t  if (!validate_window_name (name))\n+\t    error (_(\"Unknown window \\\"%s\\\"\"), name.c_str ());\n+\t  if (seen_windows.find (name) != seen_windows.end ())\n+\t    error (_(\"Window \\\"%s\\\" seen twice in layout\"), name.c_str ());\n+\t}\n+\n+      ULONGEST weight = get_ulongest (&spec, '}');\n       if ((int) weight != weight)\n \terror (_(\"Weight out of range: %s\"), pulongest (weight));\n-      new_layout->add_window (name.c_str (), weight);\n-      seen_windows.insert (name);\n+      if (is_close)\n+\t{\n+\t  std::unique_ptr<tui_layout_split> last_split\n+\t    = std::move (splits.back ());\n+\t  splits.pop_back ();\n+\t  splits.back ()->add_split (std::move (last_split), weight);\n+\t}\n+      else\n+\t{\n+\t  splits.back ()->add_window (name.c_str (), weight);\n+\t  seen_windows.insert (name);\n+\t}\n     }\n+  if (splits.size () > 1)\n+    error (_(\"Missing '}' in layout specification\"));\n   if (seen_windows.empty ())\n     error (_(\"New layout does not contain any windows\"));\n   if (seen_windows.find (\"cmd\") == seen_windows.end ())\n     error (_(\"New layout does not contain the \\\"cmd\\\" window\"));\n \n   gdb::unique_xmalloc_ptr<char> cmd_name\n     = make_unique_xstrdup (new_name.c_str ());\n+  std::unique_ptr<tui_layout_split> new_layout = std::move (splits.back ());\n   struct cmd_list_element *cmd\n     = add_layout_command (cmd_name.get (), new_layout.get ());\n   cmd->name_allocated = 1;\n@@ -900,6 +943,9 @@ Usage: tui new-layout NAME WINDOW WEIGHT [WINDOW WEIGHT]...\\n\\\n Create a new TUI layout.  The new layout will be named NAME,\\n\\\n and can be accessed using \\\"layout NAME\\\".\\n\\\n The windows will be displayed in the specified order.\\n\\\n+A WINDOW can also be of the form:\\n\\\n+  { NAME WEIGHT [NAME WEIGHT]... }\\n\\\n+This form indicates a sub-frame.\\n\\\n Each WEIGHT is an integer, which holds the relative size\\n\\\n to be allocated to the window.\"),\n \t   tui_get_cmd_list ());"
    },
    {
      "sha": "4351e260720a7863814909e59d9f2e27f1cfd8b7",
      "filename": "gdb/tui/tui-layout.h",
      "status": "modified",
      "additions": 6,
      "deletions": 5,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/c22fef7e4cf9d3cb6d7062d248b0cc148dc76137/gdb/tui/tui-layout.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/c22fef7e4cf9d3cb6d7062d248b0cc148dc76137/gdb/tui/tui-layout.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/tui/tui-layout.h?ref=c22fef7e4cf9d3cb6d7062d248b0cc148dc76137",
      "patch": "@@ -74,8 +74,9 @@ class tui_layout_base\n      NEW_WINDOW.  */\n   virtual void replace_window (const char *name, const char *new_window) = 0;\n \n-  /* Append the specification to this window to OUTPUT.  */\n-  virtual void specification (ui_file *output) = 0;\n+  /* Append the specification to this window to OUTPUT.  DEPTH is the\n+     depth of this layout in the hierarchy (zero-based).  */\n+  virtual void specification (ui_file *output, int depth) = 0;\n \n   /* The most recent space allocation.  */\n   int x = 0;\n@@ -125,7 +126,7 @@ class tui_layout_window : public tui_layout_base\n \n   void replace_window (const char *name, const char *new_window) override;\n \n-  void specification (ui_file *output) override;\n+  void specification (ui_file *output, int depth) override;\n \n protected:\n \n@@ -153,7 +154,7 @@ class tui_layout_split : public tui_layout_base\n   /* Add a new split layout to this layout.  WEIGHT is the desired\n      size, which is relative to the other weights given in this\n      layout.  */\n-  tui_layout_split *add_split (int weight);\n+  void add_split (std::unique_ptr<tui_layout_split> &&layout, int weight);\n \n   /* Add a new window to this layout.  NAME is the name of the window\n      to add.  WEIGHT is the desired size, which is relative to the\n@@ -174,7 +175,7 @@ class tui_layout_split : public tui_layout_base\n \n   void replace_window (const char *name, const char *new_window) override;\n \n-  void specification (ui_file *output) override;\n+  void specification (ui_file *output, int depth) override;\n \n protected:\n "
    }
  ]
}