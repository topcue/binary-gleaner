{
  "sha": "baae986a40eb2ed6d612436586bfa7dd1d88702d",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YmFhZTk4NmE0MGViMmVkNmQ2MTI0MzY1ODZiZmE3ZGQxZDg4NzAyZA==",
  "commit": {
    "author": {
      "name": "Nick Clifton",
      "email": "nickc@redhat.com",
      "date": "2019-01-17T15:29:43Z"
    },
    "committer": {
      "name": "Nick Clifton",
      "email": "nickc@redhat.com",
      "date": "2019-01-17T15:29:43Z"
    },
    "message": "Update objdump's --disassemble=<symbol> feature so that if <symbol> is a function, the entire function will be disassembled, regardless of the presence of interveening symbols.\n\n\t* objdump.c (disassemble_section): When disassembling from a\n\tsymbol only stop at the next symbol if the original symbol was not\n\ta function symbol.  Otherwise continue disassembling until a new\n\tfunction is reached.\n\t* testsuite/binutils-all/objdump.exp: Add tests of extended\n\tfunctionality.\n\t* testsuite/binutils-all/disasm.s: New test source file.",
    "tree": {
      "sha": "dbd18a9b28eb55af549e1e9bd5d94132c7fc7472",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/dbd18a9b28eb55af549e1e9bd5d94132c7fc7472"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/baae986a40eb2ed6d612436586bfa7dd1d88702d",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/baae986a40eb2ed6d612436586bfa7dd1d88702d",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/baae986a40eb2ed6d612436586bfa7dd1d88702d",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/baae986a40eb2ed6d612436586bfa7dd1d88702d/comments",
  "author": {
    "login": "nickclifton",
    "id": 31441682,
    "node_id": "MDQ6VXNlcjMxNDQxNjgy",
    "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickclifton",
    "html_url": "https://github.com/nickclifton",
    "followers_url": "https://api.github.com/users/nickclifton/followers",
    "following_url": "https://api.github.com/users/nickclifton/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions",
    "organizations_url": "https://api.github.com/users/nickclifton/orgs",
    "repos_url": "https://api.github.com/users/nickclifton/repos",
    "events_url": "https://api.github.com/users/nickclifton/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickclifton/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "nickclifton",
    "id": 31441682,
    "node_id": "MDQ6VXNlcjMxNDQxNjgy",
    "avatar_url": "https://avatars.githubusercontent.com/u/31441682?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/nickclifton",
    "html_url": "https://github.com/nickclifton",
    "followers_url": "https://api.github.com/users/nickclifton/followers",
    "following_url": "https://api.github.com/users/nickclifton/following{/other_user}",
    "gists_url": "https://api.github.com/users/nickclifton/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/nickclifton/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/nickclifton/subscriptions",
    "organizations_url": "https://api.github.com/users/nickclifton/orgs",
    "repos_url": "https://api.github.com/users/nickclifton/repos",
    "events_url": "https://api.github.com/users/nickclifton/events{/privacy}",
    "received_events_url": "https://api.github.com/users/nickclifton/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "e89c69419641d638a96cb7ca3c9fa4b3feac5ce0",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/e89c69419641d638a96cb7ca3c9fa4b3feac5ce0",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/e89c69419641d638a96cb7ca3c9fa4b3feac5ce0"
    }
  ],
  "stats": {
    "total": 236,
    "additions": 212,
    "deletions": 24
  },
  "files": [
    {
      "sha": "2e17bab1e9428f7855ea5d8b9113fb98ab55f708",
      "filename": "binutils/ChangeLog",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/baae986a40eb2ed6d612436586bfa7dd1d88702d/binutils/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/baae986a40eb2ed6d612436586bfa7dd1d88702d/binutils/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/ChangeLog?ref=baae986a40eb2ed6d612436586bfa7dd1d88702d",
      "patch": "@@ -1,3 +1,13 @@\n+2019-01-17  Nick Clifton  <nickc@redhat.com>\n+\n+\t* objdump.c (disassemble_section): When disassembling from a\n+\tsymbol only stop at the next symbol if the original symbol was not\n+\ta function symbol.  Otherwise continue disassembling until a new\n+\tfunction is reached.\n+\t* testsuite/binutils-all/objdump.exp: Add tests of extended\n+\tfunctionality.\n+\t* testsuite/binutils-all/disasm.s: New test source file.\n+\n 2019-01-16  Kito Cheng  <kito@andestech.com>\n \t    Nelson Chu  <nelson@andestech.com>\n "
    },
    {
      "sha": "0b8cc8e18b9a2d492d1986123787956307a561ec",
      "filename": "binutils/NEWS",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/baae986a40eb2ed6d612436586bfa7dd1d88702d/binutils/NEWS",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/baae986a40eb2ed6d612436586bfa7dd1d88702d/binutils/NEWS",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/NEWS?ref=baae986a40eb2ed6d612436586bfa7dd1d88702d",
      "patch": "@@ -13,7 +13,7 @@\n \n * Objdump's --disassemble option can now take a parameter, specifying the\n   starting symbol for disassembly.  Disassembly will continue from this\n-  symbol up to the next symbol.\n+  symbol up to the next symbol or the end of the function.\n \n * The MIPS port now supports the Loongson 2K1000 processor which implements\n   the MIPS64r2 ISA, the Loongson-mmi ASE, Loongson-cam ASE, Loongson-ext ASE,"
    },
    {
      "sha": "49101888f5a12206b1479db6c758b0ef069656a0",
      "filename": "binutils/doc/binutils.texi",
      "status": "modified",
      "additions": 5,
      "deletions": 3,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/baae986a40eb2ed6d612436586bfa7dd1d88702d/binutils/doc/binutils.texi",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/baae986a40eb2ed6d612436586bfa7dd1d88702d/binutils/doc/binutils.texi",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/doc/binutils.texi?ref=baae986a40eb2ed6d612436586bfa7dd1d88702d",
      "patch": "@@ -2230,9 +2230,11 @@ with ctags tool.\n Display the assembler mnemonics for the machine instructions from the\n input file.  This option only disassembles those sections which are \n expected to contain instructions.  If the optional @var{symbol}\n-argument is given, then display the assembler mnemonics only from\n-@var{symbol} up to next symbol.  If there are no matches for\n-@var{symbol} then nothing will be displayed.\n+argument is given, then display the assembler mnemonics starting at\n+@var{symbol}.  If @var{symbol} is a function name then disassembly\n+will stop at the end of the function, otherwise it will stop when the\n+next symbol is encountered.  If there are no matches for @var{symbol}\n+then nothing will be displayed.\n \n @item -D\n @itemx --disassemble-all"
    },
    {
      "sha": "872539068cab8276db3c043287431cbe5a46f856",
      "filename": "binutils/objdump.c",
      "status": "modified",
      "additions": 82,
      "deletions": 17,
      "changes": 99,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/baae986a40eb2ed6d612436586bfa7dd1d88702d/binutils/objdump.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/baae986a40eb2ed6d612436586bfa7dd1d88702d/binutils/objdump.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/objdump.c?ref=baae986a40eb2ed6d612436586bfa7dd1d88702d",
      "patch": "@@ -2211,6 +2211,13 @@ disassemble_section (bfd *abfd, asection *section, void *inf)\n   long                         rel_count;\n   bfd_vma                      rel_offset;\n   unsigned long                addr_offset;\n+  bfd_boolean                  do_print;\n+  enum loop_control\n+  {\n+   stop_offset_reached,\n+   function_sym,\n+   next_sym\n+  } loop_until;\n \n   /* Sections that do not contain machine\n      code are not normally disassembled.  */\n@@ -2328,13 +2335,15 @@ disassemble_section (bfd *abfd, asection *section, void *inf)\n      the symbol we have just found.  Then print the symbol and find the\n      next symbol on.  Repeat until we have disassembled the entire section\n      or we have reached the end of the address range we are interested in.  */\n+  do_print = paux->symbol == NULL;\n+  loop_until = stop_offset_reached;\n+\n   while (addr_offset < stop_offset)\n     {\n       bfd_vma addr;\n       asymbol *nextsym;\n       bfd_vma nextstop_offset;\n       bfd_boolean insns;\n-      bfd_boolean do_print = TRUE;\n \n       addr = section->vma + addr_offset;\n       addr = ((addr & ((sign_adjust << 1) - 1)) ^ sign_adjust) - sign_adjust;\n@@ -2360,20 +2369,80 @@ disassemble_section (bfd *abfd, asection *section, void *inf)\n \t  pinfo->symtab_pos = -1;\n \t}\n \n+      /* If we are only disassembling from a specific symbol,\n+\t check to see if we should start or stop displaying.  */\n       if (sym && paux->symbol)\n \t{\n-\t  const char *name = bfd_asymbol_name (sym);\n-\t  char *alloc = NULL;\n+\t  if (do_print)\n+\t    {\n+\t      /* See if we should stop printing.  */\n+\t      switch (loop_until)\n+\t\t{\n+\t\tcase function_sym:\n+\t\t  if (sym->flags & BSF_FUNCTION)\n+\t\t    do_print = FALSE;\n+\t\t  break;\n \n-\t  if (do_demangle && name[0] != '\\0')\n+\t\tcase stop_offset_reached:\n+\t\t  /* Handled by the while loop.  */\n+\t\t  break;\n+\n+\t\tcase next_sym:\n+\t\t  /* FIXME: There is an implicit assumption here\n+\t\t     that the name of sym is different from\n+\t\t     paux->symbol.  */\n+\t\t  if (! bfd_is_local_label (abfd, sym))\n+\t\t    do_print = FALSE;\n+\t\t  break;\n+\t\t}\n+\t    }\n+\t  else\n \t    {\n-\t      /* Demangle the name.  */\n-\t      alloc = bfd_demangle (abfd, name, demangle_flags);\n-\t      if (alloc != NULL)\n-\t\tname = alloc;\n+\t      const char * name = bfd_asymbol_name (sym);\n+\t      char * alloc = NULL;\n+\n+\t      if (do_demangle && name[0] != '\\0')\n+\t\t{\n+\t\t  /* Demangle the name.  */\n+\t\t  alloc = bfd_demangle (abfd, name, demangle_flags);\n+\t\t  if (alloc != NULL)\n+\t\t    name = alloc;\n+\t\t}\n+\n+\t      /* We are not currently printing.  Check to see\n+\t\t if the current symbol matches the requested symbol.  */\n+\t      if (streq (name, paux->symbol))\n+\t\t{\n+\t\t  do_print = TRUE;\n+\n+\t\t  if (sym->flags & BSF_FUNCTION)\n+\t\t    {\n+\t\t      if (bfd_get_flavour (abfd) == bfd_target_elf_flavour\n+\t\t\t  && ((elf_symbol_type *) sym)->internal_elf_sym.st_size > 0)\n+\t\t\t{\n+\t\t\t  /* Sym is a function symbol with a size associated\n+\t\t\t     with it.  Turn on automatic disassembly for the\n+\t\t\t     next VALUE bytes.  */\n+\t\t\t  stop_offset = addr_offset\n+\t\t\t    + ((elf_symbol_type *) sym)->internal_elf_sym.st_size;\n+\t\t\t  loop_until = stop_offset_reached;\n+\t\t\t}\n+\t\t      else\n+\t\t\t{\n+\t\t\t  /* Otherwise we need to tell the loop heuristic to\n+\t\t\t     loop until the next function symbol is encountered.  */\n+\t\t\t  loop_until = function_sym;\n+\t\t\t}\n+\t\t    }\n+\t\t  else\n+\t\t    {\n+\t\t      /* Otherwise loop until the next symbol is encountered.  */\n+\t\t      loop_until = next_sym;\n+\t\t    }\n+\t\t}\n+\n+\t      free (alloc);\n \t    }\n-\t  do_print = streq (name, paux->symbol);\n-\t  free (alloc);\n \t}\n \n       if (! prefix_addresses && do_print)\n@@ -2438,13 +2507,9 @@ disassemble_section (bfd *abfd, asection *section, void *inf)\n \tinsns = FALSE;\n \n       if (do_print)\n-\t{\n-\t  disassemble_bytes (pinfo, paux->disassemble_fn, insns, data,\n-\t\t\t     addr_offset, nextstop_offset,\n-\t\t\t     rel_offset, &rel_pp, rel_ppend);\n-\t  if (paux->symbol)\n-\t    break;\n-\t}\n+\tdisassemble_bytes (pinfo, paux->disassemble_fn, insns, data,\n+\t\t\t   addr_offset, nextstop_offset,\n+\t\t\t   rel_offset, &rel_pp, rel_ppend);\n \n       addr_offset = nextstop_offset;\n       sym = nextsym;"
    },
    {
      "sha": "7dccf9a3163e2e4f0a2cb9b1e67c1de94135bc24",
      "filename": "binutils/testsuite/binutils-all/disasm.s",
      "status": "added",
      "additions": 24,
      "deletions": 0,
      "changes": 24,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/baae986a40eb2ed6d612436586bfa7dd1d88702d/binutils/testsuite/binutils-all/disasm.s",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/baae986a40eb2ed6d612436586bfa7dd1d88702d/binutils/testsuite/binutils-all/disasm.s",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/testsuite/binutils-all/disasm.s?ref=baae986a40eb2ed6d612436586bfa7dd1d88702d",
      "patch": "@@ -0,0 +1,24 @@\n+\t.text\n+\t\n+\t.globl start_of_text\n+start_of_text:\n+\t.type start_of_text, \"function\"\n+\t.long\t1\n+\t.size start_of_text, . - start_of_text\n+\n+\t.globl func\n+func:\n+\t.type func, \"function\"\n+\t.long\t2\n+\t.global global_non_func_sym\n+global_non_func_sym:\n+\t.long\t3\n+local_non_func_sym:\n+\t.long\t4\n+\t.size func, . - func\n+\n+\t.globl next_func\n+next_func:\t\n+\t.type next_func, \"function\"\n+\t.long\t5\n+\t.size next_func, . - next_func"
    },
    {
      "sha": "dd2e9bb02d036887c77697ac7bb1d51089a6ce20",
      "filename": "binutils/testsuite/binutils-all/objdump.exp",
      "status": "modified",
      "additions": 90,
      "deletions": 3,
      "changes": 93,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/baae986a40eb2ed6d612436586bfa7dd1d88702d/binutils/testsuite/binutils-all/objdump.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/baae986a40eb2ed6d612436586bfa7dd1d88702d/binutils/testsuite/binutils-all/objdump.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/binutils/testsuite/binutils-all/objdump.exp?ref=baae986a40eb2ed6d612436586bfa7dd1d88702d",
      "patch": "@@ -62,7 +62,7 @@ if [regexp $want $got] then {\n \n \n if {![binutils_assemble $srcdir/$subdir/bintest.s tmpdir/bintest.o]} then {\n-    fail \"objdump (assembling)\"\n+    fail \"objdump (assembling bintest.s)\"\n     return\n }\n if {![binutils_assemble $srcdir/$subdir/bintest.s tmpdir/bintest2.o]} then {\n@@ -280,8 +280,95 @@ proc test_objdump_d_sym { testfile dumpfile } {\n }\n \n test_objdump_d_sym $testfile $testfile\n-if { [ remote_file host exists $testarchive ] } then {\n-    test_objdump_d_sym $testarchive bintest2.o\n+\n+proc test_objdump_d_func_sym { testfile dumpfile } {\n+    global OBJDUMP\n+    global OBJDUMPFLAGS\n+\n+    set got [binutils_run $OBJDUMP \"$OBJDUMPFLAGS --disassemble=func --disassemble-zeroes $testfile\"]\n+\n+    set want \"$dumpfile:.*Disassembly of section\"\n+    if ![regexp $want $got] then {\n+\tfail \"objdump --disassemble=func $testfile: No disassembly title\"\n+\treturn\n+    }\n+\n+    set want \"$dumpfile:.*00+0 <start_of_text>\"\n+    if [regexp $want $got] then {\n+\tfail \"objdump --disassemble=func $testfile: First symbol displayed, when it should be absent\"\n+\treturn\n+    }\n+\n+    set want \"$dumpfile:.*00+. <func>\"\n+    if ![regexp $want $got] then {\n+\tfail \"objdump --disassemble=func $testfile: Disassembly does not start at function symbol\"\n+\treturn\n+    }\n+\n+    set want \"$dumpfile:.*00+. <global_non_func_sym>\"\n+    if ![regexp $want $got] then {\n+\tfail \"objdump --disassemble=func $testfile: Non function symbol not displayed\"\n+\treturn\n+    }\n+\n+    set want \"$dumpfile:.*00+. <next_func>\"\n+    if [regexp $want $got] then {\n+\tfail \"objdump --disassemble=func $testfile: Disassembly did not stop at the next function\"\n+\treturn\n+    }\n+\n+    pass \"objdump --disassemble=func $testfile\"\n+}\n+\n+proc test_objdump_d_non_func_sym { testfile dumpfile } {\n+    global OBJDUMP\n+    global OBJDUMPFLAGS\n+\n+    set got [binutils_run $OBJDUMP \"$OBJDUMPFLAGS --disassemble=global_non_func_sym $testfile\"]\n+\n+    set want \"$dumpfile:.*Disassembly of section\"\n+    if ![regexp $want $got] then {\n+\tfail \"objdump --disassemble=non_func $testfile: No disassembly title\"\n+\treturn\n+    }\n+\n+    set want \"$dumpfile:.*00+0 <start_of_text>\"\n+    if [regexp $want $got] then {\n+\tfail \"objdump --disassemble=non_func $testfile: First symbol displayed, when it should be absent\"\n+\treturn\n+    }\n+\n+    set want \"$dumpfile:.*00+. <global_non_func_sym>\"\n+    if ![regexp $want $got] then {\n+\tfail \"objdump --disassemble=non_func $testfile: Non function symbol not displayed\"\n+\treturn\n+    }\n+\n+    set want \"$dumpfile:.*00+. <local_non_func_sym>\"\n+    if [regexp $want $got] then {\n+\tfail \"objdump --disassemble=non_func $testfile: Disassembly did not stop at the next symbol\"\n+\treturn\n+    }\n+\n+    pass \"objdump --disassemble=non_func $testfile\"\n+}\n+\n+# Extra test for ELF format - check that --disassemble=func disassembles\n+# all of func, and does not stop at the next symbol.\n+if { [is_elf_format] } then {\n+\n+    if {![binutils_assemble $srcdir/$subdir/disasm.s tmpdir/disasm.o]} then {\n+\tfail \"objdump --disassemble=func (assembling disasm.s)\"\n+    } else {\n+\tif [is_remote host] {\n+\t    set elftestfile [remote_download host tmpdir/disasm.o]\n+\t} else {\n+\t    set elftestfile tmpdir/disasm.o\n+\t}\n+    \n+\ttest_objdump_d_func_sym $elftestfile $elftestfile\n+\ttest_objdump_d_non_func_sym $elftestfile $elftestfile\n+    }\n }\n \n "
    }
  ]
}