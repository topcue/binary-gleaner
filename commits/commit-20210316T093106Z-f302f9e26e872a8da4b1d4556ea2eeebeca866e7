{
  "sha": "f302f9e26e872a8da4b1d4556ea2eeebeca866e7",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZjMwMmY5ZTI2ZTg3MmE4ZGE0YjFkNDU1NmVhMmVlZWJlY2E4NjZlNw==",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2021-03-15T10:44:07Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2021-03-16T09:31:06Z"
    },
    "message": "gdb/testsuite: squash duplicate test names in gdb.threads/*.exp\n\nResolve all of the duplicate test names in the gdb.threads/*.exp set\nof tests (that I see).  Nothing very exciting here, mostly either\ngiving tests explicit testnames, or adding with_test_prefix.\n\nThe only interesting one is gdb.threads/execl.exp, I believe the\nduplicate test name was caused by an actual duplicate test.  I've\nremove the simpler form of the test.  I don't believe we've lost any\ntest coverage with this change.\n\ngdb/testsuite/ChangeLog:\n\n\t* gdb.threads/execl.exp: Remove duplicate 'info threads' test.\n\tMake use of $gdb_test_name instead of creating a separate $test\n\tvariable.\n\t* gdb.threads/print-threads.exp: Add a with_test_prefix instead of\n\tadding a '($name)' at the end of each test.  This also catches the\n\tone place where '($name)' was missing, and so caused a duplicate\n\ttest name.\n\t* gdb.threads/queue-signal.exp: Give tests unique names to avoid\n\tduplicate test names based on the command being tested.\n\t* gdb.threads/signal-command-multiple-signals-pending.exp:\n\tLikewise.\n\t* lib/gdb.exp (gdb_compile_shlib_pthreads): Tweak test name to\n\tavoid duplicate testnames when a test script uses this proc and\n\talso gdb_compile_pthreads.\n\t* lib/prelink-support.exp (build_executable_own_libs): Use\n\twith_test_prefix to avoid duplicate test names when we call\n\tbuild_executable twice.",
    "tree": {
      "sha": "c1f18143c89bb514ea7bf670ede97b9b65b35edc",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/c1f18143c89bb514ea7bf670ede97b9b65b35edc"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/f302f9e26e872a8da4b1d4556ea2eeebeca866e7",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f302f9e26e872a8da4b1d4556ea2eeebeca866e7",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/f302f9e26e872a8da4b1d4556ea2eeebeca866e7",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/f302f9e26e872a8da4b1d4556ea2eeebeca866e7/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "80d49d6a1b865c84a8596da465db285cbbdfd1bb",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/80d49d6a1b865c84a8596da465db285cbbdfd1bb",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/80d49d6a1b865c84a8596da465db285cbbdfd1bb"
    }
  ],
  "stats": {
    "total": 125,
    "additions": 77,
    "deletions": 48
  },
  "files": [
    {
      "sha": "374ea39417276f07c68ad1e3a0e4442456b424a0",
      "filename": "gdb/testsuite/ChangeLog",
      "status": "modified",
      "additions": 20,
      "deletions": 0,
      "changes": 20,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f302f9e26e872a8da4b1d4556ea2eeebeca866e7/gdb/testsuite/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f302f9e26e872a8da4b1d4556ea2eeebeca866e7/gdb/testsuite/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/ChangeLog?ref=f302f9e26e872a8da4b1d4556ea2eeebeca866e7",
      "patch": "@@ -1,3 +1,23 @@\n+2021-03-16  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* gdb.threads/execl.exp: Remove duplicate 'info threads' test.\n+\tMake use of $gdb_test_name instead of creating a separate $test\n+\tvariable.\n+\t* gdb.threads/print-threads.exp: Add a with_test_prefix instead of\n+\tadding a '($name)' at the end of each test.  This also catches the\n+\tone place where '($name)' was missing, and so caused a duplicate\n+\ttest name.\n+\t* gdb.threads/queue-signal.exp: Give tests unique names to avoid\n+\tduplicate test names based on the command being tested.\n+\t* gdb.threads/signal-command-multiple-signals-pending.exp:\n+\tLikewise.\n+\t* lib/gdb.exp (gdb_compile_shlib_pthreads): Tweak test name to\n+\tavoid duplicate testnames when a test script uses this proc and\n+\talso gdb_compile_pthreads.\n+\t* lib/prelink-support.exp (build_executable_own_libs): Use\n+\twith_test_prefix to avoid duplicate test names when we call\n+\tbuild_executable twice.\n+\n 2021-03-15  Tom Tromey  <tromey@adacore.com>\n \n \t* gdb.ada/fixed_points.exp: Add tests of unary + and -."
    },
    {
      "sha": "68341be4d21981e9454e2c29800f69cf5da18744",
      "filename": "gdb/testsuite/gdb.threads/execl.exp",
      "status": "modified",
      "additions": 4,
      "deletions": 7,
      "changes": 11,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f302f9e26e872a8da4b1d4556ea2eeebeca866e7/gdb/testsuite/gdb.threads/execl.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f302f9e26e872a8da4b1d4556ea2eeebeca866e7/gdb/testsuite/gdb.threads/execl.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.threads/execl.exp?ref=f302f9e26e872a8da4b1d4556ea2eeebeca866e7",
      "patch": "@@ -54,21 +54,18 @@ gdb_test_no_output \"delete 2\"\n gdb_test \"continue\" \".*Breakpoint 1, main.*\" \\\n     \"continue across exec\"\n \n-gdb_test \"info threads\" \".*\" \"info threads after exec\"\n-\n-set test \"info threads after exec\"\n-gdb_test_multiple \"info threads\" \"$test\" {\n+gdb_test_multiple \"info threads\" \"info threads after exec\" {\n     -re \"2 *Thread .*$gdb_prompt $\" {\n \t# Old threads left behind.\n-\tfail \"$test\"\n+\tfail \"$gdb_test_name\"\n     }\n     -re \"4 *Thread .*$gdb_prompt $\" {\n \t# New threads registered.\n-\tfail \"$test\"\n+\tfail \"$gdb_test_name\"\n     }\n     -re \"$gdb_prompt $\" {\n \t# Target doesn't register the main thread, pass for now.\n-\tpass \"$test\"\n+\tpass \"$gdb_test_name\"\n     }\n }\n "
    },
    {
      "sha": "2693b6b362c2ebe02ecb6ff0461d500779797685",
      "filename": "gdb/testsuite/gdb.threads/print-threads.exp",
      "status": "modified",
      "additions": 32,
      "deletions": 30,
      "changes": 62,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f302f9e26e872a8da4b1d4556ea2eeebeca866e7/gdb/testsuite/gdb.threads/print-threads.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f302f9e26e872a8da4b1d4556ea2eeebeca866e7/gdb/testsuite/gdb.threads/print-threads.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.threads/print-threads.exp?ref=f302f9e26e872a8da4b1d4556ea2eeebeca866e7",
      "patch": "@@ -45,38 +45,40 @@ gdb_test \"shell stty intr '^C'\" \".*\"\n proc test_all_threads { name kill } {\n     global gdb_prompt inferior_exited_re\n \n-    set i 0\n-    set j 0\n-    gdb_test_multiple \"continue\" \"all threads ran once\" {\n-\t-re \"Breakpoint \\[0-9\\]+, thread_function \\\\(arg=.*\\\\) at .*print-threads.c:\\[0-9\\]+.*$gdb_prompt\" {\n-\t    set i [expr $i + 1]\n-\t    pass \"hit thread_function breakpoint, $i ($name)\"\n-\t    send_gdb \"continue\\n\"\n-\t    exp_continue\n-\t}\n-\t-re \"Breakpoint \\[0-9\\]+, .* kill \\\\(.*\\\\) .*$gdb_prompt\" {\n-\t    set j [expr $j + 1]\n-\t    if { $kill == 1 } {\n-\t\tpass \"hit kill breakpoint, $j ($name)\"\n-\t    } else {\n-\t\tfail \"hit kill breakpoint, $j ($name) (unexpected)\"\n+    with_test_prefix $name {\n+\tset i 0\n+\tset j 0\n+\tgdb_test_multiple \"continue\" \"all threads ran once\" {\n+\t    -re \"Breakpoint \\[0-9\\]+, thread_function \\\\(arg=.*\\\\) at .*print-threads.c:\\[0-9\\]+.*$gdb_prompt\" {\n+\t\tset i [expr $i + 1]\n+\t\tpass \"hit thread_function breakpoint, $i\"\n+\t\tsend_gdb \"continue\\n\"\n+\t\texp_continue\n \t    }\n-\t    send_gdb \"continue\\n\"\n-\t    exp_continue\n-\t}\n-\t-re \"$inferior_exited_re normally.\\[\\r\\n\\]+$gdb_prompt\" {\n-\t    pass \"program exited normally\"\n-\t    if {$i == 5} {\n-\t\tpass \"all threads ran once ($name)\"\n-\t    } else {\n-\t\tfail \"all threads ran once ($name) (total $i threads ran)\"\n+\t    -re \"Breakpoint \\[0-9\\]+, .* kill \\\\(.*\\\\) .*$gdb_prompt\" {\n+\t\tset j [expr $j + 1]\n+\t\tif { $kill == 1 } {\n+\t\t    pass \"hit kill breakpoint, $j\"\n+\t\t} else {\n+\t\t    fail \"hit kill breakpoint, $j (unexpected)\"\n+\t\t}\n+\t\tsend_gdb \"continue\\n\"\n+\t\texp_continue\n \t    }\n-\t}\n-\t-re \" received signal SIGTRAP.*(Thread \\[-0-9a-fx\\]* \\\\(zombie\\\\)|0x00000000 in ).*$gdb_prompt $\" {\n-\t    if { $kill == 1 } {\n-\t\tkfail \"gdb/1265\" \"Running threads ($name) (zombie thread)\"\n-\t    } else {\n-\t\tfail \"running threads ($name) (unknown output)\"\n+\t    -re \"$inferior_exited_re normally.\\[\\r\\n\\]+$gdb_prompt\" {\n+\t\tpass \"program exited normally\"\n+\t\tif {$i == 5} {\n+\t\t    pass \"all threads ran once\"\n+\t\t} else {\n+\t\t    fail \"all threads ran once (total $i threads ran)\"\n+\t\t}\n+\t    }\n+\t    -re \" received signal SIGTRAP.*(Thread \\[-0-9a-fx\\]* \\\\(zombie\\\\)|0x00000000 in ).*$gdb_prompt $\" {\n+\t\tif { $kill == 1 } {\n+\t\t    kfail \"gdb/1265\" \"Running threads (zombie thread)\"\n+\t\t} else {\n+\t\t    fail \"running threads (unknown output)\"\n+\t\t}\n \t    }\n \t}\n     }"
    },
    {
      "sha": "ca06ce789d2f5a3e3dd983373bf08333a6c888fe",
      "filename": "gdb/testsuite/gdb.threads/queue-signal.exp",
      "status": "modified",
      "additions": 8,
      "deletions": 4,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f302f9e26e872a8da4b1d4556ea2eeebeca866e7/gdb/testsuite/gdb.threads/queue-signal.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f302f9e26e872a8da4b1d4556ea2eeebeca866e7/gdb/testsuite/gdb.threads/queue-signal.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.threads/queue-signal.exp?ref=f302f9e26e872a8da4b1d4556ea2eeebeca866e7",
      "patch": "@@ -60,16 +60,20 @@ gdb_test_no_output \"set scheduler-locking on\"\n gdb_test_no_output \"set var ready = 1\"\n \n # Thread sigusr1_thread gets a SIGUSR1 which we leave alone.\n-gdb_test \"thread $sigusr1_thread\" \"\"\n-gdb_test \"continue\" \"SIGUSR1.*\"\n+gdb_test \"thread $sigusr1_thread\" \"\" \\\n+    \"switch to SIGUSR1 thread\"\n+gdb_test \"continue\" \"SIGUSR1.*\" \\\n+    \"continue until we get SIGUSR1\"\n \n # Inject SIGUSR2 into thread sigusr2_thread.\n-gdb_test \"thread $sigusr2_thread\" \"\"\n+gdb_test \"thread $sigusr2_thread\" \"\"  \\\n+    \"switch to SIGUSR2 thread\"\n gdb_test_no_output \"queue-signal SIGUSR2\"\n \n # The main thread gets SIGABRT which we then throw away.\n gdb_test \"thread 1\" \"\"\n-gdb_test \"continue\" \"SIGABRT.*\"\n+gdb_test \"continue\" \"SIGABRT.*\"  \\\n+    \"continue until we get SIGABRT\"\n gdb_test_no_output \"queue-signal 0\"\n \n # Now let every thread run."
    },
    {
      "sha": "78ded0db4c256d7f0d65c567075d58400cbf4fc1",
      "filename": "gdb/testsuite/gdb.threads/signal-command-multiple-signals-pending.exp",
      "status": "modified",
      "additions": 4,
      "deletions": 2,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f302f9e26e872a8da4b1d4556ea2eeebeca866e7/gdb/testsuite/gdb.threads/signal-command-multiple-signals-pending.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f302f9e26e872a8da4b1d4556ea2eeebeca866e7/gdb/testsuite/gdb.threads/signal-command-multiple-signals-pending.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/gdb.threads/signal-command-multiple-signals-pending.exp?ref=f302f9e26e872a8da4b1d4556ea2eeebeca866e7",
      "patch": "@@ -53,14 +53,16 @@ proc test { schedlock } {\n \tgdb_test \"continue\" \"thread_function.*\" \"thread 2 created\"\n \tgdb_test \"continue\" \"thread_function.*\" \"thread 3 created\"\n \n-\tgdb_test \"continue\" \"all_threads_started.*\"\n+\tgdb_test \"continue\" \"all_threads_started.*\" \\\n+\t    \"continue to all_threads_started\"\n \n \t# Using schedlock, let the main thread queue a signal for each\n \t# non-main thread.\n \tgdb_test_no_output \"set scheduler-locking on\"\n \n \tgdb_test \"break all_threads_signalled\" \"Breakpoint .* at .*$srcfile.*\"\n-\tgdb_test \"continue\" \"all_threads_signalled.*\"\n+\tgdb_test \"continue\" \"all_threads_signalled.*\" \\\n+\t    \"continue to all_threads signalled\"\n \n \tgdb_test \"info threads\" \"\\\\\\* 1\\[ \\t\\]+Thread.*\" \"thread 1 selected\"\n "
    },
    {
      "sha": "f4006800aa067bd718eb43c045e6016f8851d3df",
      "filename": "gdb/testsuite/lib/gdb.exp",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f302f9e26e872a8da4b1d4556ea2eeebeca866e7/gdb/testsuite/lib/gdb.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f302f9e26e872a8da4b1d4556ea2eeebeca866e7/gdb/testsuite/lib/gdb.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/lib/gdb.exp?ref=f302f9e26e872a8da4b1d4556ea2eeebeca866e7",
      "patch": "@@ -4529,7 +4529,7 @@ proc gdb_compile_shlib_pthreads {sources dest options} {\n                 set why_msg \"missing runtime threads library\"\n             }\n             {^$} {\n-                pass \"successfully compiled posix threads test case\"\n+                pass \"successfully compiled posix threads shlib test case\"\n                 set built_binfile 1\n                 break\n             }"
    },
    {
      "sha": "6550715ba3a5877d9b6833248cfec19ecb572048",
      "filename": "gdb/testsuite/lib/prelink-support.exp",
      "status": "modified",
      "additions": 8,
      "deletions": 4,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/f302f9e26e872a8da4b1d4556ea2eeebeca866e7/gdb/testsuite/lib/prelink-support.exp",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/f302f9e26e872a8da4b1d4556ea2eeebeca866e7/gdb/testsuite/lib/prelink-support.exp",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/testsuite/lib/prelink-support.exp?ref=f302f9e26e872a8da4b1d4556ea2eeebeca866e7",
      "patch": "@@ -122,8 +122,10 @@ proc build_executable_own_libs {testname executable sources options {interp \"\"}\n \terror \"This proc can be only used for native target.\"\n     }\n \n-    if {[build_executable $testname $executable $sources $options] == -1} {\n-\treturn \"\"\n+    with_test_prefix \"initial build\" {\n+\tif {[build_executable $testname $executable $sources $options] == -1} {\n+\t    return \"\"\n+\t}\n     }\n     set binfile [standard_output_file ${executable}]\n \n@@ -181,8 +183,10 @@ proc build_executable_own_libs {testname executable sources options {interp \"\"}\n \tset options [linsert $options 0 \"ldflags=-Wl,--dynamic-linker,$interp\"]\n     }\n \n-    if {[build_executable $testname $executable $sources $options] == -1} {\n-\treturn \"\"\n+    with_test_prefix \"rebuild\" {\n+\tif {[build_executable $testname $executable $sources $options] == -1} {\n+\t    return \"\"\n+\t}\n     }\n \n     set prelink_args \"--ld-library-path=$dir $binfile [concat $dests]\""
    }
  ]
}