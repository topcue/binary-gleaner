{
  "sha": "8dc433a0fb04f8fa37530d0788053dd9bea5c37d",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6OGRjNDMzYTBmYjA0ZjhmYTM3NTMwZDA3ODgwNTNkZDliZWE1YzM3ZA==",
  "commit": {
    "author": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2019-04-09T19:19:28Z"
    },
    "committer": {
      "name": "Tom Tromey",
      "email": "tromey@adacore.com",
      "date": "2019-04-09T19:21:13Z"
    },
    "message": "Fix Rust lexer buglet\n\nPR rust/24414 points out that the Rust lexer uses strtoul when lexing\nan integer, and that this can give the wrong results in some\nsituations.\n\nThis patch changes it to use strtoulst, like most of the rest of gdb.\nIt also adds a self test.\n\nTested on x86-64 Fedora 29 using an i686 build.\n\ngdb/ChangeLog\n2019-04-09  Ivan Begert  <ivanbegert@gmail.com>\n\t    Tom Tromey  <tromey@adacore.com>\n\n\tPR rust/24414:\n\t* rust-exp.y (rust_parser::lex_number): Use strtoulst.\n\t(rust_lex_int_test): Change \"value\" to be LONGEST.\n\t(rust_lex_tests): Add test for long integer literal.",
    "tree": {
      "sha": "3fbedde5a04dcdbc10f3a273b4bd792c72fb3f4c",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/3fbedde5a04dcdbc10f3a273b4bd792c72fb3f4c"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/8dc433a0fb04f8fa37530d0788053dd9bea5c37d",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8dc433a0fb04f8fa37530d0788053dd9bea5c37d",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/8dc433a0fb04f8fa37530d0788053dd9bea5c37d",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/8dc433a0fb04f8fa37530d0788053dd9bea5c37d/comments",
  "author": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "tromey",
    "id": 1557670,
    "node_id": "MDQ6VXNlcjE1NTc2NzA=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/tromey",
    "html_url": "https://github.com/tromey",
    "followers_url": "https://api.github.com/users/tromey/followers",
    "following_url": "https://api.github.com/users/tromey/following{/other_user}",
    "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/tromey/subscriptions",
    "organizations_url": "https://api.github.com/users/tromey/orgs",
    "repos_url": "https://api.github.com/users/tromey/repos",
    "events_url": "https://api.github.com/users/tromey/events{/privacy}",
    "received_events_url": "https://api.github.com/users/tromey/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "b0319eaaf9d1f4e730c532058f2fff0b4e5ce682",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/b0319eaaf9d1f4e730c532058f2fff0b4e5ce682",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/b0319eaaf9d1f4e730c532058f2fff0b4e5ce682"
    }
  ],
  "stats": {
    "total": 14,
    "additions": 12,
    "deletions": 2
  },
  "files": [
    {
      "sha": "f9b9e88b517dd44b52c068557406b4957311250c",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 8,
      "deletions": 0,
      "changes": 8,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8dc433a0fb04f8fa37530d0788053dd9bea5c37d/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8dc433a0fb04f8fa37530d0788053dd9bea5c37d/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=8dc433a0fb04f8fa37530d0788053dd9bea5c37d",
      "patch": "@@ -1,3 +1,11 @@\n+2019-04-09  Ivan Begert  <ivanbegert@gmail.com>\n+\t    Tom Tromey  <tromey@adacore.com>\n+\n+\tPR rust/24414:\n+\t* rust-exp.y (rust_parser::lex_number): Use strtoulst.\n+\t(rust_lex_int_test): Change \"value\" to be LONGEST.\n+\t(rust_lex_tests): Add test for long integer literal.\n+\n 2019-04-09  Tom Tromey  <tromey@adacore.com>\n \n \t* remote.c (remote_target::remote_add_inferior): Change fake_pid_p"
    },
    {
      "sha": "15932638397d0854e41f2b73b359147076925189",
      "filename": "gdb/rust-exp.y",
      "status": "modified",
      "additions": 4,
      "deletions": 2,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/8dc433a0fb04f8fa37530d0788053dd9bea5c37d/gdb/rust-exp.y",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/8dc433a0fb04f8fa37530d0788053dd9bea5c37d/gdb/rust-exp.y",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/rust-exp.y?ref=8dc433a0fb04f8fa37530d0788053dd9bea5c37d",
      "patch": "@@ -1610,7 +1610,7 @@ rust_parser::lex_number (YYSTYPE *lvalp)\n \t    }\n \t}\n \n-      value = strtoul (number.c_str () + offset, NULL, radix);\n+      value = strtoulst (number.c_str () + offset, NULL, radix);\n       if (implicit_i32 && value >= ((uint64_t) 1) << 31)\n \ttype = get_type (\"i64\");\n \n@@ -2603,7 +2603,8 @@ rust_lex_test_one (rust_parser *parser, const char *input, int expected)\n /* Test that INPUT lexes as the integer VALUE.  */\n \n static void\n-rust_lex_int_test (rust_parser *parser, const char *input, int value, int kind)\n+rust_lex_int_test (rust_parser *parser, const char *input,\n+\t\t   LONGEST value, int kind)\n {\n   RUSTSTYPE result = rust_lex_test_one (parser, input, kind);\n   SELF_CHECK (result.typed_val_int.val == value);\n@@ -2781,6 +2782,7 @@ rust_lex_tests (void)\n   rust_lex_int_test (&parser, \"0x1_f\", 0x1f, INTEGER);\n   rust_lex_int_test (&parser, \"0b1_101011__\", 0x6b, INTEGER);\n   rust_lex_int_test (&parser, \"0o001177i64\", 639, INTEGER);\n+  rust_lex_int_test (&parser, \"0x123456789u64\", 0x123456789ull, INTEGER);\n \n   rust_lex_test_trailing_dot (&parser);\n "
    }
  ]
}