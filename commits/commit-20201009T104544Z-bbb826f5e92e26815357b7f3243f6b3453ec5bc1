{
  "sha": "bbb826f5e92e26815357b7f3243f6b3453ec5bc1",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6YmJiODI2ZjVlOTJlMjY4MTUzNTdiN2YzMjQzZjZiMzQ1M2VjNWJjMQ==",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2020-10-08T09:44:55Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2020-10-09T10:45:44Z"
    },
    "message": "gdb: Delay releasing target_desc_up in more cases\n\nAfter commit:\n\n  commit 51a948fdf0e14fb69ab9e0c79ae8b2415801f9a3\n  Date:   Mon Jul 20 14:18:04 2020 +0100\n\n      gdb: Have allocate_target_description return a unique_ptr\n\nThere were a few places where we could (should?) have delayed\nreleasing the target_desc_up until a little later.  This commit\ncatches these cases.\n\nIn the case of ARC, the target_desc_up is now exposed right out to\ngdbserver, which means making a small change there too.\n\nThere should be no user visible changes after this commit.\n\ngdb/ChangeLog:\n\n\t* arch/aarch32.c (aarch32_create_target_description): Release the\n\ttarget_desc_up as late as possible.\n\t* arch/aarch64.c (aarch64_create_target_description): Likewise.\n\t* arch/amd64.c (amd64_create_target_description): Likewise.\n\t* arch/arc.c (arc_create_target_description): Return a\n\ttarget_desc_up, don't release it.\n\t* arch/arc.h (arc_create_target_description): Update declaration.\n\t(arc_lookup_target_description): Move target_desc_up into the\n\tcache, and return a borrowed pointer.\n\t* arch/arm.c (arm_create_target_description): Release the\n\ttarget_desc_up as late as possible.\n\t* arch/i386.c (i386_create_target_description): Likewise.\n\t* arch/riscv.h (riscv_create_target_description): Update\n\tdeclaration to match definition.\n\t* arch/tic6x.c (tic6x_create_target_description): Release the\n\ttarget_desc_up as late as possible.\n\ngdbserver/ChangeLog:\n\n\t* linux-arc-low.cc (arc_linux_read_description): Release the\n\tunique_ptr returned from arc_create_target_description.",
    "tree": {
      "sha": "893a50c3a3e1d044c100b1fc3cacfd8ab31a16ea",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/893a50c3a3e1d044c100b1fc3cacfd8ab31a16ea"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/bbb826f5e92e26815357b7f3243f6b3453ec5bc1",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/bbb826f5e92e26815357b7f3243f6b3453ec5bc1",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/bbb826f5e92e26815357b7f3243f6b3453ec5bc1",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/bbb826f5e92e26815357b7f3243f6b3453ec5bc1/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "361cb219351d8b7e39e1962fe77f40aa80657b27",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/361cb219351d8b7e39e1962fe77f40aa80657b27",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/361cb219351d8b7e39e1962fe77f40aa80657b27"
    }
  ],
  "stats": {
    "total": 166,
    "additions": 97,
    "deletions": 69
  },
  "files": [
    {
      "sha": "28fa696e3d51ff5854dc6c695999d601db54a02a",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 19,
      "deletions": 0,
      "changes": 19,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bbb826f5e92e26815357b7f3243f6b3453ec5bc1/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bbb826f5e92e26815357b7f3243f6b3453ec5bc1/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=bbb826f5e92e26815357b7f3243f6b3453ec5bc1",
      "patch": "@@ -1,3 +1,22 @@\n+2020-10-09  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* arch/aarch32.c (aarch32_create_target_description): Release the\n+\ttarget_desc_up as late as possible.\n+\t* arch/aarch64.c (aarch64_create_target_description): Likewise.\n+\t* arch/amd64.c (amd64_create_target_description): Likewise.\n+\t* arch/arc.c (arc_create_target_description): Return a\n+\ttarget_desc_up, don't release it.\n+\t* arch/arc.h (arc_create_target_description): Update declaration.\n+\t(arc_lookup_target_description): Move target_desc_up into the\n+\tcache, and return a borrowed pointer.\n+\t* arch/arm.c (arm_create_target_description): Release the\n+\ttarget_desc_up as late as possible.\n+\t* arch/i386.c (i386_create_target_description): Likewise.\n+\t* arch/riscv.h (riscv_create_target_description): Update\n+\tdeclaration to match definition.\n+\t* arch/tic6x.c (tic6x_create_target_description): Release the\n+\ttarget_desc_up as late as possible.\n+\n 2020-10-09  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* Makefile.in: Include Makefile.gnulib.inc.  Don't define LIBGNU"
    },
    {
      "sha": "0a869ec9b9129f28a147d542d14f0ab668bacae5",
      "filename": "gdb/arch/aarch32.c",
      "status": "modified",
      "additions": 6,
      "deletions": 6,
      "changes": 12,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bbb826f5e92e26815357b7f3243f6b3453ec5bc1/gdb/arch/aarch32.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bbb826f5e92e26815357b7f3243f6b3453ec5bc1/gdb/arch/aarch32.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/arch/aarch32.c?ref=bbb826f5e92e26815357b7f3243f6b3453ec5bc1",
      "patch": "@@ -26,18 +26,18 @@\n target_desc *\n aarch32_create_target_description ()\n {\n-  target_desc *tdesc = allocate_target_description ().release ();\n+  target_desc_up tdesc = allocate_target_description ();\n \n #ifndef IN_PROCESS_AGENT\n-  set_tdesc_architecture (tdesc, \"arm\");\n+  set_tdesc_architecture (tdesc.get (), \"arm\");\n #endif\n \n   long regnum = 0;\n \n-  regnum = create_feature_arm_arm_core (tdesc, regnum);\n+  regnum = create_feature_arm_arm_core (tdesc.get (), regnum);\n   /* Create a vfpv3 feature, then a blank NEON feature.  */\n-  regnum = create_feature_arm_arm_vfpv3 (tdesc, regnum);\n-  tdesc_create_feature (tdesc, \"org.gnu.gdb.arm.neon\");\n+  regnum = create_feature_arm_arm_vfpv3 (tdesc.get (), regnum);\n+  tdesc_create_feature (tdesc.get (), \"org.gnu.gdb.arm.neon\");\n \n-  return tdesc;\n+  return tdesc.release ();\n }"
    },
    {
      "sha": "f89d5e014df55020f63af9794957da85c3914b7d",
      "filename": "gdb/arch/aarch64.c",
      "status": "modified",
      "additions": 7,
      "deletions": 7,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bbb826f5e92e26815357b7f3243f6b3453ec5bc1/gdb/arch/aarch64.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bbb826f5e92e26815357b7f3243f6b3453ec5bc1/gdb/arch/aarch64.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/arch/aarch64.c?ref=bbb826f5e92e26815357b7f3243f6b3453ec5bc1",
      "patch": "@@ -29,23 +29,23 @@\n target_desc *\n aarch64_create_target_description (uint64_t vq, bool pauth_p)\n {\n-  target_desc *tdesc = allocate_target_description ().release ();\n+  target_desc_up tdesc = allocate_target_description ();\n \n #ifndef IN_PROCESS_AGENT\n-  set_tdesc_architecture (tdesc, \"aarch64\");\n+  set_tdesc_architecture (tdesc.get (), \"aarch64\");\n #endif\n \n   long regnum = 0;\n \n-  regnum = create_feature_aarch64_core (tdesc, regnum);\n+  regnum = create_feature_aarch64_core (tdesc.get (), regnum);\n \n   if (vq == 0)\n-    regnum = create_feature_aarch64_fpu (tdesc, regnum);\n+    regnum = create_feature_aarch64_fpu (tdesc.get (), regnum);\n   else\n-    regnum = create_feature_aarch64_sve (tdesc, regnum, vq);\n+    regnum = create_feature_aarch64_sve (tdesc.get (), regnum, vq);\n \n   if (pauth_p)\n-    regnum = create_feature_aarch64_pauth (tdesc, regnum);\n+    regnum = create_feature_aarch64_pauth (tdesc.get (), regnum);\n \n-  return tdesc;\n+  return tdesc.release ();\n }"
    },
    {
      "sha": "60d997dbee67d1fbc4993992c2fcaac4e88cb0e4",
      "filename": "gdb/arch/amd64.c",
      "status": "modified",
      "additions": 14,
      "deletions": 13,
      "changes": 27,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bbb826f5e92e26815357b7f3243f6b3453ec5bc1/gdb/arch/amd64.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bbb826f5e92e26815357b7f3243f6b3453ec5bc1/gdb/arch/amd64.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/arch/amd64.c?ref=bbb826f5e92e26815357b7f3243f6b3453ec5bc1",
      "patch": "@@ -40,39 +40,40 @@ target_desc *\n amd64_create_target_description (uint64_t xcr0, bool is_x32, bool is_linux,\n \t\t\t\t bool segments)\n {\n-  target_desc *tdesc = allocate_target_description ().release ();\n+  target_desc_up tdesc = allocate_target_description ();\n \n #ifndef IN_PROCESS_AGENT\n-  set_tdesc_architecture (tdesc, is_x32 ? \"i386:x64-32\" : \"i386:x86-64\");\n+  set_tdesc_architecture (tdesc.get (),\n+\t\t\t  is_x32 ? \"i386:x64-32\" : \"i386:x86-64\");\n \n   if (is_linux)\n-    set_tdesc_osabi (tdesc, \"GNU/Linux\");\n+    set_tdesc_osabi (tdesc.get (), \"GNU/Linux\");\n #endif\n \n   long regnum = 0;\n \n   if (is_x32)\n-    regnum = create_feature_i386_x32_core (tdesc, regnum);\n+    regnum = create_feature_i386_x32_core (tdesc.get (), regnum);\n   else\n-    regnum = create_feature_i386_64bit_core (tdesc, regnum);\n+    regnum = create_feature_i386_64bit_core (tdesc.get (), regnum);\n \n-  regnum = create_feature_i386_64bit_sse (tdesc, regnum);\n+  regnum = create_feature_i386_64bit_sse (tdesc.get (), regnum);\n   if (is_linux)\n-    regnum = create_feature_i386_64bit_linux (tdesc, regnum);\n+    regnum = create_feature_i386_64bit_linux (tdesc.get (), regnum);\n   if (segments)\n-    regnum = create_feature_i386_64bit_segments (tdesc, regnum);\n+    regnum = create_feature_i386_64bit_segments (tdesc.get (), regnum);\n \n   if (xcr0 & X86_XSTATE_AVX)\n-    regnum = create_feature_i386_64bit_avx (tdesc, regnum);\n+    regnum = create_feature_i386_64bit_avx (tdesc.get (), regnum);\n \n   if ((xcr0 & X86_XSTATE_MPX) && !is_x32)\n-    regnum = create_feature_i386_64bit_mpx (tdesc, regnum);\n+    regnum = create_feature_i386_64bit_mpx (tdesc.get (), regnum);\n \n   if (xcr0 & X86_XSTATE_AVX512)\n-    regnum = create_feature_i386_64bit_avx512 (tdesc, regnum);\n+    regnum = create_feature_i386_64bit_avx512 (tdesc.get (), regnum);\n \n   if ((xcr0 & X86_XSTATE_PKRU) && !is_x32)\n-    regnum = create_feature_i386_64bit_pkeys (tdesc, regnum);\n+    regnum = create_feature_i386_64bit_pkeys (tdesc.get (), regnum);\n \n-  return tdesc;\n+  return tdesc.release ();\n }"
    },
    {
      "sha": "abed8a66847a7ef6053955d861494b44e612ef91",
      "filename": "gdb/arch/arc.c",
      "status": "modified",
      "additions": 14,
      "deletions": 11,
      "changes": 25,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bbb826f5e92e26815357b7f3243f6b3453ec5bc1/gdb/arch/arc.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bbb826f5e92e26815357b7f3243f6b3453ec5bc1/gdb/arch/arc.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/arch/arc.c?ref=bbb826f5e92e26815357b7f3243f6b3453ec5bc1",
      "patch": "@@ -34,11 +34,11 @@\n #define STATIC_IN_GDB\n #endif\n \n-STATIC_IN_GDB target_desc *\n+STATIC_IN_GDB target_desc_up\n arc_create_target_description (const struct arc_arch_features &features)\n {\n   /* Create a new target description.  */\n-  target_desc *tdesc = allocate_target_description ().release ();\n+  target_desc_up tdesc = allocate_target_description ();\n \n #ifndef IN_PROCESS_AGENT\n   std::string arch_name;\n@@ -57,20 +57,20 @@ arc_create_target_description (const struct arc_arch_features &features)\n       gdb_assert_not_reached (msg.c_str ());\n     }\n \n-  set_tdesc_architecture (tdesc, arch_name.c_str ());\n+  set_tdesc_architecture (tdesc.get (), arch_name.c_str ());\n #endif\n \n   long regnum = 0;\n \n   switch (features.isa)\n     {\n     case ARC_ISA_ARCV1:\n-      regnum = create_feature_arc_v1_core (tdesc, regnum);\n-      regnum = create_feature_arc_v1_aux (tdesc, regnum);\n+      regnum = create_feature_arc_v1_core (tdesc.get (), regnum);\n+      regnum = create_feature_arc_v1_aux (tdesc.get (), regnum);\n       break;\n     case ARC_ISA_ARCV2:\n-      regnum = create_feature_arc_v2_core (tdesc, regnum);\n-      regnum = create_feature_arc_v2_aux (tdesc, regnum);\n+      regnum = create_feature_arc_v2_core (tdesc.get (), regnum);\n+      regnum = create_feature_arc_v2_aux (tdesc.get (), regnum);\n       break;\n     default:\n       std::string msg = string_printf\n@@ -111,12 +111,15 @@ arc_lookup_target_description (const struct arc_arch_features &features)\n   if (it != arc_tdesc_cache.end ())\n     return it->second.get ();\n \n-  target_desc *tdesc = arc_create_target_description (features);\n+  target_desc_up tdesc = arc_create_target_description (features);\n \n-  /* Add the newly created target description to the repertoire.  */\n-  arc_tdesc_cache.emplace (features, tdesc);\n \n-  return tdesc;\n+  /* Add to the cache, and return a pointer borrowed from the\n+     target_desc_up.  This is safe as the cache (and the pointers\n+     contained within it) are not deleted until GDB exits.  */\n+  target_desc *ptr = tdesc.get ();\n+  arc_tdesc_cache.emplace (features, std::move (tdesc));\n+  return ptr;\n }\n \n #endif /* !GDBSERVER */"
    },
    {
      "sha": "1e0e8cd9635412a643c08d36f4a683969537dc0f",
      "filename": "gdb/arch/arc.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bbb826f5e92e26815357b7f3243f6b3453ec5bc1/gdb/arch/arc.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bbb826f5e92e26815357b7f3243f6b3453ec5bc1/gdb/arch/arc.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/arch/arc.h?ref=bbb826f5e92e26815357b7f3243f6b3453ec5bc1",
      "patch": "@@ -70,7 +70,7 @@ struct arc_arch_features\n    The only external client of this must be the gdbserver which manipulates\n    the returned data.  */\n \n-target_desc *arc_create_target_description\n+target_desc_up arc_create_target_description\n \t(const struct arc_arch_features &features);\n \n #else"
    },
    {
      "sha": "406a8e72915bcdd9be92c8da08c7a0a79b048af0",
      "filename": "gdb/arch/arm.c",
      "status": "modified",
      "additions": 8,
      "deletions": 8,
      "changes": 16,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bbb826f5e92e26815357b7f3243f6b3453ec5bc1/gdb/arch/arm.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bbb826f5e92e26815357b7f3243f6b3453ec5bc1/gdb/arch/arm.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/arch/arm.c?ref=bbb826f5e92e26815357b7f3243f6b3453ec5bc1",
      "patch": "@@ -374,41 +374,41 @@ shifted_reg_val (struct regcache *regcache, unsigned long inst,\n target_desc *\n arm_create_target_description (arm_fp_type fp_type)\n {\n-  target_desc *tdesc = allocate_target_description ().release ();\n+  target_desc_up tdesc = allocate_target_description ();\n \n #ifndef IN_PROCESS_AGENT\n   if (fp_type == ARM_FP_TYPE_IWMMXT)\n-    set_tdesc_architecture (tdesc, \"iwmmxt\");\n+    set_tdesc_architecture (tdesc.get (), \"iwmmxt\");\n   else\n-    set_tdesc_architecture (tdesc, \"arm\");\n+    set_tdesc_architecture (tdesc.get (), \"arm\");\n #endif\n \n   long regnum = 0;\n \n-  regnum = create_feature_arm_arm_core (tdesc, regnum);\n+  regnum = create_feature_arm_arm_core (tdesc.get (), regnum);\n \n   switch (fp_type)\n     {\n     case ARM_FP_TYPE_NONE:\n       break;\n \n     case ARM_FP_TYPE_VFPV2:\n-      regnum = create_feature_arm_arm_vfpv2 (tdesc, regnum);\n+      regnum = create_feature_arm_arm_vfpv2 (tdesc.get (), regnum);\n       break;\n \n     case ARM_FP_TYPE_VFPV3:\n-      regnum = create_feature_arm_arm_vfpv3 (tdesc, regnum);\n+      regnum = create_feature_arm_arm_vfpv3 (tdesc.get (), regnum);\n       break;\n \n     case ARM_FP_TYPE_IWMMXT:\n-      regnum = create_feature_arm_xscale_iwmmxt (tdesc, regnum);\n+      regnum = create_feature_arm_xscale_iwmmxt (tdesc.get (), regnum);\n       break;\n \n     default:\n       error (_(\"Invalid Arm FP type: %d\"), fp_type);\n     }\n \n-  return tdesc;\n+  return tdesc.release ();\n }\n \n /* See arch/arm.h.  */"
    },
    {
      "sha": "d823c1ac32a8f0535dc586e76ef3db63a8dcc339",
      "filename": "gdb/arch/i386.c",
      "status": "modified",
      "additions": 12,
      "deletions": 12,
      "changes": 24,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bbb826f5e92e26815357b7f3243f6b3453ec5bc1/gdb/arch/i386.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bbb826f5e92e26815357b7f3243f6b3453ec5bc1/gdb/arch/i386.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/arch/i386.c?ref=bbb826f5e92e26815357b7f3243f6b3453ec5bc1",
      "patch": "@@ -35,39 +35,39 @@\n target_desc *\n i386_create_target_description (uint64_t xcr0, bool is_linux, bool segments)\n {\n-  target_desc *tdesc = allocate_target_description ().release ();\n+  target_desc_up tdesc = allocate_target_description ();\n \n #ifndef IN_PROCESS_AGENT\n-  set_tdesc_architecture (tdesc, \"i386\");\n+  set_tdesc_architecture (tdesc.get (), \"i386\");\n   if (is_linux)\n-    set_tdesc_osabi (tdesc, \"GNU/Linux\");\n+    set_tdesc_osabi (tdesc.get (), \"GNU/Linux\");\n #endif\n \n   long regnum = 0;\n \n   if (xcr0 & X86_XSTATE_X87)\n-    regnum = create_feature_i386_32bit_core (tdesc, regnum);\n+    regnum = create_feature_i386_32bit_core (tdesc.get (), regnum);\n \n   if (xcr0 & X86_XSTATE_SSE)\n-    regnum = create_feature_i386_32bit_sse (tdesc, regnum);\n+    regnum = create_feature_i386_32bit_sse (tdesc.get (), regnum);\n \n   if (is_linux)\n-    regnum = create_feature_i386_32bit_linux (tdesc, regnum);\n+    regnum = create_feature_i386_32bit_linux (tdesc.get (), regnum);\n \n   if (segments)\n-    regnum = create_feature_i386_32bit_segments (tdesc, regnum);\n+    regnum = create_feature_i386_32bit_segments (tdesc.get (), regnum);\n \n   if (xcr0 & X86_XSTATE_AVX)\n-    regnum = create_feature_i386_32bit_avx (tdesc, regnum);\n+    regnum = create_feature_i386_32bit_avx (tdesc.get (), regnum);\n \n   if (xcr0 & X86_XSTATE_MPX)\n-    regnum = create_feature_i386_32bit_mpx (tdesc, regnum);\n+    regnum = create_feature_i386_32bit_mpx (tdesc.get (), regnum);\n \n   if (xcr0 & X86_XSTATE_AVX512)\n-    regnum = create_feature_i386_32bit_avx512 (tdesc, regnum);\n+    regnum = create_feature_i386_32bit_avx512 (tdesc.get (), regnum);\n \n   if (xcr0 & X86_XSTATE_PKRU)\n-    regnum = create_feature_i386_32bit_pkeys (tdesc, regnum);\n+    regnum = create_feature_i386_32bit_pkeys (tdesc.get (), regnum);\n \n-  return tdesc;\n+  return tdesc.release ();\n }"
    },
    {
      "sha": "26db0dab0e0459a28b6eb0638039710a7401aeb9",
      "filename": "gdb/arch/riscv.h",
      "status": "modified",
      "additions": 1,
      "deletions": 1,
      "changes": 2,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bbb826f5e92e26815357b7f3243f6b3453ec5bc1/gdb/arch/riscv.h",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bbb826f5e92e26815357b7f3243f6b3453ec5bc1/gdb/arch/riscv.h",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/arch/riscv.h?ref=bbb826f5e92e26815357b7f3243f6b3453ec5bc1",
      "patch": "@@ -72,7 +72,7 @@ struct riscv_gdbarch_features\n    This is only used directly from the gdbserver where the created target\n    description is modified after it is return.  */\n \n-target_desc *riscv_create_target_description\n+target_desc_up riscv_create_target_description\n \t(const struct riscv_gdbarch_features features);\n \n #else"
    },
    {
      "sha": "d52ec3ac7b55f46dd9b2fa047afb6f46b58de415",
      "filename": "gdb/arch/tic6x.c",
      "status": "modified",
      "additions": 7,
      "deletions": 7,
      "changes": 14,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bbb826f5e92e26815357b7f3243f6b3453ec5bc1/gdb/arch/tic6x.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bbb826f5e92e26815357b7f3243f6b3453ec5bc1/gdb/arch/tic6x.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/arch/tic6x.c?ref=bbb826f5e92e26815357b7f3243f6b3453ec5bc1",
      "patch": "@@ -28,20 +28,20 @@\n target_desc *\n tic6x_create_target_description (enum c6x_feature feature)\n {\n-  target_desc *tdesc = allocate_target_description ().release ();\n+  target_desc_up tdesc = allocate_target_description ();\n \n-  set_tdesc_architecture (tdesc, \"tic6x\");\n-  set_tdesc_osabi (tdesc, \"GNU/Linux\");\n+  set_tdesc_architecture (tdesc.get (), \"tic6x\");\n+  set_tdesc_osabi (tdesc.get (), \"GNU/Linux\");\n \n   long regnum = 0;\n \n-  regnum = create_feature_tic6x_core (tdesc, regnum);\n+  regnum = create_feature_tic6x_core (tdesc.get (), regnum);\n \n   if (feature == C6X_GP || feature == C6X_C6XP)\n-    regnum = create_feature_tic6x_gp (tdesc, regnum);\n+    regnum = create_feature_tic6x_gp (tdesc.get (), regnum);\n \n   if (feature == C6X_C6XP)\n-    regnum = create_feature_tic6x_c6xp (tdesc, regnum);\n+    regnum = create_feature_tic6x_c6xp (tdesc.get (), regnum);\n \n-  return tdesc;\n+  return tdesc.release ();\n }"
    },
    {
      "sha": "79e6a3727bc428d6b858d07cae67ef1e8557b311",
      "filename": "gdbserver/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bbb826f5e92e26815357b7f3243f6b3453ec5bc1/gdbserver/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bbb826f5e92e26815357b7f3243f6b3453ec5bc1/gdbserver/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/ChangeLog?ref=bbb826f5e92e26815357b7f3243f6b3453ec5bc1",
      "patch": "@@ -1,3 +1,8 @@\n+2020-10-09  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* linux-arc-low.cc (arc_linux_read_description): Release the\n+\tunique_ptr returned from arc_create_target_description.\n+\n 2020-10-09  Andrew Burgess  <andrew.burgess@embecosm.com>\n \n \t* Makefile.in: Include Makefile.gnulib.inc.  Don't define LIBGNU"
    },
    {
      "sha": "d101bd250ebe8fbc9ac9bfc8b0f1ef24f9d41d37",
      "filename": "gdbserver/linux-arc-low.cc",
      "status": "modified",
      "additions": 3,
      "deletions": 3,
      "changes": 6,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/bbb826f5e92e26815357b7f3243f6b3453ec5bc1/gdbserver/linux-arc-low.cc",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/bbb826f5e92e26815357b7f3243f6b3453ec5bc1/gdbserver/linux-arc-low.cc",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdbserver/linux-arc-low.cc?ref=bbb826f5e92e26815357b7f3243f6b3453ec5bc1",
      "patch": "@@ -112,12 +112,12 @@ arc_linux_read_description (void)\n #else\n   arc_arch_features features (4, ARC_ISA_ARCV2);\n #endif\n-  struct target_desc *tdesc = arc_create_target_description (features);\n+  target_desc_up tdesc = arc_create_target_description (features);\n \n   static const char *expedite_regs[] = { \"sp\", \"status32\", nullptr };\n-  init_target_desc (tdesc, expedite_regs);\n+  init_target_desc (tdesc.get (), expedite_regs);\n \n-  return tdesc;\n+  return tdesc.release ();\n }\n \n void"
    }
  ]
}