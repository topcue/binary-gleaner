{
  "sha": "d70bdd3cc4cfdfd30bed44a271ff80f98b96eebf",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6ZDcwYmRkM2NjNGNmZGZkMzBiZWQ0NGEyNzFmZjgwZjk4Yjk2ZWViZg==",
  "commit": {
    "author": {
      "name": "Pedro Alves",
      "email": "palves@redhat.com",
      "date": "2020-07-09T19:12:15Z"
    },
    "committer": {
      "name": "Pedro Alves",
      "email": "pedro@palves.net",
      "date": "2020-10-30T01:26:49Z"
    },
    "message": "Move lookup_selected_frame to frame.c\n\nThis function is now external, and isn't really threads related.  Move\nit to frame.c.\n\ngdb/ChangeLog:\n\n\t* thread.c (lookup_selected_frame): Move ...\n\t* frame.c (lookup_selected_frame): ... here.\n\nChange-Id: Ia96b79c15767337c68efd3358bcc715ce8e26c15",
    "tree": {
      "sha": "47a5cc9c799d639f262fe71b1cb3f8b43de136d8",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/47a5cc9c799d639f262fe71b1cb3f8b43de136d8"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/d70bdd3cc4cfdfd30bed44a271ff80f98b96eebf",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d70bdd3cc4cfdfd30bed44a271ff80f98b96eebf",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/d70bdd3cc4cfdfd30bed44a271ff80f98b96eebf",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/d70bdd3cc4cfdfd30bed44a271ff80f98b96eebf/comments",
  "author": {
    "login": "palves",
    "id": 1202913,
    "node_id": "MDQ6VXNlcjEyMDI5MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1202913?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/palves",
    "html_url": "https://github.com/palves",
    "followers_url": "https://api.github.com/users/palves/followers",
    "following_url": "https://api.github.com/users/palves/following{/other_user}",
    "gists_url": "https://api.github.com/users/palves/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/palves/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/palves/subscriptions",
    "organizations_url": "https://api.github.com/users/palves/orgs",
    "repos_url": "https://api.github.com/users/palves/repos",
    "events_url": "https://api.github.com/users/palves/events{/privacy}",
    "received_events_url": "https://api.github.com/users/palves/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "palves",
    "id": 1202913,
    "node_id": "MDQ6VXNlcjEyMDI5MTM=",
    "avatar_url": "https://avatars.githubusercontent.com/u/1202913?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/palves",
    "html_url": "https://github.com/palves",
    "followers_url": "https://api.github.com/users/palves/followers",
    "following_url": "https://api.github.com/users/palves/following{/other_user}",
    "gists_url": "https://api.github.com/users/palves/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/palves/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/palves/subscriptions",
    "organizations_url": "https://api.github.com/users/palves/orgs",
    "repos_url": "https://api.github.com/users/palves/repos",
    "events_url": "https://api.github.com/users/palves/events{/privacy}",
    "received_events_url": "https://api.github.com/users/palves/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "79952e69634bd02029e79676a38915de60052e89",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/79952e69634bd02029e79676a38915de60052e89",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/79952e69634bd02029e79676a38915de60052e89"
    }
  ],
  "stats": {
    "total": 134,
    "additions": 71,
    "deletions": 63
  },
  "files": [
    {
      "sha": "d2df843b24f18dbdd30ca9635d06889acad04730",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 5,
      "deletions": 0,
      "changes": 5,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d70bdd3cc4cfdfd30bed44a271ff80f98b96eebf/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d70bdd3cc4cfdfd30bed44a271ff80f98b96eebf/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=d70bdd3cc4cfdfd30bed44a271ff80f98b96eebf",
      "patch": "@@ -1,3 +1,8 @@\n+2020-10-30  Pedro Alves  <pedro@palves.net>\n+\n+\t* thread.c (lookup_selected_frame): Move ...\n+\t* frame.c (lookup_selected_frame): ... here.\n+\n 2020-10-30  Pedro Alves  <pedro@palves.net>\n \n \t* blockframe.c (block_innermost_frame): Use get_selected_frame."
    },
    {
      "sha": "d0a4ce4d63f57060c9769beb0064a90e2ac5f3b6",
      "filename": "gdb/frame.c",
      "status": "modified",
      "additions": 66,
      "deletions": 0,
      "changes": 66,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d70bdd3cc4cfdfd30bed44a271ff80f98b96eebf/gdb/frame.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d70bdd3cc4cfdfd30bed44a271ff80f98b96eebf/gdb/frame.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/frame.c?ref=d70bdd3cc4cfdfd30bed44a271ff80f98b96eebf",
      "patch": "@@ -1740,6 +1740,72 @@ restore_selected_frame (frame_id frame_id, int frame_level)\n   selected_frame = nullptr;\n }\n \n+/* See frame.h.  */\n+\n+void\n+lookup_selected_frame (struct frame_id a_frame_id, int frame_level)\n+{\n+  struct frame_info *frame = NULL;\n+  int count;\n+\n+  /* This either means there was no selected frame, or the selected\n+     frame was the current frame.  In either case, select the current\n+     frame.  */\n+  if (frame_level == -1)\n+    {\n+      select_frame (get_current_frame ());\n+      return;\n+    }\n+\n+  /* select_frame never saves 0 in SELECTED_FRAME_LEVEL, so we\n+     shouldn't see it here.  */\n+  gdb_assert (frame_level > 0);\n+\n+  /* Restore by level first, check if the frame id is the same as\n+     expected.  If that fails, try restoring by frame id.  If that\n+     fails, nothing to do, just warn the user.  */\n+\n+  count = frame_level;\n+  frame = find_relative_frame (get_current_frame (), &count);\n+  if (count == 0\n+      && frame != NULL\n+      /* The frame ids must match - either both valid or both\n+\t outer_frame_id.  The latter case is not failsafe, but since\n+\t it's highly unlikely the search by level finds the wrong\n+\t frame, it's 99.9(9)% of the time (for all practical purposes)\n+\t safe.  */\n+      && frame_id_eq (get_frame_id (frame), a_frame_id))\n+    {\n+      /* Cool, all is fine.  */\n+      select_frame (frame);\n+      return;\n+    }\n+\n+  frame = frame_find_by_id (a_frame_id);\n+  if (frame != NULL)\n+    {\n+      /* Cool, refound it.  */\n+      select_frame (frame);\n+      return;\n+    }\n+\n+  /* Nothing else to do, the frame layout really changed.  Select the\n+     innermost stack frame.  */\n+  select_frame (get_current_frame ());\n+\n+  /* Warn the user.  */\n+  if (frame_level > 0 && !current_uiout->is_mi_like_p ())\n+    {\n+      warning (_(\"Couldn't restore frame #%d in \"\n+\t\t \"current thread.  Bottom (innermost) frame selected:\"),\n+\t       frame_level);\n+      /* For MI, we should probably have a notification about current\n+\t frame change.  But this error is not very likely, so don't\n+\t bother for now.  */\n+      print_stack_frame (get_selected_frame (NULL), 1, SRC_AND_LOC, 1);\n+    }\n+}\n+\n bool\n has_stack_frames ()\n {"
    },
    {
      "sha": "32d14e8662c57d39a2943961b9301b5b402ab75e",
      "filename": "gdb/thread.c",
      "status": "modified",
      "additions": 0,
      "deletions": 63,
      "changes": 63,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/d70bdd3cc4cfdfd30bed44a271ff80f98b96eebf/gdb/thread.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/d70bdd3cc4cfdfd30bed44a271ff80f98b96eebf/gdb/thread.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/thread.c?ref=d70bdd3cc4cfdfd30bed44a271ff80f98b96eebf",
      "patch": "@@ -1327,69 +1327,6 @@ switch_to_thread (process_stratum_target *proc_target, ptid_t ptid)\n \n /* See frame.h.  */\n \n-void\n-lookup_selected_frame (struct frame_id a_frame_id, int frame_level)\n-{\n-  struct frame_info *frame = NULL;\n-  int count;\n-\n-  /* This either means there was no selected frame, or the selected\n-     frame was the current frame.  In either case, select the current\n-     frame.  */\n-  if (frame_level == -1)\n-    {\n-      select_frame (get_current_frame ());\n-      return;\n-    }\n-\n-  /* select_frame never saves 0 in SELECTED_FRAME_LEVEL, so we\n-     shouldn't see it here.  */\n-  gdb_assert (frame_level > 0);\n-\n-  /* Restore by level first, check if the frame id is the same as\n-     expected.  If that fails, try restoring by frame id.  If that\n-     fails, nothing to do, just warn the user.  */\n-\n-  count = frame_level;\n-  frame = find_relative_frame (get_current_frame (), &count);\n-  if (count == 0\n-      && frame != NULL\n-      /* The frame ids must match - either both valid or both outer_frame_id.\n-\t The latter case is not failsafe, but since it's highly unlikely\n-\t the search by level finds the wrong frame, it's 99.9(9)% of\n-\t the time (for all practical purposes) safe.  */\n-      && frame_id_eq (get_frame_id (frame), a_frame_id))\n-    {\n-      /* Cool, all is fine.  */\n-      select_frame (frame);\n-      return;\n-    }\n-\n-  frame = frame_find_by_id (a_frame_id);\n-  if (frame != NULL)\n-    {\n-      /* Cool, refound it.  */\n-      select_frame (frame);\n-      return;\n-    }\n-\n-  /* Nothing else to do, the frame layout really changed.  Select the\n-     innermost stack frame.  */\n-  select_frame (get_current_frame ());\n-\n-  /* Warn the user.  */\n-  if (frame_level > 0 && !current_uiout->is_mi_like_p ())\n-    {\n-      warning (_(\"Couldn't restore frame #%d in \"\n-\t\t \"current thread.  Bottom (innermost) frame selected:\"),\n-\t       frame_level);\n-      /* For MI, we should probably have a notification about\n-\t current frame change.  But this error is not very\n-\t likely, so don't bother for now.  */\n-      print_stack_frame (get_selected_frame (NULL), 1, SRC_AND_LOC, 1);\n-    }\n-}\n-\n void\n scoped_restore_current_thread::restore ()\n {"
    }
  ]
}