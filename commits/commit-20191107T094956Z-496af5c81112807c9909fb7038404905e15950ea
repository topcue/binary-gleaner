{
  "sha": "496af5c81112807c9909fb7038404905e15950ea",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6NDk2YWY1YzgxMTEyODA3Yzk5MDlmYjcwMzg0MDQ5MDVlMTU5NTBlYQ==",
  "commit": {
    "author": {
      "name": "Tom de Vries",
      "email": "tdevries@suse.de",
      "date": "2019-11-07T09:49:56Z"
    },
    "committer": {
      "name": "Tom de Vries",
      "email": "tdevries@suse.de",
      "date": "2019-11-07T09:49:56Z"
    },
    "message": "[gdb/contrib] Add words.sh script\n\nAdd a script that takes a list of files as arguments and output a list of\nwords from the C comments with their frequencies.\n\nFor:\n...\n$ ./gdb/contrib/words.sh $(find gdb -type f -name \"*.c\" -o -name \"*.h\")\n...\nit generates a list of ~15000 words prefixed with frequency.\n\nThis could be used to generate a dictionary that is kept as part of the\nsources, against which new code can be checked, generating a warning or\nerror.  The hope is that misspellings would trigger this frequently, and rare\nwords rarely, otherwise the burden of updating the dictionary would be too\nmuch.\n\nAnd for:\n...\n$ ./gdb/contrib/words.sh -f 1 $(find gdb -type f -name \"*.c\" -o -name \"*.h\")\n...\nit generates a list of ~5000 words with frequency 1.\n\nThis can be used to scan for misspellings manually.\n\nChange-Id: I7b119c9a4519cdbf62a3243d1df2927c80813e8b",
    "tree": {
      "sha": "e1bf4a85f8ebce5eb36ac04cda7cbe3862e06fef",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/e1bf4a85f8ebce5eb36ac04cda7cbe3862e06fef"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/496af5c81112807c9909fb7038404905e15950ea",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/496af5c81112807c9909fb7038404905e15950ea",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/496af5c81112807c9909fb7038404905e15950ea",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/496af5c81112807c9909fb7038404905e15950ea/comments",
  "author": {
    "login": "vries",
    "id": 4057235,
    "node_id": "MDQ6VXNlcjQwNTcyMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vries",
    "html_url": "https://github.com/vries",
    "followers_url": "https://api.github.com/users/vries/followers",
    "following_url": "https://api.github.com/users/vries/following{/other_user}",
    "gists_url": "https://api.github.com/users/vries/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vries/subscriptions",
    "organizations_url": "https://api.github.com/users/vries/orgs",
    "repos_url": "https://api.github.com/users/vries/repos",
    "events_url": "https://api.github.com/users/vries/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vries/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "vries",
    "id": 4057235,
    "node_id": "MDQ6VXNlcjQwNTcyMzU=",
    "avatar_url": "https://avatars.githubusercontent.com/u/4057235?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/vries",
    "html_url": "https://github.com/vries",
    "followers_url": "https://api.github.com/users/vries/followers",
    "following_url": "https://api.github.com/users/vries/following{/other_user}",
    "gists_url": "https://api.github.com/users/vries/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/vries/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/vries/subscriptions",
    "organizations_url": "https://api.github.com/users/vries/orgs",
    "repos_url": "https://api.github.com/users/vries/repos",
    "events_url": "https://api.github.com/users/vries/events{/privacy}",
    "received_events_url": "https://api.github.com/users/vries/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "595d3787e9cbedbceb6182f873a4774707c0e74f",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/595d3787e9cbedbceb6182f873a4774707c0e74f",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/595d3787e9cbedbceb6182f873a4774707c0e74f"
    }
  ],
  "stats": {
    "total": 129,
    "additions": 129,
    "deletions": 0
  },
  "files": [
    {
      "sha": "ae38539a7fc3185e48c6c41eebd1595f82b2065f",
      "filename": "gdb/contrib/words.sh",
      "status": "added",
      "additions": 129,
      "deletions": 0,
      "changes": 129,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/496af5c81112807c9909fb7038404905e15950ea/gdb/contrib/words.sh",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/496af5c81112807c9909fb7038404905e15950ea/gdb/contrib/words.sh",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/contrib/words.sh?ref=496af5c81112807c9909fb7038404905e15950ea",
      "patch": "@@ -0,0 +1,129 @@\n+#!/bin/sh\n+\n+# Copyright (C) 2019 Free Software Foundation, Inc.\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n+\n+# This script intends to facilitate spell checking of comments in C sources.\n+# It:\n+# - extracts comments from C files\n+# - transforms the comments into a list of lowercase words\n+# - prefixes each word with the frequency\n+# - filters out words within a frequency range\n+# - sorts the words, longest first\n+#\n+# For:\n+# ...\n+# $ ./gdb/contrib/words.sh $(find gdb -type f -name \"*.c\" -o -name \"*.h\")\n+# ...\n+# it generates a list of ~15000 words prefixed with frequency.\n+#\n+# This could be used to generate a dictionary that is kept as part of the\n+# sources, against which new code can be checked, generating a warning or\n+# error.  The hope is that misspellings would trigger this frequently, and rare\n+# words rarely, otherwise the burden of updating the dictionary would be too\n+# much.\n+#\n+# And for:\n+# ...\n+# $ ./gdb/contrib/words.sh -f 1 $(find gdb -type f -name \"*.c\" -o -name \"*.h\")\n+# ...\n+# it generates a list of ~5000 words with frequency 1.\n+#\n+# This can be used to scan for misspellings manually.\n+#\n+\n+minfreq=\n+maxfreq=\n+while [ $# -gt 0 ]; do\n+    case \"$1\" in\n+\t--freq|-f)\n+\t    minfreq=$2\n+\t    maxfreq=$2\n+\t    shift 2\n+\t    ;;\n+\t--min)\n+\t    minfreq=$2\n+\t    if [ \"$maxfreq\" = \"\" ]; then\n+\t\tmaxfreq=0\n+\t    fi\n+\t    shift 2\n+\t    ;;\n+\t--max)\n+\t    maxfreq=$2\n+\t    if [ \"$minfreq\" = \"\" ]; then\n+\t\tminfreq=0\n+\t    fi\n+\t    shift 2\n+\t    ;;\n+\t*)\n+\t    break;\n+\t    ;;\n+    esac\n+done\n+\n+if [ \"$minfreq\" = \"\" ] && [ \"$maxfreq\" = \"\" ]; then\n+    minfreq=0\n+    maxfreq=0\n+fi\n+\n+awkfile=$(mktemp)\n+trap 'rm -f \"$awkfile\"' EXIT\n+\n+cat > \"$awkfile\" <<EOF\n+BEGIN {\n+    in_comment=0\n+}\n+\n+// {\n+    line=\\$0\n+}\n+\n+/\\/\\*/ {\n+    in_comment=1\n+    sub(/.*\\/\\*/, \"\", line)\n+}\n+\n+/\\*\\// {\n+    sub(/\\*\\/.*/, \"\", line)\n+    in_comment=0\n+    print line\n+    next\n+}\n+\n+// {\n+    if (in_comment) {\n+\tprint line\n+    }\n+}\n+EOF\n+\n+# Stabilize sort.\n+export LC_ALL=C\n+\n+awk \\\n+    -f \"$awkfile\" \\\n+    -- \"$@\" \\\n+    | sed 's/[%^$~#{}`&=@,. \\t\\/_()|<>\\+\\*-]/\\n/g' \\\n+    | sed 's/\\[/\\n/g' \\\n+    | sed 's/\\]/\\n/g' \\\n+    | sed 's/[0-9][0-9]*/\\n/g' \\\n+    | tr '[:upper:]' '[:lower:]' \\\n+    | sed 's/[ \\t]*//g' \\\n+    | sort \\\n+    | uniq -c \\\n+    | awk \"{ if (($minfreq == 0 || $minfreq <= \\$1) \\\n+                 && ($maxfreq == 0 || \\$1 <= $maxfreq)) { print \\$0; } }\" \\\n+    | awk '{ print length($0) \" \" $0; }' \\\n+    | sort -n -r \\\n+    | cut -d ' ' -f 2-"
    }
  ]
}