{
  "sha": "122cf0f2d93ae6f7a53e8dd643ebb068b79df9cf",
  "node_id": "MDY6Q29tbWl0MTM4Njg2ODE6MTIyY2YwZjJkOTNhZTZmN2E1M2U4ZGQ2NDNlYmIwNjhiNzlkZjljZg==",
  "commit": {
    "author": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2019-05-17T21:30:34Z"
    },
    "committer": {
      "name": "Andrew Burgess",
      "email": "andrew.burgess@embecosm.com",
      "date": "2019-05-18T08:46:29Z"
    },
    "message": "gdb: Add constructor to struct cu_partial_die_info\n\nAdds a constructor to 'struct cu_partial_die_info' and disables the\ndefault constructor, preventing partially initialised instances from\nbeing created.\n\nUpdate 'find_partial_die' to return a const struct.\n\nUsers of 'find_partial_die' are updated to take account of the above\ntwo changes.\n\nThere should be no user visible changes after this commit.\n\ngdb/ChangeLog:\n\n\t* dwarf2read.c (struct cu_partial_die_info): Add constructor,\n\tdelete default constructor.\n\t(find_partial_die): Update to return const struct.\n\t(partial_die_parent_scope): Move variable declaration into scope\n\tof its use and change its type to auto.\n\t(guess_partial_die_structure_name): Likewise.\n\t(partial_die_info::fixup): Likewise.",
    "tree": {
      "sha": "f847775f48a0f8d6b73962681f766e1330c4ce6c",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/git/trees/f847775f48a0f8d6b73962681f766e1330c4ce6c"
    },
    "url": "https://api.github.com/repos/bminor/binutils-gdb/git/commits/122cf0f2d93ae6f7a53e8dd643ebb068b79df9cf",
    "comment_count": 0,
    "verification": {
      "verified": false,
      "reason": "unsigned",
      "signature": null,
      "payload": null
    }
  },
  "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/122cf0f2d93ae6f7a53e8dd643ebb068b79df9cf",
  "html_url": "https://github.com/bminor/binutils-gdb/commit/122cf0f2d93ae6f7a53e8dd643ebb068b79df9cf",
  "comments_url": "https://api.github.com/repos/bminor/binutils-gdb/commits/122cf0f2d93ae6f7a53e8dd643ebb068b79df9cf/comments",
  "author": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "T-J-Teru",
    "id": 475372,
    "node_id": "MDQ6VXNlcjQ3NTM3Mg==",
    "avatar_url": "https://avatars.githubusercontent.com/u/475372?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/T-J-Teru",
    "html_url": "https://github.com/T-J-Teru",
    "followers_url": "https://api.github.com/users/T-J-Teru/followers",
    "following_url": "https://api.github.com/users/T-J-Teru/following{/other_user}",
    "gists_url": "https://api.github.com/users/T-J-Teru/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/T-J-Teru/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/T-J-Teru/subscriptions",
    "organizations_url": "https://api.github.com/users/T-J-Teru/orgs",
    "repos_url": "https://api.github.com/users/T-J-Teru/repos",
    "events_url": "https://api.github.com/users/T-J-Teru/events{/privacy}",
    "received_events_url": "https://api.github.com/users/T-J-Teru/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "3e2cf42fe5c305ebb5a4a69427a37e950385ea60",
      "url": "https://api.github.com/repos/bminor/binutils-gdb/commits/3e2cf42fe5c305ebb5a4a69427a37e950385ea60",
      "html_url": "https://github.com/bminor/binutils-gdb/commit/3e2cf42fe5c305ebb5a4a69427a37e950385ea60"
    }
  ],
  "stats": {
    "total": 37,
    "additions": 26,
    "deletions": 11
  },
  "files": [
    {
      "sha": "871e3dc661b1385ee357a3ce2f3e413a22e4d391",
      "filename": "gdb/ChangeLog",
      "status": "modified",
      "additions": 10,
      "deletions": 0,
      "changes": 10,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/122cf0f2d93ae6f7a53e8dd643ebb068b79df9cf/gdb/ChangeLog",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/122cf0f2d93ae6f7a53e8dd643ebb068b79df9cf/gdb/ChangeLog",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/ChangeLog?ref=122cf0f2d93ae6f7a53e8dd643ebb068b79df9cf",
      "patch": "@@ -1,3 +1,13 @@\n+2019-05-18  Andrew Burgess  <andrew.burgess@embecosm.com>\n+\n+\t* dwarf2read.c (struct cu_partial_die_info): Add constructor,\n+\tdelete default constructor.\n+\t(find_partial_die): Update to return const struct.\n+\t(partial_die_parent_scope): Move variable declaration into scope\n+\tof its use and change its type to auto.\n+\t(guess_partial_die_structure_name): Likewise.\n+\t(partial_die_info::fixup): Likewise.\n+\n 2019-05-17  Tom Tromey  <tromey@adacore.com>\n \n \t* source.c (find_and_open_source): Remove cast."
    },
    {
      "sha": "f48b931a3f3d5c012573db886f4a2ee381e6bd57",
      "filename": "gdb/dwarf2read.c",
      "status": "modified",
      "additions": 16,
      "deletions": 11,
      "changes": 27,
      "blob_url": "https://github.com/bminor/binutils-gdb/blob/122cf0f2d93ae6f7a53e8dd643ebb068b79df9cf/gdb/dwarf2read.c",
      "raw_url": "https://github.com/bminor/binutils-gdb/raw/122cf0f2d93ae6f7a53e8dd643ebb068b79df9cf/gdb/dwarf2read.c",
      "contents_url": "https://api.github.com/repos/bminor/binutils-gdb/contents/gdb/dwarf2read.c?ref=122cf0f2d93ae6f7a53e8dd643ebb068b79df9cf",
      "patch": "@@ -1514,10 +1514,18 @@ struct cu_partial_die_info\n   struct dwarf2_cu *cu;\n   /* A partial_die_info.  */\n   struct partial_die_info *pdi;\n+\n+  cu_partial_die_info (struct dwarf2_cu *cu, struct partial_die_info *pdi)\n+    : cu (cu),\n+      pdi (pdi)\n+  { /* Nothhing.  */ }\n+\n+private:\n+  cu_partial_die_info () = delete;\n };\n \n-static struct cu_partial_die_info find_partial_die (sect_offset, int,\n-\t\t\t\t\t\t    struct dwarf2_cu *);\n+static const struct cu_partial_die_info find_partial_die (sect_offset, int,\n+\t\t\t\t\t\t\t  struct dwarf2_cu *);\n \n static const gdb_byte *read_attribute (const struct die_reader_specs *,\n \t\t\t\t       struct attribute *, struct attr_abbrev *,\n@@ -8763,16 +8771,15 @@ partial_die_parent_scope (struct partial_die_info *pdi,\n {\n   const char *grandparent_scope;\n   struct partial_die_info *parent, *real_pdi;\n-  struct cu_partial_die_info res;\n \n   /* We need to look at our parent DIE; if we have a DW_AT_specification,\n      then this means the parent of the specification DIE.  */\n \n   real_pdi = pdi;\n   while (real_pdi->has_specification)\n     {\n-      res = find_partial_die (real_pdi->spec_offset,\n-\t\t\t      real_pdi->spec_is_dwz, cu);\n+      auto res = find_partial_die (real_pdi->spec_offset,\n+\t\t\t\t   real_pdi->spec_is_dwz, cu);\n       real_pdi = res.pdi;\n       cu = res.cu;\n     }\n@@ -18919,7 +18926,7 @@ dwarf2_cu::find_partial_die (sect_offset sect_off)\n    outside their CU (they do however referencing other types via\n    DW_FORM_ref_sig8).  */\n \n-static struct cu_partial_die_info\n+static const struct cu_partial_die_info\n find_partial_die (sect_offset sect_off, int offset_in_dwz, struct dwarf2_cu *cu)\n {\n   struct dwarf2_per_objfile *dwarf2_per_objfile\n@@ -19000,7 +19007,6 @@ guess_partial_die_structure_name (struct partial_die_info *struct_pdi,\n \n   struct partial_die_info *real_pdi;\n   struct partial_die_info *child_pdi;\n-  struct cu_partial_die_info res;\n \n   /* If this DIE (this DIE's specification, if any) has a parent, then\n      we should not do this.  We'll prepend the parent's fully qualified\n@@ -19009,8 +19015,8 @@ guess_partial_die_structure_name (struct partial_die_info *struct_pdi,\n   real_pdi = struct_pdi;\n   while (real_pdi->has_specification)\n     {\n-      res = find_partial_die (real_pdi->spec_offset,\n-\t\t\t      real_pdi->spec_is_dwz, cu);\n+      auto res = find_partial_die (real_pdi->spec_offset,\n+\t\t\t\t   real_pdi->spec_is_dwz, cu);\n       real_pdi = res.pdi;\n       cu = res.cu;\n     }\n@@ -19058,9 +19064,8 @@ partial_die_info::fixup (struct dwarf2_cu *cu)\n   if (name == NULL && has_specification)\n     {\n       struct partial_die_info *spec_die;\n-      struct cu_partial_die_info res;\n \n-      res = find_partial_die (spec_offset, spec_is_dwz, cu);\n+      auto res = find_partial_die (spec_offset, spec_is_dwz, cu);\n       spec_die = res.pdi;\n       cu = res.cu;\n "
    }
  ]
}